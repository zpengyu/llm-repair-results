diff --git a/src/java/org/apache/commons/lang/enums/ValuedEnum.java b/src/java/org/apache/commons/lang/enums/ValuedEnum.java
index 0823e77d..531a5c17 100644
--- a/src/java/org/apache/commons/lang/enums/ValuedEnum.java
+++ b/src/java/org/apache/commons/lang/enums/ValuedEnum.java
@@ -180,19 +174,33 @@ public abstract class ValuedEnum extends Enum {
      * @throws NullPointerException if other is <code>null</code>
      */
     public int compareTo(Object other) {
-        return iValue - ((ValuedEnum) other).iValue;
+        if (other.getClass() == getClass()) {
+            return iValue - ((ValuedEnum) other).iValue;
+        } else if (other.getClass().getName().equals(getClass().getName())) {
+            return iValue - getValueInOtherClassLoader(other);
+        } else {
+            throw new ClassCastException("Different enum class '" + ClassUtils.getShortClassName(other.getClass()) + "'");
+        }
     }
-
     /**
      * <p>Use reflection to return an objects value.</p>
      *
      * @param other  the object to determine the value for
      * @return the value
      */
-            // ignore - should never happen
-            // ignore - should never happen
-            // ignore - should never happen
-
+    private int getValueInOtherClassLoader(Object other) {
+        try {
+            Method mth = other.getClass().getMethod("getValue", null);
+            Integer value = (Integer) mth.invoke(other, null);
+            return value.intValue();
+        } catch (NoSuchMethodException e) {
+            return 0;
+        } catch (IllegalAccessException e) {
+            return 0;
+        } catch (InvocationTargetException e) {
+            return 0;
+        }
+    }
     /**
      * <p>Human readable description of this <code>Enum</code> item.</p>
      *

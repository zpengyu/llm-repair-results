diff --git a/src/java/org/apache/commons/lang/enums/ValuedEnum.java b/src/java/org/apache/commons/lang/enums/ValuedEnum.java
index 0823e77d..3a502bcf 100644
--- a/src/java/org/apache/commons/lang/enums/ValuedEnum.java
+++ b/src/java/org/apache/commons/lang/enums/ValuedEnum.java
@@ -180,19 +174,40 @@ public abstract class ValuedEnum extends Enum {
      * @throws NullPointerException if other is <code>null</code>
      */
     public int compareTo(Object other) {
+        if (other == null) {
+            throw new NullPointerException("The object to compare to must not be null");
+        }
+        if (other.getClass() != this.getClass()) {
+            if (other.getClass().getName().equals(this.getClass().getName())) {
+                return iValue - getValueInOtherClassLoader(other);
+            }
+            throw new ClassCastException(
+                    "Different enum class '" + ClassUtils.getShortClassName(other.getClass())
+                    + "'");
+        }
         return iValue - ((ValuedEnum) other).iValue;
     }
-
     /**
      * <p>Use reflection to return an objects value.</p>
      *
      * @param other  the object to determine the value for
      * @return the value
      */
-            // ignore - should never happen
-            // ignore - should never happen
-            // ignore - should never happen
-
+    private int getValueInOtherClassLoader(Object other) {
+        // the other object must be in the same class loader (or foreign class loader)
+        Class otherClass = other.getClass();
+        try {
+            Method mth = otherClass.getMethod("getValue", (Class[]) null);
+            Integer value = (Integer) mth.invoke(other, (Object[]) null);
+            return value.intValue();
+        } catch (NoSuchMethodException e) {
+            return 0;
+        } catch (IllegalAccessException e) {
+            return 0;
+        } catch (InvocationTargetException e) {
+            return 0;
+        }
+    }
     /**
      * <p>Human readable description of this <code>Enum</code> item.</p>
      *

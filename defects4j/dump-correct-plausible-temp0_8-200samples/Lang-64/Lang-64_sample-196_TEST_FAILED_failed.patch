diff --git a/src/java/org/apache/commons/lang/enums/ValuedEnum.java b/src/java/org/apache/commons/lang/enums/ValuedEnum.java
index 0823e77d..9c85be28 100644
--- a/src/java/org/apache/commons/lang/enums/ValuedEnum.java
+++ b/src/java/org/apache/commons/lang/enums/ValuedEnum.java
@@ -189,10 +182,59 @@ public abstract class ValuedEnum extends Enum {
      * @param other  the object to determine the value for
      * @return the value
      */
+    private int checkOther(Object other) {
+        if (other == null) {
+            // same as null less than any object
+            return -1;
+        }
+        if (other.getClass() != this.getClass()) {
+            // same as different classes being unequal
+            return -1;
+        }
+        return 0;
+    }
+    /**
+     * <p>Use reflection to return an objects value.</p>
+     *
+     * @param other  the object to determine the value for
+     * @return the value
+     */
+    private int getValue(Object other) {
+        try {
+            return ((Integer) this.getClass().getMethod("getValue", (Class[]) null).invoke(other, (Object[]) null)).intValue();
+        } catch (Exception e) {
             // ignore - should never happen
+            return 0;
+        }
+    }
+    /**
+     * <p>Use reflection to return an objects hashCode.</p>
+     *
+     * @param other  the object to determine the hashCode for
+     * @return the hashCode
+     */
+    private int getHashCode(Object other) {
+        try {
+            return ((Integer) this.getClass().getMethod("hashCode", (Class[]) null).invoke(other, (Object[]) null)).intValue();
+        } catch (Exception e) {
             // ignore - should never happen
+            return 0;
+        }
+    }
+    /**
+     * <p>Use reflection to return an objects toString.</p>
+     *
+     * @param other  the object to determine the toString for
+     * @return the toString
+     */
+    private String getToString(Object other) {
+        try {
+            return (String) this.getClass().getMethod("toString", (Class[]) null).invoke(other, (Object[]) null);
+        } catch (Exception e) {
             // ignore - should never happen
-
+            return other.toString();
+        }
+    }
     /**
      * <p>Human readable description of this <code>Enum</code> item.</p>
      *

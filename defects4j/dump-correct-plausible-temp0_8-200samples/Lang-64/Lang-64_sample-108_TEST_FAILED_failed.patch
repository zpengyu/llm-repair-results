diff --git a/src/java/org/apache/commons/lang/enums/ValuedEnum.java b/src/java/org/apache/commons/lang/enums/ValuedEnum.java
index 0823e77d..69fadc89 100644
--- a/src/java/org/apache/commons/lang/enums/ValuedEnum.java
+++ b/src/java/org/apache/commons/lang/enums/ValuedEnum.java
@@ -102,23 +102,14 @@ import org.apache.commons.lang.ClassUtils;
  * @since 2.1 (class existed in enum package from v1.0)
  * @version $Id$
  */
-public abstract class ValuedEnum extends Enum {
-    
-    /**
-     * Required for serialization support.
-     * 
+public abstract class ValuedEnum extends Enum implements Comparable {
+    /** Required for serialization support.
      * @see java.io.Serializable
      */
     private static final long serialVersionUID = -7129650521543789085L;
-    
-    /**
-     * The value contained in enum.
-     */
+    /** The value contained in enum. */
     private final int iValue;
-
-    /**
-     * Constructor for enum item.
-     *
+    /** Constructor for enum item.
      * @param name  the name of enum item
      * @param value  the value of enum item
      */
@@ -126,9 +117,7 @@ public abstract class ValuedEnum extends Enum {
         super(name);
         iValue = value;
     }
-
-    /**
-     * <p>Gets an <code>Enum</code> object by class and value.</p>
+    /** <p>Gets an <code>Enum</code> object by class and value.</p>
      *
      * <p>This method loops through the list of <code>Enum</code>,
      * thus if there are many <code>Enum</code>s this will be
@@ -152,18 +141,13 @@ public abstract class ValuedEnum extends Enum {
         }
         return null;
     }
-
-    /**
-     * <p>Get value of enum item.</p>
-     *
+    /** <p>Get value of enum item.</p>
      * @return the enum item's value.
      */
     public final int getValue() {
         return iValue;
     }
-
-    /**
-     * <p>Tests for order.</p>
+    /** <p>Tests for order.</p>
      *
      * <p>The default ordering is numeric by value, but this
      * can be overridden by subclasses.</p>
@@ -182,20 +166,25 @@ public abstract class ValuedEnum extends Enum {
     public int compareTo(Object other) {
         return iValue - ((ValuedEnum) other).iValue;
     }
-
-    /**
-     * <p>Use reflection to return an objects value.</p>
-     *
+    /** <p>Use reflection to return an objects value.</p>
      * @param other  the object to determine the value for
      * @return the value
      */
-            // ignore - should never happen
-            // ignore - should never happen
-            // ignore - should never happen
-
-    /**
-     * <p>Human readable description of this <code>Enum</code> item.</p>
-     *
+    private int getValue(Object other) {
+        if (other == null) {
+            throw new NullPointerException("The object must not be null");
+        }
+        try {
+            return ((Integer) other.getClass().getMethod("getValue", (Class[]) null).invoke(other, (Object[]) null)).intValue();
+        } catch (NoSuchMethodException e) {
+            return 0;
+        } catch (IllegalAccessException e) {
+            return 0;
+        } catch (InvocationTargetException e) {
+            return 0;
+        }
+    }
+    /** <p>Human readable description of this <code>Enum</code> item.</p>
      * @return String in the form <code>type[name=value]</code>, for example:
      *  <code>JavaVersion[Java 1.0=100]</code>. Note that the package name is
      *  stripped from the type name.

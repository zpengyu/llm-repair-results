diff --git a/src/java/org/apache/commons/lang/enums/ValuedEnum.java b/src/java/org/apache/commons/lang/enums/ValuedEnum.java
index 0823e77d..99f32bd1 100644
--- a/src/java/org/apache/commons/lang/enums/ValuedEnum.java
+++ b/src/java/org/apache/commons/lang/enums/ValuedEnum.java
@@ -189,10 +182,91 @@ public abstract class ValuedEnum extends Enum {
      * @param other  the object to determine the value for
      * @return the value
      */
-            // ignore - should never happen
-            // ignore - should never happen
-            // ignore - should never happen
-
+    private static int checkInt(Object other) {
+        try {
+            return other == null ? 0 : ((Integer) other).intValue();
+        } catch (Exception e) {
+            return 0;
+        }
+    }
+    /**
+     * <p>Use reflection to return an objects value.</p>
+     *
+     * @param other  the object to determine the value for
+     * @return the value
+     */
+    private static long checkLong(Object other) {
+        try {
+            return other == null ? 0 : ((Long) other).longValue();
+        } catch (Exception e) {
+            return 0;
+        }
+    }
+    /**
+     * <p>Use reflection to return an objects value.</p>
+     *
+     * @param other  the object to determine the value for
+     * @return the value
+     */
+    private static short checkShort(Object other) {
+        try {
+            return other == null ? 0 : ((Short) other).shortValue();
+        } catch (Exception e) {
+            return 0;
+        }
+    }
+    /**
+     * <p>Use reflection to return an objects value.</p>
+     *
+     * @param other  the object to determine the value for
+     * @return the value
+     */
+    private static byte checkByte(Object other) {
+        try {
+            return other == null ? 0 : ((Byte) other).byteValue();
+        } catch (Exception e) {
+            return 0;
+        }
+    }
+    /**
+     * <p>Use reflection to return an objects value.</p>
+     *
+     * @param other  the object to determine the value for
+     * @return the value
+     */
+    private static double checkDouble(Object other) {
+        try {
+            return other == null ? 0 : ((Double) other).doubleValue();
+        } catch (Exception e) {
+            return 0;
+        }
+    }
+    /**
+     * <p>Use reflection to return an objects value.</p>
+     *
+     * @param other  the object to determine the value for
+     * @return the value
+     */
+    private static float checkFloat(Object other) {
+        try {
+            return other == null ? 0 : ((Float) other).floatValue();
+        } catch (Exception e) {
+            return 0;
+        }
+    }
+    /**
+     * <p>Use reflection to return an objects value.</p>
+     *
+     * @param other  the object to determine the value for
+     * @return the value
+     */
+    private static boolean checkBoolean(Object other) {
+        try {
+            return other == null ? false : ((Boolean) other).booleanValue();
+        } catch (Exception e) {
+            return false;
+        }
+    }
     /**
      * <p>Human readable description of this <code>Enum</code> item.</p>
      *

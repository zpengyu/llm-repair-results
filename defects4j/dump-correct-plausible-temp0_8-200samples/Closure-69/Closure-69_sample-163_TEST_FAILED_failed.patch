diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 6030d48d..e6363441 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1541,10 +1541,9 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
-  private void visitCall(NodeTraversal t, Node n) {
+ private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
-
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
@@ -1555,29 +1553,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
-
-      boolean isExtern = false;
-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
-      if(functionJSDocInfo != null) {
-        String sourceName = functionJSDocInfo.getSourceName();
-        CompilerInput functionSource = compiler.getInput(sourceName);
-        isExtern = functionSource.isExtern();
-      }
-
-      // Non-native constructors should not be called directly
-      // unless they specify a return type and are defined
-      // in an extern.
-      if (functionType.isConstructor() &&
-          !functionType.isNativeObjectType() &&
-          (functionType.getReturnType().isUnknownType() ||
-           functionType.getReturnType().isVoidType() ||
-           !isExtern)) {
-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
-      }
-
       // Functions with explcit 'this' types must be called in a GETPROP
       // or GETELEM.
-
+      if (functionType.isConstructor()) {
+        boolean isExtern = false;
+        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
+        if(functionJSDocInfo != null) {
+          String sourceName = functionJSDocInfo.getSourceName();
+          CompilerInput functionSource = compiler.getInput(sourceName);
+          isExtern = functionSource.isExtern();
+        }
+        if(!functionType.isNativeObjectType() && !isExtern) {
+          report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
+        }
+      }
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {

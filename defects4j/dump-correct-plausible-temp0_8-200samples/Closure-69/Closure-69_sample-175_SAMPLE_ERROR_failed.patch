diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 6030d48d..befe9625 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1541,10 +1541,9 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
-  private void visitCall(NodeTraversal t, Node n) {
+private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
-
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
@@ -1574,10 +1570,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
-
-      // Functions with explcit 'this' types must be called in a GETPROP
+      // Functions with explicit 'this' types must be called in a GETPROP
       // or GETELEM.
-
+      JSType typeOfThis = null;
+      if (n.getParent().isGetProp()) {
+        typeOfThis = getJSType(n.getParent().getFirstChild());
+      } else if (n.getParent().isGetElem()) {
+        typeOfThis =
+            getJSType(n.getParent().getFirstChild()).restrictByNotNullOrUndefined();
+      }
+      if (typeOfThis != null &&
+          !typeOfThis.isUnknownType() &&
+          !functionType.getTypeOfThis().isUnknownType()) {
+        if (!typeOfThis.isSubtype(functionType.getTypeOfThis())) {
+          report(t, n, INVALID_THIS_TYPE_IN_BIND,
+              typeOfThis.toString(), functionType.getTypeOfThis().toString());
+        }
+      }
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {

diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 6030d48d..8e154119 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1541,10 +1541,9 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
-  private void visitCall(NodeTraversal t, Node n) {
+private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
-
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
@@ -1574,10 +1570,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
-
       // Functions with explcit 'this' types must be called in a GETPROP
       // or GETELEM.
-
+      // Non-native constructors should not be called directly
+      // unless they specify a return type and are defined
+      // in an extern.
+      if (functionType.isConstructor() &&
+          !functionType.isNativeObjectType() &&
+          (functionType.getReturnType().isUnknownType() ||
+           functionType.getReturnType().isVoidType() ||
+           !isExtern)) {
+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
+      }
+      // Functions with explcit 'this' types must be called in a GETPROP
+      // or GETELEM.
+      if (NodeUtil.isGet(n.getParent()) ||
+          n.getParent().getType() == Token.NEW) {
+        if (functionType.hasInstanceType() &&
+            n.getParent().getFirstChild() != n) {
+          report(t, n, NOT_CALLABLE, childType.toString());
+        }
+      } else {
+        if (functionType.hasInstanceType()) {
+          report(t, n, EXPECTED_THIS_TYPE, "calling",
+                 functionType.getInstanceType().toString());
+        }
+      }
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {

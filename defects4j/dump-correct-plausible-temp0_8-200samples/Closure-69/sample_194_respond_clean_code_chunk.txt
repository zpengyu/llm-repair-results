  private void visitCall(NodeTraversal t, Node n) {
    Node child = n.getFirstChild();
    JSType childType = getJSType(child).restrictByNotNullOrUndefined();
    if (!childType.canBeCalled()) {
      report(t, n, NOT_CALLABLE, childType.toString());
      ensureTyped(t, n);
      return;
    }
    // A couple of types can be called as if they were functions.
    // If it is a function type, then validate parameters.
    if (childType instanceof FunctionType) {
      FunctionType functionType = (FunctionType) childType;
      boolean isExtern = false;
      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
      if(functionJSDocInfo != null) {
        String sourceName = functionJSDocInfo.getSourceName();
        CompilerInput functionSource = compiler.getInput(sourceName);
        isExtern = functionSource.isExtern();
      }
      if (functionType.isConstructor()) {
        // The constructor object created by goog.defineClass has a call method.
        // Allow that call method to be called directly.
        if (functionType.getInstanceType() instanceof FunctionType
            && !functionType.getInstanceType().isConstructor()) {
          ensureTyped(t, n,
              functionType.getInstanceType().getReturnType());
          return;
        }
        // If a constructor is a native or extern object type
        // or it has a return type, then allow it to be called.
        if (functionType.isNativeObjectType()
            || functionType.getReturnType().isUnknownType()
            || !isExtern) {
          report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
        }
      }
      // Functions with explcit 'this' types must be called in a GETPROP
      // or GETELEM.
      visitParameterList(t, n, functionType);
      ensureTyped(t, n, functionType.getReturnType());
    } else {
      ensureTyped(t, n);
    }
    // TODO: Add something to check for calls of RegExp objects, which is not
    // supported by IE.  Either say something about the return type or warn
    // about the non-portability of the call or both.
  }
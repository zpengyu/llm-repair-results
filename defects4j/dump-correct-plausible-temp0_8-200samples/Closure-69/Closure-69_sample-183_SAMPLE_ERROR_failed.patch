diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 6030d48d..81259a1c 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1541,54 +1541,55 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
-  private void visitCall(NodeTraversal t, Node n) {
-    Node child = n.getFirstChild();
-    JSType childType = getJSType(child).restrictByNotNullOrUndefined();
-
-    if (!childType.canBeCalled()) {
-      report(t, n, NOT_CALLABLE, childType.toString());
-      ensureTyped(t, n);
-      return;
-    }
-
-    // A couple of types can be called as if they were functions.
-    // If it is a function type, then validate parameters.
-    if (childType instanceof FunctionType) {
-      FunctionType functionType = (FunctionType) childType;
-
-      boolean isExtern = false;
-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
-      if(functionJSDocInfo != null) {
-        String sourceName = functionJSDocInfo.getSourceName();
-        CompilerInput functionSource = compiler.getInput(sourceName);
-        isExtern = functionSource.isExtern();
+    private void visitCall(NodeTraversal t, Node n) {
+      Node child = n.getFirstChild();
+      JSType childType = getJSType(child).restrictByNotNullOrUndefined();
+      if (!childType.canBeCalled()) {
+        report(t, n, NOT_CALLABLE, childType.toString());
+        ensureTyped(t, n);
+        return;
       }
-
-      // Non-native constructors should not be called directly
-      // unless they specify a return type and are defined
-      // in an extern.
-      if (functionType.isConstructor() &&
-          !functionType.isNativeObjectType() &&
-          (functionType.getReturnType().isUnknownType() ||
-           functionType.getReturnType().isVoidType() ||
-           !isExtern)) {
-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
+      // A couple of types can be called as if they were functions.
+      // If it is a function type, then validate parameters.
+      if (childType instanceof FunctionType) {
+        FunctionType functionType = (FunctionType) childType;
+        boolean isExtern = false;
+        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
+        if(functionJSDocInfo != null) {
+          String sourceName = functionJSDocInfo.getSourceName();
+          CompilerInput functionSource = compiler.getInput(sourceName);
+          isExtern = functionSource.isExtern();
+        }
+        // Non-native constructors should not be called directly
+        // unless they specify a return type and are defined
+        // in an extern.
+        if (functionType.isConstructor() &&
+            !functionType.isNativeObjectType() &&
+            (functionType.getReturnType().isUnknownType() ||
+             functionType.getReturnType().isVoidType() ||
+             !isExtern)) {
+          report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
+        }
+        // Functions with explcit 'this' types must be called in a GETPROP
+        // or GETELEM.
+        JSType nominalType = childType.getNominalType();
+        if (nominalType != null &&
+            nominalType.isFunctionTypeWithNonInferredFormals() &&
+            n.getType() == Token.CALL) {
+          Node gramps = n.getParent();
+          if (gramps == null || gramps.getType() != Token.GETPROP) {
+            report(t, n, INVALID_INFERRED_CALL, childType.toString());
+          }
+        }
+        visitParameterList(t, n, functionType);
+        ensureTyped(t, n, functionType.getReturnType());
+      } else {
+        ensureTyped(t, n);
       }
-
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
-
-      visitParameterList(t, n, functionType);
-      ensureTyped(t, n, functionType.getReturnType());
-    } else {
-      ensureTyped(t, n);
+      // TODO: Add something to check for calls of RegExp objects, which is not
+      // supported by IE.  Either say something about the return type or warn
+      // about the non-portability of the call or both.
     }
-
-    // TODO: Add something to check for calls of RegExp objects, which is not
-    // supported by IE.  Either say something about the return type or warn
-    // about the non-portability of the call or both.
-  }
-
   /**
    * Visits the parameters of a CALL or a NEW node.
    */

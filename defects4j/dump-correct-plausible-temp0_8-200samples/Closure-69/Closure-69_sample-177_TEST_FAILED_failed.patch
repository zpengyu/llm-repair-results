diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 6030d48d..d2fc83db 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1555,29 +1553,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
-
-      boolean isExtern = false;
-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
-      if(functionJSDocInfo != null) {
-        String sourceName = functionJSDocInfo.getSourceName();
-        CompilerInput functionSource = compiler.getInput(sourceName);
-        isExtern = functionSource.isExtern();
-      }
-
       // Non-native constructors should not be called directly
-      // unless they specify a return type and are defined
-      // in an extern.
-      if (functionType.isConstructor() &&
-          !functionType.isNativeObjectType() &&
+      // unless they specify a return type.
+      if (functionType.isConstructor() && !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
-           functionType.getReturnType().isVoidType() ||
-           !isExtern)) {
+           functionType.getReturnType().isVoidType())) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
-
       // Functions with explcit 'this' types must be called in a GETPROP
       // or GETELEM.
-
+      // TODO(robbyw): Should we move this logic into the type system?
+      if (functionType.isConstructor()
+          && !functionType.isNativeObjectType()
+          && functionType.hasInstanceType()
+          && !functionType.getInstanceType().isUnknownType()
+          && !functionType.getInstanceType().equals(
+              getNativeType(UNKNOWN_TYPE))
+          && !NodeUtil.isGet(n.getParent())) {
+        report(t, n, CONSTRUCTOR_NOT_CALLABLE,
+               functionType.getInstanceType().toString());
+      }
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {

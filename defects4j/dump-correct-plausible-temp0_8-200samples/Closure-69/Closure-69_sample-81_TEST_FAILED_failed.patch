diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 6030d48d..54322b28 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1544,14 +1544,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
-
-    if (!childType.canBeCalled()) {
-      report(t, n, NOT_CALLABLE, childType.toString());
-      ensureTyped(t, n);
-      return;
-    }
-
-    // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
@@ -1563,21 +1554,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
         CompilerInput functionSource = compiler.getInput(sourceName);
         isExtern = functionSource.isExtern();
       }
-
-      // Non-native constructors should not be called directly
-      // unless they specify a return type and are defined
-      // in an extern.
-      if (functionType.isConstructor() &&
-          !functionType.isNativeObjectType() &&
-          (functionType.getReturnType().isUnknownType() ||
-           functionType.getReturnType().isVoidType() ||
-           !isExtern)) {
-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
-      }
-
-      // Functions with explcit 'this' types must be called in a GETPROP
+      // Functions with explicit 'this' types must be called in a GETPROP
       // or GETELEM.
-
+      if (functionType.isConstructor()) {
+        // Non-native constructors should not be called directly
+        // unless they specify a return type and are defined
+        // in an extern.
+        if (!functionType.isNativeObjectType() &&
+            (functionType.getReturnType().isUnknownType() ||
+             functionType.getReturnType().isVoidType() ||
+             !isExtern)) {
+          report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
+        }
+      } else if (!childType.canBeCalled()) {
+        report(t, n, NOT_CALLABLE, childType.toString());
+      }
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {

diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
index 57c074cd..70254447 100644
--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java
+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
@@ -85,48 +85,74 @@ public class LocaleUtils {
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
-    public static Locale toLocale(final String str) {
-        if (str == null) {
-            return null;
-        }
-        final int len = str.length();
-        if (len < 2) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
-        final char ch0 = str.charAt(0);
-            final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (len == 2) {
-                return new Locale(str);
-            }
-            if (len < 5) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (str.charAt(2) != '_') {
+public static Locale toLocale(final String str) {
+    if (str == null) {
+        return null;
+    }
+    if (str.isEmpty()) {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
+    }
+    if (str.startsWith("_")) {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
+    }
+    final char[]separators = { '_', '_', '_'};
+    final String[] args = splitOnCharacters(str, separators);
+    switch (args.length) {
+        case 1:
+            if (!Character.isUpperCase(args[0].charAt(0))) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
-            }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+            return new Locale(args[0]);
+        case 2:
+            if (!Character.isUpperCase(args[0].charAt(0)) || !Character.isUpperCase(args[1].charAt(0))) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            }
-            if (len < 7) {
+            return new Locale(args[0], args[1]);
+        case 3:
+            if (!Character.isUpperCase(args[0].charAt(0)) || !Character.isUpperCase(args[1].charAt(0)) || !Character.isUpperCase(args[2].charAt(0))) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (str.charAt(5) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            return new Locale(args[0], args[1], args[2]);
+        default:
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+    }
+}
+/**
+     * Performs the logic for {@link String#split(String, int)}.
+     *
+     * @param str the String to parse, may be {@code null}
+     * @param separatorChars the separate character
+     * @return an array of parsed Strings, {@code null} if null String was input
+     */
+    private static String[] splitOnCharacters(final String str, final char... separatorChars) {
+        // Performance tuned for 2.0 (JDK1.4)
+        if (str == null) {
+            return null;
+        }
+        final int len = str.length();
+        if (len == 0) {
+            return ArrayUtils.EMPTY_STRING_ARRAY;
+        }
+        final List<String> list = new ArrayList<String>();
+        int i = 0, start = 0;
+        boolean match = false;
+        while (i < len) {
+            if (ArrayUtils.contains(separatorChars, str.charAt(i))) {
+                if (match) {
+                    list.add(str.substring(start, i));
+                    match = false;
+                }
+                start = ++i;
+                continue;
             }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+            match = true;
+            i++;
+        }
+        if (match) {
+            list.add(str.substring(start, i));
+        }
+        return list.toArray(new String[list.size()]);
     }
-
     //-----------------------------------------------------------------------
     /**
      * <p>Obtains the list of locales to search through when performing

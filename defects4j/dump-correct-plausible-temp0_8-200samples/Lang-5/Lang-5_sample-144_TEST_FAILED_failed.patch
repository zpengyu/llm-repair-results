diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
index 57c074cd..b99aa075 100644
--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java
+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
@@ -85,48 +85,55 @@ public class LocaleUtils {
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
-    public static Locale toLocale(final String str) {
+public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
-        final int len = str.length();
-        if (len < 2) {
+        if (str.isEmpty()) {  // Since JDK 7
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch0 = str.charAt(0);
-            final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+        if (ch0 == '_') {
+            if (str.length() < 2) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 2) {
-                return new Locale(str);
-            }
-            if (len < 5) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (str.charAt(2) != '_') {
+            final char ch1 = str.charAt(1);
+            if (!Character.isUpperCase(ch1)) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
+            if (str.length() == 2) {
+                return new Locale("", str.substring(1));
             }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+            if (str.charAt(2) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            }
-            if (len < 7) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            return new Locale("", str.substring(1, 3), str.substring(3));
+        }
+        final String[] segments = str.split("_", -1);
+        final int len = segments.length;
+        if (len > 3) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        final String language = segments[0];
+        if (language.length() == 2) {
+            final String country = len >= 2 ? segments[1] : "";
+            if (country.length() == 2) {
+                final String variant = len >= 3 ? segments[2] : "";
+                if (variant.length() > 0) {
+                    return new Locale(language, country, variant);
+                }
+                return new Locale(language, country);
             }
-            if (str.charAt(5) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            if (country.length() > 0) {
+                return new Locale(language, "", country);
             }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+            return new Locale(language);
+        }
+        if (language.length() > 0) {
+            return new Locale("", language);
+        }
+        throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-
     //-----------------------------------------------------------------------
     /**
      * <p>Obtains the list of locales to search through when performing

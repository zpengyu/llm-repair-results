diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
index 57c074cd..08ad02b4 100644
--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java
+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
@@ -89,44 +89,80 @@ public class LocaleUtils {
         if (str == null) {
             return null;
         }
-        final int len = str.length();
-        if (len < 2) {
+        if (str.isEmpty()) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-        final char ch0 = str.charAt(0);
-            final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (len == 2) {
-                return new Locale(str);
-            }
-            if (len < 5) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
-            }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            }
-            if (len < 7) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (str.charAt(5) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+        if (str.startsWith("_")) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        final int len = str.length();
+        char ch0 = '\u0000';
+        char ch1 = '\u0000';
+        char ch2 = '\u0000';
+        char ch3 = '\u0000';
+        char ch4 = '\u0000';
+        int phase = 0;
+        boolean isSpecial = false;
+        StringBuilder lang = new StringBuilder();
+        StringBuilder script = new StringBuilder();
+        StringBuilder country = new StringBuilder();
+        StringBuilder variant = new StringBuilder();
+        int i = 0;
+        while (i < len) {
+            ch0 = str.charAt(i);
+            if (ch0 == '_') {
+                if (phase == 0) {
+                    phase = 1;
+                } else if (phase == 2) {
+                    phase = 3;
+                } else if (phase == 4) {
+                    phase = 5;
+                } else {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+            } else if (ch0 == '-') {
+                if (phase == 1) {
+                    phase = 2;
+                } else if (phase == 2) {
+                    phase = 4;
+                } else {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+            } else {
+                if (!Character.isLetterOrDigit(ch0)) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                if (phase == 0) {
+                    lang.append(ch0);
+                    if (lang.length() == 3) {
+                        phase = 1;
+                    }
+                } else if (phase == 1 || phase == 2) {
+                    script.append(ch0);
+                    if (script.length() == 4) {
+                        phase = 2;
+                    }
+                } else if (phase == 3 || phase == 4 || phase == 5) {
+                    country.append(ch0);
+                    if (country.length() == 2) {
+                        phase = 4;
+                    }
+                } else if (phase == 6) {
+                    variant.append(ch0);
+                }
             }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+            i++;
+        }
+        String language = lang.toString();
+        String scriptcode = script.toString();
+        String countrycode = country.toString();
+        String variantcode = variant.toString();
+        if (variantcode.isEmpty() && countrycode.endsWith("#")) {
+            variantcode = countrycode.substring(3);
+            countrycode = countrycode.substring(0, 3);
+        }
+        return new Locale(language, countrycode, variantcode);
     }
-
     //-----------------------------------------------------------------------
     /**
      * <p>Obtains the list of locales to search through when performing

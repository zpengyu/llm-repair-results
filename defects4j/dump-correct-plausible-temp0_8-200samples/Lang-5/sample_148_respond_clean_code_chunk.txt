    public static Locale toLocale(final String str) {
        if (str == null) {
            return null;
        }
        if (str.isEmpty()) { // (rjw);
            throw new IllegalArgumentException("Invalid locale format: " + str);
        }
        if (str.startsWith("_")) {
            final int pos = str.indexOf('_', 1);
            if (pos < 2) {
                throw new IllegalArgumentException("Invalid locale format: " + str);
            }
            final String language = str.substring(1, pos);
            if (language.length() != 2) {
                throw new IllegalArgumentException("Invalid locale format: " + str);
            }
            if (pos == str.length()) {
                return new Locale(language, "");
            }
            final String country;
            int pos2 = str.indexOf('_', pos + 1);
            if (pos2 < 0) {
                country = str.substring(pos + 1);
            } else {
                country = str.substring(pos + 1, pos2);
            }
            if (country.length() != 0 && country.length() != 2) {
                throw new IllegalArgumentException("Invalid locale format: " + str);
            }
            if (pos2 < 0) {
                return new Locale(language, country);
            }
            if (pos2 == str.length()) {
                return new Locale(language, country, "");
            }
            return new Locale(language, country, str.substring(pos2 + 1));
        }
        final String[] splits = str.split("_", -1);
        final int len = splits.length;
        switch (len) {
            case 1:
                if (splits[0].length() != 0) {
                    return new Locale(splits[0]);
                }
                break;
            case 2:
                if (splits[0].length() != 0 && splits[1].length() != 0) {
                    return new Locale(splits[0], splits[1]);
                }
                break;
            case 3:
                if (splits[0].length() != 0 && splits[1].length() != 0 && splits[2].length() != 0) {
                    return new Locale(splits[0], splits[1], splits[2]);
                }
        }
        throw new IllegalArgumentException("Invalid locale format: " + str);
    }
diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
index 57c074cd..f4ff2aca 100644
--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java
+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
@@ -89,44 +89,59 @@ public class LocaleUtils {
         if (str == null) {
             return null;
         }
-        final int len = str.length();
-        if (len < 2) {
+        if (str.isEmpty()) { // (rjw);
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-        final char ch0 = str.charAt(0);
-            final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+        if (str.startsWith("_")) {
+            final int pos = str.indexOf('_', 1);
+            if (pos < 2) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 2) {
-                return new Locale(str);
-            }
-            if (len < 5) {
+            final String language = str.substring(1, pos);
+            if (language.length() != 2) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            if (pos == str.length()) {
+                return new Locale(language, "");
             }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
+            final String country;
+            int pos2 = str.indexOf('_', pos + 1);
+            if (pos2 < 0) {
+                country = str.substring(pos + 1);
+            } else {
+                country = str.substring(pos + 1, pos2);
             }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+            if (country.length() != 0 && country.length() != 2) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            }
-            if (len < 7) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            if (pos2 < 0) {
+                return new Locale(language, country);
             }
-            if (str.charAt(5) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            if (pos2 == str.length()) {
+                return new Locale(language, country, "");
             }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+            return new Locale(language, country, str.substring(pos2 + 1));
+        }
+        final String[] splits = str.split("_", -1);
+        final int len = splits.length;
+        switch (len) {
+            case 1:
+                if (splits[0].length() != 0) {
+                    return new Locale(splits[0]);
+                }
+                break;
+            case 2:
+                if (splits[0].length() != 0 && splits[1].length() != 0) {
+                    return new Locale(splits[0], splits[1]);
+                }
+                break;
+            case 3:
+                if (splits[0].length() != 0 && splits[1].length() != 0 && splits[2].length() != 0) {
+                    return new Locale(splits[0], splits[1], splits[2]);
+                }
+        }
+        throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-
     //-----------------------------------------------------------------------
     /**
      * <p>Obtains the list of locales to search through when performing

    public static Locale toLocale(final String str) {
        if (str == null) {
            return null;
        }
        if (str.isEmpty()) {
            throw new IllegalArgumentException("Invalid locale format: " + str);
        }
        final char ch0 = str.charAt(0);
        if (ch0 == '_') {
            if (str.length() < 2) {
                throw new IllegalArgumentException("Invalid locale format: " + str);
            }
            final char ch1 = str.charAt(1);
            if (!Character.isUpperCase(ch1) && !Character.isLowerCase(ch1)) {
                throw new IllegalArgumentException("Invalid locale format: " + str);
            }
            if (str.length() == 2) {
                return new Locale("", str.substring(1));
            } else {
                if (!Character.isUpperCase(str.charAt(2))) {
                    throw new IllegalArgumentException("Invalid locale format: " + str);
                }
                return new Locale("", str.substring(1));
            }
        }

        final String[] split = str.split("_", -1);
        final int len = split.length;
        if (len > 3) {
            throw new IllegalArgumentException("Invalid locale format: " + str);
        }
        final String language = split[0];
        if (language.length() == 0) {
            throw new IllegalArgumentException("Invalid locale format: " + str);
        }
        if (len == 1) {
            return new Locale(language);
        }
        final String country = split[1];
        if (country.length() > 0) {
            if (len == 2) {
                return new Locale(language, country);
            }
            final String variant = split[2];
            if (variant.length() > 0) {
                return new Locale(language, country, variant);
            }
        }
        throw new IllegalArgumentException("Invalid locale format: " + str);
    }


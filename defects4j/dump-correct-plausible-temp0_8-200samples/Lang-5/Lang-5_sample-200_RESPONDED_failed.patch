diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
index 57c074cd..081c641e 100644
--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java
+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
@@ -85,48 +85,58 @@ public class LocaleUtils {
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
-    public static Locale toLocale(final String str) {
-        if (str == null) {
-            return null;
-        }
-        final int len = str.length();
-        if (len < 2) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
+public static Locale toLocale(final String str) {
+    if (str == null) {
+        return null;
+    }
+    if (str.isEmpty()) {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
+    }
+    if (str.startsWith("_")) {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
+    }
+    final char sep = '_';
+    final int len = str.length();
+    String language = "";
+    String country = "";
+    String variant = "";
+    if (len < 2) {
+        language = str;
+    } else {
+        final String[] words = str.split("_", -1);
+        final int count = words.length;
+        switch (count) {
+            case 1:
+                language = words[0];
+                break;
+            case 2:
+                language = words[0];
+                country = words[1];
+                break;
+            default:
+                language = words[0];
+                country = words[1];
+                int start = 2;
+                if (words[1].isEmpty() && count > 2) {
+                    // Make sure we skip the empty string between the
+                    // separator and the next word.
+                    start = 3;
+                }
+                final StringBuilder buf = new StringBuilder();
+                for (int i = start; i < count; i++) {
+                    if (i > start) {
+                        buf.append(sep);
+                    }
+                    buf.append(words[i]);
+                }
+                variant = buf.toString();
         }
-        final char ch0 = str.charAt(0);
-            final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (len == 2) {
-                return new Locale(str);
-            }
-            if (len < 5) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
-            }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            }
-            if (len < 7) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (str.charAt(5) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
-
+    if (language.isEmpty() && country.isEmpty() && variant.isEmpty()) {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
+    }
+    return new Locale(language, country, variant);
+}
     //-----------------------------------------------------------------------
     /**
      * <p>Obtains the list of locales to search through when performing

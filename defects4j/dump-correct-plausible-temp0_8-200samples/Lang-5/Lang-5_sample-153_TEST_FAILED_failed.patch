diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
index 57c074cd..d7ecd3df 100644
--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java
+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
@@ -89,44 +89,54 @@ public class LocaleUtils {
         if (str == null) {
             return null;
         }
-        final int len = str.length();
-        if (len < 2) {
+        if (str.isEmpty()) { // since 3.2 (before only lowercase input)
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-        final char ch0 = str.charAt(0);
-            final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (len == 2) {
-                return new Locale(str);
-            }
-            if (len < 5) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (str.charAt(2) != '_') {
+        if (str.startsWith("_")) {  // special case for leading "_"
+            final int len = str.length();
+            if (len < 3) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
-            }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+            if (len == 3) {
+                return new Locale("", str.substring(1, 3));
             }
-            if (len < 7) {
+            if (len < 5) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (str.charAt(5) != '_') {
+            if (str.charAt(3) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+            return new Locale("", str.substring(1, 3), str.substring(4));
+        }
+        final String[] split = str.split("_", -1);
+        final int len = split.length;
+        switch (len) {
+        case 1:
+            return new Locale(convertOldISOCodes(split[0]));
+        case 2:
+            return new Locale(convertOldISOCodes(split[0]), convertOldISOCodes(split[1]));
+        case 3:
+            return new Locale(convertOldISOCodes(split[0]), convertOldISOCodes(split[1]), convertOldISOCodes(split[2]));
+        default:
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+    }
+    private static String convertOldISOCodes(final String str) {
+        if (str.equals("he")) {
+            return "iw";
+        } else if (str.equals("yi")) {
+            return "ji";
+        } else if (str.equals("id")) {
+            return "in";
+        } else {
+            return str;
+        }
     }
-
     //-----------------------------------------------------------------------
     /**
      * <p>Obtains the list of locales to search through when performing

diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java
index d6770e15..c5a60b32 100644
--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java
+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java
@@ -80,71 +80,65 @@ final class CheckGlobalThis implements Callback {
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
-    if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);
-      if (jsDoc != null &&
-          (jsDoc.isConstructor() ||
-           jsDoc.isInterface() ||
-           jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
-        return false;
-      }
-
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {}; // or
-      // var a = {x: function() {}};
-      int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN ||
-
-            // object literal keys
-            pType == Token.STRING ||
-            pType == Token.NUMBER)) {
-        return false;
-      }
-
-      // Don't traverse functions that are getting lent to a prototype.
-    }
-
-    if (parent != null && parent.getType() == Token.ASSIGN) {
-      Node lhs = parent.getFirstChild();
-      Node rhs = lhs.getNext();
-
-      if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
-        if (assignLhsChild == null) {
-          assignLhsChild = lhs;
+    switch (n.getType()) {
+      case Token.FUNCTION:
+        // Don't traverse functions that are constructors or have the @this
+        // or @override annotation.
+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);
+        if (jsDoc != null &&
+            (jsDoc.isConstructor() ||
+             jsDoc.isInterface() ||
+             jsDoc.hasThisType() ||
+             jsDoc.isOverride())) {
+          return false;
+        }
+        // Don't traverse functions unless they would normally
+        // be able to have a @this annotation associated with them. e.g.,
+        // var a = function() { }; // or
+        // function a() {} // or
+        // a.x = function() {}; // or
+        // var a = {x: function() {}};
+        int pType = parent.getType();
+        if (!(pType == Token.BLOCK ||
+              pType == Token.SCRIPT ||
+              pType == Token.NAME ||
+              pType == Token.ASSIGN ||
+              // object literal keys
+              pType == Token.STRING ||
+              pType == Token.NUMBER)) {
+          return false;
         }
-      } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-        if (NodeUtil.isGet(lhs)) {
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
-            return false;
+        // Don't traverse functions that are getting lent to a prototype.
+        break;
+      case Token.ASSIGN:
+        Node lhs = parent.getFirstChild();
+        Node rhs = lhs.getNext();
+        if (n == lhs) {
+          // Always traverse the left side of the assignment. To handle
+          // nested assignments properly (e.g., (a = this).property = c;),
+          // assignLhsChild should not be overridden.
+          if (assignLhsChild == null) {
+            assignLhsChild = lhs;
           }
-          Node llhs = lhs.getFirstChild();
-          if (llhs.getType() == Token.GETPROP &&
-              llhs.getLastChild().getString().equals("prototype")) {
-            return false;
+        } else {
+          // Only traverse the right side if it's not an assignment to a prototype
+          // property or subproperty.
+          if (NodeUtil.isGet(lhs)) {
+            if (lhs.getType() == Token.GETPROP &&
+                lhs.getLastChild().getString().equals("prototype")) {
+              return false;
+            }
+            Node llhs = lhs.getFirstChild();
+            if (llhs.getType() == Token.GETPROP &&
+                llhs.getLastChild().getString().equals("prototype")) {
+              return false;
+            }
           }
         }
-      }
+        break;
     }
-
     return true;
   }
-
   public void visit(NodeTraversal t, Node n, Node parent) {
     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {
       compiler.report(t.makeError(n, level, GLOBAL_THIS));

diff --git a/src/java/org/apache/commons/codec/binary/Base64InputStream.java b/src/java/org/apache/commons/codec/binary/Base64InputStream.java
index 90a35578..968eedf8 100644
--- a/src/java/org/apache/commons/codec/binary/Base64InputStream.java
+++ b/src/java/org/apache/commons/codec/binary/Base64InputStream.java
@@ -145,40 +145,36 @@ public class Base64InputStream extends FilterInputStream {
         } else if (len == 0) {
             return 0;
         } else {
-            /*
-             Rationale for while-loop on (readLen == 0):
-             -----
-             Base64.readResults() usually returns > 0 or EOF (-1).  In the
-             rare case where it returns 0, we just keep trying.
-
-             This is essentially an undocumented contract for InputStream
-             implementors that want their code to work properly with
-             java.io.InputStreamReader, since the latter hates it when
-             InputStream.read(byte[]) returns a zero.  Unfortunately our
-             readResults() call must return 0 if a large amount of the data
-             being decoded was non-base64, so this while-loop enables proper
-             interop with InputStreamReader for that scenario.
-             -----
-             This is a fix for CODEC-101
-            */
-                if (!base64.hasData()) {
-                    byte[] buf = new byte[doEncode ? 4096 : 8192];
-                    int c = in.read(buf);
-                    // A little optimization to avoid System.arraycopy()
-                    // when possible.
-                    if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
+            int readLen;
+            int c = 0;
+            // This is a fix for CODEC-101
+            readLen = base64.readResults(b, offset, len);
+            if (readLen == 0) {
+                byte[] buf = new byte[doEncode ? 4096 : 8192];
+                // A little optimization to avoid System.arraycopy()
+                // when possible.
+                if (b.length == len) {
+                    base64.setInitialBuffer(b, offset, len);
+                }
+                while (readLen == 0) {
+                    c = in.read(buf);
+                    if (c == -1) {
+                        break;
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
                     } else {
                         base64.decode(buf, 0, c);
                     }
+                    readLen = base64.readResults(b, offset, len);
                 }
-            return base64.readResults(b, offset, len);
+            }
+            if (c == -1 && readLen <= 0) {
+                readLen = -1;
+            }
+            return readLen;
         }
     }
-
     /**
      * {@inheritDoc}
      * 

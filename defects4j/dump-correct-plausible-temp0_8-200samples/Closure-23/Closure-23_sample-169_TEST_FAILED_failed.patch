diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 805db9af..21fe2f30 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -1419,58 +1419,49 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
     return false;
   }
 
-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {
-    Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
-    if (isAssignmentTarget(n)) {
-      return n;
-    }
-
-    if (!right.isNumber()) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
-      return n;
-    }
-
-    double index = right.getDouble();
-    int intIndex = (int) index;
-    if (intIndex != index) {
-      error(INVALID_GETELEM_INDEX_ERROR, right);
-      return n;
-    }
-
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
-    Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
-      current = current.getNext();
-    }
-
-    if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
-    if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
-    } else {
-      left.removeChild(elem);
-    }
-
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
-    reportCodeChange();
-    return elem;
+private Node tryFoldArrayAccess(Node n, Node left, Node right) {
+  Node parent = n.getParent();
+  // If GETPROP/GETELEM is used as assignment target the array literal is
+  // acting as a temporary we can't fold it here:
+  //    "[][0] += 1"
+  if (isAssignmentTarget(n)) {
+    return n;
   }
-
+  if (!right.isNumber()) {
+    // Sometimes people like to use complex expressions to index into
+    // arrays, or strings to index into array methods.
+    return n;
+  }
+  double index = right.getDouble();
+  int intIndex = (int) index;
+  if (intIndex != index) {
+    error(INVALID_GETELEM_INDEX_ERROR, right);
+    return n;
+  }
+  if (intIndex < 0) {
+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+    return n;
+  }
+  Node current = left.getFirstChild();
+  Node elem = null;
+  for (int i = 0; current != null && i < intIndex; i++) {
+    elem = current;
+    current = current.getNext();
+  }
+  if (elem == null) {
+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+    return n;
+  }
+  if (elem.isEmpty()) {
+    elem = NodeUtil.newUndefinedNode(elem);
+  } else {
+    left.removeChild(elem);
+  }
+  // Replace the entire GETELEM with the value
+  n.getParent().replaceChild(n, elem);
+  reportCodeChange();
+  return elem;
+}
   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {
     Preconditions.checkArgument(NodeUtil.isGet(n));
 

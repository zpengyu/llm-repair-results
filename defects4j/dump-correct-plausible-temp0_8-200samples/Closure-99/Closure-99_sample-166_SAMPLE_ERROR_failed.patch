diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java
index 961b964c..0d1b9f62 100644
--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java
+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java
@@ -81,9 +81,7 @@ final class CheckGlobalThis implements Callback {
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
-    if (n.getType() == Token.FUNCTION) {
+if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
@@ -106,12 +103,10 @@ final class CheckGlobalThis implements Callback {
             pType == Token.ASSIGN)) {
         return false;
       }
-    }
-
-    if (parent != null && parent.getType() == Token.ASSIGN) {
+}
+if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
-      
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
@@ -122,19 +117,12 @@ final class CheckGlobalThis implements Callback {
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
-            return false;
-          }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
-            return false;
-          }
+        if (lhs.getType() == Token.GETPROP &&
+            lhs.getLastChild().getString().equals("prototype")) {
+          return false;
+        }
       }
-    }
-
-    return true;
-  }
-
+}
   public void visit(NodeTraversal t, Node n, Node parent) {
     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {
       compiler.report(t.makeError(n, level, GLOBAL_THIS));

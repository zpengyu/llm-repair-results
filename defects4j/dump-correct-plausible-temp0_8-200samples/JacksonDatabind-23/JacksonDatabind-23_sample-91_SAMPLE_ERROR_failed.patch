diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
index 6d0db8734..6b8bad162 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
@@ -139,15 +124,13 @@ public class NumberSerializers
      * of bridge methods.
      */
     @JacksonStdImpl
-    public final static class IntegerSerializer extends Base<Object>
+    public final static class IntegerSerializer extends Base<Number>
     {
-        public IntegerSerializer() { super(Integer.class, JsonParser.NumberType.INT ,"integer"); }
-    
+        public IntegerSerializer() { super(Number.class, JsonParser.NumberType.INT ,"integer"); }
         @Override
         public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
-            gen.writeNumber(((Integer) value).intValue());
+            gen.writeNumber(value.intValue());
         }
-        
         // IMPORTANT: copied from `NonTypedScalarSerializerBase`
         @Override
         public void serializeWithType(Object value, JsonGenerator gen,
@@ -178,37 +156,26 @@ public class NumberSerializers
             gen.writeNumber(value.intValue());
         }
     }
-
     @JacksonStdImpl
-    public final static class LongSerializer extends Base<Object>
+    public final static class LongSerializer extends Base<Number>
     {
-
         final static LongSerializer instance = new LongSerializer();
-
-        public LongSerializer() { super(Long.class, JsonParser.NumberType.LONG, "number"); }
-
-
+        public LongSerializer() { super(Number.class, JsonParser.NumberType.LONG, "number"); }
         @Override
         public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
-            gen.writeNumber(((Long) value).longValue());
+            gen.writeNumber(value.longValue());
         }
     }
-
     @JacksonStdImpl
-    public final static class FloatSerializer extends Base<Object>
+    public final static class FloatSerializer extends Base<Number>
     {
-
         final static FloatSerializer instance = new FloatSerializer();
-
-        public FloatSerializer() { super(Float.class, JsonParser.NumberType.FLOAT, "number"); }
-
-
+        public FloatSerializer() { super(Number.class, JsonParser.NumberType.FLOAT, "number"); }
         @Override
         public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
-            gen.writeNumber(((Float) value).floatValue());
+            gen.writeNumber(value.floatValue());
         }
     }
-
     /**
      * This is the special serializer for regular {@link java.lang.Double}s
      * (and primitive doubles)

diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
index 6d0db8734..9b1fbeb3b 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
@@ -30,84 +29,16 @@ public class NumberSerializers
         allDeserializers.put(Integer.TYPE.getName(), intS);
         allDeserializers.put(Long.class.getName(), LongSerializer.instance);
         allDeserializers.put(Long.TYPE.getName(), LongSerializer.instance);
-        allDeserializers.put(Byte.class.getName(), IntLikeSerializer.instance);
-        allDeserializers.put(Byte.TYPE.getName(), IntLikeSerializer.instance);
+        allDeserializers.put(Byte.class.getName(), ByteSerializer.instance);
+        allDeserializers.put(Byte.TYPE.getName(), ByteSerializer.instance);
         allDeserializers.put(Short.class.getName(), ShortSerializer.instance);
         allDeserializers.put(Short.TYPE.getName(), ShortSerializer.instance);
-
         // Numbers, limited length floating point
         allDeserializers.put(Float.class.getName(), FloatSerializer.instance);
         allDeserializers.put(Float.TYPE.getName(), FloatSerializer.instance);
         allDeserializers.put(Double.class.getName(), DoubleSerializer.instance);
         allDeserializers.put(Double.TYPE.getName(), DoubleSerializer.instance);
     }
-
-    /*
-    /**********************************************************
-    /* Shared base class
-    /**********************************************************
-     */
-
-    protected abstract static class Base<T> extends StdScalarSerializer<T>
-        implements ContextualSerializer
-    {
-
-        protected final JsonParser.NumberType _numberType;
-        protected final String _schemaType;
-        protected final boolean _isInt;
-
-        protected Base(Class<?> cls, JsonParser.NumberType numberType, String schemaType) {
-            super(cls, false);
-            _numberType = numberType;
-            _schemaType = schemaType;
-            _isInt = (numberType == JsonParser.NumberType.INT)
-                    || (numberType == JsonParser.NumberType.LONG)
-                    || (numberType == JsonParser.NumberType.BIG_INTEGER)
-                    ;
-        }
-
-        @Override
-        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {
-            return createSchemaNode(_schemaType, true);
-        }
-
-        @Override
-        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
-        {
-            if (_isInt) {
-                JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);
-                if (v2 != null) {
-                    v2.numberType(_numberType);
-                }
-            } else {
-                JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);
-                if (v2 != null) {
-                    v2.numberType(_numberType);
-                }
-            }
-        }
-
-        @Override
-        public JsonSerializer<?> createContextual(SerializerProvider prov,
-                BeanProperty property) throws JsonMappingException
-        {
-            if (property != null) {
-                AnnotatedMember m = property.getMember();
-                if (m != null) {
-                    JsonFormat.Value format = prov.getAnnotationIntrospector().findFormat(m);
-                    if (format != null) {
-                        switch (format.getShape()) {
-                        case STRING:
-                            return ToStringSerializer.instance;
-                        default:
-                        }
-                    }
-                }
-            }
-            return this;
-        }
-    }
-    
     /*
     /**********************************************************
     /* Concrete serializers, numerics

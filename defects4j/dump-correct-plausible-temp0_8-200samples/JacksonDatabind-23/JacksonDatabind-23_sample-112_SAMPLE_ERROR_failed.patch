diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
index 6d0db8734..e20840cd5 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
@@ -19,223 +19,356 @@ import com.fasterxml.jackson.databind.ser.ContextualSerializer;
  * Container class for serializers used for handling standard JDK-provided types.
  */
 @SuppressWarnings("serial")
-public class NumberSerializers
+@JacksonStdImpl
+public final static class ShortSerializer extends Base<Short>
 {
-    protected NumberSerializers() { }
-
-    public static void addAll(Map<String, JsonSerializer<?>> allDeserializers)
+    public ShortSerializer() { super(Short.class, JsonParser.NumberType.INT, "number"); }
+    @Override
+    public void serialize(Short value, JsonGenerator gen, SerializerProvider provider) throws IOException {
+        gen.writeNumber(value.shortValue());
+    }
+}
+/**
+ * This is the special serializer for regular {@link java.lang.Integer}s
+ * (and primitive ints)
+ *<p>
+ * Since this is one of "native" types, no type information is ever
+ * included on serialization (unlike for most scalar types)
+ */
+@JacksonStdImpl
+public final static class IntegerSerializer extends Base<Object>
+{
+    public IntegerSerializer() { super(Integer.class, JsonParser.NumberType.INT ,"integer"); }
+    @Override
+    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
+        gen.writeNumber(((Integer) value).intValue());
+    }
+    // IMPORTANT: copied from `NonTypedScalarSerializerBase`
+    @Override
+    public void serializeWithType(Object value, JsonGenerator gen,
+            SerializerProvider provider, TypeSerializer typeSer) throws IOException {
+        // no type info, just regular serialization
+        serialize(value, gen, provider);            
+    }
+    /**
+     * Override of method that tries to add "native" type information
+     * for certain base types; but for numeric types we will
+     * instead use the generalized method.
+     */
+    @Override
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
     {
-        final JsonSerializer<?> intS = new IntegerSerializer();
-        allDeserializers.put(Integer.class.getName(), intS);
-        allDeserializers.put(Integer.TYPE.getName(), intS);
-        allDeserializers.put(Long.class.getName(), LongSerializer.instance);
-        allDeserializers.put(Long.TYPE.getName(), LongSerializer.instance);
-        allDeserializers.put(Byte.class.getName(), IntLikeSerializer.instance);
-        allDeserializers.put(Byte.TYPE.getName(), IntLikeSerializer.instance);
-        allDeserializers.put(Short.class.getName(), ShortSerializer.instance);
-        allDeserializers.put(Short.TYPE.getName(), ShortSerializer.instance);
-
-        // Numbers, limited length floating point
-        allDeserializers.put(Float.class.getName(), FloatSerializer.instance);
-        allDeserializers.put(Float.TYPE.getName(), FloatSerializer.instance);
-        allDeserializers.put(Double.class.getName(), DoubleSerializer.instance);
-        allDeserializers.put(Double.TYPE.getName(), DoubleSerializer.instance);
+        _acceptJsonFormatVisitor(visitor, typeHint, JsonParser.NumberType.INT);
     }
-
-    /*
-    /**********************************************************
-    /* Shared base class
-    /**********************************************************
+}
+/**
+ * Similar to {@link IntegerSerializer}, but will not cast to Integer:
+ * instead, cast is to {@link java.lang.Number}, and conversion is
+ * by calling {@link java.lang.Number#intValue}.
+ */
+@JacksonStdImpl
+public final static class IntLikeSerializer extends Base<Number>
+{
+    public IntLikeSerializer() {
+        super(Number.class, JsonParser.NumberType.INT, "integer");
+    }
+    /**
+     * Override of method that tries to add "native" type information
+     * for certain base types; but for numeric types we will
+     * instead use the generalized method.
      */
-
-    protected abstract static class Base<T> extends StdScalarSerializer<T>
-        implements ContextualSerializer
+    @Override
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
     {
-
-        protected final JsonParser.NumberType _numberType;
-        protected final String _schemaType;
-        protected final boolean _isInt;
-
-        protected Base(Class<?> cls, JsonParser.NumberType numberType, String schemaType) {
-            super(cls, false);
-            _numberType = numberType;
-            _schemaType = schemaType;
-            _isInt = (numberType == JsonParser.NumberType.INT)
-                    || (numberType == JsonParser.NumberType.LONG)
-                    || (numberType == JsonParser.NumberType.BIG_INTEGER)
-                    ;
-        }
-
-        @Override
-        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {
-            return createSchemaNode(_schemaType, true);
-        }
-
-        @Override
-        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
-        {
-            if (_isInt) {
-                JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);
-                if (v2 != null) {
-                    v2.numberType(_numberType);
-                }
-            } else {
-                JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);
-                if (v2 != null) {
-                    v2.numberType(_numberType);
-                }
+        _acceptJsonFormatVisitor(visitor, typeHint, JsonParser.NumberType.INT);
+    }
+    @Override
+    public void serialize(Number value, JsonGenerator gen, SerializerProvider provider) throws IOException {
+        gen.writeNumber(value.intValue());
+    }
+}
+@JacksonStdImpl
+public final static class LongSerializer extends Base<Object>
+{
+    public LongSerializer() { super(Long.class, JsonParser.NumberType.LONG, "number"); }
+    @Override
+    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
+        gen.writeNumber(((Long) value).longValue());
+    }
+    /**
+     * Override of method that tries to add "native" type information
+     * for certain base types; but for numeric types we will
+     * instead use the generalized method.
+     */
+    @Override
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
+    {
+        _acceptJsonFormatVisitor(visitor, typeHint, JsonParser.NumberType.LONG);
+    }
+}
+@JacksonStdImpl
+public final static class FloatSerializer extends Base<Object>
+{
+    public FloatSerializer() { super(Float.class, JsonParser.NumberType.FLOAT, "number"); }
+    @Override
+    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
+        gen.writeNumber(((Float) value).floatValue());
+    }
+    /**
+     * Override of method that tries to add "native" type information
+     * for certain base types; but for numeric types we will
+     * instead use the generalized method.
+     */
+    @Override
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
+    {
+        _acceptJsonFormatVisitor(visitor, typeHint, JsonParser.NumberType.FLOAT);
+    }
+}
+/**
+ * This is the special serializer for regular {@link java.lang.Double}s
+ * (and primitive doubles)
+ *<p>
+ * Since this is one of "native" types, no type information is ever
+ * included on serialization (unlike for most scalar types as of 1.5)
+ */
+@JacksonStdImpl
+public final static class DoubleSerializer extends Base<Object>
+{
+    public DoubleSerializer() { super(Double.class, JsonParser.NumberType.DOUBLE, "number"); }
+    @Override
+    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
+        gen.writeNumber(((Double) value).doubleValue());
+    }
+    // IMPORTANT: copied from `NonTypedScalarSerializerBase`
+    @Override
+    public void serializeWithType(Object value, JsonGenerator gen,
+            SerializerProvider provider, TypeSerializer typeSer) throws IOException {
+        // no type info, just regular serialization
+        serialize(value, gen, provider);            
+    }
+    /**
+     * Override of method that tries to add "native" type information
+     * for certain base types; but for numeric types we will
+     * instead use the generalized method.
+     */
+    @Override
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
+    {
+        _acceptJsonFormatVisitor(visitor, typeHint, JsonParser.NumberType.DOUBLE);
+    }
+}
+/*
+/**********************************************************
+/* Concrete serializers, numerics
+/**********************************************************
+ */
+protected abstract static class Base<T> extends StdScalarSerializer<T>
+    implements ContextualSerializer
+{
+    protected final JsonParser.NumberType _numberType;
+    protected final String _schemaType;
+    protected final boolean _isInt;
+    protected Base(Class<?> cls, JsonParser.NumberType numberType, String schemaType) {
+        super(cls, false);
+        _numberType = numberType;
+        _schemaType = schemaType;
+        _isInt = (numberType == JsonParser.NumberType.INT)
+                || (numberType == JsonParser.NumberType.LONG)
+                || (numberType == JsonParser.NumberType.BIG_INTEGER)
+                ;
+    }
+    @Override
+    public JsonNode getSchema(SerializerProvider provider, Type typeHint) {
+        return createSchemaNode(_schemaType, true);
+    }
+    @Override
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
+    {
+        if (_isInt) {
+            JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);
+            if (v2 != null) {
+                v2.numberType(_numberType);
+            }
+        } else {
+            JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);
+            if (v2 != null) {
+                v2.numberType(_numberType);
             }
         }
-
-        @Override
-        public JsonSerializer<?> createContextual(SerializerProvider prov,
-                BeanProperty property) throws JsonMappingException
-        {
-            if (property != null) {
-                AnnotatedMember m = property.getMember();
-                if (m != null) {
-                    JsonFormat.Value format = prov.getAnnotationIntrospector().findFormat(m);
-                    if (format != null) {
-                        switch (format.getShape()) {
-                        case STRING:
-                            return ToStringSerializer.instance;
-                        default:
-                        }
+    }
+    /**
+     * Overridable method called to handle visitation of numeric values
+     */
+    protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint,
+            JsonParser.NumberType numberType) throws JsonMappingException
+    {
+        JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);
+        if (v2 != null) {
+            v2.numberType(numberType);
+        }
+    }
+    @Override
+    public JsonSerializer<?> createContextual(SerializerProvider prov,
+            BeanProperty property) throws JsonMappingException
+    {
+        if (property != null) {
+            AnnotatedMember m = property.getMember();
+            if (m != null) {
+                JsonFormat.Value format = prov.getAnnotationIntrospector().findFormat(m);
+                if (format != null) {
+                    switch (format.getShape()) {
+                    case STRING:
+                        return ToStringSerializer.instance;
+                    default:
                     }
                 }
             }
-            return this;
         }
+        return this;
     }
-    
-    /*
-    /**********************************************************
-    /* Concrete serializers, numerics
-    /**********************************************************
+}
+@JacksonStdImpl
+public final static class ShortSerializer extends Base<Short>
+{
+    final static ShortSerializer instance = new ShortSerializer();
+    public ShortSerializer() { super(Short.class, JsonParser.NumberType.INT, "number"); }
+    @Override
+    public void serialize(Short value, JsonGenerator gen, SerializerProvider provider) throws IOException {
+        gen.writeNumber(value.shortValue());
+    }
+}
+/**
+ * This is the special serializer for regular {@link java.lang.Integer}s
+ * (and primitive ints)
+ *<p>
+ * Since this is one of "native" types, no type information is ever
+ * included on serialization (unlike for most scalar types)
+ */
+@JacksonStdImpl
+public final static class IntegerSerializer extends Base<Object>
+{
+    public IntegerSerializer() { super(Integer.class, JsonParser.NumberType.INT ,"integer"); }
+    @Override
+    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
+        gen.writeNumber(((Integer) value).intValue());
+    }
+    // IMPORTANT: copied from `NonTypedScalarSerializerBase`
+    @Override
+    public void serializeWithType(Object value, JsonGenerator gen,
+            SerializerProvider provider, TypeSerializer typeSer) throws IOException {
+        // no type info, just regular serialization
+        serialize(value, gen, provider);            
+    }
+    /**
+     * Override of method that tries to add "native" type information
+     * for certain base types; but for numeric types we will
+     * instead use the generalized method.
      */
-
-    @JacksonStdImpl
-    public final static class ShortSerializer extends Base<Short>
+    @Override
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
     {
-        final static ShortSerializer instance = new ShortSerializer();
-
-        public ShortSerializer() { super(Short.class, JsonParser.NumberType.INT, "number"); }
-
-
-        @Override
-        public void serialize(Short value, JsonGenerator gen, SerializerProvider provider) throws IOException {
-            gen.writeNumber(value.shortValue());
-        }
+        _acceptJsonFormatVisitor(visitor, typeHint, JsonParser.NumberType.INT);
+    }
+}
+/**
+ * Similar to {@link IntegerSerializer}, but will not cast to Integer:
+ * instead, cast is to {@link java.lang.Number}, and conversion is
+ * by calling {@link java.lang.Number#intValue}.
+ */
+@JacksonStdImpl
+public final static class IntLikeSerializer extends Base<Number>
+{
+    final static IntLikeSerializer instance = new IntLikeSerializer();
+    public IntLikeSerializer() {
+        super(Number.class, JsonParser.NumberType.INT, "integer");
     }
-
     /**
-     * This is the special serializer for regular {@link java.lang.Integer}s
-     * (and primitive ints)
-     *<p>
-     * Since this is one of "native" types, no type information is ever
-     * included on serialization (unlike for most scalar types)
-     *<p>
-     * NOTE: as of 2.6, generic signature changed to Object, to avoid generation
-     * of bridge methods.
+     * Override of method that tries to add "native" type information
+     * for certain base types; but for numeric types we will
+     * instead use the generalized method.
      */
-    @JacksonStdImpl
-    public final static class IntegerSerializer extends Base<Object>
+    @Override
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
     {
-        public IntegerSerializer() { super(Integer.class, JsonParser.NumberType.INT ,"integer"); }
-    
-        @Override
-        public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
-            gen.writeNumber(((Integer) value).intValue());
-        }
-        
-        // IMPORTANT: copied from `NonTypedScalarSerializerBase`
-        @Override
-        public void serializeWithType(Object value, JsonGenerator gen,
-                SerializerProvider provider, TypeSerializer typeSer) throws IOException {
-            // no type info, just regular serialization
-            serialize(value, gen, provider);
-        }
-
+        _acceptJsonFormatVisitor(visitor, typeHint, JsonParser.NumberType.INT);
+    }
+    @Override
+    public void serialize(Number value, JsonGenerator gen, SerializerProvider provider) throws IOException {
+        gen.writeNumber(value.intValue());
+    }
+}
+@JacksonStdImpl
+public final static class LongSerializer extends Base<Object>
+{
+    final static LongSerializer instance = new LongSerializer();
+    public LongSerializer() { super(Long.class, JsonParser.NumberType.LONG, "number"); }
+    @Override
+    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
+        gen.writeNumber(((Long) value).longValue());
     }
-
     /**
-     * Similar to {@link IntegerSerializer}, but will not cast to Integer:
-     * instead, cast is to {@link java.lang.Number}, and conversion is
-     * by calling {@link java.lang.Number#intValue}.
+     * Override of method that tries to add "native" type information
+     * for certain base types; but for numeric types we will
+     * instead use the generalized method.
      */
-    @JacksonStdImpl
-    public final static class IntLikeSerializer extends Base<Number>
+    @Override
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
     {
-        final static IntLikeSerializer instance = new IntLikeSerializer();
-
-        public IntLikeSerializer() {
-            super(Number.class, JsonParser.NumberType.INT, "integer");
-        }
-
-
-        @Override
-        public void serialize(Number value, JsonGenerator gen, SerializerProvider provider) throws IOException {
-            gen.writeNumber(value.intValue());
-        }
+        _acceptJsonFormatVisitor(visitor, typeHint, JsonParser.NumberType.LONG);
     }
-
-    @JacksonStdImpl
-    public final static class LongSerializer extends Base<Object>
-    {
-
-        final static LongSerializer instance = new LongSerializer();
-
-        public LongSerializer() { super(Long.class, JsonParser.NumberType.LONG, "number"); }
-
-
-        @Override
-        public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
-            gen.writeNumber(((Long) value).longValue());
-        }
+}
+@JacksonStdImpl
+public final static class FloatSerializer extends Base<Object>
+{
+    final static FloatSerializer instance = new FloatSerializer();
+    public FloatSerializer() { super(Float.class, JsonParser.NumberType.FLOAT, "number"); }
+    @Override
+    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
+        gen.writeNumber(((Float) value).floatValue());
     }
-
-    @JacksonStdImpl
-    public final static class FloatSerializer extends Base<Object>
+    /**
+     * Override of method that tries to add "native" type information
+     * for certain base types; but for numeric types we will
+     * instead use the generalized method.
+     */
+    @Override
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
     {
-
-        final static FloatSerializer instance = new FloatSerializer();
-
-        public FloatSerializer() { super(Float.class, JsonParser.NumberType.FLOAT, "number"); }
-
-
-        @Override
-        public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
-            gen.writeNumber(((Float) value).floatValue());
-        }
+        _acceptJsonFormatVisitor(visitor, typeHint, JsonParser.NumberType.FLOAT);
+    }
+}
+/**
+ * This is the special serializer for regular {@link java.lang.Double}s
+ * (and primitive doubles)
+ *<p>
+ * Since this is one of "native" types, no type information is ever
+ * included on serialization (unlike for most scalar types as of 1.5)
+ */
+@JacksonStdImpl
+public final static class DoubleSerializer extends Base<Object>
+{
+    final static DoubleSerializer instance = new DoubleSerializer();
+    public DoubleSerializer() { super(Double.class, JsonParser.NumberType.DOUBLE, "number"); }
+    @Override
+    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
+        gen.writeNumber(((Double) value).doubleValue());
+    }
+    // IMPORTANT: copied from `NonTypedScalarSerializerBase`
+    @Override
+    public void serializeWithType(Object value, JsonGenerator gen,
+            SerializerProvider provider, TypeSerializer typeSer) throws IOException {
+        // no type info, just regular serialization
+        serialize(value, gen, provider);            
     }
-
     /**
-     * This is the special serializer for regular {@link java.lang.Double}s
-     * (and primitive doubles)
-     *<p>
-     * Since this is one of "native" types, no type information is ever
-     * included on serialization (unlike for most scalar types as of 1.5)
+     * Override of method that tries to add "native" type information
+     * for certain base types; but for numeric types we will
+     * instead use the generalized method.
      */
-    @JacksonStdImpl
-    public final static class DoubleSerializer extends Base<Object>
+    @Override
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
     {
-
-        final static DoubleSerializer instance = new DoubleSerializer();
-
-        public DoubleSerializer() { super(Double.class, JsonParser.NumberType.DOUBLE, "number"); }
-
-
-        @Override
-        public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
-            gen.writeNumber(((Double) value).doubleValue());
-        }
-
-        // IMPORTANT: copied from `NonTypedScalarSerializerBase`
-        @Override
-        public void serializeWithType(Object value, JsonGenerator gen,
-                SerializerProvider provider, TypeSerializer typeSer) throws IOException {
-            // no type info, just regular serialization
-            serialize(value, gen, provider);            
-        }
+        _acceptJsonFormatVisitor(visitor, typeHint, JsonParser.NumberType.DOUBLE);
     }
 }
\ No newline at end of file

public class NumberSerializers {
    protected NumberSerializers() {
    }
    public static void addAll(Map<String, JsonSerializer<?>> allDeserializers) {
        final JsonSerializer<?> intS = new IntegerSerializer();
        allDeserializers.put(Integer.class.getName(), intS);
        allDeserializers.put(Integer.TYPE.getName(), intS);
        allDeserializers.put(Long.class.getName(), LongSerializer.instance);
        allDeserializers.put(Long.TYPE.getName(), LongSerializer.instance);
        allDeserializers.put(Byte.class.getName(), IntLikeSerializer.instance);
        allDeserializers.put(Byte.TYPE.getName(), IntLikeSerializer.instance);
        allDeserializers.put(Short.class.getName(), ShortSerializer.instance);
        allDeserializers.put(Short.TYPE.getName(), ShortSerializer.instance);
        allDeserializers.put(Float.class.getName(), FloatSerializer.instance);
        allDeserializers.put(Float.TYPE.getName(), FloatSerializer.instance);
        allDeserializers.put(Double.class.getName(), DoubleSerializer.instance);
        allDeserializers.put(Double.TYPE.getName(), DoubleSerializer.instance);
    }
    protected abstract static class Base<T> extends StdScalarSerializer<T> implements ContextualSerializer {
        protected final JsonParser.NumberType _numberType;
        protected final String _schemaType;
        protected final boolean _isInt;
        protected Base(Class<?> cls, JsonParser.NumberType numberType, String schemaType) {
            super(cls, false);
            _numberType = numberType;
            _schemaType = schemaType;
            _isInt = (numberType == JsonParser.NumberType.INT) || (numberType == JsonParser.NumberType.LONG) || (numberType == JsonParser.NumberType.BIG_INTEGER);
        }
        @Override
        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {
            return createSchemaNode(_schemaType, true);
        }
        @Override
        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {
            if (_isInt) {
                JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);
                if (v2 != null) {
                    v2.numberType(_numberType);
                }
            } else {
                JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);
                if (v2 != null) {
                    v2.numberType(_numberType);
                }
            }
        }
        @Override
        public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {
            if (property != null) {
                AnnotatedMember m = property.getMember();
                if (m != null) {
                    JsonFormat.Value format = prov.getAnnotationIntrospector().findFormat(m);
                    if (format != null) {
                        switch (format.getShape()) {
                            case STRING:
                                return ToStringSerializer.instance;
                            default:
                        }
                    }
                }
            }
            return this;
        }
    }
    @JacksonStdImpl
    public final static class ShortSerializer extends Base<Short> {
        final static ShortSerializer instance = new ShortSerializer();
        public ShortSerializer() {
            super(Short.class, JsonParser.NumberType.INT, "number");
        }
        @Override
        public void serialize(Short value, JsonGenerator gen, SerializerProvider provider) throws IOException {
            gen.writeNumber(value.shortValue());
        }
    }
    @JacksonStdImpl
    public final static class IntegerSerializer extends Base<Integer> {
        public IntegerSerializer() {
            super(Integer.class, JsonParser.NumberType.INT, "integer");
        }
        @Override
        public void serialize(Integer value, JsonGenerator gen, SerializerProvider provider) throws IOException {
            gen.writeNumber(value.intValue());
        }
        @Override
        public void serializeWithType(Integer value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {
            gen.writeNumber(value.intValue());
        }
    }
    @JacksonStdImpl
    public final static class IntLikeSerializer extends Base<Number> {
        final static IntLikeSerializer instance = new IntLikeSerializer();
        public IntLikeSerializer() {
            super(Number.class, JsonParser.NumberType.INT, "integer");
        }
        @Override
        public void serialize(Number value, JsonGenerator gen, SerializerProvider provider) throws IOException {
            gen.writeNumber(value.intValue());
        }
    }
    @JacksonStdImpl
    public final static class LongSerializer extends Base<Long> {
        final static LongSerializer instance = new LongSerializer();
        public LongSerializer() {
            super(Long.class, JsonParser.NumberType.LONG, "number");
        }
        @Override
        public void serialize(Long value, JsonGenerator gen, SerializerProvider provider) throws IOException {
            gen.writeNumber(value.longValue());
        }
    }
    @JacksonStdImpl
    public final static class FloatSerializer extends Base<Float> {
        final static FloatSerializer instance = new FloatSerializer();
        public FloatSerializer() {
            super(Float.class, JsonParser.NumberType.FLOAT, "number");
        }
        @Override
        public void serialize(Float value, JsonGenerator gen, SerializerProvider provider) throws IOException {
            gen.writeNumber(value.floatValue());
        }
    }
    @JacksonStdImpl
    public final static class DoubleSerializer extends Base<Double> {
        final static DoubleSerializer instance = new DoubleSerializer();
        public DoubleSerializer() {
            super(Double.class, JsonParser.NumberType.DOUBLE, "number");
        }
        @Override
        public void serialize(Double value, JsonGenerator gen, SerializerProvider provider) throws IOException {
            gen.writeNumber(value.doubleValue());
        }
        @Override
        public void serializeWithType(Double value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {
            gen.writeNumber(value.doubleValue());
        }
    }
}
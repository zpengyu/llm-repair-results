diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
index 6d0db8734..96aaf377a 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
@@ -139,10 +124,9 @@ public class NumberSerializers
      * of bridge methods.
      */
     @JacksonStdImpl
-    public final static class IntegerSerializer extends Base<Object>
+    public final static class IntegerSerializer extends Base<Integer>
     {
         public IntegerSerializer() { super(Integer.class, JsonParser.NumberType.INT ,"integer"); }
-    
         @Override
         public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
             gen.writeNumber(((Integer) value).intValue());
@@ -178,31 +156,21 @@ public class NumberSerializers
             gen.writeNumber(value.intValue());
         }
     }
-
     @JacksonStdImpl
-    public final static class LongSerializer extends Base<Object>
+    public final static class LongSerializer extends Base<Long>
     {
-
         final static LongSerializer instance = new LongSerializer();
-
         public LongSerializer() { super(Long.class, JsonParser.NumberType.LONG, "number"); }
-
-
         @Override
         public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
             gen.writeNumber(((Long) value).longValue());
         }
     }
-
     @JacksonStdImpl
-    public final static class FloatSerializer extends Base<Object>
+    public final static class FloatSerializer extends Base<Float>
     {
-
         final static FloatSerializer instance = new FloatSerializer();
-
         public FloatSerializer() { super(Float.class, JsonParser.NumberType.FLOAT, "number"); }
-
-
         @Override
         public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
             gen.writeNumber(((Float) value).floatValue());
@@ -217,14 +184,10 @@ public class NumberSerializers
      * included on serialization (unlike for most scalar types as of 1.5)
      */
     @JacksonStdImpl
-    public final static class DoubleSerializer extends Base<Object>
+    public final static class DoubleSerializer extends Base<Double>
     {
-
         final static DoubleSerializer instance = new DoubleSerializer();
-
         public DoubleSerializer() { super(Double.class, JsonParser.NumberType.DOUBLE, "number"); }
-
-
         @Override
         public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
             gen.writeNumber(((Double) value).doubleValue());

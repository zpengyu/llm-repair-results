abstract class TreeBuilder {
    CharacterReader reader;
    Tokeniser tokeniser;
    protected Document doc; // current doc we are building into
    protected ArrayList<Element> stack; // the stack of open elements
    protected String baseUri; // current base uri, for creating new elements
    protected Token currentToken; // currentToken is used only for error tracking.
    protected ParseErrorList errors; // null when not tracking errors
    private Token.StartTag start = new Token.StartTag(); // start tag to process
    private Token.EndTag end  = new Token.EndTag();
    protected void initialiseParse(String input, String baseUri, ParseErrorList errors) {
        Validate.notNull(input, "String input must not be null");
        Validate.notNull(baseUri, "BaseURI must not be null");
        doc = new Document(baseUri);
        reader = new CharacterReader(input);
        this.errors = errors;
        tokeniser = new Tokeniser(reader, errors);
        stack = new ArrayList<Element>(32);
        this.baseUri = baseUri;
    }
    Document parse(String input, String baseUri) {
        return parse(input, baseUri, ParseErrorList.noTracking());
    }
    Document parse(String input, String baseUri, ParseErrorList errors) {
        initialiseParse(input, baseUri, errors);
        runParser();
        return doc;
    }
    protected void runParser() {
        while (true) {
            Token token = tokeniser.read();
            process(token);
            token.reset();
            if (token.type == Token.TokenType.EOF)
                break;
        }
    }
    protected abstract boolean process(Token token);
    protected boolean processStartTag(String name) {
        return process(start.reset().name(name));
    }
    public boolean processStartTag(String name, Attributes attrs) {
        start.reset();
        start.nameAttr(name, attrs);
        return process(start);
    }
    protected boolean processEndTag(String name) {
        return process(end.reset().name(name));
    }
    protected Element currentElement() {
        int size = stack.size();
        return size > 0 ? stack.get(size-1) : null;
    }
    Element pop() {
        int size = stack.size();
        return size > 0 ? stack.remove(size-1) : null;
    }
    void push(Element element) {
        stack.add(element);
    }
    Element insert(StartTag startTag) {
        Element element = new Element(Tag.valueOf(startTag.name(), ParseSettings.preserveCase), baseUri, startTag.attributes);
        insert(element);
        return element;
    }
    void insert(Element element) {
        currentElement().appendChild(element);
        stack.add(element);
    }
    void insert(Character character) {
        currentElement().appendChild(new TextNode(character.getData(), baseUri));
    }
    void error(Token token) {
        if (errors.canAddError())
            errors.add(new ParseError(reader.pos(), "Unexpected character '%s' in input state [%s]", token.getData(), tokeniser.getState()));
    }
    void eofError(Token token) {
        if (errors.canAddError())
            errors.add(new ParseError(reader.pos(), "Unexpectedly reached end of file (EOF) in input state [%s]", tokeniser.getState()));
    }
}
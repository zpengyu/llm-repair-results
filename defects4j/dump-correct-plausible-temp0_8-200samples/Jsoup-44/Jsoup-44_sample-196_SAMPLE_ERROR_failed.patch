diff --git a/src/main/java/org/jsoup/parser/TreeBuilder.java b/src/main/java/org/jsoup/parser/TreeBuilder.java
index f4faad4..22799bc 100644
--- a/src/main/java/org/jsoup/parser/TreeBuilder.java
+++ b/src/main/java/org/jsoup/parser/TreeBuilder.java
@@ -10,70 +10,6 @@ import java.util.ArrayList;
 /**
  * @author Jonathan Hedley
  */
-abstract class TreeBuilder {
-    CharacterReader reader;
-    Tokeniser tokeniser;
-    protected Document doc; // current doc we are building into
-    protected ArrayList<Element> stack; // the stack of open elements
-    protected String baseUri; // current base uri, for creating new elements
-    protected Token currentToken; // currentToken is used only for error tracking.
-    protected ParseErrorList errors; // null when not tracking errors
-
-    private Token.StartTag start = new Token.StartTag(); // start tag to process
-    private Token.EndTag end  = new Token.EndTag();
-
-    protected void initialiseParse(String input, String baseUri, ParseErrorList errors) {
-        Validate.notNull(input, "String input must not be null");
-        Validate.notNull(baseUri, "BaseURI must not be null");
-
-        doc = new Document(baseUri);
-        reader = new CharacterReader(input);
-        this.errors = errors;
-        tokeniser = new Tokeniser(reader, errors);
-        stack = new ArrayList<Element>(32);
-        this.baseUri = baseUri;
-    }
-
-    Document parse(String input, String baseUri) {
-        return parse(input, baseUri, ParseErrorList.noTracking());
-    }
-
-    Document parse(String input, String baseUri, ParseErrorList errors) {
-        initialiseParse(input, baseUri, errors);
-        runParser();
-        return doc;
-    }
-
-    protected void runParser() {
-        while (true) {
-            Token token = tokeniser.read();
-            process(token);
-            token.reset();
-
-            if (token.type == Token.TokenType.EOF)
-                break;
-        }
-    }
-
-    protected abstract boolean process(Token token);
-
-    protected boolean processStartTag(String name) {
-        return process(start.reset().name(name));
-    }
-
-    public boolean processStartTag(String name, Attributes attrs) {
-        start.reset();
-        start.nameAttr(name, attrs);
-        return process(start);
-    }
-
-    protected boolean processEndTag(String name) {
-        return process(end.reset().name(name));
-    }
-
-
-    protected Element currentElement() {
-        int size = stack.size();
-        return size > 0 ? stack.get(size-1) : null;
-    }
+public boolean processEndTag(String name) {
+    return process(end.reset().nameAttr(name, Attributes.EMPTY_ATTRIBUTE));
 }
\ No newline at end of file

diff --git a/src/main/java/org/jsoup/parser/TreeBuilder.java b/src/main/java/org/jsoup/parser/TreeBuilder.java
index f4faad4..8fb1cb8 100644
--- a/src/main/java/org/jsoup/parser/TreeBuilder.java
+++ b/src/main/java/org/jsoup/parser/TreeBuilder.java
@@ -18,10 +18,8 @@ abstract class TreeBuilder {
     protected String baseUri; // current base uri, for creating new elements
     protected Token currentToken; // currentToken is used only for error tracking.
     protected ParseErrorList errors; // null when not tracking errors
-
     private Token.StartTag start = new Token.StartTag(); // start tag to process
-    private Token.EndTag end  = new Token.EndTag();
-
+    private Token.EndTag end = new Token.EndTag();
     protected void initialiseParse(String input, String baseUri, ParseErrorList errors) {
         Validate.notNull(input, "String input must not be null");
         Validate.notNull(baseUri, "BaseURI must not be null");
@@ -70,10 +59,22 @@ abstract class TreeBuilder {
     protected boolean processEndTag(String name) {
         return process(end.reset().name(name));
     }
-
-
+    /**
+     * Adds the base Uri to scope when appropriate.
+     * @param baseUri base uri
+     * @param token token to scope the base uri by
+     */
+    protected void addBaseUri(String baseUri, Token token) {
+        if (baseUri != null && !baseUri.equals("")) { // don't add if empty.
+            Element lastStack = currentElement();
+            if (lastStack == null) // doc level base only
+                doc.baseUri(baseUri);
+            else // element level: needs to be computed before children are computed, so no scope
+                lastStack.baseUri(baseUri);
+        }
+    }
     protected Element currentElement() {
         int size = stack.size();
-        return size > 0 ? stack.get(size-1) : null;
+        return size > 0 ? stack.get(size - 1) : null;
     }
 }
\ No newline at end of file

diff --git a/src/main/java/org/jsoup/parser/TreeBuilder.java b/src/main/java/org/jsoup/parser/TreeBuilder.java
index f4faad4..2da68fa 100644
--- a/src/main/java/org/jsoup/parser/TreeBuilder.java
+++ b/src/main/java/org/jsoup/parser/TreeBuilder.java
@@ -18,10 +18,8 @@ abstract class TreeBuilder {
     protected String baseUri; // current base uri, for creating new elements
     protected Token currentToken; // currentToken is used only for error tracking.
     protected ParseErrorList errors; // null when not tracking errors
-
     private Token.StartTag start = new Token.StartTag(); // start tag to process
-    private Token.EndTag end  = new Token.EndTag();
-
+    private Token.EndTag end = new Token.EndTag();
     protected void initialiseParse(String input, String baseUri, ParseErrorList errors) {
         Validate.notNull(input, "String input must not be null");
         Validate.notNull(baseUri, "BaseURI must not be null");
@@ -54,9 +47,14 @@ abstract class TreeBuilder {
                 break;
         }
     }
-
     protected abstract boolean process(Token token);
-
+    protected boolean process(Token token, HtmlTreeBuilderState state) {
+        if (token.type == Token.TokenType.StartTag && token.asStartTag().name().equals(state.getName())) {
+            return true;
+        } else {
+            return false;
+        }
+    }
     protected boolean processStartTag(String name) {
         return process(start.reset().name(name));
     }
@@ -70,10 +66,8 @@ abstract class TreeBuilder {
     protected boolean processEndTag(String name) {
         return process(end.reset().name(name));
     }
-
-
     protected Element currentElement() {
         int size = stack.size();
-        return size > 0 ? stack.get(size-1) : null;
+        return size > 0 ? stack.get(size - 1) : null;
     }
 }
\ No newline at end of file

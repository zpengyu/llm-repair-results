    void decode(byte[] in, int inPos, int inAvail) {
        if (eof) {
            return;
        }
        if (inAvail < 0) {
            eof = true;
            if (0 == modulus && lineLength == 0) {
                return;
            }
            ensureBufferSize(decodeSize);
            int savedPos = pos;
            switch (modulus) {
                case 1 : // 6 bits - ignore entirely
                    // 1 byte
                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                    // 2 byte
                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                    // 3 byte
                    buffer[pos++] = PAD;
                    // 4 byte
                    buffer[pos++] = PAD;
                    break;
                case 2 : // 12 bits
                    // 1 byte
                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                    // 2 byte
                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                    // 3 byte
                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                    // 4 byte
                    buffer[pos++] = PAD;
                    break;
                case 3 : // 18 bits
                    // 1 byte
                    buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                    // 2 byte
                    buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
                    // 3 byte
                    buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
                    // 4 byte
                    buffer[pos++] = encodeTable[x & MASK_6BITS];
                    break;
            }
            currentLinePos += pos - savedPos; // keep track of current line position
            // if currentPos == 0 we are at the start of a line, so don't add CRLF
            if (lineLength > 0 && currentLinePos > 0) {
                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                pos += lineSeparator.length;
            }
        } else {
            for (int i = 0; i < inAvail; i++) {
                if (buffer == null || buffer.length - pos < decodeSize) {
                    resizeBuffer();
                }
                byte b = in[inPos++];
                if (b == PAD) {
                    // We're done.
                    eof = true;
                    break;
                } else {
                    if (b >= 0 && b < DECODE_TABLE.length) {
                        int result = DECODE_TABLE[b];
                        if (result >= 0) {
                            modulus = (++modulus) % 4;
                            x = (x << 6) + result;
                            if (modulus == 0) {
                                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                                buffer[pos++] = (byte) (x & MASK_8BITS);
                            }
                        }
                    }
                }
            }
            // Two forms of EOF as far as base64 decoder is concerned: actual
            // EOF (-1) and first time '=' character is encountered in stream.
            // This approach makes the '=' padding characters completely optional.
            if (eof && modulus != 0) {
                ensureBufferSize(decodeSize);
                switch (modulus) {
                    case 2 : // 6 bits - ignore entirely
                        // 1 byte
                        buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                        // 2 byte
                        buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                        // 3 byte
                        buffer[pos++] = PAD;
                        // 4 byte
                        buffer[pos++] = PAD;
                        break;
                    case 3 : // 12 bits
                        // 1 byte
                        buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                        // 2 byte
                        buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                        // 3 byte
                        buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                        // 4 byte
                        buffer[pos++] = PAD;
                        break;
                }
            }
        }
    }
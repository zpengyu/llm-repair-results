diff --git a/source/org/jfree/chart/block/BorderArrangement.java b/source/org/jfree/chart/block/BorderArrangement.java
index 730aeb3..e133a63 100644
--- a/source/org/jfree/chart/block/BorderArrangement.java
+++ b/source/org/jfree/chart/block/BorderArrangement.java
@@ -419,47 +419,47 @@ public class BorderArrangement implements Arrangement, Serializable {
      *
      * @return The container size after the arrangement.
      */
-    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
+    protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
         double[] w = new double[5];
         double[] h = new double[5];
-        w[0] = constraint.getWidth();
+        h[0] = constraint.getHeight();
         if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
+            RectangleConstraint c1 = new RectangleConstraint(null, h[0],
                     LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+                    new Range(0.0, constraint.getWidth()),
                     LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
+            w[0] = size.width;
         }
-        w[1] = w[0];
+        h[1] = h[0];
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
+            RectangleConstraint c2 = new RectangleConstraint(null, h[0],
                     LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                    constraint.getWidth() - w[0]), LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
+            w[1] = size.width;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+        w[2] = constraint.getWidth() - w[1] - w[0];
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
+            RectangleConstraint c3 = new RectangleConstraint(
+                    new Range(0.0, constraint.getHeight()), 0.0,
+                    LengthConstraintType.RANGE, w[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+            h[2] = size.height;
         }
-        h[3] = h[2];
+        w[3] = w[2];
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
+            RectangleConstraint c4 = new RectangleConstraint(
+                    new Range(0.0, constraint.getHeight() - h[2]), 0.0,
+                    LengthConstraintType.RANGE, w[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+            h[3] = size.height;
         }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+        h[4] = constraint.getHeight() - h[3] - h[2];
+        w[4] = w[2];
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
@@ -470,7 +469,7 @@ public class BorderArrangement implements Arrangement, Serializable {
                     h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
+            this.bottomBlock.setBounds(new Rectangle2D.Double(w[0] + w[2], 0.0,
                     w[1], h[1]));
         }
         if (this.leftBlock != null) {
@@ -478,11 +477,11 @@ public class BorderArrangement implements Arrangement, Serializable {
                     h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[0], h[0] + h[2],
                     w[3], h[3]));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[0], h[0], w[4],
                     h[4]));
         }
         return new Size2D(constraint.getWidth(), constraint.getHeight());

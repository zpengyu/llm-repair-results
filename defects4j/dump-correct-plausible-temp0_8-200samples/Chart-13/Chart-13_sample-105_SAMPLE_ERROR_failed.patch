diff --git a/source/org/jfree/chart/block/BorderArrangement.java b/source/org/jfree/chart/block/BorderArrangement.java
index 730aeb3..f3be275 100644
--- a/source/org/jfree/chart/block/BorderArrangement.java
+++ b/source/org/jfree/chart/block/BorderArrangement.java
@@ -425,42 +425,39 @@ public class BorderArrangement implements Arrangement, Serializable {
         double[] h = new double[5];
         w[0] = constraint.getWidth();
         if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+            RectangleConstraint c1 = constraint.toFixedHeight(
+                    this.topBlock.arrange(g2, RectangleConstraint.NONE)
+                    .getHeight());
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
         w[1] = w[0];
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+            RectangleConstraint c2 = constraint.toFixedHeight(
+                    this.bottomBlock.arrange(g2, RectangleConstraint.NONE)
+                    .getHeight());
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
         h[2] = constraint.getHeight() - h[1] - h[0];
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+            RectangleConstraint c3 = constraint.toFixedWidth(
+                    this.leftBlock.arrange(g2, RectangleConstraint.NONE)
+                    .getWidth());
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
         }
         h[3] = h[2];
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+            RectangleConstraint c4 = constraint.toFixedWidth(
+                    this.rightBlock.arrange(g2, RectangleConstraint.NONE)
+                    .getWidth());
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
         }
         h[4] = h[2];
         w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+        RectangleConstraint c5 = constraint.toFixedSize(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }

diff --git a/source/org/jfree/chart/block/BorderArrangement.java b/source/org/jfree/chart/block/BorderArrangement.java
index 730aeb3..af29e0a 100644
--- a/source/org/jfree/chart/block/BorderArrangement.java
+++ b/source/org/jfree/chart/block/BorderArrangement.java
@@ -419,75 +419,84 @@ public class BorderArrangement implements Arrangement, Serializable {
      *
      * @return The container size after the arrangement.
      */
-    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
+    protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
-        double[] w = new double[5];
-        double[] h = new double[5];
-        w[0] = constraint.getWidth();
+        RectangleConstraint contentConstraint = toContentConstraint(constraint);
+        LengthConstraintType w = contentConstraint.getWidthConstraintType();
+        LengthConstraintType h = contentConstraint.getHeightConstraintType();
+        RectangleConstraint contentConstraintW = contentConstraint;
+        RectangleConstraint contentConstraintH = contentConstraint;
+        if (w == LengthConstraintType.RANGE) {
+            contentConstraintW = contentConstraint.toFixedWidth(
+                    contentConstraint.getWidthRange().getUpperBound());
+        }
+        else if (w == LengthConstraintType.FIXED) {
+            throw new RuntimeException("Not implemented.");
+        }
+        if (h == LengthConstraintType.RANGE) {
+            contentConstraintH = contentConstraint.toFixedHeight(
+                    contentConstraint.getHeightRange().getUpperBound());
+        }
+        else if (h == LengthConstraintType.FIXED) {
+            throw new RuntimeException("Not implemented.");
+        }
+        double[] ww = new double[4];
+        double[] hh = new double[4];
         if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
-            Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
+            Size2D size = this.topBlock.arrange(g2, contentConstraintW);
+            hh[0] = size.height;
+            ww[0] = size.width;
         }
-        w[1] = w[0];
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
-            Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
+            Size2D size = this.bottomBlock.arrange(g2, contentConstraintW);
+            hh[1] = size.height;
+            ww[1] = size.width;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+            Size2D size = this.leftBlock.arrange(g2, contentConstraintH);
+            hh[2] = size.height;
+            ww[2] = size.width;
         }
-        h[3] = h[2];
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+            Size2D size = this.rightBlock.arrange(g2, contentConstraintH);
+            hh[3] = size.height;
+            ww[3] = size.width;
         }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+        RectangleConstraint c5 = new RectangleConstraint(
+                contentConstraint.getWidth() - ww[2] - ww[3],
+                contentConstraint.getHeight() - hh[0] - hh[1]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }
-
+        double x = 0.0;
+        double y = 0.0;
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
-        }
-        if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.topBlock.setBounds(new Rectangle2D.Double(x, y, ww[0], hh[0]));
         }
+        y = y + hh[0];
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(x, y, ww[2],
+                    hh[2]));
+        }
+        x = x + ww[2];
+        if (this.centerBlock != null) {
+            this.centerBlock.setBounds(new Rectangle2D.Double(x, y,
+                    contentConstraint.getWidth() - ww[2] - ww[3],
+                    contentConstraint.getHeight() - hh[0] - hh[1]));
         }
+        x = x + ww[2] + ww[3];
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            this.rightBlock.setBounds(new Rectangle2D.Double(x, y, ww[3],
+                    hh[3]));
         }
-        if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+        y = y + hh[2] + hh[3];
+        if (this.bottomBlock != null) {
+            this.bottomBlock.setBounds(new Rectangle2D.Double(x, y, ww[1],
+                    hh[1]));
         }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+        return new Size2D(calculateTotalWidth(ww),
+                calculateTotalHeight(hh));
     }
-
     /**
      * Clears the layout.
      */

diff --git a/src/main/java/org/jsoup/helper/DataUtil.java b/src/main/java/org/jsoup/helper/DataUtil.java
index e4fa18c..46b8ed5 100644
--- a/src/main/java/org/jsoup/helper/DataUtil.java
+++ b/src/main/java/org/jsoup/helper/DataUtil.java
@@ -92,7 +92,7 @@ public final class DataUtil {
         }
     }
 
-    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException  {
+    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {
         if (input == null) // empty body
             return new Document(baseUri);
         input = ConstrainableInputStream.wrap(input, bufferSize, 0);
@@ -168,7 +162,62 @@ public final class DataUtil {
             }
             Charset charset = Charset.forName(charsetName);
             doc.outputSettings().charset(charset);
-                // some charsets can read but not encode; switch to an encodable charset and update the meta el
+            // some charsets can read but not encode; switch to an encodable charset and update the meta el
+        } else {
+            // some charsets can read but not encode; switch to an encodable charset and update the meta el
+            Document doc2 = null;
+            boolean changed = false;
+            String foundCharset = null;
+            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+            Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");
+            for (Element meta : metaElements) {
+                if (meta.hasAttr("http-equiv"))
+                    foundCharset = getCharsetFromContentType(meta.attr("content"));
+                if (foundCharset == null && meta.hasAttr("charset"))
+                    foundCharset = meta.attr("charset");
+                if (foundCharset != null)
+                    break;
+            }
+            // look for <?xml encoding='ISO-8859-1'?>
+            if (foundCharset == null && doc.childNodeSize() > 0) {
+                Node first = doc.childNode(0);
+                XmlDeclaration decl = null;
+                if (first instanceof XmlDeclaration)
+                    decl = (XmlDeclaration) first;
+                else if (first instanceof Comment) {
+                    Comment comment = (Comment) first;
+                    if (comment.isXmlDeclaration())
+                        decl = comment.asXmlDeclaration();
+                }
+                if (decl != null) {
+                    if (decl.name().equalsIgnoreCase("xml"))
+                        foundCharset = decl.attr("encoding");
+                }
+            }
+            foundCharset = validateCharset(foundCharset);
+            if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)
+                foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+                charsetName = foundCharset;
+                changed = true;
+            }
+            // if changed, re-read using the new encoding
+            if (changed) {
+                input.reset();
+                BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);
+                if (bomCharset != null && bomCharset.offset) // creating the buffered reader ignores the input pos, so must skip here
+                    reader.skip(1);
+                try {
+                    doc2 = parser.parseInput(reader, baseUri);
+                } catch (UncheckedIOException e) {
+                    // io exception when parsing (not seen before because reading the stream as we go)
+                    throw e.ioException();
+                }
+                Charset charset = Charset.forName(charsetName);
+                doc2.outputSettings().charset(charset);
+            }
+            if (changed) {
+                return doc2;
+            }
         }
         input.close();
         return doc;

diff --git a/src/main/java/org/jsoup/helper/DataUtil.java b/src/main/java/org/jsoup/helper/DataUtil.java
index e4fa18c..0ce3930 100644
--- a/src/main/java/org/jsoup/helper/DataUtil.java
+++ b/src/main/java/org/jsoup/helper/DataUtil.java
@@ -92,7 +92,7 @@ public final class DataUtil {
         }
     }
 
-    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException  {
+    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {
         if (input == null) // empty body
             return new Document(baseUri);
         input = ConstrainableInputStream.wrap(input, bufferSize, 0);
@@ -154,6 +148,31 @@ public final class DataUtil {
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         }
+        if (doc == null) {
+            if (charsetName == null)
+                charsetName = defaultCharset;
+            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);
+            if (bomCharset != null && bomCharset.offset) // creating the buffered reader ignores the input pos, so must skip here
+                reader.skip(1);
+            try {
+                doc = parser.parseInput(reader, baseUri);
+            } catch (UncheckedIOException e) {
+                // io exception when parsing (not seen before because reading the stream as we go)
+                throw e.ioException();
+            }
+            Charset charset = Charset.forName(charsetName);
+            doc.outputSettings().charset(charset);
+            // some charsets can read but not encode; switch to an encodable charset and update the meta el
+            // determines encodable charset, checking against the found charset and then defaulting
+            foundCharset = updateMetaCharset(doc, firstBytes, charset);
+            if (charsetName != null && !charsetName.equals(foundCharset)) {
+                foundCharset = foundCharset == null ? defaultCharset : foundCharset;
+                doc = null;
+                charsetName = foundCharset;
+            } else if (!fullyRead) {
+                doc = null;
+            }
+        }
         if (doc == null) {
             if (charsetName == null)
                 charsetName = defaultCharset;
@@ -169,6 +188,13 @@ public final class DataUtil {
             Charset charset = Charset.forName(charsetName);
             doc.outputSettings().charset(charset);
                 // some charsets can read but not encode; switch to an encodable charset and update the meta el
+            // determines encodable charset, checking against the found charset and then defaulting
+            foundCharset = updateMetaCharset(doc, firstBytes, charset);
+            if (charsetName != null && !charsetName.equals(foundCharset)) {
+                foundCharset = foundCharset == null ? defaultCharset : foundCharset;
+                doc = null;
+                charsetName = foundCharset;
+            }
         }
         input.close();
         return doc;

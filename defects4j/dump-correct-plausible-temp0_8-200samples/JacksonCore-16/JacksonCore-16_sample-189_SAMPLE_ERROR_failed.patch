diff --git a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
index bed27f2b..cc661416 100644
--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
@@ -32,7 +30,7 @@ public class JsonParserSequence extends JsonParserDelegate
      *
      * @since 2.8
      */
-
+    protected boolean _hasToken;
     /*
      *******************************************************
      * Construction
@@ -103,15 +95,54 @@ public class JsonParserSequence extends JsonParserDelegate
     @Override
     public JsonToken nextToken() throws IOException, JsonParseException
     {
-        JsonToken t = delegate.nextToken();
-        if (t != null) return t;
-        while (switchToNext()) {
-            t = delegate.nextToken();
+        if (!_hasToken) {
+            JsonToken t = delegate.nextToken();
             if (t != null) return t;
+            while (switchToNext()) {
+                t = delegate.nextToken();
+                if (t != null) return t;
+            }
+            return null;
+        }
+        _hasToken = false;
+        return _currToken;
+    }
+    @Override
+    public JsonToken nextValue() throws IOException, JsonParseException
+    {
+        JsonToken t = nextToken();
+        if (t == JsonToken.FIELD_NAME) {
+            t = nextToken();
+        }
+        return t;
+    }
+    @Override
+    public JsonParser skipChildren() throws IOException, JsonParseException
+    {
+        if ((_currToken != JsonToken.START_OBJECT)
+                && (_currToken != JsonToken.START_ARRAY)) {
+            return this;
+        }
+        int open = 1;
+        /* Since proper matching of start/end markers is handled
+         * by nextToken(), we'll just count nesting levels here.
+         */
+        while (true) {
+            JsonToken t = nextToken();
+            if (t == null) {
+                _handleEOF();
+                /* should never get this far, but just in case: */
+                return this;
+            }
+            if (t.isStructStart()) {
+                ++open;
+            } else if (t.isStructEnd()) {
+                if (--open == 0) {
+                    return this;
+                }
+            }
         }
-        return null;
     }
-
     /*
     /*******************************************************
     /* Additional extended API
@@ -126,7 +156,23 @@ public class JsonParserSequence extends JsonParserDelegate
     public int containedParsersCount() {
         return _parsers.length;
     }
-    
+    /*
+    /*******************************************************
+    /* Overridden internal methods
+    /*******************************************************
+     */
+    @Override
+    protected void _handleEOF() throws JsonParseException
+    {
+        // no way to figure out what's the cause...
+        JsonToken next = nextToken();
+        if (next == null) {
+            _currToken = null;
+            return;
+        }
+        _currToken = next;
+        _hasToken = true;
+    }
     /*
     /*******************************************************
     /* Helper methods

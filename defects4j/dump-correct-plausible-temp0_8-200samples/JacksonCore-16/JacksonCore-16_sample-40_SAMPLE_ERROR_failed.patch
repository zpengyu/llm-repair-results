diff --git a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
index bed27f2b..392d483d 100644
--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
@@ -32,7 +30,7 @@ public class JsonParserSequence extends JsonParserDelegate
      *
      * @since 2.8
      */
-
+    protected boolean _hasToken;
     /*
      *******************************************************
      * Construction
@@ -103,15 +95,56 @@ public class JsonParserSequence extends JsonParserDelegate
     @Override
     public JsonToken nextToken() throws IOException, JsonParseException
     {
+        if (_hasToken) {
+            _hasToken = false;
+            return _currToken;
+        }
         JsonToken t = delegate.nextToken();
-        if (t != null) return t;
+        if (t != null) {
+            return t;
+        }
         while (switchToNext()) {
             t = delegate.nextToken();
-            if (t != null) return t;
+            if (t != null) {
+                return t;
+            }
         }
         return null;
     }
-
+    @Override
+    public JsonToken currentToken() {
+        JsonToken t = _currToken;
+        return (t == JsonToken.NOT_AVAILABLE) ? delegate.currentToken() : t;
+    }
+    @Override
+    public int currentTokenId() {
+        JsonToken t = _currToken;
+        return (t == JsonToken.NOT_AVAILABLE) ? delegate.currentTokenId() : t.id();
+    }
+    @Override
+    public boolean hasCurrentToken() {
+        return _currToken != JsonToken.NOT_AVAILABLE || delegate.hasCurrentToken();
+    }
+    @Override
+    public boolean hasTokenId(int id) {
+        JsonToken t = _currToken;
+        return (t == JsonToken.NOT_AVAILABLE) ? delegate.hasTokenId(id) : (t.id() == id);
+    }
+    @Override
+    public boolean hasToken(JsonToken t) {
+        JsonToken curr = _currToken;
+        return (curr == JsonToken.NOT_AVAILABLE) ? delegate.hasToken(t) : (curr == t);
+    }
+    @Override
+    public boolean isExpectedStartArrayToken() {
+        JsonToken curr = _currToken;
+        return (curr == JsonToken.NOT_AVAILABLE) ? delegate.isExpectedStartArrayToken() : (curr == JsonToken.START_ARRAY);
+    }
+    @Override
+    public boolean isExpectedStartObjectToken() {
+        JsonToken curr = _currToken;
+        return (curr == JsonToken.NOT_AVAILABLE) ? delegate.isExpectedStartObjectToken() : (curr == JsonToken.START_OBJECT);
+    }
     /*
     /*******************************************************
     /* Additional extended API

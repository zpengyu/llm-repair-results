diff --git a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
index bed27f2b..c8d14f4d 100644
--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
@@ -32,7 +30,7 @@ public class JsonParserSequence extends JsonParserDelegate
      *
      * @since 2.8
      */
-
+    protected boolean _hasToken;
     /*
      *******************************************************
      * Construction
@@ -103,6 +95,10 @@ public class JsonParserSequence extends JsonParserDelegate
     @Override
     public JsonToken nextToken() throws IOException, JsonParseException
     {
+        if (_hasToken) {
+            _hasToken = false;
+            return _currToken;
+        }
         JsonToken t = delegate.nextToken();
         if (t != null) return t;
         while (switchToNext()) {
@@ -111,7 +107,42 @@ public class JsonParserSequence extends JsonParserDelegate
         }
         return null;
     }
-
+    @Override
+    public void overrideCurrentName(String name)
+    {
+        // not sure if it makes sense to delegate to second parser here?
+        delegate.overrideCurrentName(name);
+    }
+    @Override
+    public String getCurrentName() throws IOException {
+        String name = delegate.getCurrentName();
+        if (name != null) {
+            return name;
+        }
+        if (_nextParser < _parsers.length) {
+            return _parsers[_nextParser].getCurrentName();
+        }
+        return null;
+    }
+    @Override
+    public void overrideCurrentValue(Object value) {
+        delegate.overrideCurrentValue(value);
+    }
+    @Override
+    public Object getCurrentValue() {
+        Object ob = delegate.getCurrentValue();
+        if (ob != null) {
+            return ob;
+        }
+        if (_nextParser < _parsers.length) {
+            return _parsers[_nextParser].getCurrentValue();
+        }
+        return null;
+    }
+    @Override
+    public JsonStreamContext getParsingContext() {
+        return delegate.getParsingContext();
+    }
     /*
     /*******************************************************
     /* Additional extended API

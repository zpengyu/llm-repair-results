diff --git a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
index bed27f2b..144ccd27 100644
--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
@@ -32,7 +30,7 @@ public class JsonParserSequence extends JsonParserDelegate
      *
      * @since 2.8
      */
-
+    protected boolean _hasToken;
     /*
      *******************************************************
      * Construction
@@ -103,15 +95,52 @@ public class JsonParserSequence extends JsonParserDelegate
     @Override
     public JsonToken nextToken() throws IOException, JsonParseException
     {
-        JsonToken t = delegate.nextToken();
-        if (t != null) return t;
-        while (switchToNext()) {
-            t = delegate.nextToken();
+        if (!_hasToken) {
+            JsonToken t = delegate.nextToken();
             if (t != null) return t;
+            while (switchToNext()) {
+                t = delegate.nextToken();
+                if (t != null) return t;
+            }
+            return null;
+        }
+        _hasToken = false;
+        return _currToken;
+    }
+    @Override
+    public JsonToken nextValue() throws IOException {
+        JsonToken t = nextToken();
+        if (t == JsonToken.FIELD_NAME) {
+            t = nextToken();
+        }
+        return t;
+    }
+    @Override
+    public JsonParser skipChildren() throws IOException {
+        if ((_currToken != JsonToken.START_OBJECT) && (_currToken != JsonToken.START_ARRAY)) {
+            return this;
+        }
+        int open = 1;
+        // Since proper matching of start/end markers is handled
+        // by nextToken(), we'll just count nesting levels here
+        while (true) {
+            JsonToken t = nextToken();
+            if (t == null) {
+                _handleEOF();
+                /* 05-Sep-2014, tatu: Let's actually try to return something
+                 *   sensible, since this is a legitimate way to reach EOF
+                 */
+                return this;
+            }
+            if (t.isStructStart()) {
+                ++open;
+            } else if (t.isStructEnd()) {
+                if (--open == 0) {
+                    return this;
+                }
+            }
         }
-        return null;
     }
-
     /*
     /*******************************************************
     /* Additional extended API

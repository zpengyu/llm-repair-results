diff --git a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
index bed27f2b..a6b85350 100644
--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
@@ -13,8 +13,7 @@ import com.fasterxml.jackson.core.*;
  * Fairly simple use of {@link JsonParserDelegate}: only need
  * to override {@link #nextToken} to handle transition
  */
-public class JsonParserSequence extends JsonParserDelegate
-{
+public class JsonParserSequence extends JsonParserDelegate {
     /**
      * Parsers other than the first one (which is initially assigned
      * as delegate)
@@ -32,7 +29,7 @@ public class JsonParserSequence extends JsonParserDelegate
      *
      * @since 2.8
      */
-
+    protected boolean _hasToken;
     /*
      *******************************************************
      * Construction
@@ -103,15 +94,46 @@ public class JsonParserSequence extends JsonParserDelegate
     @Override
     public JsonToken nextToken() throws IOException, JsonParseException
     {
-        JsonToken t = delegate.nextToken();
-        if (t != null) return t;
+        if (!_hasToken) {
+            JsonToken t = delegate.nextToken();
+            if (t != null) return t;
+        } else {
+            _hasToken = false;
+        }
         while (switchToNext()) {
-            t = delegate.nextToken();
+            JsonToken t = delegate.nextToken();
             if (t != null) return t;
         }
         return null;
     }
-
+    @Override
+    public JsonToken currentToken() {
+        return (_hasToken) ? _currToken : delegate.currentToken();
+    }
+    @Override
+    public int currentTokenId() {
+        return (_hasToken) ? _currToken.id() : delegate.currentTokenId();
+    }
+    @Override
+    public boolean hasCurrentToken() {
+        return (_hasToken || delegate.hasCurrentToken());
+    }
+    @Override
+    public boolean hasTokenId(int id) {
+        return (_hasToken && _currToken.id() == id) || delegate.hasTokenId(id);
+    }
+    @Override
+    public boolean hasToken(JsonToken t) {
+        return (_hasToken && _currToken == t) || delegate.hasToken(t);
+    }
+    @Override
+    public boolean isExpectedStartArrayToken() {
+        return (_hasToken && _currToken == JsonToken.START_ARRAY) || delegate.isExpectedStartArrayToken();
+    }
+    @Override
+    public boolean isExpectedStartObjectToken() {
+        return (_hasToken && _currToken == JsonToken.START_OBJECT) || delegate.isExpectedStartObjectToken();
+    }
     /*
     /*******************************************************
     /* Additional extended API

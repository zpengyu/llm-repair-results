diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
index 19d68e84..2d8f3ab3 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
@@ -99,7 +99,7 @@ public class TarUtils {
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
-    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
@@ -148,10 +143,18 @@ public class TarUtils {
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
-
         return result;
     }
-
+- Fault localization is the process of identifying likely fault-related regions in the source code based on the test outcomes.
+- It is a crucial activity in the software debugging process, which is quite challenging and time-consuming, especially when the software is large and complex.
+- In this project, we have implemented two machine learning based fault localization approaches, namely,
+ * Random Forest (RF)
+ * Logistic Regression (LR)
+- As a part of the project, we have studied the performance of each approach for the following datasets
+ * Defects4J
+ * GZoltar
+- We have compared the performance of our implementation with the existing approach, i.e., Tarantula.
+- Additionally, we have implemented the fault localization technique, Tarantula, and have compared our implementation with the existing approach.
     /** 
      * Compute the value contained in a byte buffer.  If the most
      * significant bit of the first byte in the buffer is set, this

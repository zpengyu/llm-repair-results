diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
index 19d68e84..75434493 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
@@ -103,18 +103,15 @@ public class TarUtils {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
-
-        if (length < 2){
+        if (length < 2) {
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
-
         if (buffer[start] == 0) {
             return 0L;
         }
-
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+        while (start < end) {
+            if (buffer[start] == ' ') {
                 start++;
             } else {
                 break;
@@ -126,7 +122,7 @@ public class TarUtils {
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
         byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+        if (trailer == 0 || trailer == ' ') {
             end--;
         } else {
             throw new IllegalArgumentException(
@@ -141,7 +136,7 @@ public class TarUtils {
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+            if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }

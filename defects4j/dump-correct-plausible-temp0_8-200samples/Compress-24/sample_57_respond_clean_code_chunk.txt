    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
        long    result = 0;
        int     end = offset + length;
        int     start = offset;
        if (length < 2){
            throw new IllegalArgumentException("Length "+length+" must be at least 2");
        }
        if (buffer[start] == 0) {
            return 0L;
        }
        // Skip leading spaces
        while (start < end){
            if (buffer[start] == ' '){
                start++;
            } else {
                break;
            }
        }
        // Trim all trailing NULs and spaces.
        // The ustar and POSIX tar specs require a trailing NUL or
        // space but some implementations use the extra digit for big
        // sizes/uids/gids ...
        byte trailer = buffer[end - 1];
        if (trailer == 0 || trailer == ' '){
            end--;
        } else {
            throw new IllegalArgumentException(
                    exceptionMessage(buffer, offset, length, end-1, trailer));
        }
        trailer = buffer[end - 1];
        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
            end--;
            trailer = buffer[end - 1];
        }
        for ( ;start < end; start++) {
            final byte currentByte = buffer[start];
            // CheckStyle:MagicNumber OFF
            if (currentByte < '0' || currentByte > '7'){
                throw new IllegalArgumentException(
                        exceptionMessage(buffer, offset, length, start, currentByte));
            }
            result = (result << 3) + (currentByte - '0'); // convert from ASCII
            // CheckStyle:MagicNumber ON
        }
        return result;
    }
    /**
     * Constructs an exception message for invalid octal values.
     *
     * @param buffer The buffer containing the invalid value
     * @param offset The start offset of the value in the buffer
     * @param length The length of the value in the buffer
     * @param badbyte The offset of the invalid byte relative to the start of
     * the field
     * @param value The invalid value
     * @return An exception message
     */
    private static String exceptionMessage(final byte[] buffer, final int offset,
                                           final int length, final int badbyte, final byte value) {
        final StringBuilder sb = new StringBuilder("Invalid byte ");
        sb.append(value);
        sb.append(" in octal value at offset ");
        sb.append(badbyte);
        sb.append(" of ");
        sb.append(length);
        sb.append(" byte field starting at offset ");
        sb.append(offset);
        sb.append(": 0x");
        sb.append(HexUtils.toHexString(buffer, offset, length));
        return sb.toString();
    }
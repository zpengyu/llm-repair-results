diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index a9d0a5b0..afac0e8c 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -953,77 +953,89 @@ class CodeGenerator {
   }
 
   /** Helper to escape javascript string as well as regular expression */
-  static String strEscape(String s, char quote,
-                          String doublequoteEscape,
-                          String singlequoteEscape,
-                          String backslashEscape,
-                          CharsetEncoder outputCharsetEncoder) {
-    StringBuilder sb = new StringBuilder(s.length() + 2);
-    sb.append(quote);
-    for (int i = 0; i < s.length(); i++) {
-      char c = s.charAt(i);
-      switch (c) {
-        case '\n': sb.append("\\n"); break;
-        case '\r': sb.append("\\r"); break;
-        case '\t': sb.append("\\t"); break;
-        case '\\': sb.append(backslashEscape); break;
-        case '\"': sb.append(doublequoteEscape); break;
-        case '\'': sb.append(singlequoteEscape); break;
-        case '>':                       // Break --> into --\> or ]]> into ]]\>
-          if (i >= 2 &&
-              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
-               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
-            sb.append("\\>");
-          } else {
+private static char toHexDigit(int value) {
+    if (value > 9) {
+      return (char) ('A' + (value - 10));
+    } else {
+      return (char) ('0' + value);
+    }
+  }
+private static void appendHexJavaScriptRepresentation(
+      StringBuilder sb, char c) {
+    sb.append("\\u");
+    sb.append(toHexDigit((c >> 12) & 0xF));
+    sb.append(toHexDigit((c >>  8) & 0xF));
+    sb.append(toHexDigit((c >>  4) & 0xF));
+    sb.append(toHexDigit( c        & 0xF));
+  }
+static String strEscape(String s, char quote,
+    String doublequoteEscape,
+    String singlequoteEscape,
+    String backslashEscape,
+    CharsetEncoder outputCharsetEncoder) {
+  StringBuilder sb = new StringBuilder(s.length() + 2);
+  sb.append(quote);
+  for (int i = 0; i < s.length(); i++) {
+    char c = s.charAt(i);
+    switch (c) {
+      case '\n': sb.append("\\n"); break;
+      case '\r': sb.append("\\r"); break;
+      case '\t': sb.append("\\t"); break;
+      case '\\': sb.append(backslashEscape); break;
+      case '\"': sb.append(doublequoteEscape); break;
+      case '\'': sb.append(singlequoteEscape); break;
+      case '>':                       // Break --> into --\> or ]]> into ]]\>
+        if (i >= 2 &&
+            ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
+             (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
+          sb.append("\\>");
+        } else {
+          sb.append(c);
+        }
+        break;
+      case '<':
+        // Break </script into <\/script
+        final String END_SCRIPT = "/script";
+        // Break <!-- into <\!--
+        final String START_COMMENT = "!--";
+        if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
+            END_SCRIPT.length())) {
+          sb.append("<\\");
+        } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
+            START_COMMENT.length())) {
+          sb.append("<\\");
+        } else {
+          sb.append(c);
+        }
+        break;
+      default:
+        // If we're given an outputCharsetEncoder, then check if the
+        //  character can be represented in this character set.
+        if (outputCharsetEncoder != null) {
+          if (outputCharsetEncoder.canEncode(c)) {
             sb.append(c);
-          }
-          break;
-        case '<':
-          // Break </script into <\/script
-          final String END_SCRIPT = "/script";
-
-          // Break <!-- into <\!--
-          final String START_COMMENT = "!--";
-
-          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
-                              END_SCRIPT.length())) {
-            sb.append("<\\");
-          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
-                                     START_COMMENT.length())) {
-            sb.append("<\\");
           } else {
-            sb.append(c);
+            // Unicode-escape the character.
+            appendHexJavaScriptRepresentation(sb, c);
           }
-          break;
-        default:
-          // If we're given an outputCharsetEncoder, then check if the
-          //  character can be represented in this character set.
-          if (outputCharsetEncoder != null) {
-            if (outputCharsetEncoder.canEncode(c)) {
-              sb.append(c);
-            } else {
-              // Unicode-escape the character.
-              appendHexJavaScriptRepresentation(sb, c);
-            }
+        } else {
+          // No charsetEncoder provided - pass straight latin characters
+          // through, and escape the rest.  Doing the explicit character
+          // check is measurably faster than using the CharsetEncoder.
+          if (c > 0x1f && c <= 0x7f) {
+            sb.append(c);
           } else {
-            // No charsetEncoder provided - pass straight latin characters
-            // through, and escape the rest.  Doing the explicit character
-            // check is measurably faster than using the CharsetEncoder.
-            if (c > 0x1f && c <= 0x7f) {
-              sb.append(c);
-            } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
-              appendHexJavaScriptRepresentation(sb, c);
-            }
+            // Other characters can be misinterpreted by some js parsers,
+            // or perhaps mangled by proxies along the way,
+            // so we play it safe and unicode escape them.
+            appendHexJavaScriptRepresentation(sb, c);
           }
-      }
+        }
     }
-    sb.append(quote);
-    return sb.toString();
   }
-
+  sb.append(quote);
+  return sb.toString();
+}
   static String identifierEscape(String s) {
     // First check if escaping is needed at all -- in most cases it isn't.
     if (NodeUtil.isLatin(s)) {

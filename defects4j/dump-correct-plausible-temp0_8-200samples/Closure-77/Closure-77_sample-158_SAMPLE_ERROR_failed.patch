diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index a9d0a5b0..fcd943f3 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -954,10 +954,10 @@ class CodeGenerator {
 
   /** Helper to escape javascript string as well as regular expression */
   static String strEscape(String s, char quote,
-                          String doublequoteEscape,
-                          String singlequoteEscape,
-                          String backslashEscape,
-                          CharsetEncoder outputCharsetEncoder) {
+             String doublequoteEscape,
+             String singlequoteEscape,
+             String backslashEscape,
+             CharsetEncoder outputCharsetEncoder) {
     StringBuilder sb = new StringBuilder(s.length() + 2);
     sb.append(quote);
     for (int i = 0; i < s.length(); i++) {
@@ -981,15 +981,15 @@ class CodeGenerator {
         case '<':
           // Break </script into <\/script
           final String END_SCRIPT = "/script";
-
           // Break <!-- into <\!--
           final String START_COMMENT = "!--";
-
-          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
+          if (i + END_SCRIPT.length() <= s.length() &&
+              s.regionMatches(true, i + 1, END_SCRIPT, 0,
                               END_SCRIPT.length())) {
             sb.append("<\\");
-          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
-                                     START_COMMENT.length())) {
+          } else if (i + START_COMMENT.length() <= s.length() &&
+                 s.regionMatches(false, i + 1, START_COMMENT, 0,
+                                 START_COMMENT.length())) {
             sb.append("<\\");
           } else {
             sb.append(c);
@@ -1023,7 +1023,68 @@ class CodeGenerator {
     sb.append(quote);
     return sb.toString();
   }
-
+- **Buggy Functions**
+    - **Bad practices**
+        - Ignoring validation check
+        - Ignoring error handling
+        - Ignoring return value check
+        - Incorrectly using function parameters
+        - Incorrectly using index
+    - **Bad patterns**
+        - Logging
+        - Assertion
+        - Input Sanitization
+        - Hard-coded constant value
+        - Repeated computation
+        - Incorrect loop termination
+        - Incorrect loop stepping
+    - **Bad functions**
+        - Using wrong variables
+        - Using wrong functions
+        - Using wrong algorithms
+        - Using wrong data structure
+        - Using wrong arithmetic operations
+        - Incorrect variables' usage
+        - Incorrect functions' usage
+        - Incorrect data structure's usage
+- **Fixing Methods**
+    - **Fixing patterns**
+        - Logging
+        - Assertion
+        - Input Sanitization
+        - Hard-coded constant value
+        - Repeated computation
+        - Incorrect loop termination
+        - Incorrect loop stepping
+    - **Fixing functions**
+        - Using wrong variables
+        - Using wrong functions
+        - Using wrong algorithms
+        - Using wrong data structure
+        - Using wrong arithmetic operations
+        - Incorrect variables' usage
+        - Incorrect functions' usage
+        - Incorrect data structure's usage
+- **How to evaluate a fix**
+    - **Correctness**
+    - **Code complexity**
+        - Code length
+        - Cyclomatic complexity
+        - Halstead metrics
+- **Datasets**
+    - More project examples
+    - More programming languages
+    - More bug patterns
+    - More functions' properties
+- **Models**
+    - LSTM model
+    - Attention-based LSTM model
+- **Algorithm**
+    - More samples
+    - More diverse samples
+    - Larger model
+    - Better training
+    - More attention
   static String identifierEscape(String s) {
     // First check if escaping is needed at all -- in most cases it isn't.
     if (NodeUtil.isLatin(s)) {

diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index a9d0a5b0..b70ec0ba 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -954,10 +954,10 @@ class CodeGenerator {
 
   /** Helper to escape javascript string as well as regular expression */
   static String strEscape(String s, char quote,
-                          String doublequoteEscape,
-                          String singlequoteEscape,
-                          String backslashEscape,
-                          CharsetEncoder outputCharsetEncoder) {
+      String doublequoteEscape,
+      String singlequoteEscape,
+      String backslashEscape,
+      CharsetEncoder outputCharsetEncoder) {
     StringBuilder sb = new StringBuilder(s.length() + 2);
     sb.append(quote);
     for (int i = 0; i < s.length(); i++) {
@@ -1023,7 +1021,28 @@ class CodeGenerator {
     sb.append(quote);
     return sb.toString();
   }
-
+  private static void appendHexJavaScriptRepresentation(
+      StringBuilder sb, char c) {
+    int codePoint = c;
+    if (c >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {
+      // Handle supplementary unicode values which are not representable in
+      // javascript.  We deal with these by escaping them as two 4B sequences
+      // so that they will round-trip properly when sent from java to javascript
+      // and back.
+      codePoint = Character.codePointAt(new char[]{c}, 0);
+    }
+    String num = Integer.toHexString(codePoint);
+    // Pad with 0's to length 4.
+    sb.append("\\u");
+    for (int j = 0; j < 4 - num.length(); j++) {
+      sb.append('0');
+    }
+    sb.append(num);
+    if (codePoint >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {
+      codePoint = Character.codePointAt(new char[]{c}, 0);
+    }
+  }
+}
   static String identifierEscape(String s) {
     // First check if escaping is needed at all -- in most cases it isn't.
     if (NodeUtil.isLatin(s)) {

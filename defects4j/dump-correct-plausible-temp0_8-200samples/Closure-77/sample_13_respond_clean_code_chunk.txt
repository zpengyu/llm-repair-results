  static String strEscape(String s, char quote,
                          String doublequoteEscape,
                          String singlequoteEscape,
                          String backslashEscape,
                          CharsetEncoder outputCharsetEncoder) {
    StringBuilder sb = new StringBuilder(s.length() + 2);
    sb.append(quote);
    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);
      switch (c) {
        case '\n': sb.append("\\n"); break;
        case '\r': sb.append("\\r"); break;
        case '\t': sb.append("\\t"); break;
        case '\\': sb.append(backslashEscape); break;
        case '\"': sb.append(doublequoteEscape); break;
        case '\'': sb.append(singlequoteEscape); break;
        case '>':                       // Break --> into --\> or ]]> into ]]\>
          if (i >= 2 &&
              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
                  (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
            sb.append("\\>");
          } else {
            sb.append(c);
          }
          break;
        case '<':
          // Break </script into <\/script
          final String END_SCRIPT = "/script";
          // Break <!-- into <\!--
          final String START_COMMENT = "!--";
          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
                  END_SCRIPT.length())) {
            sb.append("<\\");
          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
                  START_COMMENT.length())) {
            sb.append("<\\");
          } else {
            sb.append(c);
          }
          break;
        default:
          // If we're given an outputCharsetEncoder, then check if the
          //  character can be represented in this character set.
          if (outputCharsetEncoder != null) {
            if (outputCharsetEncoder.canEncode(c)) {
              sb.append(c);
            } else {
              // Unicode-escape the character.
              appendHexJavaScriptRepresentation(sb, c);
            }
          } else {
            // No charsetEncoder provided - pass straight latin characters
            // through, and escape the rest.  Doing the explicit character
            // check is measurably faster than using the CharsetEncoder.
            if (c > 0x1f && c <= 0x7f) {
              sb.append(c);
            } else if (c > 0x7f) {
              // Other characters can be misinterpreted by some js parsers,
              // or perhaps mangled by proxies along the way,
              // so we play it safe and unicode escape them.
              appendHexJavaScriptRepresentation(sb, c);
            } else {
              // we need to handle C0 and C1 control characters here
              switch (c) {
                case 0x00:  // NULL
                  sb.append('\\').append('0');
                  break;
                case 0x07:  // BELL
                  sb.append('\\').append('a');
                  break;
                case 0x08:  // BACKSPACE
                  sb.append('\\').append('b');
                  break;
                case 0x0C:  // FORM FEED
                  sb.append('\\').append('f');
                  break;
                case 0x0A:  // LINE FEED
                  sb.append('\\').append('n');
                  break;
                case 0x0D:  // CARRIAGE RETURN
                  sb.append('\\').append('r');
                  break;
                case 0x09:  // HORIZONTAL TAB
                  sb.append('\\').append('t');
                  break;
                case 0x0B:  // VERTICAL TAB
                  sb.append('\\').append('v');
                  break;
                default:
                  // 0x01 - 0x06
                  // 0x0E - 0x1F
                  // 0x7F
                  // 0x80 - 0xFF
                  // fall through to default escape
                  appendHexJavaScriptRepresentation(sb, c);
              }
            }
          }
      }
    }
    sb.append(quote);
    return sb.toString();
  }
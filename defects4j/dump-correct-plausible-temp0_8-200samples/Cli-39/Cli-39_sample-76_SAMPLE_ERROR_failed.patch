diff --git a/src/main/java/org/apache/commons/cli/TypeHandler.java b/src/main/java/org/apache/commons/cli/TypeHandler.java
index 775e0f2..9017de8 100644
--- a/src/main/java/org/apache/commons/cli/TypeHandler.java
+++ b/src/main/java/org/apache/commons/cli/TypeHandler.java
@@ -99,6 +98,18 @@ public class TypeHandler
         {
             return createURL(str);
         }
+        else if (PatternOptionBuilder.LOCALE_VALUE == clazz)
+        {
+            return createLocale(str);
+        }
+        else if (PatternOptionBuilder.BIGDECIMAL_VALUE == clazz)
+        {
+            return createBigDecimal(str);
+        }
+        else if (PatternOptionBuilder.BIGINTEGER_VALUE == clazz)
+        {
+            return createBigInteger(str);
+        }
         else
         {
             return null;
@@ -248,4 +249,67 @@ public class TypeHandler
         //        return FileW.findFiles(str);
         throw new UnsupportedOperationException("Not yet implemented");
     }
+    /**
+     * Returns the Locale represented by <code>str</code>.
+     *
+     * @param str the locale
+     * @return The Locale represented by <code>str</code>.
+     * @throws ParseException if the locale is not valid
+     */
+    public static Locale createLocale(final String str) throws ParseException
+    {
+        final String[] a = str.split("_");
+        if (a.length == 1)
+        {
+            return new Locale(a[0]);
+        }
+        else if (a.length == 2)
+        {
+            return new Locale(a[0], a[1]);
+        }
+        else if (a.length == 3)
+        {
+            return new Locale(a[0], a[1], a[2]);
+        }
+        else
+        {
+            throw new ParseException("Could not convert " + str + " to a locale");
+        }
+    }
+    /**
+     * Returns the BigDecimal represented by <code>str</code>.
+     *
+     * @param str the decimal string
+     * @return The BigDecimal represented by <code>str</code>.
+     * @throws ParseException if the string is not a valid BigDecimal
+     */
+    public static BigDecimal createBigDecimal(final String str) throws ParseException
+    {
+        try
+        {
+            return new BigDecimal(str);
+        }
+        catch (final NumberFormatException exp)
+        {
+            throw new ParseException("Unable to parse the string: " + str, exp);
+        }
+    }
+    /**
+     * Returns the BigInteger represented by <code>str</code>.
+     *
+     * @param str the integer string
+     * @return The BigInteger represented by <code>str</code>.
+     * @throws ParseException if the string is not a valid BigInteger
+     */
+    public static BigInteger createBigInteger(final String str) throws ParseException
+    {
+        try
+        {
+            return new BigInteger(str);
+        }
+        catch (final NumberFormatException exp)
+        {
+            throw new ParseException("Unable to parse the string: " + str, exp);
+        }
+    }
 }
\ No newline at end of file

public static Object createValue(final String str, final Class<?> clazz) throws ParseException
{
    if (PatternOptionBuilder.STRING_VALUE == clazz)
    {
        return str;
    }
    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
    {
        return createObject(str);
    }
    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
    {
        return createNumber(str);
    }
    else if (PatternOptionBuilder.DATE_VALUE == clazz)
    {
        return createDate(str);
    }
    else if (PatternOptionBuilder.CLASS_VALUE == clazz)
    {
        return createClass(str);
    }
    else if (PatternOptionBuilder.FILE_VALUE == clazz)
    {
        return createFile(str);
    }
    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
    {
        return createFile(str);
    }
    else if (PatternOptionBuilder.FILES_VALUE == clazz)
    {
        return createFiles(str);
    }
    else if (PatternOptionBuilder.URL_VALUE == clazz)
    {
        return createURL(str);
    }
    else
    {
        return null;
    }
}

public static Object createObject(final String classname) throws ParseException
{
    Class<?> cl;

    try
    {
        cl = Class.forName(classname);
    }
    catch (final ClassNotFoundException cnfe)
    {
        throw new ParseException("Unable to find the class: " + classname);
    }
    
    try
    {
        return cl.newInstance();
    }
    catch (final Exception e)
    {
        throw new ParseException(e.getClass().getName() + "; Unable to create an instance of: " + classname);
    }
}

public static Number createNumber(final String str) throws ParseException
{
    try
    {
        if (str.indexOf('.') != -1)
        {
            return Double.valueOf(str);
        }
        return Long.valueOf(str);
    }
    catch (final NumberFormatException e)
    {
        throw new ParseException(e.getMessage());
    }
}

public static Class<?> createClass(final String classname) throws ParseException
{
    try
    {
        return Class.forName(classname);
    }
    catch (final ClassNotFoundException e)
    {
        throw new ParseException("Unable to find the class: " + classname);
    }
}

public static Date createDate(final String str)
{
    throw new UnsupportedOperationException("Not yet implemented");
}

public static URL createURL(final String str) throws ParseException
{
    try
    {
        return new URL(str);
    }
    catch (final MalformedURLException e)
    {
        throw new ParseException("Unable to parse the URL: " + str);
    }
}

public static File createFile(final String str)
{
    return new File(str);
}

public static File[] createFiles(final String str)
{
    // to implement/port:
    //        return FileW.findFiles(str);
    throw new UnsupportedOperationException("Not yet implemented");
}


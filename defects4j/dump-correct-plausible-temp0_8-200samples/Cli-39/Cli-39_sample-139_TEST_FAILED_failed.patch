diff --git a/src/main/java/org/apache/commons/cli/TypeHandler.java b/src/main/java/org/apache/commons/cli/TypeHandler.java
index 775e0f2..7051553 100644
--- a/src/main/java/org/apache/commons/cli/TypeHandler.java
+++ b/src/main/java/org/apache/commons/cli/TypeHandler.java
@@ -34,8 +34,7 @@ import java.util.Date;
  *
  * @version $Id$
  */
-public class TypeHandler
-{
+public class TypeHandler {
     /**
      * Returns the <code>Object</code> of type <code>obj</code>
      * with the value of <code>str</code>.
@@ -46,11 +45,9 @@ public class TypeHandler
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given object type failed
      */
-    public static Object createValue(final String str, final Object obj) throws ParseException
-    {
+    public static Object createValue(final String str, final Object obj) throws ParseException {
         return createValue(str, (Class<?>) obj);
     }
-
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
@@ -61,76 +58,46 @@ public class TypeHandler
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
-    public static Object createValue(final String str, final Class<?> clazz) throws ParseException
-    {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+    public static Object createValue(final String str, final Class<?> clazz) throws ParseException {
+        if (PatternOptionBuilder.STRING_VALUE == clazz) {
             return str;
-        }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+        } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {
             return createObject(str);
-        }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
+        } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {
             return createNumber(str);
-        }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+        } else if (PatternOptionBuilder.DATE_VALUE == clazz) {
             return createDate(str);
-        }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+        } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {
             return createClass(str);
-        }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+        } else if (PatternOptionBuilder.FILE_VALUE == clazz) {
             return createFile(str);
-        }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+        } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {
             return createFile(str);
-        }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+        } else if (PatternOptionBuilder.FILES_VALUE == clazz) {
             return createFiles(str);
-        }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+        } else if (PatternOptionBuilder.URL_VALUE == clazz) {
             return createURL(str);
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
-
     /**
-      * Create an Object from the classname and empty constructor.
-      *
-      * @param classname the argument value
-      * @return the initialised object
-      * @throws ParseException if the class could not be found or the object could not be created
-      */
-    public static Object createObject(final String classname) throws ParseException
-    {
+     * Create an Object from the classname and empty constructor.
+     *
+     * @param classname the argument value
+     * @return the initialised object
+     * @throws ParseException if the class could not be found or the object could not be created
+     */
+    public static Object createObject(final String classname) throws ParseException {
         Class<?> cl;
-
-        try
-        {
+        try {
             cl = Class.forName(classname);
-        }
-        catch (final ClassNotFoundException cnfe)
-        {
+        } catch (final ClassNotFoundException cnfe) {
             throw new ParseException("Unable to find the class: " + classname);
         }
-        
-        try
-        {
-            return cl.newInstance();
-        }
-        catch (final Exception e)
-        {
+        try {
+            return cl.getDeclaredConstructor().newInstance();
+        } catch (final Exception e) {
             throw new ParseException(e.getClass().getName() + "; Unable to create an instance of: " + classname);
         }
     }
@@ -143,18 +109,13 @@ public class TypeHandler
      * @return the number represented by <code>str</code>
      * @throws ParseException if <code>str</code> is not a number
      */
-    public static Number createNumber(final String str) throws ParseException
-    {
-        try
-        {
-            if (str.indexOf('.') != -1)
-            {
+    public static Number createNumber(final String str) throws ParseException {
+        try {
+            if (str.indexOf('.') != -1) {
                 return Double.valueOf(str);
             }
             return Long.valueOf(str);
-        }
-        catch (final NumberFormatException e)
-        {
+        } catch (final NumberFormatException e) {
             throw new ParseException(e.getMessage());
         }
     }
@@ -166,14 +126,10 @@ public class TypeHandler
      * @return The class if it is found
      * @throws ParseException if the class could not be found
      */
-    public static Class<?> createClass(final String classname) throws ParseException
-    {
-        try
-        {
+    public static Class<?> createClass(final String classname) throws ParseException {
+        try {
             return Class.forName(classname);
-        }
-        catch (final ClassNotFoundException e)
-        {
+        } catch (final ClassNotFoundException e) {
             throw new ParseException("Unable to find the class: " + classname);
         }
     }
@@ -189,11 +144,9 @@ public class TypeHandler
      * otherwise return null.
      * @throws UnsupportedOperationException always
      */
-    public static Date createDate(final String str)
-    {
+    public static Date createDate(final String str) {
         throw new UnsupportedOperationException("Not yet implemented");
     }
-
     /**
      * Returns the URL represented by <code>str</code>.
      *
@@ -201,14 +154,10 @@ public class TypeHandler
      * @return The URL in <code>str</code> is well-formed
      * @throws ParseException if the URL in <code>str</code> is not well-formed
      */
-    public static URL createURL(final String str) throws ParseException
-    {
-        try
-        {
+    public static URL createURL(final String str) throws ParseException {
+        try {
             return new URL(str);
-        }
-        catch (final MalformedURLException e)
-        {
+        } catch (final MalformedURLException e) {
             throw new ParseException("Unable to parse the URL: " + str);
         }
     }
@@ -219,11 +167,9 @@ public class TypeHandler
      * @param str the File location
      * @return The file represented by <code>str</code>.
      */
-    public static File createFile(final String str)
-    {
+    public static File createFile(final String str) {
         return new File(str);
     }
-
     /**
      * Returns the opened FileInputStream represented by <code>str</code>.
      *
@@ -242,8 +187,7 @@ public class TypeHandler
      * @return The File[] represented by <code>str</code>.
      * @throws UnsupportedOperationException always
      */
-    public static File[] createFiles(final String str)
-    {
+    public static File[] createFiles(final String str) {
         // to implement/port:
         //        return FileW.findFiles(str);
         throw new UnsupportedOperationException("Not yet implemented");

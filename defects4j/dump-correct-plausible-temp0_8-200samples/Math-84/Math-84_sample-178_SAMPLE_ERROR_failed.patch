diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
index 2fa8c34bf..2c2bd2f76 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
@@ -76,15 +71,29 @@ public class MultiDirectional extends DirectSearchOptimizer {
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+                if (comparator.compare(best, expanded) <= 0 &&
+                    comparator.compare(reflected, expanded) <= 0) {
+                    // accept the expanded simplex
+                    simplex = reflectedSimplex;
+                    return;
+                }
+                if (comparator.compare(best, reflected) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                    return;
                 }
-
+                // shrink the simplex from the best point
+                for (int i = 1; i < simplex.length; ++i) {
+                    for (int j = 0; j < simplex[i].getPoint().length; ++j) {
+                        final double[] v = simplex[i].getPointRef();
+                        v[j] = best.getPoint(j) + sigma * (v[j] - best.getPoint(j));
+                    }
+                }
+                // evaluate the shrunk simplex
+                evaluate(simplex);
+                sort(simplex, comparator);
                 return;
-
             }
-
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
@@ -93,11 +101,18 @@ public class MultiDirectional extends DirectSearchOptimizer {
             // check convergence
                 return;
             }
-
+            // shrink the simplex from the best point
+            for (int i = 1; i < simplex.length; ++i) {
+                for (int j = 0; j < simplex[i].getPoint().length; ++j) {
+                    final double[] v = simplex[i].getPointRef();
+                    v[j] = best.getPoint(j) + sigma * (v[j] - best.getPoint(j));
+                }
+            }
+            // evaluate the shrunk simplex
+            evaluate(simplex);
+            sort(simplex, comparator);
         }
-
     }
-
     /** Compute and evaluate a new simplex.
      * @param original original simplex (to be preserved)
      * @param coeff linear coefficient

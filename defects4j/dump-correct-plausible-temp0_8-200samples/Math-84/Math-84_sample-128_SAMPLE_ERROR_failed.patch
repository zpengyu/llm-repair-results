diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
index 2fa8c34bf..24da1874d 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
@@ -79,25 +74,32 @@ public class MultiDirectional extends DirectSearchOptimizer {
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = expanded;
                 }
-
                 return;
-
             }
-
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
-                return;
+                simplex = contracted;
+            } else {
+                // perform a shrinkage step
+                final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[n + 1];
+                for (int i = 0; i < getDimension(); ++i) {
+                    final double[] x = getPointRef(best, i);
+                    for (int j = 0; j < simplex.length; ++j) {
+                        final double[] y = getPointRef(simplex[j], i);
+                        y[i] = best.getPoint()[i] + sigma * (y[i] - best.getPoint()[i]);
+                    }
+                    evaluateNewSimplex(i, comparator);
+                }
+                simplex = shrunkSimplex;
             }
-
         }
-
     }
-
     /** Compute and evaluate a new simplex.
      * @param original original simplex (to be preserved)
      * @param coeff linear coefficient

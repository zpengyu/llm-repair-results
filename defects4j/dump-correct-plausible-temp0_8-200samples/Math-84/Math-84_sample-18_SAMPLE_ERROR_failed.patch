diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
index 2fa8c34bf..bdc764426 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
@@ -68,36 +65,45 @@ public class MultiDirectional extends DirectSearchOptimizer {
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
-
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
-
+            if (comparator.compare(best, reflected) <= 0) {
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+                if (comparator.compare(expanded, best) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                    return;
+                }
+            } else {
+                // compute the contracted simplex
+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+                if (comparator.compare(best, contracted) <= 0) {
+                    // accept the contracted simplex
+                    return;
                 }
-
-                return;
-
-            }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
             }
-
         }
-
     }
-
+In this section, you are to provide a demonstration of the use of FindBugs
+with some program provided by the teacher (or yourself).  You should provide
+the following:
+* A brief description of the program and its purpose (1-2 sentences)
+* A list of all bugs that FindBugs detects in the program (**three or more**).  For each bug you detect, you must include the following:
+    * the bug report (in textual format)
+    * a brief explanation of what the bug is, why it is a problem, and how it might be fixed (1-3 sentences)
+    * a bug-fixed version of the buggy code, if it is short enough.
+* A brief discussion of how FindBugs might be useful to you (1-2 sentences).
+In this section, you are to provide a demonstration of the use of FindBugs
+with the buggy function provided by the teacher (or yourself).  You should provide
+the following:
+* A brief description of the program and its purpose (1-2 sentences)
+* A list of all bugs that FindBugs detects in the program (**three or more**).  For each bug you detect, you must include the following:
+    * the bug report (in textual format)
+    * a brief explanation of what the bug is, why it is a problem, and how it might be fixed (1-3 sentences)
+    * a bug-fixed version of the buggy code, if it is short enough.
+* A brief discussion of how FindBugs might be useful to you (1-2 sentences).
     /** Compute and evaluate a new simplex.
      * @param original original simplex (to be preserved)
      * @param coeff linear coefficient

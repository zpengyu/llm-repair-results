diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
index 2fa8c34bf..fa0dea31c 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
@@ -58,13 +58,10 @@ public class MultiDirectional extends DirectSearchOptimizer {
 
     /** {@inheritDoc} */
     @Override
-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
-
         while (true) {
-
             incrementIterationsCounter();
-
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
@@ -79,25 +74,32 @@ public class MultiDirectional extends DirectSearchOptimizer {
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    simplex = original;
                 }
-
+                // check convergence
                 return;
-
             }
-
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
-                return;
+            } else {
+                // perform a shrinkage operation
+                final RealPointValuePair[] shrunkSimplex = simplex;
+                final RealPointValuePair shrunk = evaluateNewSimplex(original, rho, comparator);
+                if (comparator.compare(shrunk, best) < 0) {
+                    // accept the shrinked simplex
+                    simplex = shrunkSimplex;
+                } else {
+                    // reject the shrinked simplex, keep the original one
+                    simplex = original;
+                }
             }
-
+            // check convergence
+            return;
         }
-
     }
-
     /** Compute and evaluate a new simplex.
      * @param original original simplex (to be preserved)
      * @param coeff linear coefficient

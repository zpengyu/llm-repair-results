    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
        while (true) {
            incrementIterationsCounter();
            // save the original vertex
            final RealPointValuePair[] original = simplex;
            final RealPointValuePair best = original[0];
            // perform a reflection step
            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
            if (comparator.compare(reflected, best) <= 0) {
                // compute the expanded simplex
                final RealPointValuePair[] reflectedSimplex = simplex;
                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                if (comparator.compare(reflected, expanded) <= 0) {
                    // accept the reflected simplex
                    simplex = reflectedSimplex;
                }
                return;
            }
            // compute the contracted simplex
            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
            if (comparator.compare(contracted, best) < 0) {
                // accept the contracted simplex
            } else {
                // perform a reduction step
                final RealPointValuePair[] reducedSimplex = new RealPointValuePair[n + 1];
                for (int i = 0; i <= n; ++i) {
                    final double[] x = original[i].getPoint();
                    final double[] y = best.getPoint();
                    final double[] z = new double[n];
                    for (int j = 0; j < n; ++j) {
                        z[j] = x[j] + sigma * (x[j] - y[j]);
                    }
                    reducedSimplex[i] = new RealPointValuePair(z, Double.NaN, false);
                }
                evaluateNewSimplex(reducedSimplex, comparator);
            }
            // check convergence
            if (isConverged(original, comparator)) {
                return;
            }
        }
    }
    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {

        while (true) {

            incrementIterationsCounter();

            // save the original vertex
            final RealPointValuePair[] original = simplex;
            final RealPointValuePair best = original[0];

            // perform a reflection step
            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
            if (comparator.compare(reflected, best) < 0) {

                // compute the expanded simplex
                final RealPointValuePair[] reflectedSimplex = simplex;
                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                if (comparator.compare(reflected, expanded) <= 0) {
                    // accept the reflected simplex
                    simplex = reflectedSimplex;
                } else {
                    // accept the expanded simplex
                    simplex = simplex;
                }

            } else {

                // compute the contracted simplex
                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                if (comparator.compare(contracted, best) < 0) {
                    // accept the contracted simplex
                    simplex = simplex;
                } else {
                    // perform a shrink step
                    for (int i = 1; i < simplex.length; ++i) {
                        for (int j = 0; j < simplex[i].getPoint().length; ++j) {
                            final double[] point = simplex[i].getPointRef();
                            point[j] = best.getPoint()[j] + beta * (point[j] - best.getPoint()[j]);
                            simplex[i] = new RealPointValuePair(point, Double.NaN);
                        }
                    }
                }

            }

            // check convergence
            if (checker != null) {
                if (checker.converged(getIterations(), best, simplex)) {
                    return;
                }
            }

        }

    }

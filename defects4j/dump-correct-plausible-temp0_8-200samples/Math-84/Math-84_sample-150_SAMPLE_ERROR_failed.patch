diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
index 2fa8c34bf..06380b7dd 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
@@ -79,25 +74,32 @@ public class MultiDirectional extends DirectSearchOptimizer {
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = expandedSimplex;
+                }
+            } else {
+                // perform a contraction step
+                final RealPointValuePair[] reflectedSimplex = simplex;
+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+                if (comparator.compare(contracted, reflected) < 0) {
+                    // accept the contracted simplex
+                    simplex = reflectedSimplex;
+                } else {
+                    // perform a reduction step
+                    for (int i = 1; i < simplex.length; i++) {
+                        for (int j = 0; j < simplex[i].getPoint().length; ++j) {
+                            simplex[i] = new RealPointValuePair(original[i].getPoint(),
+                                                                original[i].getValue(),
+                                                                false);
+                        }
+                    }
                 }
-
-                return;
-
             }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
             // check convergence
-                return;
-            }
-
+            return;
         }
-
     }
-
     /** Compute and evaluate a new simplex.
      * @param original original simplex (to be preserved)
      * @param coeff linear coefficient

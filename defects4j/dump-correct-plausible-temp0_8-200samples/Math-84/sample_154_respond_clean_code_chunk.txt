    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
        while (true) {
            incrementIterationsCounter();
            // save the original vertex
            final RealPointValuePair[] original = simplex;
            final RealPointValuePair best = original[0];
            // perform a reflection step
            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
            if (comparator.compare(reflected, best) < 0) {
                // compute the expanded simplex
                final RealPointValuePair[] reflectedSimplex = simplex;
                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                if (comparator.compare(reflected, expanded) <= 0) {
                    // accept the reflected simplex
                    simplex = reflectedSimplex;
                } else {
                    // accept the expanded simplex
                    simplex = reflectedSimplex;
                }
            } else {
                // compute the contracted simplex
                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                if (comparator.compare(contracted, best) < 0) {
                    // accept the contracted simplex
                    simplex = reflectedSimplex;
                } else {
                    // perform a reduction step
                    final RealPointValuePair[] reducedSimplex = new RealPointValuePair[n];
                    reducedSimplex[0] = original[0];
                    for (int i = 1; i < n; ++i) {
                        for (int j = 0; j < n; ++j) {
                            reducedSimplex[i].setPoint(j, sigma * original[i].getPoint(j) + (1 - sigma) * original[0].getPoint(j));
                        }
                        reducedSimplex[i].setValue(computeObjectiveValue(reducedSimplex[i].getPoint()));
                    }
                    simplex = reducedSimplex;
                }
            }
            // check convergence
            if (isMinSimplex()) {
                return;
            }
        }
    }
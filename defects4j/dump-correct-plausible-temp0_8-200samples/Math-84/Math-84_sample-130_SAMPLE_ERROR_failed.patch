diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
index 2fa8c34bf..6c65d0cf6 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
@@ -79,25 +74,31 @@ public class MultiDirectional extends DirectSearchOptimizer {
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = expandedSimplex;
                 }
-
+                // check convergence
                 return;
-
             }
-
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+            if (comparator.compare(contracted, best) <= 0) {
                 // accept the contracted simplex
-
-            // check convergence
                 return;
             }
-
+            // perform a reduction step
+            final RealPointValuePair[] reducedSimplex = simplex;
+            final RealPointValuePair reduced = evaluateNewSimplex(original, ro, comparator);
+            if (comparator.compare(reduced, best) < 0) {
+                // accept the reduced simplex
+                simplex = reducedSimplex;
+                return;
+            }
+            // reject the reflected simplex
+            simplex = original;
         }
-
     }
-
     /** Compute and evaluate a new simplex.
      * @param original original simplex (to be preserved)
      * @param coeff linear coefficient

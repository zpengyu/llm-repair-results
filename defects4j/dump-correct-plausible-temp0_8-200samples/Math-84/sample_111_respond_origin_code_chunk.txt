protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {

    while (true) {

        incrementIterationsCounter();

        // save the original vertex
        final RealPointValuePair[] original = simplex;
        final RealPointValuePair best = original[0];

        // perform a reflection step
        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
        if (comparator.compare(reflected, best) < 0) {

            // compute the expanded simplex
            final RealPointValuePair[] reflectedSimplex = simplex;
            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
            if (comparator.compare(reflected, expanded) <= 0) {
                // accept the reflected simplex
                simplex = reflectedSimplex;
            } else {
                // accept the expanded simplex
                simplex = expandedSimplex;
            }

            return;

        }

        // perform a one-dimensional contraction step
        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[n + 1];
        contractedSimplex[0] = original[0];
        for (int i = 1; i < simplex.length; ++i) {
            contractedSimplex[i] = new RealPointValuePair(original[i].getPointRef() * delta,
                                                          Double.NaN);
        }
        final RealPointValuePair contracted = evaluateNewSimplex(contractedSimplex, 1.0, comparator);
        if (comparator.compare(contracted, best) < 0) {
            // accept the contracted simplex
            simplex = contractedSimplex;
        }

        // check convergence
        return;

    }

}

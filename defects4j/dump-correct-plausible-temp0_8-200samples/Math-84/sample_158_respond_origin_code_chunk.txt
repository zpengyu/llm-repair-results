    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {

        while (true) {

            incrementIterationsCounter();

            // save the original vertex
            final RealPointValuePair[] original = simplex;
            final RealPointValuePair best = original[0];

            // perform a reflection step
            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
            if (comparator.compare(reflected, best) < 0) {

                // compute the expanded simplex
                final RealPointValuePair[] reflectedSimplex = simplex;
                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                if (comparator.compare(reflected, expanded) <= 0) {
                    // accept the reflected simplex
                    simplex = reflectedSimplex;
                } else {
                    // accept the expanded simplex
                    simplex = reflectedSimplex;
                }

            } else {

                // perform a contraction step
                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                if (comparator.compare(contracted, best) < 0) {
                    // accept the contracted simplex
                    simplex = contracted;

                } else {

                    // perform a reduction step
                    final RealPointValuePair[] reducedSimplex = new RealPointValuePair[original.length];
                    for (int i = 0; i < original.length; ++i) {
                        final double[] x = original[i].getPointRef();
                        final double[] c = best.getPointRef();
                        reducedSimplex[i] = new RealPointValuePair(x, f.value(x), false);
                    }

                    // accept the reduced simplex
                    simplex = reducedSimplex;

                }

            }

            // check convergence
            return;

        }

    }


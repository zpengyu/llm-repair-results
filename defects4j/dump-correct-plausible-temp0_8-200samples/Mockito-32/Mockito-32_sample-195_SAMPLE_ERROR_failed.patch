diff --git a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
index e292e1300..20b181269 100644
--- a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
+++ b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
@@ -36,11 +36,10 @@ public class SpyAnnotationEngine implements AnnotationEngine {
                     Object instance = field.get(testClass);
                     if (instance == null) {
                         throw new MockitoException("Cannot create a @Spy for '" + field.getName() + "' field because the *instance* is missing\n" +
-                        		  "The instance must be created *before* initMocks();\n" +
+                                  "The instance must be created *before* initMocks();\n" +
                                   "Example of correct usage of @Spy:\n" +
-                            	  "   @Spy List mock = new LinkedList();\n" +
-                            	  "   //also, don't forget about MockitoAnnotations.initMocks();");
-
+                                  "   @Spy List mock = new LinkedList();\n" +
+                                  "   //also, don't forget about MockitoAnnotations.initMocks();");
                     }
                     if (new MockUtil().isMock(instance)) { 
                         // instance has been spied earlier
@@ -53,6 +52,17 @@ public class SpyAnnotationEngine implements AnnotationEngine {
                 } finally {
                     field.setAccessible(wasAccessible);
                 }
+            } else if (field.isAnnotationPresent(Captor.class)) {
+                assertNoAnnotations(Captor.class, field, Spy.class, Mock.class, org.mockito.MockitoAnnotations.Mock.class);
+                boolean wasAccessible = field.isAccessible();
+                field.setAccessible(true);
+                try {
+                    field.set(testClass, ArgumentCaptor.forClass(field.getType()));
+                } catch (IllegalAccessException e) {
+                    throw new MockitoException("Problems initiating captor field " + field.getName(), e);
+                } finally {
+                    field.setAccessible(wasAccessible);
+                }
             }
         }
     }    

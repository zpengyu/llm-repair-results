diff --git a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
index e292e1300..f4944a95d 100644
--- a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
+++ b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
@@ -35,12 +35,14 @@ public class SpyAnnotationEngine implements AnnotationEngine {
                 try {
                     Object instance = field.get(testClass);
                     if (instance == null) {
-                        throw new MockitoException("Cannot create a @Spy for '" + field.getName() + "' field because the *instance* is missing\n" +
-                        		  "The instance must be created *before* initMocks();\n" +
-                                  "Example of correct usage of @Spy:\n" +
-                            	  "   @Spy List mock = new LinkedList();\n" +
-                            	  "   //also, don't forget about MockitoAnnotations.initMocks();");
-
+                        instance = createSpy(field);
+                        if (instance == null) {
+                          throw new MockitoException("Cannot create a @Spy for '" + field.getName() + "' field because the *instance* is missing\n" +
+                            		  "The instance must be created *before* initMocks();\n" +
+                                      "Example of correct usage of @Spy:\n" +
+                            		  "   @Spy List mock = new LinkedList();\n" +
+                            		  "   //also, don't forget about MockitoAnnotations.initMocks();");
+                        }
                     }
                     if (new MockUtil().isMock(instance)) { 
                         // instance has been spied earlier
@@ -56,7 +58,21 @@ public class SpyAnnotationEngine implements AnnotationEngine {
             }
         }
     }
-    
+    private Object createSpy(Field field) {
+        if (field.getType() == List.class) {
+          return new LinkedList();
+        }
+        if (field.getType() == Queue.class) {
+          return new LinkedList();
+        }
+        if (field.getType() == Set.class) {
+          return new HashSet();
+        }
+        if (field.getType() == Collection.class) {
+          return new ArrayList();
+        }
+        return null;
+    }    
     //TODO duplicated elsewhere
     void assertNoAnnotations(Class annotation, Field field, Class ... undesiredAnnotations) {
         for (Class u : undesiredAnnotations) {

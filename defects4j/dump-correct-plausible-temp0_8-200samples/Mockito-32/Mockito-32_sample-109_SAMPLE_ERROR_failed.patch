diff --git a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
index e292e1300..7ce730eb9 100644
--- a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
+++ b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
@@ -25,38 +25,41 @@ public class SpyAnnotationEngine implements AnnotationEngine {
     }
     
     @SuppressWarnings("deprecation")
-    public void process(Class<?> context, Object testClass) {
-        Field[] fields = context.getDeclaredFields();
-        for (Field field : fields) {
-            if (field.isAnnotationPresent(Spy.class)) {
-                assertNoAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);
-                boolean wasAccessible = field.isAccessible();
-                field.setAccessible(true);
-                try {
-                    Object instance = field.get(testClass);
-                    if (instance == null) {
-                        throw new MockitoException("Cannot create a @Spy for '" + field.getName() + "' field because the *instance* is missing\n" +
-                        		  "The instance must be created *before* initMocks();\n" +
+public void process(Class<?> context, Object testClass) {
+    Field[] fields = context.getDeclaredFields();
+    for (Field field : fields) {
+        if (field.isAnnotationPresent(Spy.class)) {
+            assertNoAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);
+            boolean wasAccessible = field.isAccessible();
+            field.setAccessible(true);
+            try {
+                Object instance = field.get(testClass);
+                if (instance == null) {
+                    throw new MockitoException("Cannot create a @Spy for '" + field.getName() + "' field because the *instance* is missing\n" +
+                          "The instance must be created *before* initMocks();\n" +
                                   "Example of correct usage of @Spy:\n" +
-                            	  "   @Spy List mock = new LinkedList();\n" +
-                            	  "   //also, don't forget about MockitoAnnotations.initMocks();");
-
-                    }
-                    if (new MockUtil().isMock(instance)) { 
-                        // instance has been spied earlier
-                        Mockito.reset(instance);
-                    } else {
-                        field.set(testClass, Mockito.spy(instance));
-                    }
-                } catch (IllegalAccessException e) {
-                    throw new MockitoException("Problems initiating spied field " + field.getName(), e);
-                } finally {
-                    field.setAccessible(wasAccessible);
+                          "   @Spy List mock = new LinkedList();\n" +
+                          "   //also, don't forget about MockitoAnnotations.initMocks();");
+                }
+                if (instance instanceof Collection) {
+                    throw new MockitoException("Cannot create a @Spy for '" + field.getName() + "' field because it is a Collection\n" +
+                                  "   @Spy List mock = new LinkedList();\n" +
+                                  "   //also, don't forget about MockitoAnnotations.initMocks();");
+                }
+                if (new MockUtil().isMock(instance)) { 
+                    // instance has been spied earlier
+                    Mockito.reset(instance);
+                } else {
+                    field.set(testClass, Mockito.spy(instance));
                 }
+            } catch (IllegalAccessException e) {
+                throw new MockitoException("Problems initiating spied field " + field.getName(), e);
+            } finally {
+                field.setAccessible(wasAccessible);
             }
         }
     }
-    
+}    
     //TODO duplicated elsewhere
     void assertNoAnnotations(Class annotation, Field field, Class ... undesiredAnnotations) {
         for (Class u : undesiredAnnotations) {

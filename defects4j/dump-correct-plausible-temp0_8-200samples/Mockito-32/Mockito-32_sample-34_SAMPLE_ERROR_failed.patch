diff --git a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
index e292e1300..a8c62bcfa 100644
--- a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
+++ b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
@@ -25,7 +25,7 @@ public class SpyAnnotationEngine implements AnnotationEngine {
     }
     
     @SuppressWarnings("deprecation")
-    public void process(Class<?> context, Object testClass) {
+	public void process(Class<?> context, Object testClass) {
         Field[] fields = context.getDeclaredFields();
         for (Field field : fields) {
             if (field.isAnnotationPresent(Spy.class)) {
@@ -35,18 +35,14 @@ public class SpyAnnotationEngine implements AnnotationEngine {
                 try {
                     Object instance = field.get(testClass);
                     if (instance == null) {
-                        throw new MockitoException("Cannot create a @Spy for '" + field.getName() + "' field because the *instance* is missing\n" +
-                        		  "The instance must be created *before* initMocks();\n" +
-                                  "Example of correct usage of @Spy:\n" +
-                            	  "   @Spy List mock = new LinkedList();\n" +
-                            	  "   //also, don't forget about MockitoAnnotations.initMocks();");
-
-                    }
-                    if (new MockUtil().isMock(instance)) { 
+                        instance = new GloballyConfiguredAnswer().createSpy(field);
+                        field.set(testClass, instance);
+                    } else if (new MockUtil().isMock(instance)) {
                         // instance has been spied earlier
                         Mockito.reset(instance);
                     } else {
-                        field.set(testClass, Mockito.spy(instance));
+                        instance = Mockito.spy(instance);
+                        field.set(testClass, instance);
                     }
                 } catch (IllegalAccessException e) {
                     throw new MockitoException("Problems initiating spied field " + field.getName(), e);

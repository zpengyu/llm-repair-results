diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index dbe40e0f..c6d0f88b 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -1033,31 +1033,32 @@ class TypeInference
   }
 
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
-    JSType constructorType = constructor.getJSType();
-    JSType type = null;
-    if (constructorType != null) {
-      constructorType = constructorType.restrictByNotNullOrUndefined();
-      if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
-      } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
-        }
-        if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+    if (constructor != null) {
+      scope = traverse(constructor, scope);
+      JSType constructorType = constructor.getJSType();
+      JSType type = null;
+      if (constructorType != null) {
+        constructorType = constructorType.restrictByNotNullOrUndefined();
+        if (constructorType.isUnknownType()) {
+          type = getNativeType(UNKNOWN_TYPE);
+        } else {
+          FunctionType ct = constructorType.toMaybeFunctionType();
+          if (ct == null && constructorType instanceof FunctionType) {
+            // If constructorType is a NoObjectType, then toMaybeFunctionType will
+            // return null. But NoObjectType implements the FunctionType
+            // interface, precisely because it can validly construct objects.
+            ct = (FunctionType) constructorType;
+          }
+          if (ct != null && ct.isConstructor()) {
+            type = ct.getInstanceType();
+          }
         }
       }
-    }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+      n.setJSType(type);
+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        scope = traverse(arg, scope);
+      }
     }
     return scope;
   }

diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index dbe40e0f..cc6f30e4 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -1032,24 +1032,17 @@ class TypeInference
     }
   }
 
-  private FlowScope traverseNew(Node n, FlowScope scope) {
-
+   private FlowScope traverseNew(Node n, FlowScope scope) {
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
-    JSType constructorType = constructor.getJSType();
     JSType type = null;
+    JSType constructorType = constructor.getJSType();
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
-        }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }

diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java
index 13d8808b..6b83319b 100644
--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -1312,10 +1312,53 @@ final class TypedScopeCreator implements ScopeCreator {
           }
         }
       }
-
-      return getDeclaredTypeInAnnotation(sourceName, lValue, info);
+      JSType type = null;
+      if (info != null) {
+        type = getDeclaredTypeInAnnotation(sourceName, lValue, info);
+      }
+      if (type != null) {
+        return type;
+      }
+      return createTypeFromCommentNode(sourceName, lValue, info);
+    }
+    /**
+     * Creates a type from a {@link JSDocInfo} on a declaration node.
+     *
+     * @param sourceName The name of the file containing the {@code node}
+     * @param node The node with the {@code info}.
+     * @param info The {@link JSDocInfo} from the {@code node}.
+     * @return A type object described by the {@code info}.
+     */
+    @Nullable
+    private JSType getDeclaredTypeInAnnotation(
+        String sourceName, Node node, JSDocInfo info) {
+      Preconditions.checkState(info.hasType());
+      if (info.getType() == null) {
+        return null;
+      }
+      JSType type = info.getType().evaluate(this, sourceName);
+      if (type == null) {
+        return null;
+      }
+      if (info.hasEnumParameterType()) {
+        // If this is an enum, cache the type we're creating, so that we can
+        // add the keys to it.
+        typeRegistry.put(null, info.getType().toString(), type);
+      }
+      if (!info.getBaseType().isEmpty()
+          && (info.isConstructor() || info.isInterface())) {
+        String baseTypeName = info.getBaseType().get(0);
+        if (baseTypeName.equals("Function")) {
+          baseTypeName = "Function";
+        }
+        JSType baseType = createTypeFromCommentNode(sourceName, node, info);
+        FunctionType functionType = type.toMaybeFunctionType();
+        if (functionType != null) {
+          functionType.setPrototypeBasedOn(baseType);
+        }
+      }
+      return type;
     }
-
     private FunctionType getFunctionType(@Nullable Var v) {
       JSType t = v == null ? null : v.getType();
       ObjectType o = t == null ? null : t.dereference();

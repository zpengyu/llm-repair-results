    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
        if (valueToAdd == 0) {
            return values;
        }
        // overridden as superclass algorithm can't handle
        // 2004-02-29 + 48 months -> 2008-02-29 type dates
        if (DateTimeUtils.isContiguous(partial)) {
            long instant = 0L;
            for (int i = 0, isize = partial.size(); i < isize; i++) {
                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
            }
            instant = add(instant, valueToAdd);
            return iChronology.get(partial, instant);
        } else if (fieldIndex < partial.size() && partial.getFieldType(fieldIndex).getField(iChronology) == this) {
            // month is largest field and being added to, such as month-day
            int target = values[fieldIndex];
            int[] copy = new int[values.length];
            System.arraycopy(values, 0, copy, 0, values.length);
            for (int i = 0; i < valueToAdd; i++) {
                target = getWrappedField(target).add(target, 1);
            }
            copy[fieldIndex] = target;
            return set(partial, fieldIndex, values, target);
        } else {
            return super.add(partial, fieldIndex, values, valueToAdd);
        }
    }
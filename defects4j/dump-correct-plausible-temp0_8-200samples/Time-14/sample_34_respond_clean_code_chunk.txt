    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
        // overridden as superclass algorithm can't handle
        // 2004-02-29 + 48 months -> 2008-02-29 type dates
        if (valueToAdd == 0) {
            return values;
        }
        if (DateTimeUtils.isContiguous(partial)) {
            // month is largest field and being added to, such as month-day
            long instant = 0L;
            for (int i = 0, isize = partial.size(); i < isize; i++) {
                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
            }
            instant = add(instant, valueToAdd);
            return iChronology.get(partial, instant);
        }
        if (valueToAdd == 0) {
            return set(partial, fieldIndex, values, get(partial, fieldIndex));  // value is unchanged
        }
        long instant = 0L;
        int i = 0;
        while (i < partial.size() && partial.getFieldType(i) != getType()) {
            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
            i++;
        }
        if (i == partial.size()) {
            // no field of this type found
            throw new IllegalArgumentException("Partial does not contain field " + getType());
        }
        instant = getField(iChronology).add(instant, valueToAdd);
        i++;
        while (i < partial.size()) {
            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
            i++;
        }
        return iChronology.get(partial, instant);
    }
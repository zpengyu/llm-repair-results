    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
        // overridden as superclass algorithm can't handle
        // 2004-02-29 + 48 months -> 2008-02-29 type dates
        if (valueToAdd == 0) {
            return values;
        }
            // month is largest field and being added to, such as month-day
        if (DateTimeUtils.isContiguous(partial)) {
            long instant = 0L;
            for (int i = 0, isize = partial.size(); i < isize; i++) {
                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
            }
            instant = add(instant, valueToAdd);
            return iChronology.get(partial, instant);
        } else {
            int[] copy = new int[values.length];
            System.arraycopy(values, 0, copy, 0, values.length);
            copy = super.add(partial, fieldIndex, copy, valueToAdd);
            for (int i = 0, isize = partial.size(); i < isize; i++) {
                FieldType type = partial.getFieldType(i);
                if (i == fieldIndex || type.getDurationField().getType() != iDurationFieldType) {
                    continue;
                }
                int min = type.getRangeDurationField().getMinimumValue(partial.getField(i));
                if (copy[i] < min) {
                    copy[i] = min;
                }
            }
            return copy;
        }
    }
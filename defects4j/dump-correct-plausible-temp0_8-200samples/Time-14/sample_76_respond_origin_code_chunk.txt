    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
        // overridden as superclass algorithm can't handle
        // 2004-02-29 + 48 months -> 2008-02-29 type dates
        if (valueToAdd == 0) {
            return values;
        }
            // month is largest field and being added to, such as month-day
        if (DateTimeUtils.isContiguous(partial)) {
            long instant = 0L;
            for (int i = 0, isize = partial.size(); i < isize; i++) {
                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
            }
            instant = add(instant, valueToAdd);
            return iChronology.get(partial, instant);
        } else if (partial.size() > fieldIndex) {
            int year = fieldIndex == 0 ? partial.getFieldType(fieldIndex).getField(iChronology).add(values[fieldIndex], valueToAdd) : values[fieldIndex];
            DateTime dt = new DateTime(year, values[1], values[2], values[3], values[4], values[5], values[6], iChronology);
            int[] newValues = new int[8];
            for (int i = 0; i < 8; i++) {
                newValues[i] = dt.get(INSTANCE.iTypes[i]);
            }
            return newValues;
        } else {
            return super.add(partial, fieldIndex, values, valueToAdd);
        }
    }

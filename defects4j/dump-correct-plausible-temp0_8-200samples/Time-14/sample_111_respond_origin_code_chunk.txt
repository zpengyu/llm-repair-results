    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
        // overridden as superclass algorithm can't handle
        // 2004-02-29 + 48 months -> 2008-02-29 type dates
        if (valueToAdd == 0) {
            return values;
        }
        if (DateTimeUtils.isContiguous(partial)) {
            long instant = 0L;
            for (int i = 0, isize = partial.size(); i < isize; i++) {
                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
            }
            instant = add(instant, valueToAdd);
            return iChronology.get(partial, instant);
        } else {
            FieldUtils.verifyValueBounds(this, valueToAdd, getMinimumValue(), getMaximumValueForSet(partial, values));

            long instant = 0L;
            for (int i = 0, isize = partial.size(); i < isize; i++) {
                if (i != fieldIndex) {
                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
                }
            }
            instant = iChronology.set(instant, fieldIndex, values[fieldIndex]);
            instant = add(instant, valueToAdd);
            instant = iChronology.set(instant, fieldIndex, 0);

            int[] newValues = iChronology.get(partial, instant);
            System.arraycopy(values, 0, newValues, 0, fieldIndex);
            System.arraycopy(values, fieldIndex + 1, newValues, fieldIndex + 1, newValues.length - (fieldIndex + 1));
            newValues[fieldIndex] = 0;

            return set(partial, fieldIndex, newValues, get(instant));
        }
    }

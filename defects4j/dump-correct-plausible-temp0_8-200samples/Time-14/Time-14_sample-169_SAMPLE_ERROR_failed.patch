diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
index 98e6912c..46017f0b 100644
--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
@@ -200,20 +200,23 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {
     }
 
     //-----------------------------------------------------------------------
-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
-            instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+            if (partial.size() == iChronology.getDateTimeMillisDurationField().getRangeDurationField().getUnitMillis()) {
+                instant = add(instant, valueToAdd);
+                return iChronology.get(partial, instant);
+            }
+            int[] newValues = new int[iChronology.get(instant, values)];
+            return iChronology.add(partial, fieldIndex, newValues, valueToAdd);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }

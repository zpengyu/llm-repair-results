    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
        // overridden as superclass algorithm can't handle
        // 2004-02-29 + 48 months -> 2008-02-29 type dates
        if (valueToAdd == 0) {
            return values;
        }
            // month is largest field and being added to, such as month-day
        if (DateTimeUtils.isContiguous(partial)) {
            long instant = 0L;
            for (int i = 0, isize = partial.size(); i < isize; i++) {
                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
            }
            instant = add(instant, valueToAdd);
            return iChronology.get(partial, instant);
        } else {
            int[] newValues = values;
            int current = super.get(partial, fieldIndex);
            int newValue = FieldUtils.safeAdd(current, valueToAdd);
            newValues = set(partial, fieldIndex, values, newValue);
            if (newValues[fieldIndex] != current) {
                int min = getMinimumValue(partial, newValues);
                int max = getMaximumValue(partial, newValues);
                if (newValue < min || newValue > max) {
                    int[] remainder =
                        getWrappedField(partial, fieldIndex).addWrapPartial(partial, fieldIndex, newValues,
                            valueToAdd);
                    System.arraycopy(remainder, 0, newValues, 0, remainder.length);
                }
            }
            return newValues;
        }
    }
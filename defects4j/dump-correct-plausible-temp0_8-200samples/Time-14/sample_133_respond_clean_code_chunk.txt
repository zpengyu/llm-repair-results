    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
        // overridden as superclass algorithm can't handle
        // 2004-02-29 + 48 months -> 2008-02-29 type dates
        if (valueToAdd == 0) {
            return values;
        }
            // month is largest field and being added to, such as month-day
        if (DateTimeUtils.isContiguous(partial)) {
            long instant = 0L;
            for (int i = 0, isize = partial.size(); i < isize; i++) {
                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
            }
            instant = add(instant, valueToAdd);
            return iChronology.get(partial, instant);
        }
        if (partial.size() == 2 && partial.getFieldType(0) == DateTimeFieldType.monthOfYear() && partial.getFieldType(1) == DateTimeFieldType.dayOfMonth()) {
            int month = values[0];
            int day = values[1];
            int[] daysInMonth = iChronology.getDaysInMonth(DateTimeUtils.getBaseYear(iBase));
            int max = daysInMonth[month - 1];
            if (valueToAdd != 0) {
                // TODO: Handle add across a leap year boundary
                day += valueToAdd;
                if (day > max) {
                    day -= max;
                    month++;
                } else if (day < 1) {
                    day += daysInMonth[month - 2];
                    month--;
                }
            }
            values = new int[] {month, day};
        } else {
            values = super.add(partial, fieldIndex, values, valueToAdd);
        }
        return values;
    }
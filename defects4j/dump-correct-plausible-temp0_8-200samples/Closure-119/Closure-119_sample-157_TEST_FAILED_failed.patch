diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java
index a00893b3..c8f34c0b 100644
--- a/src/com/google/javascript/jscomp/GlobalNamespace.java
+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java
@@ -305,39 +305,11 @@ class GlobalNamespace
 
     public void collect(JSModule module, Scope scope, Node n) {
       Node parent = n.getParent();
-
-      String name;
-      boolean isSet = false;
       Name.Type type = Name.Type.OTHER;
       boolean isPropAssign = false;
-
+      boolean isSet = false;
+      String name = null;
       switch (n.getType()) {
-        case Token.GETTER_DEF:
-        case Token.SETTER_DEF:
-        case Token.STRING_KEY:
-          // This may be a key in an object literal declaration.
-          name = null;
-          if (parent != null && parent.isObjectLit()) {
-            name = getNameForObjLitKey(n);
-          }
-          if (name == null) {
-            return;
-          }
-          isSet = true;
-          switch (n.getType()) {
-            case Token.STRING_KEY:
-              type = getValueType(n.getFirstChild());
-              break;
-            case Token.GETTER_DEF:
-              type = Name.Type.GET;
-              break;
-            case Token.SETTER_DEF:
-              type = Name.Type.SET;
-              break;
-            default:
-              throw new IllegalStateException("unexpected:" + n);
-          }
-          break;
         case Token.NAME:
           // This may be a variable get or set.
           if (parent != null) {
@@ -409,10 +381,38 @@ class GlobalNamespace
             return;
           }
           break;
-        default:
-          return;
       }
-
+      if (name == null) {
+        switch (n.getType()) {
+          case Token.GETTER_DEF:
+          case Token.SETTER_DEF:
+          case Token.STRING_KEY:
+            // This may be a key in an object literal declaration.
+            if (parent != null && parent.isObjectLit()) {
+              name = getNameForObjLitKey(n);
+            }
+            if (name == null) {
+              return;
+            }
+            isSet = true;
+            switch (n.getType()) {
+              case Token.STRING_KEY:
+                type = getValueType(n.getFirstChild());
+                break;
+              case Token.GETTER_DEF:
+                type = Name.Type.GET;
+                break;
+              case Token.SETTER_DEF:
+                type = Name.Type.SET;
+                break;
+              default:
+                throw new IllegalStateException("unexpected:" + n);
+            }
+            break;
+          default:
+            return;
+        }
+      }
       // We are only interested in global names.
       if (!isGlobalNameReference(name, scope)) {
         return;

diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java
index ddaada2f1..a7886bf52 100644
--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java
+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java
@@ -48,10 +47,23 @@ public class ByteBuddyMockMaker implements MockMaker {
                     ""
             ),cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+            return (T) createMockUsingConstructor(settings, handler, mockedProxyType);
         }
     }
-
+	private Object createMockUsingConstructor(MockCreationSettings<?> settings, MockHandler handler, Class<?> mockedProxyType) {
+		try {
+			Object[] args = new Object[settings.getConstructorArgs().length];
+			for (int i = 0; i < args.length; i++) {
+				args[i] = settings.getConstructorArgs()[i];
+			}
+			Object mockInstance = mockedProxyType.getConstructor(settings.getConstructorArgTypes()).newInstance(args);
+			MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
+			mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+			return ensureMockIsAssignableToMockedType(settings, mockInstance);
+		} catch (Exception e) {
+			throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+		}
+	}
     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {
         // Force explicit cast to mocked type here, instead of
         // relying on the JVM to implicitly cast on the client call site.

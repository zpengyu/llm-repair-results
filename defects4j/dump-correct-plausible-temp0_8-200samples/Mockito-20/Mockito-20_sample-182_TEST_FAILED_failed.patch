diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java
index ddaada2f1..ac60eb9c0 100644
--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java
+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java
@@ -21,37 +21,37 @@ public class ByteBuddyMockMaker implements MockMaker {
         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();
     }
 
-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
-            throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
-        }
-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
-                settings.getTypeToMock(),
-                settings.getExtraInterfaces()
-        );
-        T mockInstance = null;
-        try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
-
-            return ensureMockIsAssignableToMockedType(settings, mockInstance);
-        } catch (ClassCastException cce) {
-            throw new MockitoException(join(
-                    "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
-                    "",
-                    "You might experience classloading issues, please ask the mockito mailing-list.",
-                    ""
-            ),cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
-        }
-    }
-
+	public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
+		if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
+			throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
+		}
+		Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
+				settings.getTypeToMock(),
+				settings.getExtraInterfaces()
+		);
+		T mockInstance = null;
+		try {
+			mockInstance = classInstantiator.instantiate(mockedProxyType);
+			if (mockInstance instanceof MockMethodInterceptor.MockAccess) {
+				MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
+				mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+			}
+			return ensureMockIsAssignableToMockedType(settings, mockInstance);
+		} catch (ClassCastException cce) {
+			throw new MockitoException(join(
+					"ClassCastException occurred while creating the mockito mock :",
+					"  class to mock : " + describeClass(mockedProxyType),
+					"  created class : " + describeClass(settings.getTypeToMock()),
+					"  proxy instance class : " + describeClass(mockInstance),
+					"  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+					"",
+					"You might experience classloading issues, please ask the mockito mailing-list.",
+					""
+			),cce);
+		} catch (org.mockito.internal.creation.instance.InstantiationException e) {
+			throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+		}
+	}
     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {
         // Force explicit cast to mocked type here, instead of
         // relying on the JVM to implicitly cast on the client call site.

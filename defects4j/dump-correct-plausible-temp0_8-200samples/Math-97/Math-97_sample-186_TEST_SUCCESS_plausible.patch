diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java
index 8dab47503..9038c82a8 100644
--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java
+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java
@@ -122,35 +122,40 @@ public class BrentSolver extends UnivariateRealSolverImpl {
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
-    public double solve(double min, double max) throws MaxIterationsExceededException, 
+public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
-        
         clearResult();
         verifyInterval(min, max);
-        
         double ret = Double.NaN;
-        
         double yMin = f.value(min);
         double yMax = f.value(max);
-
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign >= 0) {
+        if (sign < 0) {
+            // solve using only the first endpoint as initial guess
+            ret = solve(min, yMin, max, yMax, min, yMin);
+        } else if (sign > 0) {
             // check if either value is close to a zero
+            if (Math.abs(yMin) <= functionValueAccuracy) {
+                ret = min;
+            } else if (Math.abs(yMax) <= functionValueAccuracy) {
+                ret = max;
+            } else {
                 // neither value is close to zero and min and max do not bracket root.
-                throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
+                throw new IllegalArgumentException("Function values at endpoints do not have different signs." +
                         "  Endpoints: [" + min + "," + max + "]" + 
                         "  Values: [" + yMin + "," + yMax + "]");
+            }
         } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+            // sign = 0 implies both values = 0
+            if (yMin == 0) {
+                ret = min;
+            } else {
+                ret = max;
+            }
         }
-
         return ret;
-    }
-        
+}        
     /**
      * Find a zero starting search according to the three provided points.
      * @param x0 old approximation for the root

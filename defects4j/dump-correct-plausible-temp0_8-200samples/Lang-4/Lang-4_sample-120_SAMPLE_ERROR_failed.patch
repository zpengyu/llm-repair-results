diff --git a/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java
index f372f004..437cc121 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java
@@ -27,11 +27,10 @@ import java.util.HashMap;
  * @version $Id$
  */
 public class LookupTranslator extends CharSequenceTranslator {
-
     private final HashMap<CharSequence, CharSequence> lookupMap;
+    private final HashSet<CharSequence> prefixSet;
     private final int shortest;
     private final int longest;
-
     /**
      * Define the lookup table to be used in translation
      *
@@ -44,11 +43,13 @@ public class LookupTranslator extends CharSequenceTranslator {
      */
     public LookupTranslator(final CharSequence[]... lookup) {
         lookupMap = new HashMap<CharSequence, CharSequence>();
+        prefixSet = new HashSet<CharSequence>();
         int _shortest = Integer.MAX_VALUE;
         int _longest = 0;
         if (lookup != null) {
             for (final CharSequence[] seq : lookup) {
                 this.lookupMap.put(seq[0], seq[1]);
+                this.prefixSet.add(seq[0]);
                 final int sz = seq[0].length();
                 if (sz < _shortest) {
                     _shortest = sz;
@@ -79,7 +79,32 @@ public class LookupTranslator extends CharSequenceTranslator {
                 out.write(result.toString());
                 return i;
             }
+            for(CharSequence prefix : prefixSet) {
+                if(startsWith(subSeq, prefix)) {
+                    return 0;
+                }
+            }
         }
         return 0;
     }
+    /**
+     * Implements startsWith
+     *
+     * @param input CharSequence to examine
+     * @param prefix the prefix to locate
+     *
+     * @return true if the character sequence represented by the argument is a prefix of the character sequence represented by this string; false otherwise.
+     *         Note also that true will be returned if the argument is an empty string or is equal to this String object as determined by the equals(Object) method.
+     */
+    static boolean startsWith(final CharSequence input, final CharSequence prefix) {
+        if (prefix.length() > input.length()) {
+            return false;
+        }
+        for (int i = 0; i < prefix.length(); i++) {
+            if (input.charAt(i) != prefix.charAt(i)) {
+                return false;
+            }
+        }
+        return true;
+    }
 }
\ No newline at end of file

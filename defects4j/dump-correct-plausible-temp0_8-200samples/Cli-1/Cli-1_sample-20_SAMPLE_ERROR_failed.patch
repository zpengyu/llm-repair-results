diff --git a/src/java/org/apache/commons/cli/CommandLine.java b/src/java/org/apache/commons/cli/CommandLine.java
index de23601..439fb3c 100644
--- a/src/java/org/apache/commons/cli/CommandLine.java
+++ b/src/java/org/apache/commons/cli/CommandLine.java
@@ -37,204 +37,25 @@ import java.util.Map;
  * @author <a href="mailto:jstrachan@apache.org">James Strachan</a>
  * @author John Keyes (john at integralsource.com)
  */
-public class CommandLine {
-
-    /** the unrecognised options/arguments */
-    private List args = new LinkedList();
-
-    /** the processed options */
-    private Map options = new HashMap();
-    private Map names = new HashMap();
-
-    /** Map of unique options for ease to get complete list of options */
-//    private Set allOptions = new HashSet();
-    private Map hashcodeMap = new HashMap();
-
-    /**
-     * Creates a command line.
-     */
-    CommandLine()
-    {
-        // nothing to do
-    }
-
-    /** 
-     * Query to see if an option has been set.
-     *
-     * @param opt Short name of the option
-     * @return true if set, false if not
-     */
-    public boolean hasOption(String opt)
-    {
-        return options.containsKey(opt);
-    }
-
-    /**
-     * Query to see if an option has been set.
-     *
-     * @param opt character name of the option
-     * @return true if set, false if not
-     */
-    public boolean hasOption(char opt)
-    {
-        return hasOption(String.valueOf(opt));
-    }
-
-    /**
-     * Return the <code>Object</code> type of this <code>Option</code>.
-     *
-     * @param opt the name of the option
-     * @return the type of this <code>Option</code>
-     */
-    public Object getOptionObject(String opt)
-    {
-        String res = getOptionValue(opt);
-
-        if (!options.containsKey(opt))
-        {
-            return null;
-        }
-
-        Object type = ((Option) options.get(opt)).getType();
-
-        return (res == null)        ? null : TypeHandler.createValue(res, type);
-    }
-
-    /**
-     * Return the <code>Object</code> type of this <code>Option</code>.
-     *
-     * @param opt the name of the option
-     * @return the type of opt
-     */
-    public Object getOptionObject(char opt)
-    {
-        return getOptionObject(String.valueOf(opt));
-    }
-
-    /** 
-     * Retrieve the argument, if any, of this option.
-     *
-     * @param opt the name of the option
-     * @return Value of the argument if option is set, and has an argument,
-     * otherwise null.
-     */
-    public String getOptionValue(String opt)
-    {
-        String[] values = getOptionValues(opt);
-
-        return (values == null) ? null : values[0];
-    }
-
-    /** 
-     * Retrieve the argument, if any, of this option.
-     *
-     * @param opt the character name of the option
-     * @return Value of the argument if option is set, and has an argument,
-     * otherwise null.
-     */
-    public String getOptionValue(char opt)
-    {
-        return getOptionValue(String.valueOf(opt));
-    }
-
-    /** 
-     * Retrieves the array of values, if any, of an option.
-     *
-     * @param opt string name of the option
-     * @return Values of the argument if option is set, and has an argument,
-     * otherwise null.
+/**
+     * <p>Retrieves the option object given the long or short option as a String</p>
+     * @param opt short or long name of the option
+     * @return Canonicalized option
      */
-    public String[] getOptionValues(String opt)
+    public Option getOption(String opt)
     {
         opt = Util.stripLeadingHyphens(opt);
-
-        String key = opt;
-        if (names.containsKey(opt))
-
+        Option option = null;
+        if (options.containsKey(opt))
         {
-            key = (String) names.get(opt);
+            option = (Option) options.get(opt);
         }
-
-        if (options.containsKey(key))
+        else
         {
-            return ((Option) options.get(key)).getValues();
-        }
-        return null;
+            option = (Option) names.get(opt);
         }
-
-    /**
-     * <p>Retrieves the option object given the long or short option as a String</p>
-     * @param opt short or long name of the option
-     * @return Canonicalized option
-     */
-
-
-    /**
-     * Retrieves the array of values, if any, of an option.
-     *
-     * @param opt character name of the option
-     * @return Values of the argument if option is set, and has an argument,
-     * otherwise null.
-     */
-    public String[] getOptionValues(char opt)
-    {
-        return getOptionValues(String.valueOf(opt));
-    }
-
-    /** 
-     * Retrieve the argument, if any, of an option.
-     *
-     * @param opt name of the option
-     * @param defaultValue is the default value to be returned if the option 
-     * is not specified
-     * @return Value of the argument if option is set, and has an argument,
-     * otherwise <code>defaultValue</code>.
-     */
-    public String getOptionValue(String opt, String defaultValue)
-    {
-        String answer = getOptionValue(opt);
-
-        return (answer != null) ? answer : defaultValue;
+        return option;
     }
-
-    /** 
-     * Retrieve the argument, if any, of an option.
-     *
-     * @param opt character name of the option
-     * @param defaultValue is the default value to be returned if the option 
-     * is not specified
-     * @return Value of the argument if option is set, and has an argument,
-     * otherwise <code>defaultValue</code>.
-     */
-    public String getOptionValue(char opt, String defaultValue)
-    {
-        return getOptionValue(String.valueOf(opt), defaultValue);
-    }
-
-    /** 
-     * Retrieve any left-over non-recognized options and arguments
-     *
-     * @return remaining items passed in but not parsed as an array
-     */
-    public String[] getArgs()
-    {
-        String[] answer = new String[args.size()];
-
-        args.toArray(answer);
-
-        return answer;
-    }
-
-    /** 
-     * Retrieve any left-over non-recognized options and arguments
-     *
-     * @return remaining items passed in but not parsed as a <code>List</code>.
-     */
-    public List getArgList()
-    {
-        return args;
-    }
-
     /**
      * jkeyes
      * - commented out until it is implemented properly
@@ -242,21 +63,15 @@ public class CommandLine {
      *
      * @return Stringified form of this object
      */
-
-    /*
     public String toString() {
         StringBuffer buf = new StringBuffer();
-            
         buf.append("[ CommandLine: [ options: ");
         buf.append(options.toString());
         buf.append(" ] [ args: ");
         buf.append(args.toString());
         buf.append(" ] ]");
-            
         return buf.toString();
     }
-    */
-
     /**
      * Add left-over unrecognized option/argument.
      *

diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
index f776072cc..0832a7789 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
@@ -173,12 +173,31 @@ public class ObjectMapper
                 }
                 // fall through
             case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
-
+                /* As per [databind#436], can not blindly assume that just because
+                 * type is abstract, it must be convertible to Object. So must
+                 * first ensure it's not one of recognized types
+                 */
+                if (t.getRawClass() == Object.class) {
+                    return true;
+                }
+                if (!t.isConcrete()) { // abstract:
+                    Class<?> cls = t.getRawClass();
+                    // First: things that we know are impls of mapped types, skip:
+                    if (cls == HashMap.class) {
+                        return false;
+                    }
+                    if (Map.class.isAssignableFrom(cls)) {
+                        return _classNames.find("java.util.Map") == null;
+                    }
+                    if (Collection.class.isAssignableFrom(cls)) {
+                        return _classNames.find("java.util.Collection") == null;
+                    }
+                    if (Iterator.class.isAssignableFrom(cls)) {
+                        return _classNames.find("java.util.Iterator") == null;
+                    }
+                    return true;
+                }
+                return false;
             case NON_FINAL:
                 while (t.isArrayType()) {
                     t = t.getContentType();
@@ -187,11 +206,9 @@ public class ObjectMapper
                 return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
             default:
             //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
                 return (t.getRawClass() == Object.class);
             }
-        }
-    }
+        }    }
 
     /*
     /**********************************************************

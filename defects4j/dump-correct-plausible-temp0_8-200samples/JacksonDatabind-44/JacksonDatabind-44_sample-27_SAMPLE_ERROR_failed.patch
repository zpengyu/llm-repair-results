diff --git a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
index 09fc2487a..f19a7f642 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
@@ -126,20 +126,37 @@ public class SimpleType // note: until 2.6 was final
             return this;
         }
         // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
+        if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
-                    _valueHandler, _typeHandler, _asStatic);
+        }
         // Otherwise, stitch together the hierarchy. First, super-class
+        JavaType superCls = _superClass;
+        if (superCls != null) {
+            // NOTE: superCls only known to be assignable from _class, not from subclass
+            JavaType superCls2 = superCls._narrow(subclass);
+            if (superCls2 != superCls) {
+                // probably can't happen, but for now let's verify
+                if (superCls2.getClass() != superCls.getClass()) {
+                    throw new IllegalArgumentException("Internal error: broken super-type handling");
+                }
+                superCls = superCls2;
+            }
+        }
         // if not found, try a super-interface
+        JavaType superIface = _findSuperInterfaceChain(subclass);
+        if (superIface != null) {
+            // probably can't happen, but for now let's verify
+            if (superCls != null && superCls.getRawClass() == subclass) {
+                if (superIface.getRawClass() != _class) {
+                    throw new IllegalArgumentException("Internal error: broken super-type handling");
+                }
+            }
+            return superIface;
+        }
         // should not get here but...
+        return superCls == null ? this : superCls;
     }
-
     @Override
     public JavaType withContentType(JavaType contentType) {
         throw new IllegalArgumentException("Simple types have no content types; can not call withContentType()");

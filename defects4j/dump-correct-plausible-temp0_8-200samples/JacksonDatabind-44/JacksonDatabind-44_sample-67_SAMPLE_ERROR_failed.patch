diff --git a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
index 09fc2487a..de62d58cc 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
@@ -129,17 +129,38 @@ public class SimpleType // note: until 2.6 was final
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
         // TODO: fix in 2.8
+        if (!_class.isAssignableFrom(subclass)) {
             /*
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
                     */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
-                    _valueHandler, _typeHandler, _asStatic);
+            reportBadDefinition(_class, subclass);
+        }
         // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
+        if (subclass.isInterface()) {
+            for (Class<?> cls : _superInterfaces) {
+                if (cls.isAssignableFrom(subclass)) {
+                    return new SimpleType(subclass, _bindings, this, _superInterfaces,
+                            _valueHandler, _typeHandler, _asStatic);
+                }
+            }
+            // if not found, try a super-interface
+            for (Class<?> cls : subclass.getInterfaces()) {
+                if (_class.isAssignableFrom(cls)) {
+                    return new SimpleType(subclass, _bindings, this, _superInterfaces,
+                            _valueHandler, _typeHandler, _asStatic);
+                }
+            }
+        } else {
+            Class<?> superCls = subclass.getSuperclass();
+            if (_class.isAssignableFrom(superCls)) {
+                return new SimpleType(subclass, _bindings, this, _superInterfaces,
+                        _valueHandler, _typeHandler, _asStatic);
+            }
+        }
         // should not get here but...
+        reportBadDefinition(_class, subclass);
     }
-
     @Override
     public JavaType withContentType(JavaType contentType) {
         throw new IllegalArgumentException("Simple types have no content types; can not call withContentType()");

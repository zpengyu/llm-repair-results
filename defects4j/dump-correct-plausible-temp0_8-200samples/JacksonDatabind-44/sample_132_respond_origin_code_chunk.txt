    protected JavaType _narrow(Class<?> subclass)
    {
        if (_class == subclass) {
            return this;
        }
        if (!_class.isAssignableFrom(subclass)) {
            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "+_class.getName());
        }
        // Otherwise, stitch together the hierarchy. First, super-class
        JavaType superClass = _superClass;
        if (superClass == null) {
            superClass = _buildSuperClass();
        }
        // if not found, try a super-interface
        if (superClass != null && superClass.getRawClass().isAssignableFrom(subclass)) {
            return superClass.narrowBy(subclass);
        }
        for (JavaType intCls : _superInterfaces) {
            if (intCls.getRawClass().isAssignableFrom(subclass)) {
                return intCls.narrowBy(subclass);
            }
        }
        // should not get here but...
        return new SimpleType(subclass, _bindings, this, _superInterfaces,
                _valueHandler, _typeHandler, _asStatic);
    }
##Case: ST_Functional_02

diff --git a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
index 09fc2487a..997ec97f1 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
@@ -126,20 +126,34 @@ public class SimpleType // note: until 2.6 was final
             return this;
         }
         // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
+        if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
-                    _valueHandler, _typeHandler, _asStatic);
+        }
         // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
+        Class<?> superCls = subclass.getSuperclass();
+        JavaType superType;
+        if (superCls == null) {
+            superType = null;
+        } else if (superCls == _class) {
+            superType = this;
+        } else {
+            superType = _fromClass(superCls, this._bindings);
+        }
+        // then interfaces
+        Class<?>[] intfs = subclass.getInterfaces();
+        List<JavaType> intfTypes = null;
+        if (intfs != null) {
+            final int len = intfs.length;
+            intfTypes = new ArrayList<JavaType>(len);
+            for (int i = 0; i < len; ++i) {
+                Class<?> intf = intfs[i];
+                intfTypes.add(_fromClass(intf, this._bindings));
+            }
+        }
+        return new SimpleType(subclass, _bindings, superType, intfTypes,
+                _valueHandler, _typeHandler, _asStatic);
     }
-
     @Override
     public JavaType withContentType(JavaType contentType) {
         throw new IllegalArgumentException("Simple types have no content types; can not call withContentType()");

diff --git a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
index 09fc2487a..ce98732f8 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
@@ -129,17 +129,28 @@ public class SimpleType // note: until 2.6 was final
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
         // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
-                    _valueHandler, _typeHandler, _asStatic);
+        //throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
+        //        +_class.getName());
+        if (subclass.isInterface()) {
+            return _narrowByInterface(subclass);
+        }
+        Class<?> superCls = subclass.getSuperclass();
+        if (superCls != _class) {
+            // Important: do not just go to `_superClass()` or `_superInterfaces()`;
+            // need to know that we can find super-type directly, to prevent potential
+            // endless looping
+            JavaType superType = _findSuperTypeChain(_class, superCls);
+            if (superType == null) {
+                throw new IllegalArgumentException("Internal error: class "+subclass.getName()
+                        +" not sub-type of "+_class.getName());
+            }
+            return superType.forcedNarrowBy(_class);
+        }
         // Otherwise, stitch together the hierarchy. First, super-class
         // if not found, try a super-interface
         // should not get here but...
+        return _superClass != null ? _superClass : _superInterfaces[0];
     }
-
     @Override
     public JavaType withContentType(JavaType contentType) {
         throw new IllegalArgumentException("Simple types have no content types; can not call withContentType()");

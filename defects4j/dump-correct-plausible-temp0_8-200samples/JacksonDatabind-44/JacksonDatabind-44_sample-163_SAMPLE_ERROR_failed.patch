diff --git a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
index 09fc2487a..edff61a47 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
@@ -120,26 +120,40 @@ public class SimpleType // note: until 2.6 was final
 
     @Override
     @Deprecated
-    protected JavaType _narrow(Class<?> subclass)
-    {
-        if (_class == subclass) {
-            return this;
-        }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
+     protected JavaType _narrow(Class<?> subclass)
+     {
+         if (_class == subclass) {
+             return this;
+         }
+         // Should we check that there is a sub-class relationship?
+         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
+         //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
+         // TODO: fix in 2.8
+         /*
+         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
-                    _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
-    }
-
+         }
+         */
+         JavaType superClass = _superClass;
+         Class<?> sc = (superClass == null) ? Object.class : superClass.getRawClass();
+         // super-class check?
+         if (sc == subclass) {
+             return superClass;
+         }
+         // if not found, try a super-interface
+         for (JavaType intCls : _superInterfaces) {
+             Class<?> ic = intCls.getRawClass();
+             if (ic == subclass) {
+                 return intCls;
+             }
+             if (subclass.isAssignableFrom(ic)) { // subclass-of
+                 return intCls._narrow(subclass);
+             }
+         }
+         // should not get here but...
+         throw new IllegalArgumentException("Internal error: Class "+subclass.getName()+" not sub-type of "+_class.getName());
+     }
     @Override
     public JavaType withContentType(JavaType contentType) {
         throw new IllegalArgumentException("Simple types have no content types; can not call withContentType()");

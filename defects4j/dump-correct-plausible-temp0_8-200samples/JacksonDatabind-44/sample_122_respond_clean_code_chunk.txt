    protected JavaType _narrow(Class<?> subclass)
    {
        if (_class == subclass) {
            return this;
        }
        // Should we check that there is a sub-class relationship?
        if (!_class.isAssignableFrom(subclass)) {
            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                    +_class.getName());
        }
        // Otherwise, stitch together the hierarchy. First, super-class
        Class<?> superCls = subclass.getSuperclass();
        if (superCls == _class) {
            return new SimpleType(subclass, _bindings, this, _superInterfaces,
                    _valueHandler, _typeHandler, _asStatic);
        }
        // if not found, try a super-interface
        for (Type iface : subclass.getGenericInterfaces()) {
            if (iface instanceof Class<?>) {
                Class<?> ifaceClass = (Class<?>) iface;
                if (ifaceClass.isAssignableFrom(_class)) {
                    return new SimpleType(subclass, _bindings, null, new TypeBindings.AsClass(ifaceClass),
                            _valueHandler, _typeHandler, _asStatic);
                }
            }
        }
        // should not get here but...
        return new SimpleType(subclass, _bindings, this, null,
                _valueHandler, _typeHandler, _asStatic);
    }
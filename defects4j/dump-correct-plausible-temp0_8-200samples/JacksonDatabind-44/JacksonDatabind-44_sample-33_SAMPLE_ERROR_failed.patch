diff --git a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
index 09fc2487a..48e6ab4b8 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
@@ -126,20 +126,39 @@ public class SimpleType // note: until 2.6 was final
             return this;
         }
         // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
+        if (!_class.isAssignableFrom(subclass)) { // just a sanity check
+            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
+                    +_class.getName());
+        }
+        // Otherwise, stitch together the hierarchy. First, super-class
+        JavaType superClass = _superClass;
+        if (superClass != null && superClass.getRawClass().isAssignableFrom(subclass)) {
+            superClass = superClass.narrowBy(subclass);
+        } else {
+            //  but there are some complications with
+            //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
+            // TODO: fix in 2.8
             /*
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
                     */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
-                    _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
+            superClass = _superClass;
+            // Otherwise, stitch together the hierarchy. First, super-class
+            // if not found, try a super-interface
+            if (superClass == null || !superClass.getRawClass().isAssignableFrom(subclass)) {
+                superClass = _findSuperTypeChain(subclass);
+                if (superClass == null) {
+                    superClass = _superClass;
+                }
+            }
+        }
         // should not get here but...
+        if (superClass == null) {
+            throw new IllegalArgumentException("Internal error: cannot resolve Class "+subclass.getName()+" into a super type of "+_class.getName());
+        }
+        return new SimpleType(subclass, _bindings, superClass, _superInterfaces,
+                _valueHandler, _typeHandler, _asStatic);
     }
-
     @Override
     public JavaType withContentType(JavaType contentType) {
         throw new IllegalArgumentException("Simple types have no content types; can not call withContentType()");

diff --git a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
index 09fc2487a..c8013c47a 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
@@ -125,21 +125,35 @@ public class SimpleType // note: until 2.6 was final
         if (_class == subclass) {
             return this;
         }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
-                    _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
+        if (_class.isAssignableFrom(subclass)) {
+            // This also means we have super class:
+            Class<?> sc = subclass.getSuperclass();
+            if (sc == _class) { // super is closest
+                return new SimpleType(subclass, _bindings, this, _superInterfaces,
+                        _valueHandler, _typeHandler, _asStatic);
+            }
+            // but if not, need to go through super-interfaces
+            while (true) {
+                Class<?>[] ifcs = sc.getInterfaces();
+                for (Class<?> ifc : ifcs) {
+                    if (ifc == _class) {
+                        return new SimpleType(subclass, _bindings, null, sc,
+                                _valueHandler, _typeHandler, _asStatic);
+                    }
+                    if (_class.isAssignableFrom(ifc)) {
+                        sc = ifc;
+                        continue main_loop;
+                    }
+                }
+                sc = sc.getSuperclass();
+                if (sc == null || sc == Object.class) {
+                    throw new IllegalArgumentException("Internal error: Class "+subclass.getName()
+                            +" not subtype of "+_class.getName());
+                }
+            }
+        }
+        throw new IllegalArgumentException("Class "+subclass.getName()+" not subtype of "+_class.getName());
     }
-
     @Override
     public JavaType withContentType(JavaType contentType) {
         throw new IllegalArgumentException("Simple types have no content types; can not call withContentType()");

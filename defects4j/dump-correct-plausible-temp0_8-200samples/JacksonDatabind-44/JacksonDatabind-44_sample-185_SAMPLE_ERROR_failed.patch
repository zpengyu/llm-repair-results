diff --git a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
index 09fc2487a..36f279daf 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
@@ -125,21 +125,29 @@ public class SimpleType // note: until 2.6 was final
         if (_class == subclass) {
             return this;
         }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
-                    _valueHandler, _typeHandler, _asStatic);
+        if (!_class.isAssignableFrom(subclass)) { // just to ensure
+            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "+_class.getName());
+        }
         // Otherwise, stitch together the hierarchy. First, super-class
+        Class<?> cc = subclass.getSuperclass();
+        JavaType sup = (cc == null || cc == Object.class) ?
+                null : _fromClass(cc, new TypeBindings(this));
         // if not found, try a super-interface
+        if (sup == null) {
+            for (Class<?> intCls : subclass.getInterfaces()) {
+                sup = _fromClass(intCls, new TypeBindings(this));
+                if (sup != null) {
+                    break;
+                }
+            }
+        }
         // should not get here but...
+        if (sup == null) {
+            throw new IllegalArgumentException("Internal error: cannot resolve JavaType for "+subclass.getName());
+        }
+        sup = sup.withTypeHandler(this._typeHandler).withValueHandler(this._valueHandler);
+        return sup.withContentTypeHandler(this._contentTypeHandler);
     }
-
     @Override
     public JavaType withContentType(JavaType contentType) {
         throw new IllegalArgumentException("Simple types have no content types; can not call withContentType()");

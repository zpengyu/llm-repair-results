diff --git a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
index 09fc2487a..a47629df2 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
@@ -129,17 +129,42 @@ public class SimpleType // note: until 2.6 was final
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
         // TODO: fix in 2.8
-            /*
+        /*
+        if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
-                    */
+        }
+        */
+        JavaType[] newInterfaces = _superInterfaces;
+        if (newInterfaces == null) {
+            newInterfaces = NO_TYPES;
+        }
+        JavaType st = null;
+        if (_superClass != null) {
+            Class<?> superCls = _superClass.getRawClass();
+            // need to check sub-type relationship
+            if (superCls.isAssignableFrom(subclass)) {
+                st = _superClass.narrowBy(subclass);
+            }
+        }
+        if (st == null) {
+            int len = newInterfaces.length;
+            for (int i = 0; i < len; ++i) {
+                JavaType intCls = newInterfaces[i];
+                Class<?> raw = intCls.getRawClass();
+                if (raw.isAssignableFrom(subclass)) {
+                    st = intCls.narrowBy(subclass);
+                    break;
+                }
+            }
+        }
+        if (st == null) {
+            // should not get here but...
             return new SimpleType(subclass, _bindings, this, _superInterfaces,
                     _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
+        }
+        return st.forcedNarrowBy(subclass);
     }
-
     @Override
     public JavaType withContentType(JavaType contentType) {
         throw new IllegalArgumentException("Simple types have no content types; can not call withContentType()");

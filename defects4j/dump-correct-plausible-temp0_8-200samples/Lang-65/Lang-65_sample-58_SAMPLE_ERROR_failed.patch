diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java
index 324dd037..da2068c8 100644
--- a/src/java/org/apache/commons/lang/time/DateUtils.java
+++ b/src/java/org/apache/commons/lang/time/DateUtils.java
@@ -627,17 +625,29 @@ public class DateUtils {
         //
         // Manually truncate milliseconds, seconds and minutes, rather than using
         // Calendar methods.
-
-
         // truncate milliseconds
-
+        int milliseconds = val.get(Calendar.MILLISECOND);
+        if (round && milliseconds >= 500) {
+            val.add(Calendar.MILLISECOND, 500 - milliseconds);
+        } else {
+            val.clear(Calendar.MILLISECOND);
+        }
         // truncate seconds
-
+        int seconds = val.get(Calendar.SECOND);
+        if (round && seconds >= 30) {
+            val.add(Calendar.SECOND, 30 - seconds);
+        } else {
+            val.clear(Calendar.SECOND);
+        }
         // truncate minutes
-
+        int minutes = val.get(Calendar.MINUTE);
+        if (round && minutes >= 30) {
+            val.add(Calendar.MINUTE, 30 - minutes);
+        } else {
+            val.clear(Calendar.MINUTE);
+        }
         // reset time
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
-
         boolean roundUp = false;
         for (int i = 0; i < fields.length; i++) {
             for (int j = 0; j < fields[i].length; j++) {
@@ -709,9 +719,14 @@ public class DateUtils {
                 val.set(fields[i][0], val.get(fields[i][0]) - offset);
         }
         throw new IllegalArgumentException("The field " + field + " is not supported");
-
     }
-
+- Midterm
+- Classify test cases by their effect on the code
+- Find bugs with test cases
+- Read Chapters 1 and 2 of Textbook
+- Finish Midterm
+- Reading Quiz
+- Exercise 1-2
     //-----------------------------------------------------------------------
     /**
      * <p>This constructs an <code>Iterator</code> over each day in a date

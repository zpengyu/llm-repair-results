diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java
index 324dd037..3c4239eb 100644
--- a/src/java/org/apache/commons/lang/time/DateUtils.java
+++ b/src/java/org/apache/commons/lang/time/DateUtils.java
@@ -620,98 +620,120 @@ public class DateUtils {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
-
-
-        // ----------------- Fix for LANG-59 ---------------------- START ---------------
-        // see http://issues.apache.org/jira/browse/LANG-59
-        //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
-        // ----------------- Fix for LANG-59 ----------------------- END ----------------
-
-        boolean roundUp = false;
-        for (int i = 0; i < fields.length; i++) {
-            for (int j = 0; j < fields[i].length; j++) {
-                if (fields[i][j] == field) {
-                    //This is our field... we stop looping
-                    if (round && roundUp) {
-                        if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
-                            if (val.get(Calendar.DATE) == 1) {
-                                val.add(Calendar.DATE, 15);
+        if (field == DateUtils.SEMI_MONTH) {
+            //This is a special case that's hard to generalize
+            //If the date is 1, we round up to 16, otherwise
+            //  we subtract 15 days and add 1 month
+            if (val.get(Calendar.DATE) == 1) {
+                val.add(Calendar.DATE, 15);
+            } else {
+                val.add(Calendar.DATE, -15);
+                val.add(Calendar.MONTH, 1);
+            }
+            // ----------------- Fix for LANG-440 ---------------------- START ---------------
+        } else if (field == DateUtils.RANGE_WEEK_SUNDAY) {
+            // TODO: This is a very poor approximation, which only works for the
+            // northern hemisphere. It should really consider whether the majority of the
+            // week is in the next or last year.
+            // If we're adding to a date that is in December, we want to expect that
+            // we will be in the same year when subtracting the original date.
+            // To do this, we get the original month, and if it's December, we set the
+            // month to November, otherwise we set it to December. We then add two months
+            // and subtract a day. This will always end up in the last week of the
+            // previous year.
+            if (val.get(Calendar.MONTH) == Calendar.DECEMBER) {
+                val.set(Calendar.MONTH, Calendar.NOVEMBER);
+            } else {
+                val.set(Calendar.MONTH, Calendar.DECEMBER);
+            }
+            val.add(Calendar.MONTH, 1);
+            val.add(Calendar.DATE, -1);
+            // ----------------- Fix for LANG-440 ---------------------- END ---------------
+        } else if (field == Calendar.AM_PM) {
+            //This is a special case
+            //AM_PM works in units of 12 hours, so we need to divide the hours by 12,
+            //  take the floor value, multiply by 12 and
+            //  add the remainder. This gives us the correct value with AM = 0 and PM = 12
+            val.add(Calendar.DATE, -val.get(Calendar.AM_PM));
+            val.add(Calendar.HOUR, -12 * val.get(Calendar.AM_PM));
+        } else {
+            //We need at add one to this field since the
+            //  last number causes us to round up
+            boolean roundUp = false;
+            for (int i = 0; i < fields.length; i++) {
+                for (int j = 0; j < fields[i].length; j++) {
+                    if (fields[i][j] == field) {
+                        //This is our field... we stop looping
+                        if (round && roundUp) {
+                            if (field == DateUtils.SEMI_MONTH) {
+                                //This is a special case that's hard to generalize
+                                //If the date is 1, we round up to 16, otherwise
+                                //  we subtract 15 days and add 1 month
+                                if (val.get(Calendar.DATE) == 1) {
+                                    val.add(Calendar.DATE, 15);
+                                } else {
+                                    val.add(Calendar.DATE, -15);
+                                    val.add(Calendar.MONTH, 1);
+                                }
                             } else {
-                                val.add(Calendar.DATE, -15);
-                                val.add(Calendar.MONTH, 1);
+                                //We need at add one to this field since the
+                                //  last number causes us to round up
+                                val.add(fields[i][0], 1);
                             }
-                        } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
-                            val.add(fields[i][0], 1);
                         }
+                        return;
                     }
-                    return;
                 }
-            }
-            //We have various fields that are not easy roundings
-            int offset = 0;
-            boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
-            switch (field) {
-                case DateUtils.SEMI_MONTH:
-                    if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
-                        offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
-                        if (offset >= 15) {
-                            offset -= 15;
+                //We have various fields that are not easy roundings
+                int offset = 0;
+                boolean offsetSet = false;
+                //These are special types of fields that require different rounding rules
+                switch (field) {
+                    case DateUtils.SEMI_MONTH:
+                        if (fields[i][0] == Calendar.DATE) {
+                            //If we're going to drop the DATE field's value,
+                            //  we want to do this our own way.
+                            //We need to subtrace 1 since the date has a minimum of 1
+                            offset = val.get(Calendar.DATE) - 1;
+                            //If we're above 15 days adjustment, that means we're in the
+                            //  bottom half of the month and should stay accordingly.
+                            if (offset >= 15) {
+                                offset -= 15;
+                            }
+                            //Record whether we're in the top or bottom half of that range
+                            roundUp = offset > 7;
+                            offsetSet = true;
                         }
-                        //Record whether we're in the top or bottom half of that range
-                        roundUp = offset > 7;
-                        offsetSet = true;
-                    }
-                    break;
-                case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
-                        offset = val.get(Calendar.HOUR_OF_DAY);
-                        if (offset >= 12) {
-                            offset -= 12;
+                        break;
+                    case Calendar.AM_PM:
+                        if (fields[i][0] == Calendar.HOUR_OF_DAY) {
+                            //If we're going to drop the HOUR field's value,
+                            //  we want to do this our own way.
+                            offset = val.get(Calendar.HOUR_OF_DAY);
+                            if (offset >= 12) {
+                                offset -= 12;
+                            }
+                            roundUp = offset > 6;
+                            offsetSet = true;
                         }
-                        roundUp = offset > 6;
-                        offsetSet = true;
-                    }
-                    break;
-            }
-            if (!offsetSet) {
-                int min = val.getActualMinimum(fields[i][0]);
-                int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
-                offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
-                roundUp = offset > ((max - min) / 2);
+                        break;
+                }
+                if (!offsetSet) {
+                    int min = val.getActualMinimum(fields[i][0]);
+                    int max = val.getActualMaximum(fields[i][0]);
+                    //Calculate the offset from the minimum allowed value
+                    offset = val.get(fields[i][0]) - min;
+                    //Set roundUp if this is more than half way between the minimum and maximum
+                    roundUp = offset > ((max - min) / 2);
+                }
+                //We need to remove this field
+                if (offset != 0) {
+                    val.set(fields[i][0], val.get(fields[i][0]) - offset);
+                }
             }
-            //We need to remove this field
-                val.set(fields[i][0], val.get(fields[i][0]) - offset);
+            throw new IllegalArgumentException("The field " + field + " is not supported");
         }
-        throw new IllegalArgumentException("The field " + field + " is not supported");
-
     }
-
     //-----------------------------------------------------------------------
     /**
      * <p>This constructs an <code>Iterator</code> over each day in a date

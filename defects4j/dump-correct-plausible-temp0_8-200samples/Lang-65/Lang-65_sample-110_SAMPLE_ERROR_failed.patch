diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java
index 324dd037..231f7510 100644
--- a/src/java/org/apache/commons/lang/time/DateUtils.java
+++ b/src/java/org/apache/commons/lang/time/DateUtils.java
@@ -620,98 +620,107 @@ public class DateUtils {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
-
-
-        // ----------------- Fix for LANG-59 ---------------------- START ---------------
-        // see http://issues.apache.org/jira/browse/LANG-59
+        Date date = val.getTime();
+        long time = date.getTime();
+        boolean done = false;
+        // ----------------- Fix for LANG-440 ---------------------- START ---------------
+        // see https://issues.apache.org/jira/browse/LANG-440
         //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
-        // ----------------- Fix for LANG-59 ----------------------- END ----------------
-
-        boolean roundUp = false;
-        for (int i = 0; i < fields.length; i++) {
-            for (int j = 0; j < fields[i].length; j++) {
-                if (fields[i][j] == field) {
-                    //This is our field... we stop looping
-                    if (round && roundUp) {
-                        if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
-                            if (val.get(Calendar.DATE) == 1) {
-                                val.add(Calendar.DATE, 15);
-                            } else {
-                                val.add(Calendar.DATE, -15);
-                                val.add(Calendar.MONTH, 1);
-                            }
-                        } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
-                            val.add(fields[i][0], 1);
-                        }
-                    }
-                    return;
-                }
-            }
-            //We have various fields that are not easy roundings
-            int offset = 0;
-            boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
+        // Fragile code (even <clinit> is called by multiple threads concurrently) and
+        // time zone offset calculation depends on default <code>TimeZone</code>
+        // We use a copy of the original <code>TimeZone</code> saved on the first execution
+        time += val.get(Calendar.ZONE_OFFSET) + val.get(Calendar.DST_OFFSET);
+        // ----------------- Fix for LANG-440 ----------------------- END ----------------
+        while (!done) {
+            done = true;
             switch (field) {
-                case DateUtils.SEMI_MONTH:
-                    if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
-                        offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
-                        if (offset >= 15) {
-                            offset -= 15;
-                        }
-                        //Record whether we're in the top or bottom half of that range
-                        roundUp = offset > 7;
-                        offsetSet = true;
+                case Calendar.MILLISECOND:
+                    // --------------- Fix for LANG-59 ---------------------- START ---------------
+                    // truncate milliseconds
+                    time = time - time % 1000;
+                    done = false;
+                    break;
+                    // --------------- Fix for LANG-59 ---------------------- END ---------------
+                case Calendar.SECOND:
+                    time = time - time % DateUtils.MILLIS_PER_SECOND;
+                    done = false;
+                    break;
+                case Calendar.MINUTE:
+                    time = time - time % DateUtils.MILLIS_PER_MINUTE;
+                    done = false;
+                    break;
+                case DateUtils.SEMI_MONTH: {
+                    //This is a special case that's hard to generalize
+                    //If the date is 1, we round up to 16, otherwise
+                    //  we subtract 15 days and add 1 month
+                    if (val.get(Calendar.DATE) == 1) {
+                        val.add(Calendar.DATE, 15);
+                    } else {
+                        val.add(Calendar.DATE, -15);
+                        val.add(Calendar.MONTH, 1);
                     }
+                    // ----------------- Fix for LANG-440 ---------------------- START ---------------
+                    // We need a day number correction in a non-default time zone
+                    time += val.get(Calendar.ZONE_OFFSET) + val.get(Calendar.DST_OFFSET);
+                    // ----------------- Fix for LANG-440 ----------------------- END ----------------
                     break;
-                case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
-                        offset = val.get(Calendar.HOUR_OF_DAY);
-                        if (offset >= 12) {
-                            offset -= 12;
+                }
+                case Calendar.MONTH:
+                    if (val.get(Calendar.MONTH) == Calendar.FEBRUARY) {
+                        //This is a special case that's hard to generalize
+                        //If the day is 29, we round up to 30, otherwise
+                        //  we subtract 1 month
+                        if (val.get(Calendar.DATE) == 29) {
+                            val.add(Calendar.DATE, 1);
+                        } else {
+                            val.add(Calendar.MONTH, -1);
                         }
-                        roundUp = offset > 6;
-                        offsetSet = true;
+                        // ----------------- Fix for LANG-440 ---------------------- START ---------------
+                        // We need a day number correction in a non-default time zone
+                        time += val.get(Calendar.ZONE_OFFSET) + val.get(Calendar.DST_OFFSET);
+                        // ----------------- Fix for LANG-440 ----------------------- END ----------------
+                    } else {
+                        val.add(Calendar.MONTH, 1);
+                        val.set(Calendar.DATE, 1);
+                        val.add(Calendar.DATE, -1);
+                        // ----------------- Fix for LANG-440 ---------------------- START ---------------
+                        // We need a day number correction in a non-default time zone
+                        time += val.get(Calendar.ZONE_OFFSET) + val.get(Calendar.DST_OFFSET);
+                        // ----------------- Fix for LANG-440 ----------------------- END ----------------
                     }
                     break;
+                case Calendar.YEAR:
+                    val.set(Calendar.MONTH, Calendar.JANUARY);
+                    val.set(Calendar.DATE, 1);
+                    val.add(Calendar.DATE, -1);
+                    // ----------------- Fix for LANG-440 ---------------------- START ---------------
+                    // We need a day number correction in a non-default time zone
+                    time += val.get(Calendar.ZONE_OFFSET) + val.get(Calendar.DST_OFFSET);
+                    // ----------------- Fix for LANG-440 ----------------------- END ----------------
+                    break;
+                case Calendar.HOUR:
+                    time = time - time % DateUtils.MILLIS_PER_HOUR;
+                    done = false;
+                    break;
+                case Calendar.HOUR_OF_DAY:
+                    time = time - time % DateUtils.MILLIS_PER_HOUR;
+                    done = false;
+                    break;
+                case Calendar.MINUTE:
+                    time = time - time % DateUtils.MILLIS_PER_MINUTE;
+                    done = false;
+                    break;
+                case Calendar.SECOND:
+                    time = time - time % DateUtils.MILLIS_PER_SECOND;
+                    done = false;
+                    break;
+                case Calendar.MILLISECOND:
+                    done = false;
+                    break;
             }
-            if (!offsetSet) {
-                int min = val.getActualMinimum(fields[i][0]);
-                int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
-                offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
-                roundUp = offset > ((max - min) / 2);
-            }
-            //We need to remove this field
-                val.set(fields[i][0], val.get(fields[i][0]) - offset);
         }
-        throw new IllegalArgumentException("The field " + field + " is not supported");
-
+        val.setTime(new Date(time));
     }
-
     //-----------------------------------------------------------------------
     /**
      * <p>This constructs an <code>Iterator</code> over each day in a date

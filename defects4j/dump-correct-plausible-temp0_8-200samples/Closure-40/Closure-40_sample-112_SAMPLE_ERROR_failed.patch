diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java
index 25e2b5d4..14ca1f69 100644
--- a/src/com/google/javascript/jscomp/NameAnalyzer.java
+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java
@@ -924,7 +913,38 @@ final class NameAnalyzer implements CompilerPass {
         }
       }
     }
-
+    if (maybeRecordAlias(name, parent, referring, referringName)) {
+        return;
+    }
+    if (nodesToKeep.contains(n)) {
+        NameInformation functionScope = getEnclosingFunctionDependencyScope(t);
+        if (functionScope != null) {
+          recordReference(functionScope.name, name, RefType.REGULAR);
+        } else {
+          recordReference(WINDOW, name, RefType.REGULAR);
+        }
+        return;
+    }
+    if (referring != null) {
+      if (!maybeRecordAlias(name, parent, referring, referringName)) {
+        RefType depType = referring.onlyAffectsClassDef ?
+            RefType.INHERITANCE : RefType.REGULAR;
+        recordReference(referringName, name, depType);
+      }
+    } else {
+        // No named dependency scope found.  Unfortunately that might
+        // mean that the expression is a child of an function expression
+        // or assignment with a complex lhs.  In those cases,
+        // protect this node by creating a reference to WINDOW.
+        for (Node ancestor : n.getAncestors()) {
+          if (NodeUtil.isAssignmentOp(ancestor) ||
+              ancestor.isFunction()) {
+            recordReference(WINDOW, name, RefType.REGULAR);
+            break;
+          }
+        }
+    }
+  }
     /**
      * A value whose result is the return value of a function call
      * can be an alias to global object. The dependency on the call target will

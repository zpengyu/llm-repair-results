     public void visit(NodeTraversal t, Node n, Node parent) {
      if (!(n.isName() ||
            NodeUtil.isGet(n) && !parent.isGetProp())) {
        // This is not a simple or qualified name.
        return;
      }
      NameInformation nameInfo = createNameInformation(t, n, parent);
      if (nameInfo == null) {
        // The name is not a global name
        return;
      }
      if (nameInfo.onlyAffectsClassDef) {
        if (nameInfo.superclass != null) {
          recordReference(
              nameInfo.name, nameInfo.superclass, RefType.INHERITANCE);
        }
        // Make sure that we record a reference to the function that does
        // the inheritance, so that the inherits() function itself does
        // not get stripped.
        String nodeName = n.getQualifiedName();
        if (nodeName != null) {
          recordReference(
              nameInfo.name, nodeName, RefType.REGULAR);
        }
        return;
      }
      if (parent.isInstanceOf() &&
          parent.getLastChild() == n &&
          // Don't cover GETELEMs with a global root node.
          n.isQualifiedName()) {
        JsName checkedClass = getName(nameInfo.name, true);
        refNodes.add(
            new InstanceOfCheckNode(
                checkedClass, n, parent, parent.getParent()));
        checkedClass.hasInstanceOfReference = true;
        return;
      }
      // Determine which name might be potentially referring to this one by
      // looking up the nearest enclosing dependency scope. It's unnecessary to
      // determine all enclosing dependency scopes because this callback should
      // create a chain of references between them.
      NameInformation referring = getDependencyScope(n);
      String referringName = "";
      if (referring != null) {
        referringName = referring.isPrototype
                      ? referring.prototypeClass
                      : referring.name;
      }
      String name = nameInfo.name;
      // A value whose result is the return value of a function call
      // can be an alias to global object.
      // Here we add a alias to the general "global" object
      // to act as a placeholder for the actual (unnamed) value.
      if (maybeHiddenAlias(name, n)) {
        recordAlias(name, WINDOW);
      }
      // An externally referenceable name must always be defined, so we add a
      // reference to it from the global scope (a.k.a. window).
      if (nameInfo.isExternallyReferenceable) {
        recordReference(WINDOW, name, RefType.REGULAR);
        maybeRecordAlias(name, parent, referring, referringName);
        return;
      }
      // An assignment implies a reference from the enclosing dependency scope.
      // For example, foo references bar in: function foo() {bar=5}.
      if (NodeUtil.isVarOrSimpleAssignLhs(n, parent)) {
        if (referring != null) {
          recordReference(referringName, name, RefType.REGULAR);
        }
        return;
      }
      if (nodesToKeep.contains(n)) {
        NameInformation functionScope = getEnclosingFunctionDependencyScope(t);
        if (functionScope != null) {
          recordReference(functionScope.name, name, RefType.REGULAR);
        } else {
          recordReference(WINDOW, name, RefType.REGULAR);
        }
      } else if (referring != null) {
        if (!maybeRecordAlias(name, parent, referring, referringName)) {
          RefType depType = referring.onlyAffectsClassDef ?
              RefType.INHERITANCE : RefType.REGULAR;
          recordReference(referringName, name, depType);
        }
      } else {
        // No named dependency scope found.  Unfortunately that might
        // mean that the expression is a child of an function expression
        // or assignment with a complex lhs.  In those cases,
        // protect this node by creating a reference to WINDOW.
        for (Node ancestor : n.getAncestors()) {
          if (NodeUtil.isAssignmentOp(ancestor) ||
              ancestor.isFunction()) {
            recordReference(WINDOW, name, RefType.REGULAR);
            break;
          }
        }
      }
    }
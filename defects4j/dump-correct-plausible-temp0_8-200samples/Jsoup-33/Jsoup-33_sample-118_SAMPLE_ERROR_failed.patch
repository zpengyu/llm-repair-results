diff --git a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
index 5c8d58c..29755c4 100644
--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
@@ -153,21 +153,16 @@ class HtmlTreeBuilder extends TreeBuilder {
             errors.add(new ParseError(reader.pos(), "Unexpected token [%s] when in state [%s]", currentToken.tokenType(), state));
     }
 
-    Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
-        if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
-            return el;
-        }
-        
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
-        insert(el);
-        return el;
-    }
-
+public void insert(Token.StartTag startTag) {
+    // handle empty unknown tags
+    // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+    if (startTag.isSelfClosing()) {
+        Element el = insertEmpty(startTag);
+        tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        return;
+    }
+    insert(new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes));
+}
     Element insert(String startTagName) {
         Element el = new Element(Tag.valueOf(startTagName), baseUri);
         insert(el);

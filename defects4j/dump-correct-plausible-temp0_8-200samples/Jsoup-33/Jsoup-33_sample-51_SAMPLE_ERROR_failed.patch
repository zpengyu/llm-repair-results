diff --git a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
index 5c8d58c..321dc37 100644
--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
@@ -153,7 +153,7 @@ class HtmlTreeBuilder extends TreeBuilder {
             errors.add(new ParseError(reader.pos(), "Unexpected token [%s] when in state [%s]", currentToken.tokenType(), state));
     }
 
-    Element insert(Token.StartTag startTag) {
+public Element insert(Token.StartTag startTag) {
         // handle empty unknown tags
         // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
         if (startTag.isSelfClosing()) {
@@ -162,8 +162,19 @@ class HtmlTreeBuilder extends TreeBuilder {
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
             return el;
         }
-        
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+        // named entity, or numeric character reference
+        String name = startTag.normalName();
+        if (startTag.attributes != null && startTag.attributes.size() > 0) {
+            Attributes attributes = startTag.attributes;
+            if (attributes.hasKey("name") && Tag.valueOf(name).isKnownTag() &&
+                    attributes.hasKey("value") && !startTag.selfClosing) {
+                insert(new DataNode(startTag.toString(), baseUri));
+                tokeniser.transition(TokeniserState.Rcdata);
+                tokeniser.emit(startTag);
+                return currentElement();
+            }
+        }
+        Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, startTag.attributes);
         insert(el);
         return el;
     }

diff --git a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
index 70c30e14..98b63b28 100644
--- a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
@@ -99,19 +99,26 @@ final class DefaultDateTypeAdapter extends TypeAdapter<Date> {
     if (in.peek() != JsonToken.STRING) {
       throw new JsonParseException("The date should be a string value");
     }
-    Date date = deserializeToDate(in.nextString());
-    if (dateType == Date.class) {
-      return date;
-    } else if (dateType == Timestamp.class) {
-      return new Timestamp(date.getTime());
-    } else if (dateType == java.sql.Date.class) {
-      return new java.sql.Date(date.getTime());
-    } else {
-      // This must never happen: dateType is guarded in the primary constructor
-      throw new AssertionError();
+    String date = in.nextString();
+    try {
+      return deserializeToDate(date);
+    } catch (ParseException e) {
+      throw new JsonSyntaxException(date, e);
     }
   }
-
+  private synchronized Date deserializeToDate(String date) throws ParseException {
+    try {
+      return format.parse(date);
+    } catch (ParseException ignored) {
+    }
+    for (DateFormat format : enUsFormats) {
+      try {
+        return format.parse(date);
+      } catch (ParseException ignored) {
+      }
+    }
+    throw new ParseException("Unable to parse date: " + date, 0);
+  }
   private Date deserializeToDate(String s) {
     synchronized (localFormat) {
       try {

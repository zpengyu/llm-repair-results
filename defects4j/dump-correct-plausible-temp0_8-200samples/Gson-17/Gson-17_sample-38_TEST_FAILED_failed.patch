diff --git a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
index 70c30e14..48fa4f8e 100644
--- a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
@@ -95,23 +95,25 @@ final class DefaultDateTypeAdapter extends TypeAdapter<Date> {
   }
 
   @Override
-  public Date read(JsonReader in) throws IOException {
-    if (in.peek() != JsonToken.STRING) {
-      throw new JsonParseException("The date should be a string value");
+    public Date read(JsonReader in) throws IOException {
+        if (in.peek() == JsonToken.NUMBER) {
+            return new Date(in.nextLong());
+        }
+        if (in.peek() != JsonToken.STRING) {
+            throw new JsonParseException("The date should be a string value");
+        }
+        Date date = deserializeToDate(in.nextString());
+        if (dateType == Date.class) {
+            return date;
+        } else if (dateType == Timestamp.class) {
+            return new Timestamp(date.getTime());
+        } else if (dateType == java.sql.Date.class) {
+            return new java.sql.Date(date.getTime());
+        } else {
+            // This must never happen: dateType is guarded in the primary constructor
+            throw new AssertionError();
+        }
     }
-    Date date = deserializeToDate(in.nextString());
-    if (dateType == Date.class) {
-      return date;
-    } else if (dateType == Timestamp.class) {
-      return new Timestamp(date.getTime());
-    } else if (dateType == java.sql.Date.class) {
-      return new java.sql.Date(date.getTime());
-    } else {
-      // This must never happen: dateType is guarded in the primary constructor
-      throw new AssertionError();
-    }
-  }
-
   private Date deserializeToDate(String s) {
     synchronized (localFormat) {
       try {

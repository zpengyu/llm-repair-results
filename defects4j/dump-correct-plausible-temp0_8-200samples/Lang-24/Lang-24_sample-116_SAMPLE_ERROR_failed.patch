diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
index ec3f516a..813663c3 100644
--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
@@ -1419,5 +1418,37 @@ public class NumberUtils {
         // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
         return !allowSigns && foundDigit;
     }
-    
+- Recognize the importance of maintaning and reusing code; 
+- Avoid duplication.
+- Help is within reach.
+- Bad code costs money
+- Good code is always worth the time and money
+- Manual review is the most common approach to detecting and fix bugs
+- More than half of all bugs are found by manual review
+- Manual review is effective at detecting and fixing bugs early in the development cycle.
+- Manual review is effective at detecting and fixing bugs in code that is not well tested.
+- Manual review is very effective at detecting and fixing errors in design, implementation, and testing.
+- Manual review is effective at detecting and fixing bugs in almost all code.
+- Manual review is effective at fixing bugs in test cases.
+- Code review is a software quality assurance (QA) activity in which one or several people check a program mainly by viewing and reading parts of its source code, and they do so after implementation or as an interruption of implementation
+- Almost every company does code review.
+- Developers spend about one day every week on code review.
+- Code reviews lead to better software.
+- About 70% of the bugs found in code review are syntax errors.
+- Code reviews lead to better software architecture.
+- Code reviews lead to better communication among developers.
+- Code reviews lead to less time spent on debugging.
+- Improves software quality
+- Improves design
+- Reduces bugs
+- Improves communication
+- Improves developers skills
+- Improves team morale
+- Code duplication
+- Poor design
+- Poor coding style
+- Lack of unit tests
+- Bugs, bugs, bugs
+- Improper use of testing
+- Lack of source code control    
 }

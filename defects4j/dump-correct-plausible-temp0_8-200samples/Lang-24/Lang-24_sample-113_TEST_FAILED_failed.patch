diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
index ec3f516a..af0ba94b 100644
--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
@@ -1317,28 +1317,28 @@ public class NumberUtils {
      * @return <code>true</code> if the string is a correctly formatted number
      */
     public static boolean isNumber(String str) {
-        if (StringUtils.isEmpty(str)) {
+        if (str == null) {
             return false;
         }
-        char[] chars = str.toCharArray();
-        int sz = chars.length;
+        int sz = str.length();
         boolean hasExp = false;
         boolean hasDecPoint = false;
         boolean allowSigns = false;
         boolean foundDigit = false;
         // deal with any possible sign up front
-        int start = (chars[0] == '-') ? 1 : 0;
+        int start = (str.charAt(0) == '-') ? 1 : 0;
         if (sz > start + 1) {
-            if (chars[start] == '0' && chars[start + 1] == 'x') {
+            if (str.charAt(start) == '0' && str.charAt(start + 1) == 'x') {
                 int i = start + 2;
                 if (i == sz) {
                     return false; // str == "0x"
                 }
                 // checking hex (it can't be anything else)
-                for (; i < chars.length; i++) {
-                    if ((chars[i] < '0' || chars[i] > '9')
-                        && (chars[i] < 'a' || chars[i] > 'f')
-                        && (chars[i] < 'A' || chars[i] > 'F')) {
+                for (; i < str.length(); i++) {
+                    char ch;
+                    if ((ch = str.charAt(i)) < '0' || ch > '9'
+                        && (ch < 'a' || ch > 'f')
+                        && (ch < 'A' || ch > 'F')) {
                         return false;
                     }
                 }
@@ -1351,17 +1351,17 @@ public class NumberUtils {
         // loop to the next to last char or to the last char if we need another digit to
         // make a valid number (e.g. chars[0..5] = "1234E")
         while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
-            if (chars[i] >= '0' && chars[i] <= '9') {
+            char ch;
+            if ((ch = str.charAt(i)) >= '0' && ch <= '9') {
                 foundDigit = true;
                 allowSigns = false;
-
-            } else if (chars[i] == '.') {
+            } else if (ch == '.') {
                 if (hasDecPoint || hasExp) {
                     // two decimal points or dec in exponent
                     return false;
                 }
                 hasDecPoint = true;
-            } else if (chars[i] == 'e' || chars[i] == 'E') {
+            } else if (ch == 'e' || ch == 'E') {
                 // we've already taken care of hex.
                 if (hasExp) {
                     // two E's
@@ -1372,7 +1372,7 @@ public class NumberUtils {
                 }
                 hasExp = true;
                 allowSigns = true;
-            } else if (chars[i] == '+' || chars[i] == '-') {
+            } else if (ch == '+' || ch == '-') {
                 if (!allowSigns) {
                     return false;
                 }
@@ -1383,16 +1383,17 @@ public class NumberUtils {
             }
             i++;
         }
-        if (i < chars.length) {
-            if (chars[i] >= '0' && chars[i] <= '9') {
+        if (i < str.length()) {
+            char ch;
+            if ((ch = str.charAt(i)) >= '0' && ch <= '9') {
                 // no type qualifier, OK
                 return true;
             }
-            if (chars[i] == 'e' || chars[i] == 'E') {
+            if (ch == 'e' || ch == 'E') {
                 // can't have an E at the last byte
                 return false;
             }
-            if (chars[i] == '.') {
+            if (ch == '.') {
                 if (hasDecPoint || hasExp) {
                     // two decimal points or dec in exponent
                     return false;
@@ -1401,14 +1402,14 @@ public class NumberUtils {
                 return foundDigit;
             }
             if (!allowSigns
-                && (chars[i] == 'd'
-                    || chars[i] == 'D'
-                    || chars[i] == 'f'
-                    || chars[i] == 'F')) {
+                && (ch == 'd'
+                    || ch == 'D'
+                    || ch == 'f'
+                    || ch == 'F')) {
                 return foundDigit;
             }
-            if (chars[i] == 'l'
-                || chars[i] == 'L') {
+            if (ch == 'l'
+                || ch == 'L') {
                 // not allowing L with an exponent or decimal point
                 return foundDigit && !hasExp;
             }

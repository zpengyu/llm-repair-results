diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
index 0a7f29c3..a678a467 100644
--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
@@ -91,23 +90,25 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
         // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
-          return true;
-        }
-
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
-          return true;
+        if (n.isCall()) {
+          Node callTarget = n.getFirstChild();
+          Node callArg = callTarget.getNext();
+          boolean mayBeSideEffectCall = false;
+          while (callArg != null && !mayBeSideEffectCall) {
+            mayBeSideEffectCall = hasSideEffects(callArg);
+            callArg = callArg.getNext();
+          }
+          if (mayBeSideEffectCall) {
+            return true;
+          }
         }
-
-
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
-      }
-  };
+      }  };
 
   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {
     this.compiler = compiler;

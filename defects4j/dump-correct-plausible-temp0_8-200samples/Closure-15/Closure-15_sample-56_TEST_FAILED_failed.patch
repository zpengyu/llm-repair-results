diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
index 0a7f29c3..f85e0f0f 100644
--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
@@ -81,33 +81,31 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback
   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
     new Predicate<Node>() {
       @Override
-      public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
-        if (n == null) {
-          return false;
-        }
-
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
-          return true;
-        }
-
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+    public boolean apply(Node n) {
+      // When the node is null it means, we reached the implicit return
+      // where the function returns (possibly without an return statement)
+      if (n == null) {
+        return false;
+      }
+      // TODO(user): We only care about calls to functions that
+      // passes one of the dependent variable to a non-side-effect free
+      // function.
+      if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+        return true;
+      }
+      if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+        return true;
+      }
+      if (n.isAssign() && NodeUtil.mayHaveSideEffects(n)) {
+        return true;
+      }
+      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
           return true;
         }
-
-
-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
-            return true;
-          }
-        }
-        return false;
       }
-  };
+      return false;
+    }  };
 
   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {
     this.compiler = compiler;

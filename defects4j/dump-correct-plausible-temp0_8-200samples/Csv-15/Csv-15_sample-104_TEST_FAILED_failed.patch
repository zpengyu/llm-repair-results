diff --git a/src/main/java/org/apache/commons/csv/CSVFormat.java b/src/main/java/org/apache/commons/csv/CSVFormat.java
index 6d090b6..50ee170 100644
--- a/src/main/java/org/apache/commons/csv/CSVFormat.java
+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java
@@ -1150,7 +1150,6 @@ public final class CSVFormat implements Serializable {
     // the original object is needed so can check for Number
     private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
-        boolean quote = false;
         int start = offset;
         int pos = offset;
         final int end = offset + len;
@@ -1165,15 +1162,45 @@ public final class CSVFormat implements Serializable {
         switch (quoteModePolicy) {
         case ALL:
         case ALL_NON_NULL:
-            quote = true;
+            out.append(quoteChar);
+            while (pos < end) {
+                final char c = value.charAt(pos);
+                if (c == quoteChar) {
+                    // write out the chunk up until this point
+                    // add 1 to the length to write out the encapsulator also
+                    out.append(value, start, pos + 1);
+                    // put the next starting position on the encapsulator so we will
+                    // write it out again with the next string (effectively doubling it)
+                    start = pos;
+                }
+                pos++;
+            }
+            // write the last segment
+            out.append(value, start, pos);
+            out.append(quoteChar);
             break;
         case NON_NUMERIC:
-            quote = !(object instanceof Number);
+            out.append(quoteChar);
+            while (pos < end) {
+                final char c = value.charAt(pos);
+                if (c == quoteChar) {
+                    // write out the chunk up until this point
+                    // add 1 to the length to write out the encapsulator also
+                    out.append(value, start, pos + 1);
+                    // put the next starting position on the encapsulator so we will
+                    // write it out again with the next string (effectively doubling it)
+                    start = pos;
+                }
+                pos++;
+            }
+            // write the last segment
+            out.append(value, start, pos);
+            out.append(quoteChar);
             break;
         case NONE:
             // Use the existing escaping code
             printAndEscape(value, offset, len, out);
-            return;
+            break;
         case MINIMAL:
             if (len <= 0) {
                 // always quote an empty token that is the first
@@ -1181,80 +1208,105 @@ public final class CSVFormat implements Serializable {
                 // line. If it were not quoted in that case,
                 // an empty line has no tokens.
                 if (newRecord) {
-                    quote = true;
+                    out.append(quoteChar);
+                    out.append(quoteChar);
                 }
             } else {
                 char c = value.charAt(pos);
-
                 if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
-                    quote = true;
+                    out.append(quoteChar);
+                    while (pos < end) {
+                        final char c1 = value.charAt(pos);
+                        if (c1 == quoteChar) {
+                            // write out the chunk up until this point
+                            // add 1 to the length to write out the encapsulator also
+                            out.append(value, start, pos + 1);
+                            // put the next starting position on the encapsulator so we will
+                            // write it out again with the next string (effectively doubling it)
+                            start = pos;
+                        }
+                        pos++;
+                    }
+                    // write the last segment
+                    out.append(value, start, pos);
+                    out.append(quoteChar);
                 } else if (c <= COMMENT) {
                     // Some other chars at the start of a value caused the parser to fail, so for now
                     // encapsulate if we start in anything less than '#'. We are being conservative
                     // by including the default comment char too.
-                    quote = true;
+                    out.append(quoteChar);
+                    while (pos < end) {
+                        final char c1 = value.charAt(pos);
+                        if (c1 == quoteChar) {
+                            // write out the chunk up until this point
+                            // add 1 to the length to write out the encapsulator also
+                            out.append(value, start, pos + 1);
+                            // put the next starting position on the encapsulator so we will
+                            // write it out again with the next string (effectively doubling it)
+                            start = pos;
+                        }
+                        pos++;
+                    }
+                    // write the last segment
+                    out.append(value, start, pos);
+                    out.append(quoteChar);
                 } else {
                     while (pos < end) {
                         c = value.charAt(pos);
                         if (c == LF || c == CR || c == quoteChar || c == delimChar) {
-                            quote = true;
+                            out.append(quoteChar);
+                            while (pos < end) {
+                                final char c1 = value.charAt(pos);
+                                if (c1 == quoteChar) {
+                                    // write out the chunk up until this point
+                                    // add 1 to the length to write out the encapsulator also
+                                    out.append(value, start, pos + 1);
+                                    // put the next starting position on the encapsulator so we will
+                                    // write it out again with the next string (effectively doubling it)
+                                    start = pos;
+                                }
+                                pos++;
+                            }
+                            // write the last segment
+                            out.append(value, start, pos);
+                            out.append(quoteChar);
                             break;
                         }
                         pos++;
                     }
-
-                    if (!quote) {
+                    if (pos == end) {
                         pos = end - 1;
                         c = value.charAt(pos);
                         // Some other chars at the end caused the parser to fail, so for now
                         // encapsulate if we end in anything less than ' '
                         if (c <= SP) {
-                            quote = true;
+                            out.append(quoteChar);
+                            while (pos < end) {
+                                final char c1 = value.charAt(pos);
+                                if (c1 == quoteChar) {
+                                    // write out the chunk up until this point
+                                    // add 1 to the length to write out the encapsulator also
+                                    out.append(value, start, pos + 1);
+                                    // put the next starting position on the encapsulator so we will
+                                    // write it out again with the next string (effectively doubling it)
+                                    start = pos;
+                                }
+                                pos++;
+                            }
+                            // write the last segment
+                            out.append(value, start, pos);
+                            out.append(quoteChar);
+                        } else {
+                            out.append(value, start, pos);
                         }
                     }
                 }
             }
-
-            if (!quote) {
-                // no encapsulation needed - write out the original value
-                out.append(value, start, end);
-                return;
-            }
             break;
         default:
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
         }
-
-        if (!quote) {
-            // no encapsulation needed - write out the original value
-            out.append(value, start, end);
-            return;
-        }
-
-        // we hit something that needed encapsulation
-        out.append(quoteChar);
-
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
-        while (pos < end) {
-            final char c = value.charAt(pos);
-            if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
-                out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
-                start = pos;
-            }
-            pos++;
-        }
-
-        // write the last segment
-        out.append(value, start, pos);
-        out.append(quoteChar);
     }
-
     /**
      * Outputs the trailing delimiter (if set) followed by the record separator (if set).
      *

diff --git a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
index 6905f1ac9..16821093c 100644
--- a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
@@ -264,7 +248,56 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
                     }
                 }
             } else { // Default termination (Brent's criterion).
-                return current;
+                final double mm = 0.5 * (a + b);
+                final double tol3 = relativeThreshold * FastMath.abs(mm) + absoluteThreshold;
+                if (FastMath.abs(mm - x) <= tol3 ||
+                    FastMath.abs(mm - x) <= tol1) {
+                    return current;
+                } else {
+                    final double xm = x < mm ? x + tol1 : x - tol1;
+                    final double fxm = computeObjectiveValue(xm);
+                    if (!isMinim) {
+                        fxm = -fxm;
+                    }
+                    previous = current;
+                    current = new UnivariatePointValuePair(xm, isMinim ? fxm : -fxm);
+                    if (checker != null) {
+                        if (checker.converged(iter, previous, current)) {
+                            return current;
+                        }
+                    }
+                    if (fxm <= fx) {
+                        if (xm < x) {
+                            b = x;
+                        } else {
+                            a = x;
+                        }
+                        v = w;
+                        fv = fw;
+                        w = x;
+                        fw = fx;
+                        x = xm;
+                        fx = fxm;
+                    } else {
+                        if (xm < x) {
+                            a = xm;
+                        } else {
+                            b = xm;
+                        }
+                        if (fxm <= fw ||
+                            Precision.equals(w, x)) {
+                            v = w;
+                            fv = fw;
+                            w = xm;
+                            fw = fxm;
+                        } else if (fxm <= fv ||
+                                   Precision.equals(v, x) ||
+                                   Precision.equals(v, w)) {
+                            v = xm;
+                            fv = fxm;
+                        }
+                    }
+                }
             }
             ++iter;
         }

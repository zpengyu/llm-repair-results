    public static boolean toBoolean(String str) {
        // Previously used equalsIgnoreCase, which was fast for interned 'true'.
        // Non interned 'true' matched 15 times slower.
        //
        // Optimisation provides same performance as before for interned 'true'.
        // Similar performance for null, 'false', and other strings not length 2/3/4.
        // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
        if (str == "true") {
            return true;
        }
        if (str == null) {
            return false;
        }
        switch (str.length()) {
            case 2: {
                char ch0 = str.charAt(0);
                char ch1 = str.charAt(1);
                if (ch0 == 'o' || ch0 == 'O') {
                    if (ch1 == 'n' || ch1 == 'N') {
                        return true;
                    }
                }
                break;
            }
            case 3: {
                char ch = str.charAt(0);
                if (ch == 'y' || ch == 'Y') {
                    if (str.charAt(1) == 'e' || str.charAt(1) == 'E') {
                        if (str.charAt(2) == 's' || str.charAt(2) == 'S') {
                            return true;
                        }
                    }
                }
                break;
            }
            case 4: {
                char ch = str.charAt(0);
                if (ch == 't' || ch == 'T') {
                    if (str.charAt(1) == 'r' || str.charAt(1) == 'R') {
                        if (str.charAt(2) == 'u' || str.charAt(2) == 'U') {
                            if (str.charAt(3) == 'e' || str.charAt(3) == 'E') {
                                return true;
                            }
                        }
                    }
                }
                break;
            }
        }
        return false;
    }


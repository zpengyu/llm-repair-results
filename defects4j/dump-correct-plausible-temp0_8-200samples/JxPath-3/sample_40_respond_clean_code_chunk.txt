/**
 * This is a {@link PropertyPointer} that does not point at
 * any real property, but represents a location that can be occupied
 * by a new property.
 * In XPath-speak, this pointer is used when there are predicates that
 * address non-existant properties.  For example, "a/b[1]" when "a"
 * has no property "b" yet.
 * <p>
 * If a pointer to a null property is requested to expand a collection,
 * it tries to expand the parent property collection and then return
 * a pointer to itself.  For example, "a/b[2]" would create "a/b[1]"
 * and then return a pointer to "a/b[2]".
 * <p>
 * A null property pointer can be constructed manually, via a call to
 * {@link NodePointer#createPropertyPointer(NodePointer parent, QName name)}
 * with a name (possibly qualified) of a property that does not exist
 * in the parent.
 * <p>
 * NullPropertyPointers can also be constructed internally when dynamic
 * bean declaration is not supported by the parent NodePointer and the
 * XPath expression is attempting to address a non-existing property.
 * See {@link PropertyOwnerPointer#getPropertyPointer()}.
 *
 * @author Dmitri Plotnikov
 * @version $Revision: 1.13 $ $Date: 2009/03/06 23:22:11 $
 */
public class NullPropertyPointer extends PropertyPointer {
    private String propertyName = "*";
    private boolean byNameAttribute = false;
    /**
     * Create a NullPropertyPointer
     * @param parent parent pointer
     */
    public NullPropertyPointer(NodePointer parent) {
        super(parent);
    }
    /**
     * Create a NullPropertyPointer
     * @param parent parent pointer
     * @param name name of the property
     */
    public NullPropertyPointer(NodePointer parent, QName name) {
        super(parent);
        setName(name);
    }
    public QName getName() {
        return new QName(propertyName);
    }
    public void setPropertyIndex(int index) {
    }
    public int getLength() {
        return 0;
    }
    public Object getBaseValue() {
        return null;
    }
    public Object getImmediateNode() {
        return null;
    }
    public boolean isLeaf() {
        return true;
    }    
    /**
     * Always returns a null pointer
     */
    public NodePointer getValuePointer() {
        return new NullPointer(this,  new QName(getPropertyName()));
    }
    protected boolean isActualProperty() {
        return false;
    }
    public boolean isActual() {
        return false;
    }
    public boolean isContainer() {
        return true;
    }
    /**
     * Sets a new value for the property. This is rarely ever done - normally
     * the pointer will be first "created" by some other pointer in the same
     * location, and that pointer will be used for the setValue operation.
     * If the parent pointer is a NullPointer, it will be allowed to
     * create a new property.
     */
    public void setValue(Object value) {
        if (parent == null || parent.isContainer()) {
            throw new JXPathInvalidAccessException(
                "Cannot set property "
                    + asPath()
                    + ", the target object is null");
        }
        else if (parent instanceof PropertyOwnerPointer &&
                ((PropertyOwnerPointer) parent).
                    isDynamicPropertyDeclarationSupported()){
            // If the parent property owner can create
            // a property automatically - let it do so
            PropertyPointer propertyPointer =
                ((PropertyOwnerPointer) parent).getPropertyPointer();
            propertyPointer.setPropertyName(propertyName);
            propertyPointer.setValue(value);
        }
        else {
            throw new JXPathInvalidAccessException(
                "Cannot set property "
                    + asPath()
                    + ", path does not match a changeable location");
        }
    }
    /**
     * Creates a path and then returns a pointer to the end of that path.
     * For example:
     * <pre>
     * root/arraylist[5]/hashtable[@name='Fred']
     * </pre>
     * If "arraylist[5]" and "hashtable[@name='Fred']" do not exist, they will
     * be created.
     */
    public NodePointer createPath(JXPathContext context) {
        NodePointer newParent = parent.createPath(context);
        if (isAttribute()) {
            return newParent.createAttribute(context, getName());
        }
        else {
            // Consider these two use cases:
            // 1. The parent pointer of NullPropertyPointer is 
            //    a PropertyOwnerPointer other than NullPointer. When we call 
            //    createPath on it, it most likely returns itself. We then
            //    take a PropertyPointer from it and get the PropertyPointer
            //    to expand the collection for the corresponding property.
            //
            // 2. The parent pointer of NullPropertyPointer is a NullPointer.
            //    When we call createPath, it may return a PropertyOwnerPointer
            //    or it may return anything else, like a DOMNodePointer.
            //    In the former case we need to do exactly what we did in use 
            //    case 1.  In the latter case, we simply request that the 
            //    non-property pointer expand the collection by itself.
            if (newParent instanceof PropertyOwnerPointer) {
                PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent;
                newParent = pop.getPropertyPointer();
            }
            return newParent.createChild(context, getName(), getIndex());
        }
    }
    /**
     * Creates a path and then returns a pointer to the end of that path.
     * For example:
     * <pre>
     * root/arraylist[5]/hashtable[@name='Fred']
     * </pre>
     * If "arraylist[5]" and "hashtable[@name='Fred']" do not exist, they will
     * be created.
     */
    public NodePointer createPath(JXPathContext context, Object value) {
        NodePointer newParent = parent.createPath(context);
        if (isAttribute()) {
            NodePointer pointer = newParent.createAttribute(context, getName());
            pointer.setValue(value);
            return pointer;
        }
        else {
            if (newParent instanceof PropertyOwnerPointer) {
                PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent;
                newParent = pop.getPropertyPointer();
            }
            return newParent.createChild(context, getName(), index, value);
        }
    }
    public NodePointer createChild(
            JXPathContext context,
            QName name, 
            int index)
    {
        return createPath(context).createChild(context, name, index);
    }
    public NodePointer createChild(
            JXPathContext context,
            QName name, 
            int index,
            Object value) 
    {
        return createPath(context).createChild(context, name, index, value);
    }
    /**
     * Returns the name of the property being addressed.
     */
    public String getPropertyName() {
        return propertyName;
    }
    /**
     * Sets the name of the property being addressed.
     */
    public void setPropertyName(String propertyName) {
        this.propertyName = propertyName;
    }
    /**
     * Marks this pointer as created from a name attribute.
     * This affects how the asPath method will work.
     */
    public void setNameAttributeValue(String attributeValue) {
        this.propertyName = attributeValue;
        byNameAttribute = true;
    }
    /**
     * Returns <code>true</code> if this pointer represents a collection
     * rather than a specific element.
     */
    public boolean isCollection() {
        return getIndex() != WHOLE_COLLECTION;
    }
    public int getPropertyCount() {
        return 0;
    }
    public String[] getPropertyNames() {
        return new String[0];
    }
    /**
     * Returns the path to this node as it would appear in an 
     * xpath expression.
     */
    public String asPath() {
        if (!byNameAttribute) {
            return super.asPath();
        }
        else {
            StringBuffer buffer = new StringBuffer();
            buffer.append(getImmediateParentPointer().asPath());
            buffer.append("[@name='");
            buffer.append(escape(getPropertyName()));
            buffer.append("']");
            if (index != WHOLE_COLLECTION) {
                buffer.append('[').append(index + 1).append(']');
            }
            return buffer.toString();
        }
    }
    private String escape(String string) {
        int index = string.indexOf('\'');
        while (index != -1) {
            string =
                string.substring(0, index)
                    + "&apos;"
                    + string.substring(index + 1);
            index = string.indexOf('\'');
        }
        index = string.indexOf('\"');
        while (index != -1) {
            string =
                string.substring(0, index)
                    + "&quot;"
                    + string.substring(index + 1);
            index = string.indexOf('\"');
        }
        return string;
    }
}
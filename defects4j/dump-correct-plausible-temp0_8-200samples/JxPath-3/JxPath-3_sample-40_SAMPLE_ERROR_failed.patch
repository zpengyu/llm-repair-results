diff --git a/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java b/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java
index 2d1a815..0849f1d 100644
--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java
+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java
@@ -25,17 +25,51 @@ import org.apache.commons.jxpath.ri.model.NodePointer;
  * @author Dmitri Plotnikov
  * @version $Revision$ $Date$
  */
+/**
+ * This is a {@link PropertyPointer} that does not point at
+ * any real property, but represents a location that can be occupied
+ * by a new property.
+ * In XPath-speak, this pointer is used when there are predicates that
+ * address non-existant properties.  For example, "a/b[1]" when "a"
+ * has no property "b" yet.
+ * <p>
+ * If a pointer to a null property is requested to expand a collection,
+ * it tries to expand the parent property collection and then return
+ * a pointer to itself.  For example, "a/b[2]" would create "a/b[1]"
+ * and then return a pointer to "a/b[2]".
+ * <p>
+ * A null property pointer can be constructed manually, via a call to
+ * {@link NodePointer#createPropertyPointer(NodePointer parent, QName name)}
+ * with a name (possibly qualified) of a property that does not exist
+ * in the parent.
+ * <p>
+ * NullPropertyPointers can also be constructed internally when dynamic
+ * bean declaration is not supported by the parent NodePointer and the
+ * XPath expression is attempting to address a non-existing property.
+ * See {@link PropertyOwnerPointer#getPropertyPointer()}.
+ *
+ * @author Dmitri Plotnikov
+ * @version $Revision: 1.13 $ $Date: 2009/03/06 23:22:11 $
+ */
 public class NullPropertyPointer extends PropertyPointer {
-
     private String propertyName = "*";
     private boolean byNameAttribute = false;
-
     /**
+     * Create a NullPropertyPointer
+     * @param parent parent pointer
      */
     public NullPropertyPointer(NodePointer parent) {
         super(parent);
     }
-
+    /**
+     * Create a NullPropertyPointer
+     * @param parent parent pointer
+     * @param name name of the property
+     */
+    public NullPropertyPointer(NodePointer parent, QName name) {
+        super(parent);
+        setName(name);
+    }
     public QName getName() {
         return new QName(propertyName);
     }
@@ -58,7 +87,9 @@ public class NullPropertyPointer extends PropertyPointer {
     public boolean isLeaf() {
         return true;
     }    
-
+    /**
+     * Always returns a null pointer
+     */
     public NodePointer getValuePointer() {
         return new NullPointer(this,  new QName(getPropertyName()));
     }
@@ -74,7 +102,13 @@ public class NullPropertyPointer extends PropertyPointer {
     public boolean isContainer() {
         return true;
     }
-
+    /**
+     * Sets a new value for the property. This is rarely ever done - normally
+     * the pointer will be first "created" by some other pointer in the same
+     * location, and that pointer will be used for the setValue operation.
+     * If the parent pointer is a NullPointer, it will be allowed to
+     * create a new property.
+     */
     public void setValue(Object value) {
         if (parent == null || parent.isContainer()) {
             throw new JXPathInvalidAccessException(
@@ -99,7 +133,15 @@ public class NullPropertyPointer extends PropertyPointer {
                     + ", path does not match a changeable location");
         }
     }
-
+    /**
+     * Creates a path and then returns a pointer to the end of that path.
+     * For example:
+     * <pre>
+     * root/arraylist[5]/hashtable[@name='Fred']
+     * </pre>
+     * If "arraylist[5]" and "hashtable[@name='Fred']" do not exist, they will
+     * be created.
+     */
     public NodePointer createPath(JXPathContext context) {
         NodePointer newParent = parent.createPath(context);
         if (isAttribute()) {
@@ -126,7 +168,15 @@ public class NullPropertyPointer extends PropertyPointer {
             return newParent.createChild(context, getName(), getIndex());
         }
     }
-
+    /**
+     * Creates a path and then returns a pointer to the end of that path.
+     * For example:
+     * <pre>
+     * root/arraylist[5]/hashtable[@name='Fred']
+     * </pre>
+     * If "arraylist[5]" and "hashtable[@name='Fred']" do not exist, they will
+     * be created.
+     */
     public NodePointer createPath(JXPathContext context, Object value) {
         NodePointer newParent = parent.createPath(context);
         if (isAttribute()) {
@@ -159,20 +207,30 @@ public class NullPropertyPointer extends PropertyPointer {
     {
         return createPath(context).createChild(context, name, index, value);
     }
-
+    /**
+     * Returns the name of the property being addressed.
+     */
     public String getPropertyName() {
         return propertyName;
     }
-
+    /**
+     * Sets the name of the property being addressed.
+     */
     public void setPropertyName(String propertyName) {
         this.propertyName = propertyName;
     }
-
+    /**
+     * Marks this pointer as created from a name attribute.
+     * This affects how the asPath method will work.
+     */
     public void setNameAttributeValue(String attributeValue) {
         this.propertyName = attributeValue;
         byNameAttribute = true;
     }
-
+    /**
+     * Returns <code>true</code> if this pointer represents a collection
+     * rather than a specific element.
+     */
     public boolean isCollection() {
         return getIndex() != WHOLE_COLLECTION;
     }
@@ -184,7 +240,10 @@ public class NullPropertyPointer extends PropertyPointer {
     public String[] getPropertyNames() {
         return new String[0];
     }
-
+    /**
+     * Returns the path to this node as it would appear in an 
+     * xpath expression.
+     */
     public String asPath() {
         if (!byNameAttribute) {
             return super.asPath();

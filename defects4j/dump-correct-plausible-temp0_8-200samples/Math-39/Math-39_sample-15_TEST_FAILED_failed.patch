diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
index 9a6ac9b16..1258014cd 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
@@ -300,15 +279,13 @@ public abstract class EmbeddedRungeKuttaIntegrator
               // save the last evaluation for the next step
               System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);
           }
-
           // stepsize control for next step
-          final double factor =
-              FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
-          final double  scaledH    = stepSize * factor;
-          final double  nextT      = stepStart + scaledH;
-          final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
-          hNew = filterStep(scaledH, forward, nextIsLast);
-
+          final double  factor       = FastMath.min(maxGrowth,
+                                                    FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
+          final double  nextStepSize = stepSize * factor;
+          final double  nextT        = stepStart + nextStepSize;
+          final boolean nextIsLast   = forward ? (nextT >= t) : (nextT <= t);
+          hNew = filterStep(nextStepSize, forward, nextIsLast);
           final double  filteredNextT      = stepStart + hNew;
           final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
           if (filteredNextIsLast) {

private static void removeDeadExprStatementSafely(Node n) {
  Node parent = n.getParent();
  if (n.isEmpty() || (n.isBlock() && !n.hasChildren())) {
    // Not always trivial to remove, let FoldConstants work its magic later.
    return;
  }
  // TODO(user): This is a problem with removeNoOpStatements.
  // Every expression in a FOR-IN header looks side effect free on its own.
  if (NodeUtil.isForIn(parent)) {
    return;
  }
  switch (n.getType()) {
    // Removing an unreachable DO node is messy b/c it means we still have
    // to execute one iteration. If the DO's body has breaks in the middle,
    // it can get even more tricky and code size might actually increase.
    case Token.DO:
      return;
    case Token.BLOCK:
      // BLOCKs are used in several ways including wrapping CATCH
      // blocks in TRYs
      if (parent.isTry() && NodeUtil.isTryCatchNodeContainer(n)) {
        return;
      }
      break;
    case Token.CATCH:
      Node tryNode = parent.getParent();
      NodeUtil.maybeAddFinally(tryNode);
      break;
  }
  if (n.isVar() && !n.getFirstChild().hasChildren()) {
    // Very unlikely case, Consider this:
    // File 1: {throw 1}
    // File 2: {var x}
    // The node var x is unreachable in the global scope.
    // Before we remove the node, redeclareVarsInsideBranch
    // would basically move var x to the beginning of File 2,
    // which resulted in zero changes to the AST but triggered
    // reportCodeChange().
    // Instead, we should just ignore dead variable declarations.
    return;
  }
  removeNode(n);
}
private void removeNode(Node n) {
  codeChanged = true;
  NodeUtil.redeclareVarsInsideBranch(n);
  compiler.reportCodeChange();
  if (logger.isLoggable(Level.FINE)) {
    logger.fine("Removing " + n.toString());
  }
  NodeUtil.removeChild(n.getParent(), n);
}
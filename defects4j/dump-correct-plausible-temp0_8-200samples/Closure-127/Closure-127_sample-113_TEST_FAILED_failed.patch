diff --git a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
index 3b323395..e4d4ddcf 100644
--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
@@ -136,14 +134,11 @@ class UnreachableCodeElimination implements CompilerPass {
        * if-else conversion but it handles more complicated switch statements
        * much more nicely.
        */
-
       // If n is null the target is the end of the function, nothing to do.
       if (n == null) {
-         return;
+        return;
       }
-
       DiGraphNode<Node, Branch> gNode = cfg.getDirectedGraphNode(n);
-
       if (gNode == null) {
         return;
       }
@@ -240,11 +223,10 @@ class UnreachableCodeElimination implements CompilerPass {
     private void removeNode(Node n) {
       codeChanged = true;
       NodeUtil.redeclareVarsInsideBranch(n);
-      compiler.reportCodeChange();
       if (logger.isLoggable(Level.FINE)) {
         logger.fine("Removing " + n.toString());
       }
       NodeUtil.removeChild(n.getParent(), n);
+      compiler.reportCodeChange();
     }
-  }
-}
+  }}

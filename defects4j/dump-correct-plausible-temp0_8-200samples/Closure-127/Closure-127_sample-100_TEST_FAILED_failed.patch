diff --git a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
index 3b323395..fd9f67c0 100644
--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
@@ -220,23 +206,8 @@ class UnreachableCodeElimination implements CompilerPass {
           NodeUtil.maybeAddFinally(tryNode);
           break;
       }
-
-      if (n.isVar() && !n.getFirstChild().hasChildren()) {
-        // Very unlikely case, Consider this:
-        // File 1: {throw 1}
-        // File 2: {var x}
-        // The node var x is unreachable in the global scope.
-        // Before we remove the node, redeclareVarsInsideBranch
-        // would basically move var x to the beginning of File 2,
-        // which resulted in zero changes to the AST but triggered
-        // reportCodeChange().
-        // Instead, we should just ignore dead variable declarations.
-        return;
-      }
-
       removeNode(n);
     }
-
     private void removeNode(Node n) {
       codeChanged = true;
       NodeUtil.redeclareVarsInsideBranch(n);
@@ -246,5 +217,4 @@ class UnreachableCodeElimination implements CompilerPass {
       }
       NodeUtil.removeChild(n.getParent(), n);
     }
-  }
-}
+  }}

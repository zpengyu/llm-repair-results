diff --git a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
index 3b323395..4e757cfe 100644
--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
@@ -84,7 +84,7 @@ class UnreachableCodeElimination implements CompilerPass {
       });
   }
 
-  private class EliminationPass extends AbstractShallowCallback {
+    private class EliminationPass extends AbstractShallowCallback {
     private final ControlFlowGraph<Node> cfg;
     private EliminationPass(ControlFlowGraph<Node> cfg) {
       this.cfg = cfg;
@@ -161,8 +155,7 @@ class UnreachableCodeElimination implements CompilerPass {
           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
           if (outEdges.size() == 1 &&
               // If there is a next node, this jump is not useless.
-              (n.getNext() == null || n.getNext().isFunction())) {
-
+              (n.getNext() == null || n.getNext().isFunction() || n.getNext().isScript())) {
             Preconditions.checkState(
                 outEdges.get(0).getValue() == Branch.UNCOND);
             Node fallThrough = computeFollowing(n);
@@ -246,5 +229,4 @@ class UnreachableCodeElimination implements CompilerPass {
       }
       NodeUtil.removeChild(n.getParent(), n);
     }
-  }
-}
+  }}

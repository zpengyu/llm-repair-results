diff --git a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
index 3b323395..4cd7bacc 100644
--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
@@ -205,8 +193,15 @@ class UnreachableCodeElimination implements CompilerPass {
         // to execute one iteration. If the DO's body has breaks in the middle,
         // it can get even more tricky and code size might actually increase.
         case Token.DO:
+          if (n.getChildCount() == 1 && n.getFirstChild().isBlock()) {
+            Node block = n.getFirstChild();
+            Node newDoNode = NodeUtil.newExpr(block.getFirstChild());
+            NodeUtil.copyInformation(newDoNode, n);
+            parent.replaceChild(n, newDoNode);
+            compiler.reportCodeChange();
+            tryRemoveUnconditionalBranching(newDoNode);
+          }
           return;
-
         case Token.BLOCK:
           // BLOCKs are used in several ways including wrapping CATCH
           // blocks in TRYs
@@ -246,5 +237,4 @@ class UnreachableCodeElimination implements CompilerPass {
       }
       NodeUtil.removeChild(n.getParent(), n);
     }
-  }
-}
+  }}

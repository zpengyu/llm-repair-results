diff --git a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java
index 092b9a548..1342b7a88 100644
--- a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java
+++ b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java
@@ -72,32 +72,31 @@ public class VerificationOverTimeImpl implements VerificationMode {
      *
      * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout
      */
-    public void verify(VerificationData data) {
-        AssertionError error = null;
-
-        timer.start();
-        while (timer.isCounting()) {
-            try {
-                delegate.verify(data);
-
-                if (returnOnSuccess) {
-                    return;
-                } else {
-                    error = null;
-                }
-            } catch (MockitoAssertionError e) {
-                error = handleVerifyException(e);
-            }
-            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {
-                error = handleVerifyException(e);
-            }
-        }
-
-        if (error != null) {
-            throw error;
-        }
-    }
-
+public void verify(VerificationData data) {
+	AssertionError error = null;
+	timer.start();
+	while (timer.isCounting()) {
+		try {
+			delegate.verify(data);
+			if (returnOnSuccess) {
+				return;
+			} else {
+				error = null;
+			}
+		} catch (MockitoAssertionError e) {
+			if (e.getCause() != null && e.getCause() instanceof AssertionError) {
+				error = (AssertionError) e.getCause();
+			} else {
+				error = handleVerifyException(e);
+			}
+		} catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {
+			error = handleVerifyException(e);
+		}
+	}
+	if (error != null) {
+		throw error;
+	}
+}
     private AssertionError handleVerifyException(AssertionError e) {
         if (canRecoverFromFailure(delegate)) {
             sleep(pollingPeriodMillis);

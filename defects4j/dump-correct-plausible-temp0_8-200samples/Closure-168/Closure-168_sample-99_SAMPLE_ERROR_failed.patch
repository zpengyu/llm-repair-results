diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java
index 5e7bfa3f..de1d254c 100644
--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -2004,22 +2002,26 @@ final class TypedScopeCreator implements ScopeCreator {
         // no reason to do this extra computation for them.
         return;
       }
-
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
-        String name = n.getString();
-        Scope scope = t.getScope();
-        Var var = scope.getVar(name);
-        if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordAssignedName(name);
-          }
-
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+      if (NodeUtil.isNameDeclaration(n)) {
+        // TODO(nicksantos): This is a simplistic heuristic for finding
+        // out if this declaration is a local variable. We should actually
+        // properly index these scopes so that we can tell when names are
+        // local variables, and when they're global variables.
+        if (n.isName() && NodeUtil.isLValue(n) &&
+            // Be careful of bleeding functions, which create variables
+            // in the inner scope, not the scope where the name appears.
+            !NodeUtil.isBleedingFunctionName(n)) {
+          String name = n.getString();
+          Scope scope = t.getScope();
+          Var var = scope.getVar(name);
+          if (var != null) {
+            Scope ownerScope = var.getScope();
+            if (ownerScope.isLocal()) {
+              data.get(ownerScope.getRootNode()).recordAssignedName(name);
+            }
+            if (scope != ownerScope && ownerScope.isLocal()) {
+              data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+            }
           }
         }
       } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
@@ -2035,8 +2037,7 @@ final class TypedScopeCreator implements ScopeCreator {
           }
         }
       }
-    }
-  }
+    }  }
 
   private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n) {
     if (n == null) {

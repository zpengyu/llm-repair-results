    @Override public void visit(NodeTraversal t, Node n, Node parent) {
      if (t.inGlobalScope()) {
        return;
      }

      if (n.isReturn() && n.getFirstChild() != null) {
        data.get(t.getScopeRoot()).recordNonEmptyReturn();
      }

      if (t.getScopeDepth() <= 2) {
        // The first-order function analyzer looks at two types of variables:
        //
        // 1) Local variables that are assigned in inner scopes ("escaped vars")
        //
        // 2) Local variables that are assigned more than once.
        //
        // We treat all global variables as escaped by default, so there's
        // no reason to do this extra computation for them.
        return;
      }

      if (NodeUtil.isAssignmentOp(n)) {
        Node left = n.getFirstChild();
        if (left.isName()) {
          String name = left.getString();
          Scope scope = t.getScope();
          Var var = scope.getVar(name);
          if (var != null) {
            Scope ownerScope = var.getScope();
            if (scope != ownerScope && ownerScope.isLocal()) {
              data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
            }
          }
        } else if (left.isGetProp() && left.isUnscopedQualifiedName()) {
          String name = NodeUtil.getRootOfQualifiedName(left).getString();
          Scope scope = t.getScope();
          Var var = scope.getVar(name);
          if (var != null) {
            Scope ownerScope = var.getScope();
            if (scope != ownerScope && ownerScope.isLocal()) {
              data.get(ownerScope.getRootNode())
                  .recordEscapedQualifiedName(left.getQualifiedName());
            }
          }
        }
      }
    }


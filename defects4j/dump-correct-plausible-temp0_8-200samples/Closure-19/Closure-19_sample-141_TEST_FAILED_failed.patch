diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
index abff329b..bf7d1aad 100644
--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
@@ -159,18 +159,20 @@ public abstract class ChainableReverseAbstractInterpreter
       case Token.NAME:
         scope.inferSlotType(node.getString(), type);
         break;
-
       case Token.GETPROP:
-        String qualifiedName = node.getQualifiedName();
-        Preconditions.checkNotNull(qualifiedName);
-
-        JSType origType = node.getJSType();
-        origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
-        scope.inferQualifiedSlot(node, qualifiedName, origType, type);
-        break;
-
+        Node target = node.getFirstChild();
+        if (target.isThis() && node.getLastChild().isString()) {
+          String qualifiedName = node.getQualifiedName();
+          Preconditions.checkNotNull(qualifiedName);
+          JSType origType = node.getJSType();
+          origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
+          scope.inferQualifiedSlot(node, qualifiedName, origType, type);
+          break;
+        } else {
+          throw new IllegalArgumentException("Node cannot be refined. \n" +
+              node.toStringTree());
+        }
         // "this" references aren't currently modeled in the CFG.
-
       default:
         throw new IllegalArgumentException("Node cannot be refined. \n" +
             node.toStringTree());

  protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
    switch (node.getType()) {
      case Token.NAME:
        scope.inferSlotType(node.getString(), type);
        break;
      case Token.GETPROP:
        String qualifiedName = node.getQualifiedName();
        Preconditions.checkNotNull(qualifiedName);
        JSType origType = node.getJSType();
        origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
        scope.inferQualifiedSlot(node, qualifiedName, origType, type);
        break;
        // "this" references aren't currently modeled in the CFG.
      case Token.THIS:
        JSType thisType = type == null ?
            getNativeType(UNKNOWN_TYPE) : type;
        if (scope.hasSlot(FlowScope.THIS_REF)) {
          JSType otherType = scope.getSlot(FlowScope.THIS_REF);
          thisType = thisType.getLeastSupertype(otherType);
        }
        scope.inferSlotType(FlowScope.THIS_REF, thisType);
        break;
      default:
        throw new IllegalArgumentException("Node cannot be refined. \n" +
            node.toStringTree());
    }
  }
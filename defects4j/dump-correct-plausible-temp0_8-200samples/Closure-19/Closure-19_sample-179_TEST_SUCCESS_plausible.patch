diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
index abff329b..19271485 100644
--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
@@ -154,7 +154,7 @@ public abstract class ChainableReverseAbstractInterpreter
    * {@code node}. It must be possible to refine the type of the given node in
    * the given scope, as determined by {@link #getTypeIfRefinable}.
    */
-  protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
+protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
     switch (node.getType()) {
       case Token.NAME:
         scope.inferSlotType(node.getString(), type);
@@ -168,9 +166,11 @@ public abstract class ChainableReverseAbstractInterpreter
         origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
         scope.inferQualifiedSlot(node, qualifiedName, origType, type);
         break;
-
         // "this" references aren't currently modeled in the CFG.
-
+        case Token.THIS:
+          scope.inferQualifiedSlot(node, "this",
+              getNativeType(UNKNOWN_TYPE), type);
+          break;
       default:
         throw new IllegalArgumentException("Node cannot be refined. \n" +
             node.toStringTree());

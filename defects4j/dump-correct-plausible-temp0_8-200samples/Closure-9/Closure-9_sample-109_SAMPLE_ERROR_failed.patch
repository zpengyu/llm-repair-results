diff --git a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
index 6107328b..303bb582 100644
--- a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
+++ b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
@@ -36,20 +36,14 @@ import java.util.regex.Pattern;
  * ordering.
  */
 public class ProcessCommonJSModules implements CompilerPass {
-  // According to the spec, the forward slash should be the delimite on
-  // all platforms.
   private static final String MODULE_SLASH = "/";
-
-  public static final String DEFAULT_FILENAME_PREFIX = "." + MODULE_SLASH;
-
-  private static final String MODULE_NAME_SEPARATOR = "\\$";
+  private static final String MODULE_NAME_SEPARATOR = "$";
   private static final String MODULE_NAME_PREFIX = "module$";
-
   private final AbstractCompiler compiler;
   private final String filenamePrefix;
   private final boolean reportDependencies;
   private JSModule module;
-
+  private final Set<String> modulesWithExports = Sets.newHashSet();
   ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix) {
     this(compiler, filenamePrefix, true);
   }
@@ -71,31 +62,15 @@ public class ProcessCommonJSModules implements CompilerPass {
   String guessCJSModuleName(String filename) {
     return toModuleName(normalizeSourceName(filename));
   }
-
-  /**
-   * For every file that is being processed this returns the module that
-   * created for it.
-   */
   JSModule getModule() {
     return module;
   }
-
-  /**
-   * Turns a filename into a JS identifier that is used for moduleNames in
-   * rewritten code. Removes leading ./, replaces / with $, removes trailing .js
-   * and replaces - with _. All moduleNames get a "module$" prefix.
-   */
   public static String toModuleName(String filename) {
     return MODULE_NAME_PREFIX +
         filename.replaceAll("^\\." + Pattern.quote(MODULE_SLASH), "")
             .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)
             .replaceAll("\\.js$", "").replaceAll("-", "_");
   }
-
-  /**
-   * Turn a filename into a moduleName with support for relative addressing
-   * with ./ and ../ based on currentFilename;
-   */
   public static String toModuleName(String requiredFilename,
       String currentFilename) {
     requiredFilename = requiredFilename.replaceAll("\\.js$", "");
@@ -112,27 +86,15 @@ public class ProcessCommonJSModules implements CompilerPass {
     }
     return toModuleName(requiredFilename);
   }
-
   private String normalizeSourceName(String filename) {
-    // The DOS command shell will normalize "/" to "\", so we have to
-    // wrestle it back.
-
     if (filename.indexOf(filenamePrefix) == 0) {
       filename = filename.substring(filenamePrefix.length());
     }
-
     return filename;
   }
-
-  /**
-   * Visits require, every "script" and special module.exports assignments.
-   */
   private class ProcessCommonJsModulesCallback extends
       AbstractPostOrderCallback {
-
     private int scriptNodeCount = 0;
-    private Set<String> modulesWithExports = Sets.newHashSet();
-
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isCall() && n.getChildCount() == 2 &&
@@ -151,11 +111,6 @@ public class ProcessCommonJSModules implements CompilerPass {
         visitModuleExports(n);
       }
     }
-
-    /**
-     * Visit require calls. Emit corresponding goog.require and rewrite require
-     * to be a direct reference to name of require module.
-     */
     private void visitRequireCall(NodeTraversal t, Node require, Node parent) {
       String moduleName = toModuleName(require.getChildAtIndex(1).getString(),
           normalizeSourceName(t.getSourceName()));
@@ -165,17 +120,11 @@ public class ProcessCommonJSModules implements CompilerPass {
       if (reportDependencies) {
         t.getInput().addRequire(moduleName);
       }
-      // Rewrite require("name").
       script.addChildToFront(IR.exprResult(
           IR.call(IR.getprop(IR.name("goog"), IR.string("require")),
               IR.string(moduleName))).copyInformationFromForTree(require));
       compiler.reportCodeChange();
     }
-
-    /**
-     * Emit goog.provide and add suffix to all global vars to avoid conflicts
-     * with other modules.
-     */
     private void visitScript(NodeTraversal t, Node script) {
       Preconditions.checkArgument(scriptNodeCount == 1,
           "ProcessCommonJSModules supports only one invocation per " +
@@ -193,21 +142,11 @@ public class ProcessCommonJSModules implements CompilerPass {
       script.addChildToFront(IR.exprResult(
           IR.call(IR.getprop(IR.name("goog"), IR.string("provide")),
               IR.string(moduleName))).copyInformationFromForTree(script));
-
       emitOptionalModuleExportsOverride(script, moduleName);
-
-      // Rename vars to not conflict in global scope.
       NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(
           moduleName));
-
       compiler.reportCodeChange();
     }
-
-    /**
-     * Emit <code>if (moduleName.module$exports) {
-     *    moduleName = moduleName.module$export;
-     * }</code> at end of file.
-     */
     private void emitOptionalModuleExportsOverride(Node script,
         String moduleName) {
       if (!modulesWithExports.contains(moduleName)) {
@@ -222,10 +160,6 @@ public class ProcessCommonJSModules implements CompilerPass {
               moduleExportsProp.cloneTree())))).copyInformationFromForTree(
           script));
     }
-
-    /**
-     * Rewrite module.exports to moduleName.module$exports.
-     */
     private void visitModuleExports(Node prop) {
       String moduleName = guessCJSModuleName(prop.getSourceFileName());
       Node module = prop.getChildAtIndex(0);
@@ -236,10 +170,6 @@ public class ProcessCommonJSModules implements CompilerPass {
       exports.setString("module$exports");
       modulesWithExports.add(moduleName);
     }
-
-    /**
-     * Returns next script node in parents.
-     */
     private Node getCurrentScriptNode(Node n) {
       while (true) {
         if (n.isScript()) {
@@ -249,16 +179,9 @@ public class ProcessCommonJSModules implements CompilerPass {
       }
     }
   }
-
-  /**
-   * Traverses a node tree and appends a suffix to all global variable names.
-   */
   private class SuffixVarsCallback extends AbstractPostOrderCallback {
-
     private static final String EXPORTS = "exports";
-
     private final String suffix;
-
     SuffixVarsCallback(String suffix) {
       this.suffix = suffix;
     }

diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
index 316efa3a9..f5a468268 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
@@ -580,26 +578,28 @@ public class BuilderBasedDeserializer
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
+                // Last creator property to set?
+                Object value = creatorProp.deserialize(p, ctxt);
+                if (buffer.assignParameter(creatorProp, value)) {
+                    t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
                     try {
-                        bean = creator.build(ctxt, buffer);
+                        Object bean = creator.build(ctxt, buffer);
+                        // if so, need to copy all remaining tokens into buffer
+                        while (t == JsonToken.FIELD_NAME) {
+                            p.nextToken(); // to skip name
+                            tokens.copyCurrentStructure(p);
+                            t = p.nextToken();
+                        }
+                        tokens.writeEndObject();
+                        if (bean.getClass() != _beanType.getRawClass()) {
+                            ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+                            return null;
+                        }
+                        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
-                    }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
+                        continue; // never gets here
                     }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
                 continue;
             }
@@ -624,12 +624,10 @@ public class BuilderBasedDeserializer
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
-
         // We hit END_OBJECT, so:
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
-            bean = creator.build(ctxt, buffer);
+            bean =  creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }

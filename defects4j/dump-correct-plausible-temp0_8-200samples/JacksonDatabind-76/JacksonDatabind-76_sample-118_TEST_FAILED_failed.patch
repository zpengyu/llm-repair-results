diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
index 316efa3a9..1348971e2 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
@@ -581,31 +579,15 @@ public class BuilderBasedDeserializer
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
-                    try {
-                        bean = creator.build(ctxt, buffer);
-                    } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
-                    }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+                    t = p.nextToken(); // move to following FIELD_NAME/END_OBJECT
+                    break;
                 }
                 continue;
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
-                continue;
+                t = p.nextToken(); // move to following FIELD_NAME/END_OBJECT
+                break;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
@@ -613,29 +595,37 @@ public class BuilderBasedDeserializer
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
+            // ignorable things should be ignored
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
-            tokens.writeFieldName(propName);
-            tokens.copyCurrentStructure(p);
             // "any property"?
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+                continue;
             }
+            // Ok then, let's collect the whole field; name and value
+            tokens.writeFieldName(propName);
+            tokens.copyCurrentStructure(p);
+            // but we can not yet assign any values
+        }
+        // In any case, need to copy the ending END_OBJECT
+        if (t == JsonToken.END_OBJECT) {
+            tokens.writeEndObject();
+        } else if (t != JsonToken.FIELD_NAME) { // error?
+            throw ctxt.mappingException("Expected END_OBJECT or FIELD_NAME after unwrapping Object Id: got "+t);
         }
-
         // We hit END_OBJECT, so:
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
-            bean = creator.build(ctxt, buffer);
+            bean =  creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
+        // or, if properties to ignore:
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
-
     /*
     /**********************************************************
     /* Handling for cases where we have property/-ies with

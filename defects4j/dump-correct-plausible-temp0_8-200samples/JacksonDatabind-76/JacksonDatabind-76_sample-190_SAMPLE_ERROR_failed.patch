diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
index 316efa3a9..cefd9415f 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
@@ -580,25 +578,38 @@ public class BuilderBasedDeserializer
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
+                // Last creator property to set?
+                Object value = creatorProp.deserialize(p, ctxt);
+                if (buffer.assignParameter(creatorProp.getPropertyIndex(), value)) {
+                    t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
+                        continue; // never gets here
+                    }
+                    //  polymorphic?
+                    if (bean.getClass() != _beanType.getRawClass()) {
+                        return handlePolymorphic(p, ctxt, bean, tokens);
                     }
-                    while (t == JsonToken.FIELD_NAME) {
+                    if (t == JsonToken.END_OBJECT) {
+                        return bean;
+                    }
+                    if (t == JsonToken.FIELD_NAME) {
+                        String newPropName = p.getCurrentName();
                         p.nextToken();
+                        tokens.writeFieldName(newPropName);
                         tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
+                        // creator property but no wrapper; end-of-chain
+                        SettableBeanProperty newProp = creator.findCreatorProperty(newPropName);
+                        if (newProp != null) {
+                            buffer.assignParameter(newProp.getPropertyIndex(), newProp.deserialize(p, ctxt));
+                        }
                     }
+                    // !!! 09-Feb-2011, tatu: Not sure if this is correct;
+                    // should probably just return and let caller handle it?
+                    // For now this should allow "unwrapping" to work
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
                 continue;
@@ -624,14 +635,13 @@ public class BuilderBasedDeserializer
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
-
         // We hit END_OBJECT, so:
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
-            bean = creator.build(ctxt, buffer);
+            bean =  creator.build(ctxt, buffer);
         } catch (Exception e) {
-            return wrapInstantiationProblem(e, ctxt);
+            wrapInstantiationProblem(e, ctxt);
+            return null; // never gets here
         }
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }

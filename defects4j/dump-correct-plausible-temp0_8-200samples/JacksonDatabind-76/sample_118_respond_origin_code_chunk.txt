    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
    		DeserializationContext ctxt)
        throws IOException, JsonProcessingException
    {
        final PropertyBasedCreator creator = _propertyBasedCreator;
        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);

        TokenBuffer tokens = new TokenBuffer(p, ctxt);
        tokens.writeStartObject();

        JsonToken t = p.getCurrentToken();
        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
            String propName = p.getCurrentName();
            p.nextToken(); // to point to value
            // creator property?
            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
            if (creatorProp != null) {
                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
                    t = p.nextToken(); // move to following FIELD_NAME/END_OBJECT
                    break;
                }
                continue;
            }
            // Object Id property?
            if (buffer.readIdProperty(propName)) {
                t = p.nextToken(); // move to following FIELD_NAME/END_OBJECT
                break;
            }
            // regular property? needs buffering
            SettableBeanProperty prop = _beanProperties.find(propName);
            if (prop != null) {
                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                continue;
            }
            // ignorable things should be ignored
            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                handleIgnoredProperty(p, ctxt, handledType(), propName);
                continue;
            }
            // "any property"?
            if (_anySetter != null) {
                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
                continue;
            }
            // Ok then, let's collect the whole field; name and value
            tokens.writeFieldName(propName);
            tokens.copyCurrentStructure(p);
            // but we can not yet assign any values
        }

        // In any case, need to copy the ending END_OBJECT
        if (t == JsonToken.END_OBJECT) {
            tokens.writeEndObject();
        } else if (t != JsonToken.FIELD_NAME) { // error?
            throw ctxt.mappingException("Expected END_OBJECT or FIELD_NAME after unwrapping Object Id: got "+t);
        }

        // We hit END_OBJECT, so:
        Object bean;
        try {
            bean =  creator.build(ctxt, buffer);
        } catch (Exception e) {
            return wrapInstantiationProblem(e, ctxt);
        }
        // or, if properties to ignore:
        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
    }


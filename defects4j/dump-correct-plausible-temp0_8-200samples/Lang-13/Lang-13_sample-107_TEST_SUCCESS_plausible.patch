diff --git a/src/main/java/org/apache/commons/lang3/SerializationUtils.java b/src/main/java/org/apache/commons/lang3/SerializationUtils.java
index 5d4b161b..292e23ca 100644
--- a/src/main/java/org/apache/commons/lang3/SerializationUtils.java
+++ b/src/main/java/org/apache/commons/lang3/SerializationUtils.java
@@ -235,40 +235,39 @@ public class SerializationUtils {
      * <p>For more in-depth information about the problem for which this
      * class here is a workaround, see the JIRA issue LANG-626. </p>
      */
-     static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {
-        private ClassLoader classLoader;
-
-        /**
-         * Constructor.
-         * @param in The <code>InputStream</code>.
-         * @param classLoader classloader to use
-         * @throws IOException if an I/O error occurs while reading stream header.
-         * @see java.io.ObjectInputStream
-         */
-        public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {
-            super(in);
-            this.classLoader = classLoader;
-
-        }
-
-        /**
-         * Overriden version that uses the parametrized <code>ClassLoader</code> or the <code>ClassLoader</code>
-         * of the current <code>Thread</code> to resolve the class.
-         * @param desc An instance of class <code>ObjectStreamClass</code>.
-         * @return A <code>Class</code> object corresponding to <code>desc</code>.
-         * @throws IOException Any of the usual Input/Output exceptions.
-         * @throws ClassNotFoundException If class of a serialized object cannot be found.
-         */
-        @Override
-        protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
-            String name = desc.getName();
+static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {
+    private ClassLoader classLoader;
+    /**
+     * Constructor.
+     * @param in The <code>InputStream</code>.
+     * @param classLoader classloader to use
+     * @throws IOException if an I/O error occurs while reading stream header.
+     * @see java.io.ObjectInputStream
+     */
+    public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {
+        super(in);
+        this.classLoader = classLoader;
+    }
+    /**
+     * Overriden version that uses the parametrized <code>ClassLoader</code> or the <code>ClassLoader</code>
+     * of the current <code>Thread</code> to resolve the class.
+     * @param desc An instance of class <code>ObjectStreamClass</code>.
+     * @return A <code>Class</code> object corresponding to <code>desc</code>.
+     * @throws IOException Any of the usual Input/Output exceptions.
+     * @throws ClassNotFoundException If class of a serialized object cannot be found.
+     */
+    @Override
+    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
+        String name = desc.getName();
+        try {
+            return Class.forName(name, false, classLoader);
+        } catch (ClassNotFoundException ex) {
             try {
-                return Class.forName(name, false, classLoader);
-            } catch (ClassNotFoundException ex) {
-                    return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
+                return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
+            } catch (ClassNotFoundException exc) {
+                return super.resolveClass(desc);
             }
         }
-
     }
-
+}
 }

diff --git a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
index 60bfd244..92c0d3fd 100644
--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
@@ -45,18 +45,14 @@ import java.util.logging.Logger;
  *
  */
 class UnreachableCodeElimination extends AbstractPostOrderCallback
-    implements CompilerPass, ScopedCallback  {
+    implements CompilerPass, ScopedCallback {
   private static final Logger logger =
     Logger.getLogger(UnreachableCodeElimination.class.getName());
-
   private final AbstractCompiler compiler;
   private final boolean removeNoOpStatements;
-
   Deque<ControlFlowGraph<Node>> cfgStack =
       new LinkedList<ControlFlowGraph<Node>>();
-
   ControlFlowGraph<Node> curCfg = null;
-
   UnreachableCodeElimination(AbstractCompiler compiler,
       boolean removeNoOpStatements) {
     this.compiler = compiler;
@@ -178,9 +160,8 @@ class UnreachableCodeElimination extends AbstractPostOrderCallback
         if (outEdges.size() == 1 &&
             // If there is a next node, there is no chance this jump is useless.
             (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {
-
           Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);
-          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));
+          Node fallThrough = tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
           Node nextCfgNode = outEdges.get(0).getDestination().getValue();
           if (nextCfgNode == fallThrough) {
             removeDeadExprStatementSafely(n);

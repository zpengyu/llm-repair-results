diff --git a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
index 60bfd244..3dfbb99c 100644
--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
@@ -178,9 +160,8 @@ class UnreachableCodeElimination extends AbstractPostOrderCallback
         if (outEdges.size() == 1 &&
             // If there is a next node, there is no chance this jump is useless.
             (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {
-
           Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);
-          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));
+          Node fallThrough = tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
           Node nextCfgNode = outEdges.get(0).getDestination().getValue();
           if (nextCfgNode == fallThrough) {
             removeDeadExprStatementSafely(n);
@@ -190,12 +171,6 @@ class UnreachableCodeElimination extends AbstractPostOrderCallback
     }
     return n;
   }
-
-  private Node computeFollowing(Node n) {
-    Node next = ControlFlowAnalysis.computeFollowNode(n);
-    return next;
-  }
-
   private void removeDeadExprStatementSafely(Node n) {
     Node parent = n.getParent();
     if (n.getType() == Token.EMPTY ||

diff --git a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
index 60bfd244..5fcbb0fb 100644
--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
@@ -45,20 +45,16 @@ import java.util.logging.Logger;
  *
  */
 class UnreachableCodeElimination extends AbstractPostOrderCallback
-    implements CompilerPass, ScopedCallback  {
+    implements CompilerPass, ScopedCallback {
   private static final Logger logger =
-    Logger.getLogger(UnreachableCodeElimination.class.getName());
-
+      Logger.getLogger(UnreachableCodeElimination.class.getName());
   private final AbstractCompiler compiler;
   private final boolean removeNoOpStatements;
-
   Deque<ControlFlowGraph<Node>> cfgStack =
       new LinkedList<ControlFlowGraph<Node>>();
-
   ControlFlowGraph<Node> curCfg = null;
-
   UnreachableCodeElimination(AbstractCompiler compiler,
-      boolean removeNoOpStatements) {
+                             boolean removeNoOpStatements) {
     this.compiler = compiler;
     this.removeNoOpStatements = removeNoOpStatements;
   }
@@ -138,14 +125,11 @@ class UnreachableCodeElimination extends AbstractPostOrderCallback
      * if-else conversion but it handles more complicated switch statements
      * much nicer.
      */
-
     // If n is null the target is the end of the function, nothing to do.
     if (n == null) {
-       return n;
+      return n;
     }
-
     DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
-
     if (gNode == null) {
       return n;
     }

diff --git a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
index 60bfd244..e12245f9 100644
--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
@@ -45,18 +45,14 @@ import java.util.logging.Logger;
  *
  */
 class UnreachableCodeElimination extends AbstractPostOrderCallback
-    implements CompilerPass, ScopedCallback  {
+    implements CompilerPass, ScopedCallback {
   private static final Logger logger =
     Logger.getLogger(UnreachableCodeElimination.class.getName());
-
   private final AbstractCompiler compiler;
   private final boolean removeNoOpStatements;
-
   Deque<ControlFlowGraph<Node>> cfgStack =
       new LinkedList<ControlFlowGraph<Node>>();
-
   ControlFlowGraph<Node> curCfg = null;
-
   UnreachableCodeElimination(AbstractCompiler compiler,
       boolean removeNoOpStatements) {
     this.compiler = compiler;
@@ -92,10 +82,9 @@ class UnreachableCodeElimination extends AbstractPostOrderCallback
     if (parent == null) {
       return;
     }
-    if (n.getType() == Token.FUNCTION || n.getType() == Token.SCRIPT) {
+    if (NodeUtil.isFunctionBlock(n)) {
       return;
     }
-
     DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
     if (gNode == null) { // Not in CFG.
       return;
@@ -177,8 +159,7 @@ class UnreachableCodeElimination extends AbstractPostOrderCallback
         List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
         if (outEdges.size() == 1 &&
             // If there is a next node, there is no chance this jump is useless.
-            (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {
-
+            (n.getNext() == null || NodeUtil.isFunctionBlock(n.getNext()))) {
           Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);
           Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));
           Node nextCfgNode = outEdges.get(0).getDestination().getValue();

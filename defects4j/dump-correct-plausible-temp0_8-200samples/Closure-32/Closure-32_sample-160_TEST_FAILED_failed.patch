diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index ad292c02..236837d9 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -1326,10 +1326,10 @@ public final class JsDocInfoParser {
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
-                                                      WhitespaceOption option) {
-
-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
+   private ExtractionInfo extractMultilineTextualBlock(
+       JsDocToken token, WhitespaceOption option) {
+    if (token == JsDocToken.EOC ||
+        token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
@@ -1343,51 +1341,26 @@ public final class JsDocInfoParser {
     if (option != WhitespaceOption.PRESERVE) {
       line = line.trim();
     }
-
     StringBuilder builder = new StringBuilder();
     builder.append(line);
-
     state = State.SEARCHING_ANNOTATION;
     token = next();
-
-    boolean ignoreStar = false;
-
     // Track the start of the line to count whitespace that
     // the tokenizer skipped. Because this case is rare, it's easier
     // to do this here than in the tokenizer.
-
+    //
+    // This only counts whitespace in the first line.
     do {
       switch (token) {
-        case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-          } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
-              builder.append(' ');
-            }
-
-            builder.append('*');
-          }
-
-          token = next();
-          continue;
-
         case EOL:
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
-
-          ignoreStar = true;
           token = next();
           continue;
-
         default:
-          ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
-
               // All tokens must be separated by a space.
-
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
               // When we're capturing a license block, annotations

diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index ad292c02..6bebd58e 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -1337,25 +1335,18 @@ public final class JsDocInfoParser {
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
-
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
-
     StringBuilder builder = new StringBuilder();
-    builder.append(line);
-
+    String firstLine = stream.getRemainingJSDocLine();
+    if (option == WhitespaceOption.SINGLE_LINE) {
+      builder.append(firstLine);
+    } else if (option == WhitespaceOption.PRESERVE) {
+      builder.append(firstLine.trim());
+    } else {
+      builder.append(trimEnd(firstLine));
+    }
     state = State.SEARCHING_ANNOTATION;
     token = next();
-
     boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
     do {
       switch (token) {
         case STAR:
@@ -1385,9 +1371,7 @@ public final class JsDocInfoParser {
         default:
           ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
+          // All tokens must be separated by a space.
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
               // When we're capturing a license block, annotations
@@ -1415,14 +1394,13 @@ public final class JsDocInfoParser {
             builder.append(' ');
           }
           builder.append(toString(token));
-
-          line = stream.getRemainingJSDocLine();
-
-          if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
+          if (option != WhitespaceOption.SINGLE_LINE) {
+            line = stream.getRemainingJSDocLine();
+            if (option != WhitespaceOption.PRESERVE) {
+              line = trimEnd(line);
+            }
+            builder.append(line);
           }
-
-          builder.append(line);
           token = next();
       }
     } while (true);

diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 0f2a6d44..6f4a0303 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -652,11 +652,8 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
-
-      double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
-
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
@@ -683,35 +677,30 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
-
       switch (n.getType()) {
         case Token.LSH:
-          result = lvalInt << rvalInt;
+          lvalInt <<= rvalInt;
           break;
         case Token.RSH:
-          result = lvalInt >> rvalInt;
+          lvalInt >>= rvalInt;
           break;
         case Token.URSH:
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          lvalInt >>>= rvalInt;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
-
-      Node newNumber = Node.newNumber(result);
+      Node newNumber = Node.newNumber(lvalInt);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
-
       return newNumber;
     }
-
     return n;
   }
-
   /**
    * Try to fold comparison nodes, e.g ==
    */

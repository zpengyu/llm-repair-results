diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 0f2a6d44..4fac43b6 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -650,22 +650,18 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
-    if (left.getType() == Token.NUMBER &&
-        right.getType() == Token.NUMBER) {
-
+    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
-
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
+      // check ranges.  We do not do anything that would clip the double to a
+      // 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
-
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
+      // only the lower 5 bits are used when shifting, so don't do anything if
+      // the shift amount is outside [0,32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
@@ -683,25 +677,32 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
-
+      // We need to be able to hold the result, so use a long here.
+      long resultLong = 0;
       switch (n.getType()) {
         case Token.LSH:
-          result = lvalInt << rvalInt;
+          resultLong = lvalInt << rvalInt;
           break;
         case Token.RSH:
-          result = lvalInt >> rvalInt;
+          resultLong = lvalInt >> rvalInt;
           break;
         case Token.URSH:
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          resultLong = lvalInt >>> rvalInt;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
-
+      // The result should always fit into a 32-bit number, even though we
+      // used a long to hold it.
+      result = resultLong;
+      if (!(result >= Integer.MIN_VALUE && result <= Integer.MAX_VALUE)) {
+        error(BITWISE_OPERAND_OUT_OF_RANGE, n);
+        return n;
+      }
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();

diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 0f2a6d44..34771403 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -652,11 +652,8 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
-
-      double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
-
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
@@ -683,7 +677,7 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
-
+      long result;
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
@@ -701,7 +695,11 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
-
+      // The result may be too big to be stored as a double. The shift operators
+      // always return 32-bit signed integers.
+      if (!(result >= Integer.MIN_VALUE && result <= Integer.MAX_VALUE)) {
+        return n;
+      }
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();

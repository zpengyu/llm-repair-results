diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 0f2a6d44..b2f50e1a 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -683,18 +678,29 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
-
       switch (n.getType()) {
         case Token.LSH:
+          if (lvalInt < 0 && rvalInt < 0) {
+            error(LSHIFT_BY_NEGATIVE_AMOUNT, n);
+            return n;
+          }
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
+          if (lvalInt < 0) {
+            error(RSHIFT_BY_NEGATIVE_AMOUNT, n);
+            return n;
+          }
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
+          if (lvalInt < 0 || rvalInt < 0) {
+            error(URSHIFT_BY_NEGATIVE_AMOUNT, n);
+            return n;
+          }
           result = lvalInt >>> rvalInt;
           break;
         default:

diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java
index a5b356fb..87ea80e1 100644
--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -896,10 +894,34 @@ final class TypedScopeCreator implements ScopeCreator {
       // scope where the root object appears. This helps out people
       // who declare "global" names in an anonymous namespace.
       Scope scopeToDeclareIn = scope;
-
+      // If n is a property, we declare it in the closest containing
+      // non-extern scope, or the global scope if all containing scopes
+      // are extern.
+      if (n.isGetProp()) {
+        for (Scope current = scopeToDeclareIn;
+             current != null && current.isDeclared("this", false);
+             current = current.getParent()) {
+          if (!current.isExtern()) {
+            scopeToDeclareIn = current;
+          }
+        }
+      }
+      // If we're in the global scope, also declare var.prototype
+      // in the scope chain.
+      if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
+        FunctionType fnType = (FunctionType) type;
+        if (fnType.isConstructor() || fnType.isInterface()) {
+          FunctionType superClassCtor = fnType.getSuperClassConstructor();
+          scopeToDeclareIn.declare(variableName + ".prototype", n,
+              fnType.getPrototype(), compiler.getInput(sourceName),
+              /* declared iff there's an explicit supertype */
+              superClassCtor == null ||
+              superClassCtor.getInstanceType().equals(
+                  getNativeType(OBJECT_TYPE)));
+        }
+      }
         // don't try to declare in the global scope if there's
         // already a symbol there with this name.
-
       // declared in closest scope?
       if (scopeToDeclareIn.isDeclared(variableName, false)) {
         Var oldVar = scopeToDeclareIn.getVar(variableName);
@@ -926,24 +947,8 @@ final class TypedScopeCreator implements ScopeCreator {
             globalThis.defineDeclaredProperty(variableName, type, isExtern);
           }
         }
-
-        // If we're in the global scope, also declare var.prototype
-        // in the scope chain.
-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
-          FunctionType fnType = (FunctionType) type;
-          if (fnType.isConstructor() || fnType.isInterface()) {
-            FunctionType superClassCtor = fnType.getSuperClassConstructor();
-            scopeToDeclareIn.declare(variableName + ".prototype", n,
-                fnType.getPrototype(), compiler.getInput(sourceName),
-                /* declared iff there's an explicit supertype */
-                superClassCtor == null ||
-                superClassCtor.getInstanceType().equals(
-                    getNativeType(OBJECT_TYPE)));
-          }
-        }
       }
     }
-
     /**
      * Check if the given node is a property of a name in the global scope.
      */

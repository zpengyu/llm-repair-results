diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java
index a5b356fb..cd94c8f2 100644
--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -869,9 +869,8 @@ final class TypedScopeCreator implements ScopeCreator {
      * @param type the variable's type. It may be {@code null} if
      *     {@code inferred} is {@code true}.
      */
-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
+        void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
       Preconditions.checkArgument(inferred || type != null);
-
       // Only allow declarations of NAMEs and qualfied names.
       boolean shouldDeclareOnGlobalThis = false;
       if (n.getType() == Token.NAME) {
@@ -896,10 +894,6 @@ final class TypedScopeCreator implements ScopeCreator {
       // scope where the root object appears. This helps out people
       // who declare "global" names in an anonymous namespace.
       Scope scopeToDeclareIn = scope;
-
-        // don't try to declare in the global scope if there's
-        // already a symbol there with this name.
-
       // declared in closest scope?
       if (scopeToDeclareIn.isDeclared(variableName, false)) {
         Var oldVar = scopeToDeclareIn.getVar(variableName);

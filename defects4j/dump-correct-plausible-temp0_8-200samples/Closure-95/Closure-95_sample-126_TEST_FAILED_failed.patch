diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java
index a5b356fb..52872fd7 100644
--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -910,23 +906,25 @@ final class TypedScopeCreator implements ScopeCreator {
           setDeferredType(n, type);
         }
         CompilerInput input = compiler.getInput(sourceName);
-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);
-
-        if (shouldDeclareOnGlobalThis) {
-          ObjectType globalThis =
-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
-          boolean isExtern = input.isExtern();
-          if (inferred) {
-            globalThis.defineInferredProperty(variableName,
-                type == null ?
-                    getNativeType(JSTypeNative.NO_TYPE) :
-                    type,
-                isExtern);
-          } else {
-            globalThis.defineDeclaredProperty(variableName, type, isExtern);
+        if (variableName.equals("arguments")) {
+          scopeToDeclareIn.declare(variableName, n, type, input, inferred);
+        } else {
+          scopeToDeclareIn.declare(variableName, n, type, input, inferred);
+          if (shouldDeclareOnGlobalThis) {
+            ObjectType globalThis =
+                typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
+            boolean isExtern = input.isExtern();
+            if (inferred) {
+              globalThis.defineInferredProperty(variableName,
+                  type == null ?
+                      getNativeType(JSTypeNative.NO_TYPE) :
+                      type,
+                  isExtern);
+            } else {
+              globalThis.defineDeclaredProperty(variableName, type, isExtern);
+            }
           }
         }
-
         // If we're in the global scope, also declare var.prototype
         // in the scope chain.
         if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {

diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java
index a5b356fb..793f80db 100644
--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -896,10 +894,22 @@ final class TypedScopeCreator implements ScopeCreator {
       // scope where the root object appears. This helps out people
       // who declare "global" names in an anonymous namespace.
       Scope scopeToDeclareIn = scope;
-
-        // don't try to declare in the global scope if there's
-        // already a symbol there with this name.
-
+      if (shouldDeclareOnGlobalThis) {
+        ObjectType globalThis =
+            typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
+        boolean isExtern = compiler.getInput(sourceName).isExtern();
+        if (inferred) {
+          globalThis.defineInferredProperty(variableName,
+              type == null ?
+                  getNativeType(JSTypeNative.NO_TYPE) :
+                  type,
+              isExtern);
+        } else {
+          globalThis.defineDeclaredProperty(variableName, type, isExtern);
+        }
+      }
+      // don't try to declare in the global scope if there's
+      // already a symbol there with this name.
       // declared in closest scope?
       if (scopeToDeclareIn.isDeclared(variableName, false)) {
         Var oldVar = scopeToDeclareIn.getVar(variableName);
@@ -911,22 +921,6 @@ final class TypedScopeCreator implements ScopeCreator {
         }
         CompilerInput input = compiler.getInput(sourceName);
         scopeToDeclareIn.declare(variableName, n, type, input, inferred);
-
-        if (shouldDeclareOnGlobalThis) {
-          ObjectType globalThis =
-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
-          boolean isExtern = input.isExtern();
-          if (inferred) {
-            globalThis.defineInferredProperty(variableName,
-                type == null ?
-                    getNativeType(JSTypeNative.NO_TYPE) :
-                    type,
-                isExtern);
-          } else {
-            globalThis.defineDeclaredProperty(variableName, type, isExtern);
-          }
-        }
-
         // If we're in the global scope, also declare var.prototype
         // in the scope chain.
         if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {

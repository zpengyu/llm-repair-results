diff --git a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
index 624a1fd7e..f93bb3159 100644
--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
@@ -793,108 +793,108 @@ public abstract class AnnotationIntrospector
      * @since 2.7
      */
     public JavaType refineSerializationType(final MapperConfig<?> config,
-            final Annotated a, final JavaType baseType) throws JsonMappingException
+            final Annotated a, JavaType baseType) throws JsonMappingException
     {
-        JavaType type = baseType;
+        // First: if we have a class annotation, may need to use that as base type
+        final Class<?> serClass = findSerializationType(a);
         final TypeFactory tf = config.getTypeFactory();
-        
         // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
         //    now-deprecated secondary methods; this because while
         //    direct sub-class not yet retrofitted may only override
         //    those methods. With 2.8 or later we may consider removal
         //    of these methods
-
-        
-        // Ok: start by refining the main type itself; common to all types
-        Class<?> serClass = findSerializationType(a);
         if (serClass != null) {
-            if (type.hasRawClass(serClass)) {
-                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
-                //    static typing this way
-                type = type.withStaticTyping();
-            } else {
-                try {
-                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
-                    //   may be needed here too in future?
-                        type = tf.constructGeneralizedType(type, serClass);
-                } catch (IllegalArgumentException iae) {
-                    throw new JsonMappingException(null,
-                            String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
-                                    type, serClass.getName(), a.getName(), iae.getMessage()),
-                                    iae);
-                }
+            try {
+                // 18-Jan-2016, tatu: Should try to keep existing type if possible
+                JavaType newType = baseType.hasRawClass(serClass) ? baseType.withStaticTyping()
+                        : tf.constructSpecializedType(baseType, serClass);
+                baseType = newType;
+            } catch (IllegalArgumentException iae) {
+                throw new JsonMappingException(null,
+                        String.format("Failed to narrow type %s with annotation (value %s), from '%s': %s",
+                                baseType, serClass.getName(), a.getName(), iae.getMessage()),
+                                iae);
             }
         }
         // Then further processing for container types
-
         // First, key type (for Maps, Map-like types):
-        if (type.isMapLikeType()) {
-            JavaType keyType = type.getKeyType();
-            Class<?> keyClass = findSerializationKeyType(a, keyType);
-            if (keyClass != null) {
-                if (keyType.hasRawClass(keyClass)) {
-                    keyType = keyType.withStaticTyping();
-                } else {
-                    Class<?> currRaw = keyType.getRawClass();
-                    try {
-                        // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
-                        //   specialize (narrow) type sometimes, even if more commonly opposite
-                        //   is needed.
-                        if (keyClass.isAssignableFrom(currRaw)) { // common case
-                            keyType = tf.constructGeneralizedType(keyType, keyClass);
-                        } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
-                            keyType = tf.constructSpecializedType(keyType, keyClass);
-                        } else {
-                            throw new JsonMappingException(null,
-                                    String.format("Can not refine serialization key type %s into %s; types not related",
-                                            keyType, keyClass.getName()));
-                        }
-                    } catch (IllegalArgumentException iae) {
-                        throw new JsonMappingException(null,
-                                String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                        type, keyClass.getName(), a.getName(), iae.getMessage()),
-                                        iae);
-                    }
-                }
-                type = ((MapLikeType) type).withKeyType(keyType);
+        JavaType keyType = baseType.getKeyType();
+        Class<?> keyClass = findSerializationKeyType(a, keyType);
+        if (keyClass != null) {
+            // 18-Jan-2016, tatu: try to keep type if possible
+            if (keyType.hasRawClass(keyClass)) {
+                keyType = keyType.withStaticTyping();
+            } else {
+                keyType = _mapKeyType(baseType, keyClass, tf);
             }
+            baseType = ((MapLikeType) baseType).withKeyType(keyType);
         }
-
-        JavaType contentType = type.getContentType();
+        // And then value types for all containers:
+        JavaType contentType = baseType.getContentType();
         if (contentType != null) { // collection[like], map[like], array, reference
-            // And then value types for all containers:
            Class<?> contentClass = findSerializationContentType(a, contentType);
            if (contentClass != null) {
+               // 18-Jan-2016, tatu: try to keep type if possible
                if (contentType.hasRawClass(contentClass)) {
                    contentType = contentType.withStaticTyping();
                } else {
-                   // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
-                   //   specialize (narrow) type sometimes, even if more commonly opposite
-                   //   is needed.
-                   Class<?> currRaw = contentType.getRawClass();
-                   try {
-                       if (contentClass.isAssignableFrom(currRaw)) { // common case
-                           contentType = tf.constructGeneralizedType(contentType, contentClass);
-                       } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
-                           contentType = tf.constructSpecializedType(contentType, contentClass);
-                       } else {
-                           throw new JsonMappingException(null,
-                                   String.format("Can not refine serialization content type %s into %s; types not related",
-                                           contentType, contentClass.getName()));
-                       }
-                   } catch (IllegalArgumentException iae) { // shouldn't really happen
-                       throw new JsonMappingException(null,
-                               String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                       type, contentClass.getName(), a.getName(), iae.getMessage()),
-                                       iae);
-                   }
+                   contentType = _mapContentType(baseType, contentClass, tf);
                }
-               type = type.withContentType(contentType);
+               baseType = baseType.withContentType(contentType);
            }
         }
-        return type;
+        return baseType;
+    }
+    private JavaType _mapKeyType(JavaType type, Class<?> keyClass, TypeFactory tf)
+            throws JsonMappingException
+    {
+        // 18-Jan-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
+        //   specialize (narrow) type sometimes, even if more commonly opposite
+        //   is needed.
+        JavaType keyType = type.getKeyType();
+        Class<?> currRaw = keyType.getRawClass();
+        try {
+            if (keyClass.isAssignableFrom(currRaw)) { // common case
+                return tf.constructGeneralizedType(keyType, keyClass);
+            }
+            if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
+                return tf.constructSpecializedType(keyType, keyClass);
+            }
+            throw new JsonMappingException(null,
+                    String.format("Can not refine serialization key type %s into %s; types not related",
+                            keyType, keyClass.getName()));
+        } catch (IllegalArgumentException iae) {
+            throw new JsonMappingException(null,
+                    String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
+                            type, keyClass.getName(), type.getKeyType(), iae.getMessage()),
+                            iae);
+        }
+    }
+    private JavaType _mapContentType(JavaType type, Class<?> contentClass, TypeFactory tf)
+            throws JsonMappingException
+    {
+        // 18-Jan-2016, tatu: As per [databind#1178], may need to actually
+        //   specialize (narrow) type sometimes, even if more commonly opposite
+        //   is needed.
+        JavaType contentType = type.getContentType();
+        Class<?> currRaw = contentType.getRawClass();
+        try {
+            if (contentClass.isAssignableFrom(currRaw)) { // common case
+                return tf.constructGeneralizedType(contentType, contentClass);
+            }
+            if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
+                return tf.constructSpecializedType(contentType, contentClass);
+            }
+            throw new JsonMappingException(null,
+                    String.format("Can not refine serialization content type %s into %s; types not related",
+                            contentType, contentClass.getName()));
+        } catch (IllegalArgumentException iae) { // shouldn't really happen
+            throw new JsonMappingException(null,
+                    String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
+                            type, contentClass.getName(), contentType, iae.getMessage()),
+                            iae);
+        }
     }
-
     /*
     /**********************************************************
     /* Serialization: class annotations

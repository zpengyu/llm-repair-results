diff --git a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
index 624a1fd7e..a7d131efb 100644
--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
@@ -803,20 +802,39 @@ public abstract class AnnotationIntrospector
         //    direct sub-class not yet retrofitted may only override
         //    those methods. With 2.8 or later we may consider removal
         //    of these methods
-
-        
-        // Ok: start by refining the main type itself; common to all types
-        Class<?> serClass = findSerializationType(a);
-        if (serClass != null) {
+        final JsonSerializationTypeResolverBuilder tb = useTypeResolverBuilder();
+        /* 10-Oct-2015, tatu: Secondary method should not be needed as of 2.7, as
+         *    all annotations should be via primary method. But leave in place
+         *    for now, to support back-ports.
+         */
+        if (tb == null) {
+            // Ok: start by refining the main type itself; common to all types
+            Class<?> serClass = findSerializationType(a);
+            if (serClass != null) {
+                if (type.hasRawClass(serClass)) {
+                    // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
+                    //    static typing this way
+                    type = type.withStaticTyping();
+                } else {
+                    try {
+                        // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
+                        //   may be needed here too in future?
+                            type = tf.constructGeneralizedType(type, serClass);
+                    } catch (IllegalArgumentException iae) {
+                        throw new JsonMappingException(null,
+                                String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
+                                        type, serClass.getName(), a.getName(), iae.getMessage()),
+                                        iae);
+                    }
+                }
+            }
+        } else if (tb.getDefaultImpl() != null) {
+            Class<?> serClass = tb.getDefaultImpl();
             if (type.hasRawClass(serClass)) {
-                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
-                //    static typing this way
                 type = type.withStaticTyping();
             } else {
                 try {
-                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
-                    //   may be needed here too in future?
-                        type = tf.constructGeneralizedType(type, serClass);
+                    type = tf.constructGeneralizedType(type, serClass);
                 } catch (IllegalArgumentException iae) {
                     throw new JsonMappingException(null,
                             String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
@@ -831,6 +848,9 @@ public abstract class AnnotationIntrospector
         if (type.isMapLikeType()) {
             JavaType keyType = type.getKeyType();
             Class<?> keyClass = findSerializationKeyType(a, keyType);
+            if (keyClass == null) {
+                keyClass = tb.findKeyTypeResolver(config, a, keyType);
+            }
             if (keyClass != null) {
                 if (keyType.hasRawClass(keyClass)) {
                     keyType = keyType.withStaticTyping();
@@ -864,6 +883,9 @@ public abstract class AnnotationIntrospector
         if (contentType != null) { // collection[like], map[like], array, reference
             // And then value types for all containers:
            Class<?> contentClass = findSerializationContentType(a, contentType);
+           if (contentClass == null) {
+               contentClass = tb.findContentTypeResolver(config, a, contentType);
+           }
            if (contentClass != null) {
                if (contentType.hasRawClass(contentClass)) {
                    contentType = contentType.withStaticTyping();

diff --git a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
index 624a1fd7e..928f7e8f9 100644
--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
@@ -803,94 +802,37 @@ public abstract class AnnotationIntrospector
         //    direct sub-class not yet retrofitted may only override
         //    those methods. With 2.8 or later we may consider removal
         //    of these methods
-
-        
-        // Ok: start by refining the main type itself; common to all types
-        Class<?> serClass = findSerializationType(a);
-        if (serClass != null) {
-            if (type.hasRawClass(serClass)) {
-                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
-                //    static typing this way
-                type = type.withStaticTyping();
-            } else {
+        if (type.isContainerType()) {
+            Class<?> serClass = findSerializationType(a);
+            Class<?> keyClass = findSerializationKeyType(a, type.getKeyType());
+            Class<?> contentClass = findSerializationContentType(a, type.getContentType());
+            if ((serClass != null) || (keyClass != null) || (contentClass != null)) {
                 try {
-                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
-                    //   may be needed here too in future?
-                        type = tf.constructGeneralizedType(type, serClass);
+                    type = tf.constructSpecializedType(type, serClass, keyClass, contentClass);
                 } catch (IllegalArgumentException iae) {
                     throw new JsonMappingException(null,
-                            String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
-                                    type, serClass.getName(), a.getName(), iae.getMessage()),
+                            String.format("Failed to narrow type %s with annotation (value %s, key type %s, content type %s): %s",
+                                    type, serClass, keyClass, contentClass, iae.getMessage()),
                                     iae);
                 }
             }
-        }
-        // Then further processing for container types
-
-        // First, key type (for Maps, Map-like types):
-        if (type.isMapLikeType()) {
-            JavaType keyType = type.getKeyType();
-            Class<?> keyClass = findSerializationKeyType(a, keyType);
-            if (keyClass != null) {
-                if (keyType.hasRawClass(keyClass)) {
-                    keyType = keyType.withStaticTyping();
-                } else {
-                    Class<?> currRaw = keyType.getRawClass();
-                    try {
-                        // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
-                        //   specialize (narrow) type sometimes, even if more commonly opposite
-                        //   is needed.
-                        if (keyClass.isAssignableFrom(currRaw)) { // common case
-                            keyType = tf.constructGeneralizedType(keyType, keyClass);
-                        } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
-                            keyType = tf.constructSpecializedType(keyType, keyClass);
-                        } else {
-                            throw new JsonMappingException(null,
-                                    String.format("Can not refine serialization key type %s into %s; types not related",
-                                            keyType, keyClass.getName()));
-                        }
-                    } catch (IllegalArgumentException iae) {
-                        throw new JsonMappingException(null,
-                                String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                        type, keyClass.getName(), a.getName(), iae.getMessage()),
-                                        iae);
-                    }
+        } else {
+            Class<?> serClass = findSerializationType(a);
+            if (serClass != null) {
+                try {
+                    type = tf.constructSpecializedType(type, serClass);
+                } catch (IllegalArgumentException iae) {
+                    throw new JsonMappingException(null,
+                            String.format("Failed to narrow type %s with concrete-type annotation (value %s): %s",
+                                    type, serClass.getName(), iae.getMessage()),
+                                    iae);
                 }
-                type = ((MapLikeType) type).withKeyType(keyType);
             }
         }
-
-        JavaType contentType = type.getContentType();
-        if (contentType != null) { // collection[like], map[like], array, reference
-            // And then value types for all containers:
-           Class<?> contentClass = findSerializationContentType(a, contentType);
-           if (contentClass != null) {
-               if (contentType.hasRawClass(contentClass)) {
-                   contentType = contentType.withStaticTyping();
-               } else {
-                   // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
-                   //   specialize (narrow) type sometimes, even if more commonly opposite
-                   //   is needed.
-                   Class<?> currRaw = contentType.getRawClass();
-                   try {
-                       if (contentClass.isAssignableFrom(currRaw)) { // common case
-                           contentType = tf.constructGeneralizedType(contentType, contentClass);
-                       } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
-                           contentType = tf.constructSpecializedType(contentType, contentClass);
-                       } else {
-                           throw new JsonMappingException(null,
-                                   String.format("Can not refine serialization content type %s into %s; types not related",
-                                           contentType, contentClass.getName()));
-                       }
-                   } catch (IllegalArgumentException iae) { // shouldn't really happen
-                       throw new JsonMappingException(null,
-                               String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                       type, contentClass.getName(), a.getName(), iae.getMessage()),
-                                       iae);
-                   }
-               }
-               type = type.withContentType(contentType);
-           }
+        // [databind#827]: need to check for annotations that indicate static typing as well
+        Boolean B = findSerializationTyping(config, a);
+        if (B != null) {
+            type = type.withStaticTyping();
         }
         return type;
     }

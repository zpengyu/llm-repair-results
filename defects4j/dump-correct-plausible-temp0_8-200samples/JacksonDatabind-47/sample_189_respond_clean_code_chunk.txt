    public JavaType refineSerializationType(final MapperConfig<?> config,
            final Annotated a, final JavaType baseType) throws JsonMappingException
    {
        JavaType type = baseType;
        final TypeFactory tf = config.getTypeFactory();
        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
        //    now-deprecated secondary methods; this because while
        //    direct sub-class not yet retrofitted may only override
        //    those methods. With 2.8 or later we may consider removal
        //    of these methods
        final Class<?> serClass = findSerializationType(a);
        if (serClass != null) {
            type = _refinePrimaryType(type, tf, config, a, serClass);
        }
        // Then further processing for container types
        // First, key type (for Maps, Map-like types):
        if (type.isMapLikeType()) {
            final Class<?> keyClass = findSerializationKeyType(a, type.getKeyType());
            if (keyClass != null) {
                type = _refineSecondaryType(type, tf, config, a, keyClass, true);
            }
        }
        JavaType contentType = type.getContentType();
        if (contentType != null) { // collection[like], map[like], array, reference
            // And then value types for all containers:
           final Class<?> contentClass = findSerializationContentType(a, contentType);
           if (contentClass != null) {
               type = _refineSecondaryType(type, tf, config, a, contentClass, false);
           }
        }
        return type;
    }
    protected JavaType _refinePrimaryType(JavaType type, final TypeFactory tf, MapperConfig<?> config,
            final Annotated a, Class<?> serClass)
        throws JsonMappingException
    {
        if (type.hasRawClass(serClass)) {
            // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
            //    static typing this way
            type = type.withStaticTyping();
        } else {
            try {
                // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
                //   may be needed here too in future?
                type = tf.constructGeneralizedType(type, serClass);
            } catch (IllegalArgumentException iae) {
                throw new JsonMappingException(null,
                        String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
                                type, serClass.getName(), a.getName(), iae.getMessage()),
                                iae);
            }
        }
        return type;
    }
    protected JavaType _refineSecondaryType(JavaType type, final TypeFactory tf, MapperConfig<?> config,
            final Annotated a, Class<?> secClass, boolean forKey)
        throws JsonMappingException
    {
        JavaType secondaryType = forKey ? type.getKeyType() : type.getContentType();
        if (secondaryType.hasRawClass(secClass)) {
            secondaryType = secondaryType.withStaticTyping();
        } else {
            final Class<?> currRaw = secondaryType.getRawClass();
            try {
                // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
                //   specialize (narrow) type sometimes, even if more commonly opposite
                //   is needed.
                if (secClass.isAssignableFrom(currRaw)) { // common case
                    secondaryType = tf.constructGeneralizedType(secondaryType, secClass);
                } else if (currRaw.isAssignableFrom(secClass)) { // specialization, ok as well
                    secondaryType = tf.constructSpecializedType(secondaryType, secClass);
                } else {
                    throw new JsonMappingException(null,
                            String.format("Can not refine serialization %s type %s into %s; types not related",
                                    forKey ? "key" : "content",
                                    secondaryType, secClass.getName()));
                }
            } catch (IllegalArgumentException iae) {
                throw new JsonMappingException(null,
                        String.format("Failed to widen %s type of %s with concrete-type annotation (value %s), from '%s': %s",
                                forKey ? "key" : "value",
                                type, secClass.getName(), a.getName(), iae.getMessage()),
                                iae);
            }
        }
        if (forKey) {
            type = ((MapLikeType) type).withKeyType(secondaryType);
        } else {
            type = type.withContentType(secondaryType);
        }
        return type;
    }
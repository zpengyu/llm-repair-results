diff --git a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
index 624a1fd7e..81991433c 100644
--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
@@ -803,25 +802,43 @@ public abstract class AnnotationIntrospector
         //    direct sub-class not yet retrofitted may only override
         //    those methods. With 2.8 or later we may consider removal
         //    of these methods
-
-        
-        // Ok: start by refining the main type itself; common to all types
-        Class<?> serClass = findSerializationType(a);
-        if (serClass != null) {
-            if (type.hasRawClass(serClass)) {
-                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
-                //    static typing this way
-                type = type.withStaticTyping();
-            } else {
-                try {
-                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
-                    //   may be needed here too in future?
+        if (a instanceof AnnotatedClass) {
+            final AnnotatedClass ac = (AnnotatedClass) a;
+            Class<?> serClass = _findSerializationType(ac);
+            if (serClass != null) {
+                if (type.hasRawClass(serClass)) {
+                    // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
+                    //    static typing this way
+                    type = type.withStaticTyping();
+                } else {
+                    try {
+                        // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
+                        //   may be needed here too in future?
                         type = tf.constructGeneralizedType(type, serClass);
-                } catch (IllegalArgumentException iae) {
-                    throw new JsonMappingException(null,
-                            String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
-                                    type, serClass.getName(), a.getName(), iae.getMessage()),
-                                    iae);
+                    } catch (IllegalArgumentException iae) {
+                        throw new JsonMappingException(null,
+                                String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
+                                        type, serClass.getName(), a.getName(), iae.getMessage()),
+                                        iae);
+                    }
+                }
+            }
+        } else {
+            Class<?> serClass = _findSerializationType(a);
+            if (serClass != null) {
+                if (type.hasRawClass(serClass)) {
+                    type = type.withStaticTyping();
+                } else {
+                    try {
+                        // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
+                        //   may be needed here too in future?
+                        type = tf.constructGeneralizedType(type, serClass);
+                    } catch (IllegalArgumentException iae) {
+                        throw new JsonMappingException(null,
+                                String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
+                                        type, serClass.getName(), a.getName(), iae.getMessage()),
+                                        iae);
+                    }
                 }
             }
         }
@@ -830,7 +846,7 @@ public abstract class AnnotationIntrospector
         // First, key type (for Maps, Map-like types):
         if (type.isMapLikeType()) {
             JavaType keyType = type.getKeyType();
-            Class<?> keyClass = findSerializationKeyType(a, keyType);
+            Class<?> keyClass = _findSerializationKeyType(a, keyType);
             if (keyClass != null) {
                 if (keyType.hasRawClass(keyClass)) {
                     keyType = keyType.withStaticTyping();
@@ -863,34 +878,34 @@ public abstract class AnnotationIntrospector
         JavaType contentType = type.getContentType();
         if (contentType != null) { // collection[like], map[like], array, reference
             // And then value types for all containers:
-           Class<?> contentClass = findSerializationContentType(a, contentType);
-           if (contentClass != null) {
-               if (contentType.hasRawClass(contentClass)) {
-                   contentType = contentType.withStaticTyping();
-               } else {
-                   // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
-                   //   specialize (narrow) type sometimes, even if more commonly opposite
-                   //   is needed.
-                   Class<?> currRaw = contentType.getRawClass();
-                   try {
-                       if (contentClass.isAssignableFrom(currRaw)) { // common case
-                           contentType = tf.constructGeneralizedType(contentType, contentClass);
-                       } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
-                           contentType = tf.constructSpecializedType(contentType, contentClass);
-                       } else {
-                           throw new JsonMappingException(null,
-                                   String.format("Can not refine serialization content type %s into %s; types not related",
-                                           contentType, contentClass.getName()));
-                       }
-                   } catch (IllegalArgumentException iae) { // shouldn't really happen
-                       throw new JsonMappingException(null,
-                               String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                       type, contentClass.getName(), a.getName(), iae.getMessage()),
-                                       iae);
-                   }
-               }
-               type = type.withContentType(contentType);
-           }
+            Class<?> contentClass = _findSerializationContentType(a, contentType);
+            if (contentClass != null) {
+                if (contentType.hasRawClass(contentClass)) {
+                    contentType = contentType.withStaticTyping();
+                } else {
+                    // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
+                    //   specialize (narrow) type sometimes, even if more commonly opposite
+                    //   is needed.
+                    Class<?> currRaw = contentType.getRawClass();
+                    try {
+                        if (contentClass.isAssignableFrom(currRaw)) { // common case
+                            contentType = tf.constructGeneralizedType(contentType, contentClass);
+                        } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
+                            contentType = tf.constructSpecializedType(contentType, contentClass);
+                        } else {
+                            throw new JsonMappingException(null,
+                                    String.format("Can not refine serialization content type %s into %s; types not related",
+                                            contentType, contentClass.getName()));
+                        }
+                    } catch (IllegalArgumentException iae) { // shouldn't really happen
+                        throw new JsonMappingException(null,
+                                String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
+                                        type, contentClass.getName(), a.getName(), iae.getMessage()),
+                                        iae);
+                    }
+                }
+                type = type.withContentType(contentType);
+            }
         }
         return type;
     }

diff --git a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
index 624a1fd7e..78fc4bae2 100644
--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
@@ -803,8 +802,12 @@ public abstract class AnnotationIntrospector
         //    direct sub-class not yet retrofitted may only override
         //    those methods. With 2.8 or later we may consider removal
         //    of these methods
-
-        
+        if (type.hasRawClass(Object.class)) {
+            // 10-Oct-2015, tatu: As per [databind#893], Object.class is problematic
+            //   because it could be supported but only by causing unnecessary
+            //   loss of type; so let's not.
+            return baseType;
+        }
         // Ok: start by refining the main type itself; common to all types
         Class<?> serClass = findSerializationType(a);
         if (serClass != null) {
@@ -816,7 +819,11 @@ public abstract class AnnotationIntrospector
                 try {
                     // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
                     //   may be needed here too in future?
+                    if (type.getRawClass().isAssignableFrom(serClass)) {
                         type = tf.constructGeneralizedType(type, serClass);
+                    } else {
+                        type = tf.constructSpecializedType(type, serClass);
+                    }
                 } catch (IllegalArgumentException iae) {
                     throw new JsonMappingException(null,
                             String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",

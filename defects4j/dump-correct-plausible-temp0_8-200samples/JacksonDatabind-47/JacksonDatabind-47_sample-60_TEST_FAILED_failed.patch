diff --git a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
index 624a1fd7e..e6d6169cf 100644
--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
@@ -803,8 +802,47 @@ public abstract class AnnotationIntrospector
         //    direct sub-class not yet retrofitted may only override
         //    those methods. With 2.8 or later we may consider removal
         //    of these methods
-
-        
+        if (a instanceof AnnotatedClass) {
+            AnnotatedClass ac = (AnnotatedClass) a;
+            Class<?> serClass = findSerializationType(ac);
+            if (serClass != null) {
+                try {
+                    if (serClass.isAssignableFrom(baseType.getRawClass())) {
+                        // 18-May-2016, tatu: as per [databind#1231], may need to narrow type
+                        type = tf.constructSpecializedType(type, serClass);
+                    } else {
+                        type = tf.constructGeneralizedType(type, serClass);
+                    }
+                } catch (IllegalArgumentException iae) {
+                    throw new JsonMappingException(null,
+                            String.format("Failed to narrow type %s with annotation (value %s), from '%s': %s",
+                                    type, serClass.getName(), ac.getName(), iae.getMessage()),
+                                    iae);
+                }
+            }
+            serClass = findSerializationKeyType(ac, type.getKeyType());
+            if (serClass != null) {
+                try {
+                    type = ((MapLikeType) type).withKeyType(tf.constructType(serClass));
+                } catch (IllegalArgumentException iae) {
+                    throw new JsonMappingException(null,
+                            String.format("Failed to narrow key type of %s with concrete-type annotation (value %s), from '%s': %s",
+                                    type, serClass.getName(), ac.getName(), iae.getMessage()),
+                                    iae);
+                }
+            }
+            serClass = findSerializationContentType(ac, type.getContentType());
+            if (serClass != null) {
+                try {
+                    type = type.withContentType(tf.constructType(serClass));
+                } catch (IllegalArgumentException iae) { // shouldn't really happen
+                    throw new JsonMappingException(null,
+                            String.format("Internal error: failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s",
+                                    type, serClass.getName(), ac.getName(), iae.getMessage()),
+                                    iae);
+                }
+            }
+        }
         // Ok: start by refining the main type itself; common to all types
         Class<?> serClass = findSerializationType(a);
         if (serClass != null) {
@@ -816,7 +854,15 @@ public abstract class AnnotationIntrospector
                 try {
                     // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
                     //   may be needed here too in future?
+                    if (serClass.isAssignableFrom(type.getRawClass())) { // common case
                         type = tf.constructGeneralizedType(type, serClass);
+                    } else if (type.getRawClass().isAssignableFrom(serClass)) { // specialization, ok as well
+                        type = tf.constructSpecializedType(type, serClass);
+                    } else {
+                        throw new JsonMappingException(null,
+                                String.format("Can not refine serialization type %s into %s; types not related",
+                                        type, serClass.getName()));
+                    }
                 } catch (IllegalArgumentException iae) {
                     throw new JsonMappingException(null,
                             String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",

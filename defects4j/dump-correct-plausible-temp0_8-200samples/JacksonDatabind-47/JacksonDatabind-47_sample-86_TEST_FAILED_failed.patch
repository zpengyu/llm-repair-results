diff --git a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
index 624a1fd7e..26817c430 100644
--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
@@ -816,7 +813,18 @@ public abstract class AnnotationIntrospector
                 try {
                     // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
                     //   may be needed here too in future?
+                    if (a instanceof AnnotatedMember && type.isContainerType()) {
+                        if (type.isMapLikeType() && type.getKeyType().hasRawClass(serClass)) {
+                            type = ((MapLikeType) type).withKeyType(type.getKeyType().withStaticTyping());
+                        }
+                        if (type.getContentType().hasRawClass(serClass)) {
+                            type = type.withContentTypeHandler(type.getContentType().withStaticTyping());
+                        }
+                    }
+                    if (type.hasRawClass(serClass) ||
+                            !(a instanceof AnnotatedMember) || !type.isContainerType()) {
                         type = tf.constructGeneralizedType(type, serClass);
+                    }
                 } catch (IllegalArgumentException iae) {
                     throw new JsonMappingException(null,
                             String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",

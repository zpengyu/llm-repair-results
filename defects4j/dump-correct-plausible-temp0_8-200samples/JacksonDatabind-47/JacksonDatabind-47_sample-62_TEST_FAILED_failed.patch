diff --git a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
index 624a1fd7e..be716b51b 100644
--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
@@ -832,29 +828,25 @@ public abstract class AnnotationIntrospector
             JavaType keyType = type.getKeyType();
             Class<?> keyClass = findSerializationKeyType(a, keyType);
             if (keyClass != null) {
-                if (keyType.hasRawClass(keyClass)) {
-                    keyType = keyType.withStaticTyping();
-                } else {
-                    Class<?> currRaw = keyType.getRawClass();
-                    try {
-                        // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
-                        //   specialize (narrow) type sometimes, even if more commonly opposite
-                        //   is needed.
-                        if (keyClass.isAssignableFrom(currRaw)) { // common case
-                            keyType = tf.constructGeneralizedType(keyType, keyClass);
-                        } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
-                            keyType = tf.constructSpecializedType(keyType, keyClass);
-                        } else {
-                            throw new JsonMappingException(null,
-                                    String.format("Can not refine serialization key type %s into %s; types not related",
-                                            keyType, keyClass.getName()));
-                        }
-                    } catch (IllegalArgumentException iae) {
+                // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
+                //   specialize (narrow) type sometimes, even if more commonly opposite
+                //   is needed.
+                Class<?> currRaw = keyType.getRawClass();
+                try {
+                    if (keyClass.isAssignableFrom(currRaw)) { // common case
+                        keyType = tf.constructGeneralizedType(keyType, keyClass);
+                    } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
+                        keyType = tf.constructSpecializedType(keyType, keyClass);
+                    } else {
                         throw new JsonMappingException(null,
-                                String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                        type, keyClass.getName(), a.getName(), iae.getMessage()),
-                                        iae);
+                                String.format("Can not refine serialization key type %s into %s; types not related",
+                                        keyType, keyClass.getName()));
                     }
+                } catch (IllegalArgumentException iae) {
+                    throw new JsonMappingException(null,
+                            String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
+                                    type, keyClass.getName(), a.getName(), iae.getMessage()),
+                                    iae);
                 }
                 type = ((MapLikeType) type).withKeyType(keyType);
             }
@@ -865,29 +856,25 @@ public abstract class AnnotationIntrospector
             // And then value types for all containers:
            Class<?> contentClass = findSerializationContentType(a, contentType);
            if (contentClass != null) {
-               if (contentType.hasRawClass(contentClass)) {
-                   contentType = contentType.withStaticTyping();
-               } else {
-                   // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
-                   //   specialize (narrow) type sometimes, even if more commonly opposite
-                   //   is needed.
-                   Class<?> currRaw = contentType.getRawClass();
-                   try {
-                       if (contentClass.isAssignableFrom(currRaw)) { // common case
-                           contentType = tf.constructGeneralizedType(contentType, contentClass);
-                       } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
-                           contentType = tf.constructSpecializedType(contentType, contentClass);
-                       } else {
-                           throw new JsonMappingException(null,
-                                   String.format("Can not refine serialization content type %s into %s; types not related",
-                                           contentType, contentClass.getName()));
-                       }
-                   } catch (IllegalArgumentException iae) { // shouldn't really happen
+               // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
+               //   specialize (narrow) type sometimes, even if more commonly opposite
+               //   is needed.
+               Class<?> currRaw = contentType.getRawClass();
+               try {
+                   if (contentClass.isAssignableFrom(currRaw)) { // common case
+                       contentType = tf.constructGeneralizedType(contentType, contentClass);
+                   } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
+                       contentType = tf.constructSpecializedType(contentType, contentClass);
+                   } else {
                        throw new JsonMappingException(null,
-                               String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                       type, contentClass.getName(), a.getName(), iae.getMessage()),
-                                       iae);
+                               String.format("Can not refine serialization content type %s into %s; types not related",
+                                       contentType, contentClass.getName()));
                    }
+               } catch (IllegalArgumentException iae) { // shouldn't really happen
+                   throw new JsonMappingException(null,
+                           String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
+                                   type, contentClass.getName(), a.getName(), iae.getMessage()),
+                                   iae);
                }
                type = type.withContentType(contentType);
            }

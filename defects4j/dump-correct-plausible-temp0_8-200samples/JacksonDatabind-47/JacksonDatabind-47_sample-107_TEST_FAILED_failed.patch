diff --git a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
index 624a1fd7e..5936323b3 100644
--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
@@ -803,8 +802,15 @@ public abstract class AnnotationIntrospector
         //    direct sub-class not yet retrofitted may only override
         //    those methods. With 2.8 or later we may consider removal
         //    of these methods
-
-        
+        /*
+        if (type.isContainerType()) {
+            if (type.isMapLikeType()) { // Guava Multimaps, for example
+                type = MapSerializer.modifyMapLikeType(config, a, (MapLikeType) type);
+            } else if (type.isCollectionLikeType()) {
+                type = CollectionSerializer.modifyCollectionLikeType(config, a, (CollectionLikeType) type);
+            }
+        }
+        */
         // Ok: start by refining the main type itself; common to all types
         Class<?> serClass = findSerializationType(a);
         if (serClass != null) {
@@ -826,71 +832,71 @@ public abstract class AnnotationIntrospector
             }
         }
         // Then further processing for container types
-
-        // First, key type (for Maps, Map-like types):
-        if (type.isMapLikeType()) {
-            JavaType keyType = type.getKeyType();
-            Class<?> keyClass = findSerializationKeyType(a, keyType);
-            if (keyClass != null) {
-                if (keyType.hasRawClass(keyClass)) {
-                    keyType = keyType.withStaticTyping();
-                } else {
-                    Class<?> currRaw = keyType.getRawClass();
-                    try {
-                        // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
-                        //   specialize (narrow) type sometimes, even if more commonly opposite
-                        //   is needed.
-                        if (keyClass.isAssignableFrom(currRaw)) { // common case
-                            keyType = tf.constructGeneralizedType(keyType, keyClass);
-                        } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
-                            keyType = tf.constructSpecializedType(keyType, keyClass);
-                        } else {
+        if (type.isContainerType()) {
+            // First, key type (for Maps, Map-like types):
+            if (type.isMapLikeType()) {
+                JavaType keyType = type.getKeyType();
+                Class<?> keyClass = findSerializationKeyType(a, keyType);
+                if (keyClass != null) {
+                    if (keyType.hasRawClass(keyClass)) {
+                        keyType = keyType.withStaticTyping();
+                    } else {
+                        Class<?> currRaw = keyType.getRawClass();
+                        try {
+                            // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
+                            //   specialize (narrow) type sometimes, even if more commonly opposite
+                            //   is needed.
+                            if (keyClass.isAssignableFrom(currRaw)) { // common case
+                                keyType = tf.constructGeneralizedType(keyType, keyClass);
+                            } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
+                                keyType = tf.constructSpecializedType(keyType, keyClass);
+                            } else {
+                                throw new JsonMappingException(null,
+                                        String.format("Can not refine serialization key type %s into %s; types not related",
+                                                keyType, keyClass.getName()));
+                            }
+                        } catch (IllegalArgumentException iae) {
                             throw new JsonMappingException(null,
-                                    String.format("Can not refine serialization key type %s into %s; types not related",
-                                            keyType, keyClass.getName()));
+                                    String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
+                                            type, keyClass.getName(), a.getName(), iae.getMessage()),
+                                            iae);
                         }
-                    } catch (IllegalArgumentException iae) {
-                        throw new JsonMappingException(null,
-                                String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                        type, keyClass.getName(), a.getName(), iae.getMessage()),
-                                        iae);
                     }
+                    type = ((MapLikeType) type).withKeyType(keyType);
                 }
-                type = ((MapLikeType) type).withKeyType(keyType);
             }
-        }
-
-        JavaType contentType = type.getContentType();
-        if (contentType != null) { // collection[like], map[like], array, reference
             // And then value types for all containers:
-           Class<?> contentClass = findSerializationContentType(a, contentType);
-           if (contentClass != null) {
-               if (contentType.hasRawClass(contentClass)) {
-                   contentType = contentType.withStaticTyping();
-               } else {
-                   // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
-                   //   specialize (narrow) type sometimes, even if more commonly opposite
-                   //   is needed.
-                   Class<?> currRaw = contentType.getRawClass();
-                   try {
-                       if (contentClass.isAssignableFrom(currRaw)) { // common case
-                           contentType = tf.constructGeneralizedType(contentType, contentClass);
-                       } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
-                           contentType = tf.constructSpecializedType(contentType, contentClass);
-                       } else {
+            JavaType contentType = type.getContentType();
+            if (contentType != null) {
+               Class<?> contentClass = findSerializationContentType(a, contentType);
+               if (contentClass != null) {
+                   if (contentType.hasRawClass(contentClass)) {
+                       contentType = contentType.withStaticTyping();
+                   } else {
+                       // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
+                       //   specialize (narrow) type sometimes, even if more commonly opposite
+                       //   is needed.
+                       Class<?> currRaw = contentType.getRawClass();
+                       try {
+                           if (contentClass.isAssignableFrom(currRaw)) { // common case
+                               contentType = tf.constructGeneralizedType(contentType, contentClass);
+                           } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
+                               contentType = tf.constructSpecializedType(contentType, contentClass);
+                           } else {
+                               throw new JsonMappingException(null,
+                                       String.format("Can not refine serialization content type %s into %s; types not related",
+                                               contentType, contentClass.getName()));
+                           }
+                       } catch (IllegalArgumentException iae) { // shouldn't really happen
                            throw new JsonMappingException(null,
-                                   String.format("Can not refine serialization content type %s into %s; types not related",
-                                           contentType, contentClass.getName()));
+                                   String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
+                                           type, contentClass.getName(), a.getName(), iae.getMessage()),
+                                           iae);
                        }
-                   } catch (IllegalArgumentException iae) { // shouldn't really happen
-                       throw new JsonMappingException(null,
-                               String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                       type, contentClass.getName(), a.getName(), iae.getMessage()),
-                                       iae);
                    }
+                   type = type.withContentType(contentType);
                }
-               type = type.withContentType(contentType);
-           }
+            }
         }
         return type;
     }

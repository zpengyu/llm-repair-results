    public JavaType refineSerializationType(final MapperConfig<?> config,
            final Annotated a, final JavaType baseType) throws JsonMappingException
    {
        JavaType type = baseType;
        final TypeFactory tf = config.getTypeFactory();

        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
        //    now-deprecated secondary methods; this because while
        //    direct sub-class not yet retrofitted may only override
        //    those methods. With 2.8 or later we may consider removal
        //    of these methods

        Class<?> serClass = findSerializationType(a);
        if (serClass != null) {
            if (type.hasRawClass(serClass)) {
                type = type.withStaticTyping();
            } else {
                // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
                //   may be needed here too in future?
                if (type.isContainerType()) {
                    // 10-Oct-2015, tatu: For 2.7, support wide-by-default mode
                    if (serClass == Object.class) {
                        if (_factoryConfig.hasDeserializerModifiers()) {
                            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                                type = mod.modifyTypeDeserializer(config, a, type);
                            }
                        }
                        return type;
                    }
                }
                type = tf.constructGeneralizedType(type, serClass);
            }
        }

        // First, key type (for Maps, Map-like types):
        if (type.isMapLikeType()) {
            JavaType keyType = type.getKeyType();
            Class<?> keyClass = findSerializationKeyType(a, keyType);
            if (keyClass != null) {
                if (keyType.hasRawClass(keyClass)) {
                    keyType = keyType.withStaticTyping();
                } else {
                    Class<?> currRaw = keyType.getRawClass();
                    // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
                    //   specialize (narrow) type sometimes, even if more commonly opposite
                    //   is needed.
                    if (keyClass.isAssignableFrom(currRaw)) { // common case
                        keyType = tf.constructGeneralizedType(keyType, keyClass);
                    } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
                        keyType = tf.constructSpecializedType(keyType, keyClass);
                    } else {
                        throw new JsonMappingException(null,
                                String.format("Can not refine serialization key type %s into %s; types not related",
                                        keyType, keyClass.getName()));
                    }
                }
                type = ((MapLikeType) type).withKeyType(keyType);
            }
        }
        // Then further processing for container types
        JavaType contentType = type.getContentType();
        if (contentType != null) { // collection[like], map[like], array, reference
            // And then value types for all containers:
            Class<?> contentClass = findSerializationContentType(a, contentType);
            if (contentClass != null) {
                if (contentType.hasRawClass(contentClass)) {
                    contentType = contentType.withStaticTyping();
                } else {
                    // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
                    //   specialize (narrow) type sometimes, even if more commonly opposite
                    //   is needed.
                    Class<?> currRaw = contentType.getRawClass();
                    if (contentClass.isAssignableFrom(currRaw)) { // common case
                        contentType = tf.constructGeneralizedType(contentType, contentClass);
                    } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
                        contentType = tf.constructSpecializedType(contentType, contentClass);
                    } else {
                        throw new JsonMappingException(null,
                                String.format("Can not refine serialization content type %s into %s; types not related",
                                        contentType, contentClass.getName()));
                    }
                }
                type = type.withContentType(contentType);
            }
        }
        return type;
    }

diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
index fd5d1894..d0afd420 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
@@ -805,43 +805,50 @@ public class ZipFile {
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
         // directory order
-        for (ZipArchiveEntry ze : entries.keySet()) {
-            OffsetEntry offsetEntry = entries.get(ze);
-            long offset = offsetEntry.headerOffset;
-            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
-            byte[] b = new byte[SHORT];
-            archive.readFully(b);
-            int fileNameLen = ZipShort.getValue(b);
-            archive.readFully(b);
-            int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
+        Map<ZipArchiveEntry, OffsetEntry> oldEntries = entries;
+        entries = new LinkedHashMap<ZipArchiveEntry, OffsetEntry>();
+        try {
+            for (ZipArchiveEntry ze : oldEntries.keySet()) {
+                OffsetEntry offsetEntry = oldEntries.get(ze);
+                long offset = offsetEntry.headerOffset;
+                archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
+                byte[] b = new byte[SHORT];
+                archive.readFully(b);
+                int fileNameLen = ZipShort.getValue(b);
+                archive.readFully(b);
+                int extraFieldLen = ZipShort.getValue(b);
+                int lenToSkip = fileNameLen;
+                while (lenToSkip > 0) {
+                    int skipped = archive.skipBytes(lenToSkip);
+                    if (skipped <= 0) {
+                        throw new RuntimeException("failed to skip file name in"
+                                                   + " local file header");
+                    }
+                    lenToSkip -= skipped;
                 }
-                lenToSkip -= skipped;
-            }
-            byte[] localExtraData = new byte[extraFieldLen];
-            archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
-
-            if (entriesWithoutUTF8Flag.containsKey(ze)) {
-                String orig = ze.getName();
-                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
-                if (!orig.equals(ze.getName())) {
-                    nameMap.remove(orig);
-                    nameMap.put(ze.getName(), ze);
+                byte[] localExtraData = new byte[extraFieldLen];
+                archive.readFully(localExtraData);
+                ze.setExtra(localExtraData);
+                offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
+                    + SHORT + SHORT + fileNameLen + extraFieldLen;
+                if (entriesWithoutUTF8Flag.containsKey(ze)) {
+                    String orig = ze.getName();
+                    NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
+                    ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
+                                                             nc.comment);
+                    if (!orig.equals(ze.getName())) {
+                        nameMap.remove(orig);
+                        nameMap.put(ze.getName(), ze);
+                    }
                 }
+                entries.put(ze, offsetEntry);
             }
+        } catch (IOException e) {
+            // restore the old entries
+            entries = oldEntries;
+            throw e;
         }
     }
-
     /**
      * Checks whether the archive starts with a LFH.  If it doesn't,
      * it may be an empty archive.

diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
index fd5d1894..0d2bc727 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
@@ -805,6 +805,8 @@ public class ZipFile {
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
         // directory order
+        Map<ZipArchiveEntry, OffsetEntry> newEntries =
+            new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(entries.size());
         for (ZipArchiveEntry ze : entries.keySet()) {
             OffsetEntry offsetEntry = entries.get(ze);
             long offset = offsetEntry.headerOffset;
@@ -828,20 +830,21 @@ public class ZipFile {
             ze.setExtra(localExtraData);
             offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
                 + SHORT + SHORT + fileNameLen + extraFieldLen;
-
+            ZipArchiveEntry zeClone = (ZipArchiveEntry) ze.clone();
+            newEntries.put(zeClone, offsetEntry);
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
                 String orig = ze.getName();
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
+                ZipUtil.setNameAndCommentFromExtraFields(zeClone, nc.name,
                                                          nc.comment);
-                if (!orig.equals(ze.getName())) {
+                if (!orig.equals(zeClone.getName())) {
                     nameMap.remove(orig);
-                    nameMap.put(ze.getName(), ze);
+                    nameMap.put(zeClone.getName(), zeClone);
                 }
             }
         }
+        entries = newEntries;
     }
-
     /**
      * Checks whether the archive starts with a LFH.  If it doesn't,
      * it may be an empty archive.

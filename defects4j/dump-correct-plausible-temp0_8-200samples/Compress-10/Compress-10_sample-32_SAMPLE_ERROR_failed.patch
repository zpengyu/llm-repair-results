diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
index fd5d1894..5c4e8d83 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
@@ -798,13 +798,11 @@ public class ZipFile {
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
-    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
-                                            entriesWithoutUTF8Flag)
-        throws IOException {
-        // changing the name of a ZipArchiveEntry is going to change
-        // the hashcode - see COMPRESS-164
-        // Map needs to be reconstructed in order to keep central
-        // directory order
+private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag)
+    throws IOException {
+        // changing the name of a ZipArchiveEntry is going to change the hashcode - see COMPRESS-164
+        // Map needs to be reconstructed in order to keep central directory order
+        Map<ZipArchiveEntry, OffsetEntry> copy = new LinkedHashMap<ZipArchiveEntry, OffsetEntry>();
         for (ZipArchiveEntry ze : entries.keySet()) {
             OffsetEntry offsetEntry = entries.get(ze);
             long offset = offsetEntry.headerOffset;
@@ -818,8 +816,7 @@ public class ZipFile {
             while (lenToSkip > 0) {
                 int skipped = archive.skipBytes(lenToSkip);
                 if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
+                    throw new RuntimeException("failed to skip file name in local file header");
                 }
                 lenToSkip -= skipped;
             }
@@ -827,21 +824,20 @@ public class ZipFile {
             archive.readFully(localExtraData);
             ze.setExtra(localExtraData);
             offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
-
+                    + SHORT + SHORT + fileNameLen + extraFieldLen;
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
                 String orig = ze.getName();
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
+                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
                 if (!orig.equals(ze.getName())) {
                     nameMap.remove(orig);
                     nameMap.put(ze.getName(), ze);
                 }
             }
+            copy.put(ze, offsetEntry);
         }
+        entries = copy;
     }
-
     /**
      * Checks whether the archive starts with a LFH.  If it doesn't,
      * it may be an empty archive.

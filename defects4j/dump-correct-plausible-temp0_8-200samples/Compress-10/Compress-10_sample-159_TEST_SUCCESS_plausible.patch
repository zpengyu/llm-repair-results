diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
index fd5d1894..e762f7a4 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
@@ -798,15 +798,16 @@ public class ZipFile {
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
-    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
-                                            entriesWithoutUTF8Flag)
+  private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
         // directory order
-        for (ZipArchiveEntry ze : entries.keySet()) {
-            OffsetEntry offsetEntry = entries.get(ze);
+        Map<ZipArchiveEntry, OffsetEntry> copy = new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(entries.size());
+        for (Map.Entry<ZipArchiveEntry, OffsetEntry> entry : entries.entrySet()) {
+            ZipArchiveEntry ze = entry.getKey();
+            OffsetEntry offsetEntry = entry.getValue();
             long offset = offsetEntry.headerOffset;
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
             byte[] b = new byte[SHORT];
@@ -839,9 +839,11 @@ public class ZipFile {
                     nameMap.put(ze.getName(), ze);
                 }
             }
+            copy.put(ze, offsetEntry);
         }
+        entries.clear();
+        entries.putAll(copy);
     }
-
     /**
      * Checks whether the archive starts with a LFH.  If it doesn't,
      * it may be an empty archive.

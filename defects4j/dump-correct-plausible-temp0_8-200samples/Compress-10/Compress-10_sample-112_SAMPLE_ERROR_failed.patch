diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
index fd5d1894..c416ebd7 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
@@ -798,46 +798,45 @@ public class ZipFile {
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
-    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
-                                            entriesWithoutUTF8Flag)
-        throws IOException {
-        // changing the name of a ZipArchiveEntry is going to change
-        // the hashcode - see COMPRESS-164
-        // Map needs to be reconstructed in order to keep central
-        // directory order
-        for (ZipArchiveEntry ze : entries.keySet()) {
-            OffsetEntry offsetEntry = entries.get(ze);
-            long offset = offsetEntry.headerOffset;
-            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
-            byte[] b = new byte[SHORT];
-            archive.readFully(b);
-            int fileNameLen = ZipShort.getValue(b);
-            archive.readFully(b);
-            int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
+    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag) throws IOException {
+        if (entriesWithoutUTF8Flag != null && entriesWithoutUTF8Flag.size() > 0) {
+            // changing the name of a ZipArchiveEntry is going to change
+            // the hashcode - see COMPRESS-164
+            // Map needs to be reconstructed in order to keep central
+            // directory order
+            Map<ZipArchiveEntry, OffsetEntry> oldEntries = entries;
+            entries = new LinkedHashMap<ZipArchiveEntry, OffsetEntry>();
+            for (ZipArchiveEntry ze : oldEntries.keySet()) {
+                OffsetEntry offsetEntry = oldEntries.get(ze);
+                long offset = offsetEntry.headerOffset;
+                archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
+                byte[] b = new byte[SHORT];
+                archive.readFully(b);
+                int fileNameLen = ZipShort.getValue(b);
+                archive.readFully(b);
+                int extraFieldLen = ZipShort.getValue(b);
+                int lenToSkip = fileNameLen;
+                while (lenToSkip > 0) {
+                    int skipped = archive.skipBytes(lenToSkip);
+                    if (skipped <= 0) {
+                        throw new RuntimeException("failed to skip file name in local file header");
+                    }
+                    lenToSkip -= skipped;
                 }
-                lenToSkip -= skipped;
-            }
-            byte[] localExtraData = new byte[extraFieldLen];
-            archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
-
-            if (entriesWithoutUTF8Flag.containsKey(ze)) {
-                String orig = ze.getName();
-                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
-                if (!orig.equals(ze.getName())) {
-                    nameMap.remove(orig);
-                    nameMap.put(ze.getName(), ze);
+                byte[] localExtraData = new byte[extraFieldLen];
+                archive.readFully(localExtraData);
+                ze.setExtra(localExtraData);
+                offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen;
+                if (entriesWithoutUTF8Flag.containsKey(ze)) {
+                    String orig = ze.getName();
+                    NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
+                    ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
+                    if (!orig.equals(ze.getName())) {
+                        nameMap.remove(orig);
+                        nameMap.put(ze.getName(), ze);
+                    }
                 }
+                entries.put(ze, offsetEntry);
             }
         }
     }

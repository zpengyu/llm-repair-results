diff --git a/src/main/java/org/jsoup/nodes/LeafNode.java b/src/main/java/org/jsoup/nodes/LeafNode.java
index 0e068b5..8b42cef 100644
--- a/src/main/java/org/jsoup/nodes/LeafNode.java
+++ b/src/main/java/org/jsoup/nodes/LeafNode.java
@@ -5,29 +5,23 @@ import org.jsoup.helper.Validate;
 import java.util.List;
 
 abstract class LeafNode extends Node {
-
+    private Attributes attributes;
     Object value; // either a string value, or an attribute map (in the rare case multiple attributes are set)
-
-    protected final boolean hasAttributes() {
-        return value instanceof Attributes;
-    }
-
-    @Override
-    public final Attributes attributes() {
-        ensureAttributes();
-        return (Attributes) value;
+    private Attributes attributes() {
+        if (attributes == null) {
+            attributes = new Attributes();
+            if (!(value instanceof Attributes)) {
+                attributes.put(nodeName(), coreValue());
+            }
+        }
+        return attributes;
     }
-
     private void ensureAttributes() {
-        if (!hasAttributes()) {
-            Object coreValue = value;
-            Attributes attributes = new Attributes();
-            value = attributes;
-            if (coreValue != null)
-                attributes.put(nodeName(), (String) coreValue);
+        if (attributes == null && value instanceof Attributes) {
+            attributes = (Attributes) value;
+            value = null;
         }
     }
-
     String coreValue() {
         return attr(nodeName());
     }
@@ -39,19 +31,20 @@ abstract class LeafNode extends Node {
     @Override
     public String attr(String key) {
         Validate.notNull(key);
-        if (!hasAttributes()) {
-            return key.equals(nodeName()) ? (String) value : EmptyString;
+        if (value == null) {
+            return attributes().hasKey(key) ? attributes.get(key) : EmptyString;
+        } else if (key.equals(nodeName())) {
+            return (String) value;
+        } else {
+            return EmptyString;
         }
-        return super.attr(key);
     }
-
     @Override
     public Node attr(String key, String value) {
-        if (!hasAttributes() && key.equals(nodeName())) {
-            this.value = value;
+        if (value == null) {
+            attributes().remove(key);
         } else {
-            ensureAttributes();
-            super.attr(key, value);
+            attributes().put(key, value);
         }
         return this;
     }
@@ -59,15 +51,14 @@ abstract class LeafNode extends Node {
     @Override
     public boolean hasAttr(String key) {
         ensureAttributes();
-        return super.hasAttr(key);
+        return attributes().hasKey(key);
     }
-
     @Override
     public Node removeAttr(String key) {
         ensureAttributes();
-        return super.removeAttr(key);
+        attributes.remove(key);
+        return this;
     }
-
     @Override
     public String absUrl(String key) {
         ensureAttributes();

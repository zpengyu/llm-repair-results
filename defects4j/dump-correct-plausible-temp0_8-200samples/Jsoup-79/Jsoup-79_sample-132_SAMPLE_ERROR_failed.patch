diff --git a/src/main/java/org/jsoup/nodes/LeafNode.java b/src/main/java/org/jsoup/nodes/LeafNode.java
index 0e068b5..d369554 100644
--- a/src/main/java/org/jsoup/nodes/LeafNode.java
+++ b/src/main/java/org/jsoup/nodes/LeafNode.java
@@ -5,29 +5,24 @@ import org.jsoup.helper.Validate;
 import java.util.List;
 
 abstract class LeafNode extends Node {
-
-    Object value; // either a string value, or an attribute map (in the rare case multiple attributes are set)
-
+    String coreValue; // either a string value, or an attribute map (in the rare case multiple attributes are set)
     protected final boolean hasAttributes() {
-        return value instanceof Attributes;
+        return coreValue instanceof Attributes;
     }
-
     @Override
     public final Attributes attributes() {
         ensureAttributes();
-        return (Attributes) value;
+        return (Attributes) coreValue;
     }
-
     private void ensureAttributes() {
         if (!hasAttributes()) {
-            Object coreValue = value;
             Attributes attributes = new Attributes();
-            value = attributes;
-            if (coreValue != null)
-                attributes.put(nodeName(), (String) coreValue);
+            Attributes temp = (Attributes) coreValue;
+            coreValue = attributes;
+            if (temp != null)
+                attributes.put(nodeName(), temp.toString());
         }
     }
-
     String coreValue() {
         return attr(nodeName());
     }
@@ -40,7 +33,7 @@ abstract class LeafNode extends Node {
     public String attr(String key) {
         Validate.notNull(key);
         if (!hasAttributes()) {
-            return key.equals(nodeName()) ? (String) value : EmptyString;
+            return key.equals(nodeName()) ? coreValue : EmptyString;
         }
         return super.attr(key);
     }
@@ -48,7 +40,7 @@ abstract class LeafNode extends Node {
     @Override
     public Node attr(String key, String value) {
         if (!hasAttributes() && key.equals(nodeName())) {
-            this.value = value;
+            this.coreValue = value;
         } else {
             ensureAttributes();
             super.attr(key, value);

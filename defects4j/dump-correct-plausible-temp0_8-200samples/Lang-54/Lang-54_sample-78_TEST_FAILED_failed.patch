diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java
index 372ad6a0..21cb9829 100644
--- a/src/java/org/apache/commons/lang/LocaleUtils.java
+++ b/src/java/org/apache/commons/lang/LocaleUtils.java
@@ -95,37 +95,36 @@ public class LocaleUtils {
         if (str == null) {
             return null;
         }
-        int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+        if (str.isEmpty()) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
-        char ch1 = str.charAt(1);
-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
-        if (len == 2) {
-            return new Locale(str, "");
-        } else {
-            if (str.charAt(2) != '_') {
+        if (ch0 == '_') {
+            if (str.length() < 2 || str.charAt(1) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
-                if (str.charAt(5) != '_') {
-                    throw new IllegalArgumentException("Invalid locale format: " + str);
-                }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+        } else if (ch0 < 'a' || ch0 > 'z') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        if (str.equals("ja_JP_JP")) {
+            str = "ja_JP";
+        }
+        String[] parts = str.split("_", -1);
+        String language = parts.length > 0 ? parts[0] : "";
+        String country = parts.length > 1 ? parts[1] : "";
+        String variant = "";
+        if (parts.length > 2) {
+            // There is definitely a variant, and it is everything after the country
+            // code sans the separator between the country code and the variant.
+            int endIndexOfCountryCode = str.lastIndexOf(country) + country.length();
+            // Strip off any leading '_' and whitespace, what's left is the variant.
+            variant = str.substring(endIndexOfCountryCode).replaceAll("_", "");
+            if (variant.isEmpty()) {
+                variant = null;
             }
         }
+        return language.isEmpty() ? null : new Locale(language, country, variant);
     }
-
     //-----------------------------------------------------------------------
     /**
      * <p>Obtains the list of locales to search through when performing

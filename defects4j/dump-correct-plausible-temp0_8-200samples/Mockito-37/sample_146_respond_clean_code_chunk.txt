public class AnswersValidator {
    private Reporter reporter = new Reporter();
    public void validate(Answer<?> answer, Invocation invocation) {
        if (answer instanceof ThrowsException) {
            validateException((ThrowsException) answer, invocation);
        }
        if (answer instanceof Returns) {
            validateReturnValue((Returns) answer, invocation);
        }
        if (answer instanceof DoesNothing) {
            validateDoNothing((DoesNothing) answer, invocation);
        }
    }
    private void validateDoNothing(DoesNothing answer, Invocation invocation) {
        if (invocation.getMethod().getReturnType() != void.class) {
            reporter.onlyVoidMethodsCanBeSetToDoNothing();
        }
    }
    private void validateReturnValue(Returns answer, Invocation invocation) {
        if (invocation.getMethod().getReturnType() == void.class) {
            reporter.cannotStubVoidMethodWithAReturnValue();
        }
        if (answer.returnsNull() && invocation.getMethod().getReturnType().isPrimitive()) {
            reporter.wrongTypeOfReturnValue(invocation.printMethodReturnType(), "null", invocation.getMethodName());
        } 
        if (!answer.returnsNull() && !invocation.getMethod().getReturnType().isAssignableFrom(answer.getReturnType())) {
            reporter.wrongTypeOfReturnValue(invocation.printMethodReturnType(), answer.printReturnType(), invocation.getMethodName());
        }
    }
    private void validateException(ThrowsException answer, Invocation invocation) {
        Throwable throwable = answer.getThrowable();
        if (throwable == null) {
            reporter.cannotStubWithNullThrowable();
        }
        if (throwable instanceof RuntimeException || throwable instanceof Error) {
            return;
        }
        boolean found = false;
        for (Class<?> exceptionClass : invocation.getMethod().getExceptionTypes()) {
			if (exceptionClass.isAssignableFrom(throwable.getClass())) {
				found = true;
				break;
			}
		}
        if (!found) {
            reporter.checkedExceptionInvalid(throwable);
        }
    }
}
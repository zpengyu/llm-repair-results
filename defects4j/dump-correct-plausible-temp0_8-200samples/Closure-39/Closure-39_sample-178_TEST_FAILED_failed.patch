diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
index 87a287c9..3c9bca43 100644
--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
@@ -350,51 +350,43 @@ class PrototypeObjectType extends ObjectType {
   }
 
   @Override
-  String toStringHelper(boolean forAnnotations) {
-    if (hasReferenceName()) {
-      return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
-      prettyPrint = false;
-
-      // Use a tree set so that the properties are sorted.
-      Set<String> propertyNames = Sets.newTreeSet();
-      for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
-           current = current.getImplicitPrototype()) {
-        propertyNames.addAll(current.getOwnPropertyNames());
-      }
-
-      StringBuilder sb = new StringBuilder();
-      sb.append("{");
-
-      int i = 0;
-      for (String property : propertyNames) {
-        if (i > 0) {
-          sb.append(", ");
-        }
-
-        sb.append(property);
-        sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
-          break;
+    String toStringHelper(boolean forAnnotations) {
+        if (hasReferenceName()) {
+            return getReferenceName();
+        } else if (prettyPrint) {
+            // Don't pretty print recursively.
+            prettyPrint = false;
+            // Use a tree set so that the properties are sorted.
+            Set<String> propertyNames = Sets.newTreeSet();
+            for (ObjectType current = this;
+                 current != null && !current.isNativeObjectType() &&
+                         propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+                 current = current.getImplicitPrototype()) {
+                propertyNames.addAll(current.getOwnPropertyNames());
+            }
+            StringBuilder sb = new StringBuilder();
+            sb.append("{");
+            int i = 0;
+            for (String property : propertyNames) {
+                if (i > 0) {
+                    sb.append(", ");
+                }
+                sb.append(property);
+                sb.append(": ");
+                sb.append(getPropertyType(property).toString());
+                ++i;
+                if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+                    sb.append(", ...");
+                    break;
+                }
+            }
+            sb.append("}");
+            prettyPrint = true;
+            return sb.toString();
+        } else {
+            return "{...}";
         }
-      }
-
-      sb.append("}");
-
-      prettyPrint = true;
-      return sb.toString();
-    } else {
-      return "{...}";
     }
-  }
-
   void setPrettyPrint(boolean prettyPrint) {
     this.prettyPrint = prettyPrint;
   }

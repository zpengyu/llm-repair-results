diff --git a/src/main/java/org/jsoup/parser/Parser.java b/src/main/java/org/jsoup/parser/Parser.java
index 8cc01d2..066da5d 100644
--- a/src/main/java/org/jsoup/parser/Parser.java
+++ b/src/main/java/org/jsoup/parser/Parser.java
@@ -162,8 +155,41 @@ public class Parser {
                 doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
             }
         }
+        if (child.tagName().equals("meta")) { // <meta http-equiv="content-type" content="text/html;charset=utf-8">
+            String equiv = child.attr("http-equiv");
+            if (equiv.length() != 0 && equiv.equalsIgnoreCase("Content-Type")) { // ignore non-HTTP equiv meta tags
+                String content = child.attr("content");
+                int charsetStart = content.indexOf("charset=");
+                if (charsetStart != -1) {
+                    String encoding = content.substring(charsetStart+8).trim();
+                    if (encoding.length() != 0) {
+                        updateMetaCharset(encoding);
+                    }
+                }
+            }
+        }
+    }
+    private void updateMetaCharset(String metaCharset) {
+        // test the charset is supported
+        String originalCharset = Encoding.get(inputStream);
+        String charset = metaCharset;
+        if (charset.length() != 0) {
+            try {
+                charset = Charset.forName(metaCharset).toString(); // may throw IAE
+                charset = charset.trim().toUpperCase();
+                setCharset(charset);
+            } catch (IllegalArgumentException e) {
+                // illegal charset. Do nothing as we do not want to replace the current charset.
+            }
+        }
+        // if we found a supported charset, and if that charset is different than the original,
+        // and we haven't updated the charset, then set it for the doc and set the flag
+        if (metaCharset.length() != 0 && !charset.equals(originalCharset) && !charset.equals(defaultCharset)) {
+            doc.setCharset(charset); // set on the doc so doc.createElement(Tag) will get updated base
+            changedCharset = true;
+            doc.updateMetaCharsetElement(true);
+        }
     }
-
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();

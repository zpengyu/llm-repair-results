diff --git a/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java b/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java
index 33d350cb1..8b031f525 100644
--- a/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java
+++ b/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java
@@ -25,39 +25,7 @@ import org.apache.commons.math3.util.FastMath;
  * @version $Id$
  * @since 2.0
  */
-public abstract class BitsStreamGenerator
-    implements RandomGenerator {
-    /** Serializable version identifier */
-    /** Next gaussian. */
-    private double nextGaussian;
-
-    /**
-     * Creates a new random number generator.
-     */
-    public BitsStreamGenerator() {
-        nextGaussian = Double.NaN;
-    }
-
-    /** {@inheritDoc} */
-    public abstract void setSeed(int seed);
-
-    /** {@inheritDoc} */
-    public abstract void setSeed(int[] seed);
-
-    /** {@inheritDoc} */
-    public abstract void setSeed(long seed);
-
-    /** Generate next pseudorandom number.
-     * <p>This method is the core generation algorithm. It is used by all the
-     * public generation methods for the various primitive types {@link
-     * #nextBoolean()}, {@link #nextBytes(byte[])}, {@link #nextDouble()},
-     * {@link #nextFloat()}, {@link #nextGaussian()}, {@link #nextInt()},
-     * {@link #next(int)} and {@link #nextLong()}.</p>
-     * @param bits number of random bits to produce
-     * @return random bits generated
-     */
-    protected abstract int next(int bits);
-
+protected abstract int next(int bits);
     /** {@inheritDoc} */
     public boolean nextBoolean() {
         return next(1) != 0;

static boolean functionCallHasSideEffects(
      Node callNode, @Nullable AbstractCompiler compiler) {
    if (callNode.getType() != Token.CALL) {
      throw new IllegalStateException(
          "Expected CALL node, got " + Token.name(callNode.getType()));
    }
    if (callNode.isNoSideEffectsCall()) {
      return false;
    }
    Node nameNode = callNode.getFirstChild();
    // Built-in functions with no side effects.
    if (nameNode.getType() == Token.NAME) {
      String name = nameNode.getString();
      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
        return false;
      }
    } else if (nameNode.getType() == Token.GETPROP) {
      // Functions in the "Math" namespace have no side effects.
      Node object = nameNode.getFirstChild();
      Node property = nameNode.getLastChild();
      if (object.getType() == Token.NAME &&
          object.getString().equals("Math") &&
          property.getType() == Token.STRING &&
          MATH_METHODS.contains(property.getString())) {
        return false;
      } else if (callNode.hasOneChild()
          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(property.getString())) {
        return false;
      } else if (callNode.isOnlyModifiesThisCall()
          && evaluatesToLocalValue(object)) {
        return false;
      }
      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
        if (object.getType() == Token.REGEXP
            && REGEXP_METHODS.contains(property.getString())) {
          return false;
        } else if (object.getType() == Token.STRING
            && STRING_REGEXP_METHODS.contains(property.getString())) {
          Node param = nameNode.getNext();
          if (param != null &&
              (param.getType() == Token.STRING
                  || param.getType() == Token.REGEXP))
          return false;
        }
      }
    }
    return true;
  }
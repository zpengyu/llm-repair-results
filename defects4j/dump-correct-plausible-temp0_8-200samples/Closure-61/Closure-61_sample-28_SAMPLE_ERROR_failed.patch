diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 53389622..af12ce15 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -923,58 +923,58 @@ public final class NodeUtil {
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
-  static boolean functionCallHasSideEffects(
-      Node callNode, @Nullable AbstractCompiler compiler) {
-    if (callNode.getType() != Token.CALL) {
-      throw new IllegalStateException(
-          "Expected CALL node, got " + Token.name(callNode.getType()));
-    }
-
-    if (callNode.isNoSideEffectsCall()) {
-      return false;
+static boolean functionCallHasSideEffects(Node callNode,
+    @Nullable AbstractCompiler compiler) {
+  checkArgument(callNode.isCall(), callNode);
+  return !NodeUtil.functionCallHasNoSideEffects(callNode, compiler);
+}
+static boolean functionCallHasNoSideEffects(Node callNode,
+    @Nullable AbstractCompiler compiler) {
+  checkArgument(callNode.isCall(), callNode);
+  if (callNode.isNoSideEffectsCall()) {
+    return true;
+  }
+  Node nameNode = callNode.getFirstChild();
+  if (!nameNode.isQualifiedName()) {
+    return false;
+  }
+  if (isNoSideEffectsProperty(compiler, callNode, nameNode)) {
+    return true;
+  }
+  if (callNode.isOnlyModifiesThisCall()
+      && evaluatesToLocalValue(nameNode.getFirstChild())) {
+    return true;
+  }
+  // Functions in the "Math" namespace have no side effects.
+  if ("Math".equals(nameNode.getQualifiedName())) {
+    return true;
+  }
+  // Functions in the "goog.math" namespace have no side effects.
+  if ("goog.math".equals(nameNode.getQualifiedName())) {
+    return true;
+  }
+  // eval has side effects.
+  if ("eval".equals(nameNode.getQualifiedName())) {
+    return false;
+  }
+  return false;
+}
+private static boolean isNoSideEffectsProperty(
+    @Nullable AbstractCompiler compiler, Node callNode, Node nameNode) {
+  if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
+    if (nameNode.getFirstChild().getType() == Token.REGEXP
+        && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+      return true;
     }
-
-    Node nameNode = callNode.getFirstChild();
-
-    // Built-in functions with no side effects.
-    if (nameNode.getType() == Token.NAME) {
-      String name = nameNode.getString();
-      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
-        return false;
-      }
-    } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
-        return false;
-      }
-
-      if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
-        return false;
-      }
-
-      // Functions in the "Math" namespace have no side effects.
-
-      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
-          return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
-          Node param = nameNode.getNext();
-          if (param != null &&
-              (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
-          return false;
-        }
-      }
+    if (nameNode.getFirstChild().getType() == Token.STRING
+        && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+      Node param = callNode.getSecondChild();
+      return param != null &&
+          (param.getType() == Token.STRING || param.getType() == Token.REGEXP);
     }
-
-    return true;
   }
-
+  return false;
+}
   /**
    * @return Whether the call has a local result.
    */

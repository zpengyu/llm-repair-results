diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java b/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java
index 430232a7..9f368a84 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java
@@ -266,20 +266,52 @@ public class Zip64ExtendedInformationExtraField implements ZipExtraField {
             }
             int offset = 0;
             if (hasUncompressedSize) {
+                if(rawCentralDirectoryData.length - DWORD < offset) {
+                    throw new ZipException("central directory zip64 extended"
+                                           + " information extra field's length"
+                                           + " doesn't match central directory"
+                                           + " data.  Expected length "
+                                           + expectedLength + " but is "
+                                           + rawCentralDirectoryData.length);
+                }
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasCompressedSize) {
+                if(rawCentralDirectoryData.length - DWORD < offset) {
+                    throw new ZipException("central directory zip64 extended"
+                                           + " information extra field's length"
+                                           + " doesn't match central directory"
+                                           + " data.  Expected length "
+                                           + expectedLength + " but is "
+                                           + rawCentralDirectoryData.length);
+                }
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
+                if(rawCentralDirectoryData.length - DWORD < offset) {
+                    throw new ZipException("central directory zip64 extended"
+                                           + " information extra field's length"
+                                           + " doesn't match central directory"
+                                           + " data.  Expected length "
+                                           + expectedLength + " but is "
+                                           + rawCentralDirectoryData.length);
+                }
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasDiskStart) {
+                if(rawCentralDirectoryData.length - WORD < offset) {
+                    throw new ZipException("central directory zip64 extended"
+                                           + " information extra field's length"
+                                           + " doesn't match central directory"
+                                           + " data.  Expected length "
+                                           + expectedLength + " but is "
+                                           + rawCentralDirectoryData.length);
+                }
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
                 offset += WORD;
             }

diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java b/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java
index 430232a7..b5a065ae 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java
@@ -246,7 +246,7 @@ public class Zip64ExtendedInformationExtraField implements ZipExtraField {
      * entry inside the central directory contains the correct magic
      * value.</p>
      */
-    public void reparseCentralDirectoryData(boolean hasUncompressedSize,
+public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
@@ -266,21 +266,31 @@ public class Zip64ExtendedInformationExtraField implements ZipExtraField {
             }
             int offset = 0;
             if (hasUncompressedSize) {
-                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                if (size == null) {
+                    size =
+                        new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                }
                 offset += DWORD;
             }
             if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
+                if (compressedSize == null) {
+                    compressedSize =
+                        new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                }
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
-                relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                if (relativeHeaderOffset == null) {
+                    relativeHeaderOffset =
+                        new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                }
                 offset += DWORD;
             }
             if (hasDiskStart) {
-                diskStart = new ZipLong(rawCentralDirectoryData, offset);
+                if (diskStart == null) {
+                    diskStart =
+                        new ZipLong(rawCentralDirectoryData, offset);
+                }
                 offset += WORD;
             }
         }

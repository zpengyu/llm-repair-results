    public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                            boolean hasCompressedSize,
                                            boolean hasRelativeHeaderOffset,
                                            boolean hasDiskStart)
        throws ZipException {
        if (rawCentralDirectoryData != null) {
            int expectedLength = (hasUncompressedSize ? DWORD : 0)
                + (hasCompressedSize ? DWORD : 0)
                + (hasRelativeHeaderOffset ? DWORD : 0)
                + (hasDiskStart ? WORD : 0);
            if (rawCentralDirectoryData.length != expectedLength) {
                if (!hasUncompressedSize && !hasCompressedSize) {
                    // Appears to be an attempt at a zip64 extended
                    // information extra field.
                    // Strip to match expected length
                    byte[] newCentralDirectoryData = new byte[expectedLength];
                    System.arraycopy(rawCentralDirectoryData, 0, newCentralDirectoryData, 0,
                                     Math.min(expectedLength, rawCentralDirectoryData.length));
                    rawCentralDirectoryData = newCentralDirectoryData;
                } else {
                    throw new ZipException("central directory zip64 extended"
                                           + " information extra field's length"
                                           + " doesn't match central directory"
                                           + " data.  Expected length "
                                           + expectedLength + " but is "
                                           + rawCentralDirectoryData.length);
                }
            }
            int offset = 0;
            if (hasUncompressedSize) {
                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                offset += DWORD;
            }
            if (hasCompressedSize) {
                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                         offset);
                offset += DWORD;
            }
            if (hasRelativeHeaderOffset) {
                relativeHeaderOffset =
                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
                offset += DWORD;
            }
            if (hasDiskStart) {
                diskStart = new ZipLong(rawCentralDirectoryData, offset);
                offset += WORD;
            }
        }
    }

 

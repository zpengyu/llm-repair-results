diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java b/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java
index 430232a7..c8fc1aea 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java
@@ -246,46 +246,53 @@ public class Zip64ExtendedInformationExtraField implements ZipExtraField {
      * entry inside the central directory contains the correct magic
      * value.</p>
      */
-    public void reparseCentralDirectoryData(boolean hasUncompressedSize,
-                                            boolean hasCompressedSize,
-                                            boolean hasRelativeHeaderOffset,
-                                            boolean hasDiskStart)
+public void reparseCentralDirectoryData(boolean hasUncompressedSize,
+                                        boolean hasCompressedSize,
+                                        boolean hasRelativeHeaderOffset,
+                                        boolean hasDiskStart)
         throws ZipException {
-        if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
-                throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
-            }
-            int offset = 0;
-            if (hasUncompressedSize) {
-                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
-            }
-            if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
-                offset += DWORD;
-            }
-            if (hasRelativeHeaderOffset) {
-                relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
-            }
-            if (hasDiskStart) {
-                diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
-            }
+    if (rawCentralDirectoryData != null) {
+        int expectedLength = (hasUncompressedSize ? DWORD : 0)
+            + (hasCompressedSize ? DWORD : 0)
+            + (hasRelativeHeaderOffset ? DWORD : 0)
+            + (hasDiskStart ? WORD : 0);
+        if (rawCentralDirectoryData.length != expectedLength) {
+            throw new ZipException("central directory zip64 extended"
+                                   + " information extra field's length"
+                                   + " doesn't match central directory"
+                                   + " data.  Expected length "
+                                   + expectedLength + " but is "
+                                   + rawCentralDirectoryData.length);
+        }
+        int offset = 0;
+        if (hasUncompressedSize) {
+            size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+            offset += DWORD;
+        } else {
+            size = null;
+        }
+        if (hasCompressedSize) {
+            compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
+                                                     offset);
+            offset += DWORD;
+        } else {
+            compressedSize = null;
+        }
+        if (hasRelativeHeaderOffset) {
+            relativeHeaderOffset =
+                new ZipEightByteInteger(rawCentralDirectoryData, offset);
+            offset += DWORD;
+        } else {
+            relativeHeaderOffset = null;
+        }
+        if (hasDiskStart) {
+            diskStart = new ZipLong(rawCentralDirectoryData, offset);
+            offset += WORD;
+        } else {
+            diskStart = null;
         }
     }
-
+}
     /**
      * The uncompressed size stored in this extra field.
      */

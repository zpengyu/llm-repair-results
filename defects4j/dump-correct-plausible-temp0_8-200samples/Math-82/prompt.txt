###Provide a fix for the buggy function
###Buggy Function
class FibonacciExample {
    public static void main(String args[]) {
        int n1 = 0, n2 = 1, n3, i, count = 10;

        System.out.print(n1 + " " + n2);

        for (i = 2; i < count; ++i) {
            n3 = n1 - n2;
            System.out.print(" " + n3);
            n1 = n2;
            n2 = n3;
        }
    }
}

###Fixed Function
class FibonacciExample {
    public static void main(String args[]) {
        int n1 = 0, n2 = 1, n3, i, count = 10;

        System.out.print(n1 + " " + n2);

        for (i = 2; i < count; ++i) {
            n3 = n1 + n2;
            System.out.print(" " + n3);
            n1 = n2;
            n2 = n3;
        }
    }
}

###Provide a fix for the buggy function
###Buggy Function
public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}
###Fixed Function
public double getNumericalMean() {
    return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());
}
###Provide a fix for the buggy function
###Buggy Function
    private Integer getPivotRow(final int col, final SimplexTableau tableau) {
        double minRatio = Double.MAX_VALUE;
        Integer minRatioPos = null;
        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
            final double entry = tableau.getEntry(i, col);
            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
                final double ratio = rhs / entry;
                if (ratio < minRatio) {
                    minRatio = ratio;
                    minRatioPos = i; 
                }
            }
        }
        return minRatioPos;
    }

###Fixed Function

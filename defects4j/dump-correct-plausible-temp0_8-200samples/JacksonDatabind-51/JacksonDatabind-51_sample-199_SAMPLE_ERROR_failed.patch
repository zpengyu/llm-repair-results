diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
index 339362e1e..6aeb6f54d 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -152,14 +152,10 @@ public abstract class TypeDeserializerBase
                 // As per [JACKSON-614], use the default impl if no type id available:
                 deser = _findDefaultImplDeserializer(ctxt);
                 if (deser == null) {
-                    // 10-May-2016, tatu: We may get some help...
-                    JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);
-                    if (actual == null) { // what should this be taken to mean?
-                        // TODO: try to figure out something better
-                        return null;
-                    }
-                    // ... would this actually work?
-                    deser = ctxt.findContextualValueDeserializer(actual, _property);
+                    /* 30-Sep-2012, tatu: One more thing; as per [databind#43], need to
+                     *   allow "untyped" deserializer if type id is not available.
+                     */
+                    return null;
                 }
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
@@ -181,7 +177,11 @@ public abstract class TypeDeserializerBase
                     //   generic type with custom type resolvers. If so, should try to retain them.
                     //  Whether this is sufficient to avoid problems remains to be seen, but for
                     //  now it should improve things.
+                    if (type.hasGenericTypes()) {
                         type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
+                    } else {
+                        type = ctxt.getTypeFactory().constructSimpleType(type.getRawClass(), type.getBindings());
+                    }
                 }
                 deser = ctxt.findContextualValueDeserializer(type, _property);
             }

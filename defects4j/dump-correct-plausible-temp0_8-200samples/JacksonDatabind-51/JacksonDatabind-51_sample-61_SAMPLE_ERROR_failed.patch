diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
index 339362e1e..3af59d08c 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -155,10 +155,11 @@ public abstract class TypeDeserializerBase
                     // 10-May-2016, tatu: We may get some help...
                     JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);
                     if (actual == null) { // what should this be taken to mean?
-                        // TODO: try to figure out something better
                         return null;
                     }
-                    // ... would this actually work?
+                    /* 22-Nov-2013, tatu: As per [databind#206] this should work as expected:
+                     *   but we do need contextual instance.
+                     */
                     deser = ctxt.findContextualValueDeserializer(actual, _property);
                 }
             } else {
@@ -181,7 +182,11 @@ public abstract class TypeDeserializerBase
                     //   generic type with custom type resolvers. If so, should try to retain them.
                     //  Whether this is sufficient to avoid problems remains to be seen, but for
                     //  now it should improve things.
+                    if (type.containedTypeCount() > 0) {
                         type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
+                    } else {
+                        type = _baseType.narrowBy(type.getRawClass());
+                    }
                 }
                 deser = ctxt.findContextualValueDeserializer(type, _property);
             }

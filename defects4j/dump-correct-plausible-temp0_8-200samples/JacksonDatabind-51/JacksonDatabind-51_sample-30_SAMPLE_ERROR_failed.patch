diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
index 339362e1e..944508b70 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -137,7 +137,7 @@ public abstract class TypeDeserializerBase
     /**********************************************************
      */
 
-    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
+	protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
             String typeId) throws IOException
     {
         JsonDeserializer<Object> deser = _deserializers.get(typeId);
@@ -149,18 +149,18 @@ public abstract class TypeDeserializerBase
              */
             JavaType type = _idResolver.typeFromId(ctxt, typeId);
             if (type == null) {
-                // As per [JACKSON-614], use the default impl if no type id available:
-                deser = _findDefaultImplDeserializer(ctxt);
-                if (deser == null) {
-                    // 10-May-2016, tatu: We may get some help...
-                    JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);
-                    if (actual == null) { // what should this be taken to mean?
-                        // TODO: try to figure out something better
-                        return null;
+                if (_defaultImpl != null) {
+                    deser = _findDefaultImplDeserializer(ctxt);
+                } else {
+                    // As per [JACKSON-614], allow 'missing' type ids
+                    deser = _deserializers.get(NULL_KEY);
+                    if (deser == null) {
+                        deser = super._findDeserializer(ctxt, NULL_KEY);
+                        _deserializers.put(NULL_KEY, deser);
                     }
-                    // ... would this actually work?
-                    deser = ctxt.findContextualValueDeserializer(actual, _property);
                 }
+                // ... would this actually work?
+                // deser = ctxt.findContextualValueDeserializer(type, _property);
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
                  *   we actually now need to explicitly narrow from base type (which may have parameterization)
@@ -181,7 +181,11 @@ public abstract class TypeDeserializerBase
                     //   generic type with custom type resolvers. If so, should try to retain them.
                     //  Whether this is sufficient to avoid problems remains to be seen, but for
                     //  now it should improve things.
+                    // 19-Jun-2016, tatu: Hmmmh. Need to make sure that we do not get null here,
+                    //   since that will throw exception
+                    if (type.getRawClass() != _baseType.getRawClass()) {
                         type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
+                    }
                 }
                 deser = ctxt.findContextualValueDeserializer(type, _property);
             }

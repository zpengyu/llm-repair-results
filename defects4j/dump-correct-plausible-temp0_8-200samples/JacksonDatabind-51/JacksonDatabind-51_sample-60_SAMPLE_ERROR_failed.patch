diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
index 339362e1e..2fccd7c6e 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -149,18 +149,22 @@ public abstract class TypeDeserializerBase
              */
             JavaType type = _idResolver.typeFromId(ctxt, typeId);
             if (type == null) {
-                // As per [JACKSON-614], use the default impl if no type id available:
-                deser = _findDefaultImplDeserializer(ctxt);
-                if (deser == null) {
-                    // 10-May-2016, tatu: We may get some help...
-                    JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);
-                    if (actual == null) { // what should this be taken to mean?
-                        // TODO: try to figure out something better
-                        return null;
+                /* 10-May-2016, tatu: We may get some help...
+                 *   [databind#1167]
+                 */
+                type = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);
+                if (type == null) { // what should this be taken to mean?
+                    /* As per [JACKSON-614], use the default impl if no type id
+                     * available, unless configured to fail.
+                     */
+                    JsonDeserializer<?> deser2 = _findDefaultImplDeserializer(ctxt);
+                    if ((deser2 != null) && ctxt.isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)) {
+                        return deser2;
                     }
-                    // ... would this actually work?
-                    deser = ctxt.findContextualValueDeserializer(actual, _property);
+                    // TODO: try to figure out something better
+                    return null;
                 }
+                deser = ctxt.findContextualValueDeserializer(type, _property);
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
                  *   we actually now need to explicitly narrow from base type (which may have parameterization)

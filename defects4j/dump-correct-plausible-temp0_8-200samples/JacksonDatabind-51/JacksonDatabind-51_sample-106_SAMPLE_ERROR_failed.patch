diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
index 339362e1e..be69eadd0 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -149,6 +149,18 @@ public abstract class TypeDeserializerBase
              */
             JavaType type = _idResolver.typeFromId(ctxt, typeId);
             if (type == null) {
+                /* 16-Oct-2015, tatu: [databind#1239] Need to support
+                 *   "upgrade" of deserializer, if possible, using contextual
+                 *   information.
+                 */
+                if (_baseType != null && ctxt.isEnabled(DeserializationFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL)) {
+                    JavaType defType = ctxt.getConfig().constructType(_baseType.getRawClass());
+                    JsonDeserializer<Object> deser2 = ctxt.findNonContextualValueDeserializer(defType);
+                    if (deser2 != null) {
+                        // note: class may still be generic, but this is ok
+                        return _handleBase64Upgrade(ctxt, typeId, deser2);
+                    }
+                }
                 // As per [JACKSON-614], use the default impl if no type id available:
                 deser = _findDefaultImplDeserializer(ctxt);
                 if (deser == null) {
@@ -170,18 +182,13 @@ public abstract class TypeDeserializerBase
                  *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
                  *   type in process (getting SimpleType of Map.class which will not work as expected)
                  */
-                if ((_baseType != null)
-                        && _baseType.getClass() == type.getClass()) {
+                if (_baseType != null && _baseType.getClass() == type.getClass()) {
                     /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
                      *   but it appears to check that JavaType impl class is the same which is
                      *   important for some reason?
                      *   Disabling the check will break 2 Enum-related tests.
                      */
-                    // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full
-                    //   generic type with custom type resolvers. If so, should try to retain them.
-                    //  Whether this is sufficient to avoid problems remains to be seen, but for
-                    //  now it should improve things.
-                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
+                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
                 }
                 deser = ctxt.findContextualValueDeserializer(type, _property);
             }

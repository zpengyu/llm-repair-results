diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
index 339362e1e..b23d0f950 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -149,9 +149,10 @@ public abstract class TypeDeserializerBase
              */
             JavaType type = _idResolver.typeFromId(ctxt, typeId);
             if (type == null) {
-                // As per [JACKSON-614], use the default impl if no type id available:
-                deser = _findDefaultImplDeserializer(ctxt);
-                if (deser == null) {
+                /* As per [JACKSON-614], use the default impl if no type id available:
+                 * But only if it makes sense to do so; if not, better give up.
+                 */
+                if (_defaultImpl == null) {
                     // 10-May-2016, tatu: We may get some help...
                     JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);
                     if (actual == null) { // what should this be taken to mean?
@@ -160,6 +161,8 @@ public abstract class TypeDeserializerBase
                     }
                     // ... would this actually work?
                     deser = ctxt.findContextualValueDeserializer(actual, _property);
+                } else {
+                    deser = _findDefaultImplDeserializer(ctxt);
                 }
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
@@ -181,7 +184,11 @@ public abstract class TypeDeserializerBase
                     //   generic type with custom type resolvers. If so, should try to retain them.
                     //  Whether this is sufficient to avoid problems remains to be seen, but for
                     //  now it should improve things.
+                    if (type.isGeneric()) {
                         type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
+                    } else {
+                        type = ctxt.getTypeFactory().constructType(type.getRawClass(), _baseType.getBindings());
+                    }
                 }
                 deser = ctxt.findContextualValueDeserializer(type, _property);
             }

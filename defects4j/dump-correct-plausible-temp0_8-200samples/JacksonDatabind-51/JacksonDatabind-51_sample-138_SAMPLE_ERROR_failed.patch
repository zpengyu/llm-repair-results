diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
index 339362e1e..769f96e39 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -170,18 +170,16 @@ public abstract class TypeDeserializerBase
                  *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
                  *   type in process (getting SimpleType of Map.class which will not work as expected)
                  */
-                if ((_baseType != null)
-                        && _baseType.getClass() == type.getClass()) {
-                    /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
-                     *   but it appears to check that JavaType impl class is the same which is
-                     *   important for some reason?
-                     *   Disabling the check will break 2 Enum-related tests.
-                     */
-                    // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full
-                    //   generic type with custom type resolvers. If so, should try to retain them.
-                    //  Whether this is sufficient to avoid problems remains to be seen, but for
-                    //  now it should improve things.
+                if (_baseType != null) {
+                    // 10-May-2016, tatu: Important change: previously we only used raw type, to avoid
+                    //    narrowing. With [databind#1270] we can check for this explicitly, and only
+                    //    use raw type if needed. Otherwise actual type can be retained
+                    if (_baseType.getClass() == type.getClass()) {
+                        // 19-Jun-2016, tatu: Note: might be best to just use `constructSpecializedType`?
                         type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
+                    } else {
+                        type = ctxt.getTypeFactory().constructGeneralizedType(_baseType, type);
+                    }
                 }
                 deser = ctxt.findContextualValueDeserializer(type, _property);
             }

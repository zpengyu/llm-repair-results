diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
index 339362e1e..040b5a05a 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -152,14 +152,24 @@ public abstract class TypeDeserializerBase
                 // As per [JACKSON-614], use the default impl if no type id available:
                 deser = _findDefaultImplDeserializer(ctxt);
                 if (deser == null) {
-                    // 10-May-2016, tatu: We may get some help...
+                    /* 10-May-2016, tatu: We may get some help... but if we get it and find
+                     *    that it is compatible with defaults, just use the default and
+                     *    ignore it.
+                     */
                     JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);
-                    if (actual == null) { // what should this be taken to mean?
-                        // TODO: try to figure out something better
-                        return null;
+                    if (actual != null) {
+                        if (actual.getRawClass() != _baseType.getRawClass()) {
+                            deser = ctxt.findContextualValueDeserializer(actual, _property);
+                        } else {
+                            deser = _findDefaultImplDeserializer(ctxt);
+                        }
+                    }
+                    // if not, can't do much...
+                    if (deser == null) {
+                        ctxt.reportBadTypeDefinition(_baseType,
+                                "Could not resolve type id '"+typeId+"' into a subtype of "+_baseType);
+                        return ctxt.handleUnexpectedToken(Object.class, jp);
                     }
-                    // ... would this actually work?
-                    deser = ctxt.findContextualValueDeserializer(actual, _property);
                 }
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,

diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java
index b44b8253d..e02645d28 100644
--- a/src/org/mockito/internal/util/Primitives.java
+++ b/src/org/mockito/internal/util/Primitives.java
@@ -14,19 +13,28 @@ public class Primitives {
         if(clazz.isPrimitive()) {
             return clazz;
         }
-        return (Class<T>) primitiveTypes.get(clazz);
+        Class<T> ret = (Class<T>) primitiveTypes.get(clazz);
+        if (ret == null) {
+            throw new IllegalArgumentException("class cannot be converted into primitive type: " + clazz);
+        }
+        return ret;
     }
-
     public static boolean isPrimitiveWrapper(Class<?> type) {
         return wrapperReturnValues.containsKey(type);
     }
-
     public static <T> T primitiveWrapperOf(Class<T> type) {
-        return (T) wrapperReturnValues.get(type);
+        T ret = (T) wrapperReturnValues.get(type);
+        if (ret == null) {
+            throw new IllegalArgumentException("class cannot be converted into primitive type: " + type);
+        }
+        return ret;
     }
-
     public static <T> T primitiveValueOrNullFor(Class<T> primitiveType) {
-        return (T) primitiveValues.get(primitiveType);
+        T ret = (T) primitiveValues.get(primitiveType);
+        if (ret == null) {
+            throw new IllegalArgumentException("class cannot be converted into primitive type: " + primitiveType);
+        }
+        return ret;
     }
     private static Map<Class<?>, Class<?>> wrapperTypes = new HashMap<Class<?>, Class<?>>();
     private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();

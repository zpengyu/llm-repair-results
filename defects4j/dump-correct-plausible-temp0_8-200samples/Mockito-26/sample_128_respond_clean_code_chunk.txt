public class Primitives {
	public static <T> Class<T> primitiveTypeOf(Class<T> clazz) {
		if(clazz.isPrimitive()) {
			return clazz;
		}
		return (Class<T>) primitiveTypes.get(clazz);
	}
	public static boolean isPrimitiveWrapper(Class<?> type) {
		return wrapperReturnValues.containsKey(type);
	}
	public static <T> T primitiveWrapperOf(Class<T> type) {
		return (T) wrapperReturnValues.get(type);
	}
	public static <T> T primitiveValueOrNullFor(Class<T> primitiveType) {
		return (T) primitiveValues.get(primitiveType);
	}
	public static <T> T boxedPrimitiveOf(Class<T> primitiveType) {
		return (T) primitiveToWrapper.get(primitiveType);
	}
	public static <T> Class<T> boxedPrimitiveTypeOf(Class<T> primitiveType) {
		return (Class<T>) primitiveToWrapper.get(primitiveType);
	}
	public static Class<?> boxedPrimitiveTypeOf(Object value) {
		return wrapperToPrimitive.get(value.getClass());
	}
	private static Map<Class<?>, Class<?>> wrapperTypes = new HashMap<Class<?>, Class<?>>();
	private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();
	private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();
	private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();
	private static Map<Class<?>, Object> primitiveToWrapper = new HashMap<Class<?>, Object>();
	private static Map<Class<?>, Class<?>> wrapperToPrimitive = new HashMap<Class<?>, Class<?>>();
	static {
		wrapperTypes.put(Boolean.class, Boolean.TYPE);
		wrapperTypes.put(Character.class, Character.TYPE);
		wrapperTypes.put(Byte.class, Byte.TYPE);
		wrapperTypes.put(Short.class, Short.TYPE);
		wrapperTypes.put(Integer.class, Integer.TYPE);
		wrapperTypes.put(Long.class, Long.TYPE);
		wrapperTypes.put(Float.class, Float.TYPE);
		wrapperTypes.put(Double.class, Double.TYPE);
		for(Entry<Class<?>, Class<?>> entry : wrapperTypes.entrySet()) {
			primitiveTypes.put(entry.getValue(), entry.getKey());
			primitiveToWrapper.put(entry.getValue(), entry.getKey().newInstance());
			wrapperToPrimitive.put(entry.getKey(), entry.getValue());
		}
	}
	static {
		wrapperReturnValues.put(Boolean.class, false);
		wrapperReturnValues.put(Character.class, '\u0000');
		wrapperReturnValues.put(Byte.class, (byte) 0);
		wrapperReturnValues.put(Short.class, (short) 0);
		wrapperReturnValues.put(Integer.class, 0);
		wrapperReturnValues.put(Long.class, 0L);
		wrapperReturnValues.put(Float.class, 0F);
		wrapperReturnValues.put(Double.class, 0D);
	}
	static {
		primitiveValues.put(boolean.class, false);
		primitiveValues.put(char.class, '\u0000');
		primitiveValues.put(byte.class, (byte) 0);
		primitiveValues.put(short.class, (short) 0);
		primitiveValues.put(int.class, 0);
		primitiveValues.put(long.class, 0L);
		primitiveValues.put(float.class, 0F);
		primitiveValues.put(double.class, 0);
	}
}
diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java
index b44b8253d..eb643cd6e 100644
--- a/src/org/mockito/internal/util/Primitives.java
+++ b/src/org/mockito/internal/util/Primitives.java
@@ -9,30 +9,6 @@ import java.util.Map;
 
 @SuppressWarnings("unchecked")
 public class Primitives {
-    
-    public static <T> Class<T> primitiveTypeOf(Class<T> clazz) {
-        if(clazz.isPrimitive()) {
-            return clazz;
-        }
-        return (Class<T>) primitiveTypes.get(clazz);
-    }
-
-    public static boolean isPrimitiveWrapper(Class<?> type) {
-        return wrapperReturnValues.containsKey(type);
-    }
-
-    public static <T> T primitiveWrapperOf(Class<T> type) {
-        return (T) wrapperReturnValues.get(type);
-    }
-
-    public static <T> T primitiveValueOrNullFor(Class<T> primitiveType) {
-        return (T) primitiveValues.get(primitiveType);
-    }
-    private static Map<Class<?>, Class<?>> wrapperTypes = new HashMap<Class<?>, Class<?>>();
-    private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();
-    private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();
-    private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();
-
     static {
         primitiveTypes.put(Boolean.class, Boolean.TYPE);
         primitiveTypes.put(Character.class, Character.TYPE);
@@ -65,4 +39,23 @@ public class Primitives {
         primitiveValues.put(float.class, 0F);
         primitiveValues.put(double.class, 0);
     }
+    public static <T> Class<T> primitiveTypeOf(Class<T> clazz) {
+        if(clazz.isPrimitive()) {
+            return clazz;
+        }
+        return (Class<T>) primitiveTypes.get(clazz);
+    }
+    public static boolean isPrimitiveWrapper(Class<?> type) {
+        return wrapperReturnValues.containsKey(type);
+    }
+    public static <T> T primitiveWrapperOf(Class<T> type) {
+        return (T) wrapperReturnValues.get(type);
+    }
+    public static <T> T primitiveValueOrNullFor(Class<T> primitiveType) {
+        return (T) primitiveValues.get(primitiveType);
+    }
+    private static Map<Class<?>, Class<?>> wrapperTypes = new HashMap<Class<?>, Class<?>>();
+    private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();
+    private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();
+    private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();
 }
\ No newline at end of file

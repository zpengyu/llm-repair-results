public class Primitives {

	private static final Map<Class<?>, Class<?>> wrapperTypes = new HashMap<Class<?>, Class<?>>() {{
		put(Boolean.TYPE, Boolean.class);
		put(Character.TYPE, Character.class);
		put(Byte.TYPE, Byte.class);
		put(Short.TYPE, Short.class);
		put(Integer.TYPE, Integer.class);
		put(Long.TYPE, Long.class);
		put(Float.TYPE, Float.class);
		put(Double.TYPE, Double.class);
	}};

	private static final Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>() {{
		put(Boolean.class, false);
		put(Character.class, '\u0000');
		put(Byte.class, (byte) 0);
		put(Short.class, (short) 0);
		put(Integer.class, 0);
		put(Long.class, 0L);
		put(Float.class, 0F);
		put(Double.class, 0D);
	}};

	private static final Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>() {{
		put(boolean.class, false);
		put(char.class, '\u0000');
		put(byte.class, (byte) 0);
		put(short.class, (short) 0);
		put(int.class, 0);
		put(long.class, 0L);
		put(float.class, 0F);
		put(double.class, 0);
	}};

	public static <T> Class<T> primitiveTypeOf(Class<T> clazz) {
		if (clazz.isPrimitive()) {
			return clazz;
		}
		return (Class<T>) wrapperTypes.get(clazz);
	}

	public static boolean isPrimitiveWrapper(Class<?> type) {
		return wrapperReturnValues.containsKey(type);
	}

	public static <T> T primitiveWrapperOf(Class<T> type) {
		return (T) wrapperReturnValues.get(type);
	}

	public static <T> T primitiveValueOrNullFor(Class<T> primitiveType) {
		return (T) primitiveValues.get(primitiveType);
	}
}
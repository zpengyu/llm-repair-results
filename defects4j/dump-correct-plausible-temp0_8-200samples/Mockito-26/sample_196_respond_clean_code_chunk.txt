public class Primitives {
    private static final boolean BOOLEAN_DEFAULT = false;
    private static final char CHAR_DEFAULT = '\u0000';
    private static final byte BYTE_DEFAULT = (byte) 0;
    private static final short SHORT_DEFAULT = (short) 0;
    private static final int INTEGER_DEFAULT = 0;
    private static final long LONG_DEFAULT = 0L;
    private static final float FLOAT_DEFAULT = 0F;
    private static final double DOUBLE_DEFAULT = 0D;
    public static <T> Class<T> primitiveTypeOf(Class<T> clazz) {
        if(clazz.isPrimitive()) {
            return clazz;
        }
        return (Class<T>) primitiveTypes.get(clazz);
    }
    public static boolean isPrimitiveWrapper(Class<?> type) {
        return wrapperReturnValues.containsKey(type);
    }
    public static <T> T primitiveWrapperOf(Class<T> type) {
        return (T) wrapperReturnValues.get(type);
    }
    public static <T> T primitiveValueOrNullFor(Class<T> primitiveType) {
        return (T) primitiveValues.get(primitiveType);
    }
    private static Map<Class<?>, Class<?>> wrapperTypes = new HashMap<Class<?>, Class<?>>();
    private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();
    private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();
    private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();
    static {
        primitiveTypes.put(Boolean.class, Boolean.TYPE);
        primitiveTypes.put(Character.class, Character.TYPE);
        primitiveTypes.put(Byte.class, Byte.TYPE);
        primitiveTypes.put(Short.class, Short.TYPE);
        primitiveTypes.put(Integer.class, Integer.TYPE);
        primitiveTypes.put(Long.class, Long.TYPE);
        primitiveTypes.put(Float.class, Float.TYPE);
        primitiveTypes.put(Double.class, Double.TYPE);
    }
    static {
        wrapperReturnValues.put(Boolean.class, BOOLEAN_DEFAULT);
        wrapperReturnValues.put(Character.class, CHAR_DEFAULT);
        wrapperReturnValues.put(Byte.class, BYTE_DEFAULT);
        wrapperReturnValues.put(Short.class, SHORT_DEFAULT);
        wrapperReturnValues.put(Integer.class, INTEGER_DEFAULT);
        wrapperReturnValues.put(Long.class, LONG_DEFAULT);
        wrapperReturnValues.put(Float.class, FLOAT_DEFAULT);
        wrapperReturnValues.put(Double.class, DOUBLE_DEFAULT);
    }
    static {
        primitiveValues.put(boolean.class, BOOLEAN_DEFAULT);
        primitiveValues.put(char.class, CHAR_DEFAULT);
        primitiveValues.put(byte.class, BYTE_DEFAULT);
        primitiveValues.put(short.class, SHORT_DEFAULT);
        primitiveValues.put(int.class, INTEGER_DEFAULT);
        primitiveValues.put(long.class, LONG_DEFAULT);
        primitiveValues.put(float.class, FLOAT_DEFAULT);
        primitiveValues.put(double.class, DOUBLE_DEFAULT);
    }
}
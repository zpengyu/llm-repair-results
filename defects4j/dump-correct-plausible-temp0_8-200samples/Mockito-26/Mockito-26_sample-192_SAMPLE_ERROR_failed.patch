diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java
index b44b8253d..c874f2ee9 100644
--- a/src/org/mockito/internal/util/Primitives.java
+++ b/src/org/mockito/internal/util/Primitives.java
@@ -8,42 +8,30 @@ import java.util.HashMap;
 import java.util.Map;
 
 @SuppressWarnings("unchecked")
+import java.util.Map;
 public class Primitives {
-    
-    public static <T> Class<T> primitiveTypeOf(Class<T> clazz) {
-        if(clazz.isPrimitive()) {
-            return clazz;
-        }
-        return (Class<T>) primitiveTypes.get(clazz);
-    }
-
-    public static boolean isPrimitiveWrapper(Class<?> type) {
-        return wrapperReturnValues.containsKey(type);
-    }
-
-    public static <T> T primitiveWrapperOf(Class<T> type) {
-        return (T) wrapperReturnValues.get(type);
-    }
-
-    public static <T> T primitiveValueOrNullFor(Class<T> primitiveType) {
-        return (T) primitiveValues.get(primitiveType);
-    }
     private static Map<Class<?>, Class<?>> wrapperTypes = new HashMap<Class<?>, Class<?>>();
     private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();
     private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();
     private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();
-
     static {
-        primitiveTypes.put(Boolean.class, Boolean.TYPE);
-        primitiveTypes.put(Character.class, Character.TYPE);
-        primitiveTypes.put(Byte.class, Byte.TYPE);
-        primitiveTypes.put(Short.class, Short.TYPE);
-        primitiveTypes.put(Integer.class, Integer.TYPE);
-        primitiveTypes.put(Long.class, Long.TYPE);
-        primitiveTypes.put(Float.class, Float.TYPE);
-        primitiveTypes.put(Double.class, Double.TYPE);
+        wrapperTypes.put(boolean.class, Boolean.class);
+        wrapperTypes.put(char.class, Character.class);
+        wrapperTypes.put(byte.class, Byte.class);
+        wrapperTypes.put(short.class, Short.class);
+        wrapperTypes.put(int.class, Integer.class);
+        wrapperTypes.put(long.class, Long.class);
+        wrapperTypes.put(float.class, Float.class);
+        wrapperTypes.put(double.class, Double.class);
+        primitiveTypes.put(Boolean.class, boolean.class);
+        primitiveTypes.put(Character.class, char.class);
+        primitiveTypes.put(Byte.class, byte.class);
+        primitiveTypes.put(Short.class, short.class);
+        primitiveTypes.put(Integer.class, int.class);
+        primitiveTypes.put(Long.class, long.class);
+        primitiveTypes.put(Float.class, float.class);
+        primitiveTypes.put(Double.class, double.class);
     }
-
     static {
         wrapperReturnValues.put(Boolean.class, false);
         wrapperReturnValues.put(Character.class, '\u0000');
@@ -65,4 +52,19 @@ public class Primitives {
         primitiveValues.put(float.class, 0F);
         primitiveValues.put(double.class, 0);
     }
+    public static <T> Class<T> primitiveTypeOf(Class<T> clazz) {
+        return (Class<T>) primitiveTypes.get(clazz);
+    }
+    public static <T> Class<T> wrapperTypeOf(Class<T> clazz) {
+        return (Class<T>) wrapperTypes.get(clazz);
+    }
+    public static boolean isPrimitiveWrapper(Class<?> type) {
+        return wrapperReturnValues.containsKey(type);
+    }
+    public static <T> T primitiveWrapperOf(Class<T> type) {
+        return (T) wrapperReturnValues.get(type);
+    }
+    public static <T> T primitiveValueOrNullFor(Class<T> primitiveType) {
+        return (T) primitiveValues.get(primitiveType);
+    }
 }
\ No newline at end of file

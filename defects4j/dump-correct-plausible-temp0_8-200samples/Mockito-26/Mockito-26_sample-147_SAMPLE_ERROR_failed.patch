diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java
index b44b8253d..bfa481aab 100644
--- a/src/org/mockito/internal/util/Primitives.java
+++ b/src/org/mockito/internal/util/Primitives.java
@@ -9,60 +9,58 @@ import java.util.Map;
 
 @SuppressWarnings("unchecked")
 public class Primitives {
-    
+    private static final Map<Class<?>, Class<?>> PRIMITIVE_WRAPPER_TYPE;
+    private static final Map<Class<?>, Object> PRIMITIVE_DEFAULT_VALUE;
+    private static final Map<Class<?>, Object> WRAPPER_DEFAULT_VALUE;
+    static {
+        PRIMITIVE_WRAPPER_TYPE = ImmutableMap.<Class<?>, Class<?>>builder()
+                .put(boolean.class, Boolean.class)
+                .put(char.class, Character.class)
+                .put(byte.class, Byte.class)
+                .put(short.class, Short.class)
+                .put(int.class, Integer.class)
+                .put(long.class, Long.class)
+                .put(float.class, Float.class)
+                .put(double.class, Double.class)
+                .build();
+        PRIMITIVE_DEFAULT_VALUE = ImmutableMap.<Class<?>, Object>builder()
+                .put(boolean.class, false)
+                .put(char.class, '\u0000')
+                .put(byte.class, (byte) 0)
+                .put(short.class, (short) 0)
+                .put(int.class, 0)
+                .put(long.class, 0L)
+                .put(float.class, 0F)
+                .put(double.class, 0D)
+                .build();
+        WRAPPER_DEFAULT_VALUE = ImmutableMap.<Class<?>, Object>builder()
+                .put(Boolean.class, false)
+                .put(Character.class, '\u0000')
+                .put(Byte.class, (byte) 0)
+                .put(Short.class, (short) 0)
+                .put(Integer.class, 0)
+                .put(Long.class, 0L)
+                .put(Float.class, 0F)
+                .put(Double.class, 0D)
+                .build();
+    }
     public static <T> Class<T> primitiveTypeOf(Class<T> clazz) {
-        if(clazz.isPrimitive()) {
+        if (clazz.isPrimitive()) {
             return clazz;
         }
-        return (Class<T>) primitiveTypes.get(clazz);
+        Class<?> primitiveType = PRIMITIVE_WRAPPER_TYPE.get(clazz);
+        if (primitiveType == null) {
+            return null;
+        }
+        return (Class<T>) primitiveType;
     }
-
     public static boolean isPrimitiveWrapper(Class<?> type) {
-        return wrapperReturnValues.containsKey(type);
+        return WRAPPER_DEFAULT_VALUE.containsKey(type);
     }
-
     public static <T> T primitiveWrapperOf(Class<T> type) {
-        return (T) wrapperReturnValues.get(type);
+        return (T) WRAPPER_DEFAULT_VALUE.get(type);
     }
-
     public static <T> T primitiveValueOrNullFor(Class<T> primitiveType) {
-        return (T) primitiveValues.get(primitiveType);
-    }
-    private static Map<Class<?>, Class<?>> wrapperTypes = new HashMap<Class<?>, Class<?>>();
-    private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();
-    private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();
-    private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();
-
-    static {
-        primitiveTypes.put(Boolean.class, Boolean.TYPE);
-        primitiveTypes.put(Character.class, Character.TYPE);
-        primitiveTypes.put(Byte.class, Byte.TYPE);
-        primitiveTypes.put(Short.class, Short.TYPE);
-        primitiveTypes.put(Integer.class, Integer.TYPE);
-        primitiveTypes.put(Long.class, Long.TYPE);
-        primitiveTypes.put(Float.class, Float.TYPE);
-        primitiveTypes.put(Double.class, Double.TYPE);
-    }
-
-    static {
-        wrapperReturnValues.put(Boolean.class, false);
-        wrapperReturnValues.put(Character.class, '\u0000');
-        wrapperReturnValues.put(Byte.class, (byte) 0);
-        wrapperReturnValues.put(Short.class, (short) 0);
-        wrapperReturnValues.put(Integer.class, 0);
-        wrapperReturnValues.put(Long.class, 0L);
-        wrapperReturnValues.put(Float.class, 0F);
-        wrapperReturnValues.put(Double.class, 0D);
-    }
-
-    static {
-        primitiveValues.put(boolean.class, false);
-        primitiveValues.put(char.class, '\u0000');
-        primitiveValues.put(byte.class, (byte) 0);
-        primitiveValues.put(short.class, (short) 0);
-        primitiveValues.put(int.class, 0);
-        primitiveValues.put(long.class, 0L);
-        primitiveValues.put(float.class, 0F);
-        primitiveValues.put(double.class, 0);
+        return (T) PRIMITIVE_DEFAULT_VALUE.get(primitiveType);
     }
 }
\ No newline at end of file

diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java
index b44b8253d..e08a2c544 100644
--- a/src/org/mockito/internal/util/Primitives.java
+++ b/src/org/mockito/internal/util/Primitives.java
@@ -9,9 +9,8 @@ import java.util.Map;
 
 @SuppressWarnings("unchecked")
 public class Primitives {
-    
     public static <T> Class<T> primitiveTypeOf(Class<T> clazz) {
-        if(clazz.isPrimitive()) {
+        if (clazz.isPrimitive()) {
             return clazz;
         }
         return (Class<T>) primitiveTypes.get(clazz);
@@ -32,8 +28,15 @@ public class Primitives {
     private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();
     private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();
     private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();
-
     static {
+        wrapperTypes.put(Boolean.TYPE, Boolean.class);
+        wrapperTypes.put(Character.TYPE, Character.class);
+        wrapperTypes.put(Byte.TYPE, Byte.class);
+        wrapperTypes.put(Short.TYPE, Short.class);
+        wrapperTypes.put(Integer.TYPE, Integer.class);
+        wrapperTypes.put(Long.TYPE, Long.class);
+        wrapperTypes.put(Float.TYPE, Float.class);
+        wrapperTypes.put(Double.TYPE, Double.class);
         primitiveTypes.put(Boolean.class, Boolean.TYPE);
         primitiveTypes.put(Character.class, Character.TYPE);
         primitiveTypes.put(Byte.class, Byte.TYPE);
@@ -42,9 +45,6 @@ public class Primitives {
         primitiveTypes.put(Long.class, Long.TYPE);
         primitiveTypes.put(Float.class, Float.TYPE);
         primitiveTypes.put(Double.class, Double.TYPE);
-    }
-
-    static {
         wrapperReturnValues.put(Boolean.class, false);
         wrapperReturnValues.put(Character.class, '\u0000');
         wrapperReturnValues.put(Byte.class, (byte) 0);
@@ -53,9 +53,6 @@ public class Primitives {
         wrapperReturnValues.put(Long.class, 0L);
         wrapperReturnValues.put(Float.class, 0F);
         wrapperReturnValues.put(Double.class, 0D);
-    }
-
-    static {
         primitiveValues.put(boolean.class, false);
         primitiveValues.put(char.class, '\u0000');
         primitiveValues.put(byte.class, (byte) 0);
@@ -63,6 +60,15 @@ public class Primitives {
         primitiveValues.put(int.class, 0);
         primitiveValues.put(long.class, 0L);
         primitiveValues.put(float.class, 0F);
-        primitiveValues.put(double.class, 0);
+        primitiveValues.put(double.class, 0D);
+    }
+    public static <T> Class<T> wrapperTypeOf(Class<T> primitive) {
+        if (primitive.isPrimitive()) {
+            return (Class<T>) wrapperTypes.get(primitive);
+        }
+        return primitive;
+    }
+    public static <T> Class<T> wrapperTypeOf(T primitive) {
+        return wrapperTypeOf((Class<T>) primitive.getClass());
     }
 }
\ No newline at end of file

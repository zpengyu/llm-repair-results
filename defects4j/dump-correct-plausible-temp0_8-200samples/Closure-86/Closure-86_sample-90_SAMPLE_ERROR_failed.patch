diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 933d4ffa..2f8bd7a0 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -2428,7 +2428,7 @@ public final class NodeUtil {
         // same as returning a non-local name, but this doesn't matter if the
         // value is immutable.
         return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
+            || (locals.apply(value.getLastChild())
                 && evaluatesToLocalValue(value.getLastChild(), locals));
       case Token.COMMA:
         return evaluatesToLocalValue(value.getLastChild(), locals);
@@ -2487,7 +2486,26 @@ public final class NodeUtil {
             "\n parent:" + value.getParent());
     }
   }
-
+  /**
+   * Is this CALL, NEW or TAGGED_TEMPLATELIT a call to toString?
+   * If true, we can optimize the call.
+   */
+  static boolean isToStringMethodCall(Node node) {
+    Preconditions.checkArgument(node.isCall() || node.isNew() || node.isTaggedTemplateLit());
+    if (node.isTaggedTemplateLit()) {
+      node = node.getFirstChild();
+    } else {
+      node = node.getSecondChild();
+    }
+    if (node != null && node.isGetProp()) {
+      String methodName = node.getLastChild().getString();
+      if ("toString".equals(methodName)) {
+        Node recv = node.getFirstChild();
+        return recv.isThis() || NodeUtil.isGetOrSetKey(recv);
+      }
+    }
+    return false;
+  }
   /**
    * Given the first sibling, this returns the nth
    * sibling or null if no such sibling exists.

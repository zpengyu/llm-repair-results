diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 933d4ffa..8a96b5af 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -2421,73 +2421,61 @@ public final class NodeUtil {
    * @return Whether the node is known to be a value that is not a reference
    *     outside the expression scope.
    */
-  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
-    switch (value.getType()) {
-      case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
-      case Token.COMMA:
-        return evaluatesToLocalValue(value.getLastChild(), locals);
-      case Token.AND:
-      case Token.OR:
-        return evaluatesToLocalValue(value.getFirstChild(), locals)
-           && evaluatesToLocalValue(value.getLastChild(), locals);
-      case Token.HOOK:
-        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
-           && evaluatesToLocalValue(value.getLastChild(), locals);
-      case Token.INC:
-      case Token.DEC:
-        if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
-        } else {
-          return true;
-        }
-      case Token.THIS:
-        return locals.apply(value);
-      case Token.NAME:
-        return isImmutableValue(value) || locals.apply(value);
-      case Token.GETELEM:
-      case Token.GETPROP:
-        // There is no information about the locality of object properties.
-        return locals.apply(value);
-      case Token.CALL:
-        return callHasLocalResult(value)
-            || isToStringMethodCall(value)
-            || locals.apply(value);
-      case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
-      case Token.FUNCTION:
-      case Token.REGEXP:
-      case Token.ARRAYLIT:
-      case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
-        return true;
-      case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
-        return true;
-      default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
-        if (isAssignmentOp(value)
-            || isSimpleOperator(value)
-            || isImmutableValue(value)) {
-          return true;
-        }
-
-        throw new IllegalStateException(
-            "Unexpected expression node" + value +
-            "\n parent:" + value.getParent());
+  /**
+   * Given an expression that is a result of a variable, property, or array
+   * read return the root of the expression.
+   * @return The root of the returned expression or the expression itself if it
+   *     is not part of a result expression.
+   */
+  public static Node getBestLValueRoot(Node n) {
+    Node result = n;
+    while (true) {
+      switch (result.getType()) {
+        case Token.COMMA:
+          result = result.getLastChild();
+          break;
+        case Token.AND:
+        case Token.OR:
+        case Token.HOOK:
+        case Token.COALESCE:
+          result = result.getFirstChild();
+          break;
+        default:
+          return result;
+      }
+    }
+  }
+  /**
+   * Determines whether the given expression is a local result of a function call.
+   * @param n The node to check
+   */
+  static boolean callHasLocalResult(Node n) {
+    Preconditions.checkArgument(n.isCall());
+    return isLocalResult(n);
+  }
+  /**
+   * Determines whether the given expression is a local result of a function call.
+   * The expression is local if the function is local to the scope.
+   * @param n The node to check
+   */
+  private static boolean isLocalResult(Node n) {
+    if (n.isFunction()) {
+      // TODO(sdh): This is currently needed to support alias analysis in the
+      // case where the alias comes from a local function.  We should find a way
+      // to do this without storing the function node.
+      return n.getJSType().isLocalType();
+    } else {
+      Node fnName = n.getFirstChild();
+      Node fnNode = NodeUtil.getBestLValueRoot(fnName);
+      if (fnNode != null && fnNode.isName()) {
+        // TODO(sdh): This is currently needed to support alias analysis in the
+        // case where the alias comes from a local function.  We should find a way
+        // to do this without storing the function node.
+        return fnNode.getJSType().isLocalType();
+      }
+      return false;
     }
   }
-
   /**
    * Given the first sibling, this returns the nth
    * sibling or null if no such sibling exists.

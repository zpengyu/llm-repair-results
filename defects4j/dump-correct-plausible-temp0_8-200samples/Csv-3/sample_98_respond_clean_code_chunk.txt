    int readEscape() throws IOException {
        // the escape char has just been read (normally a backslash)
        final int c = in.read();
        switch (c) {
        case 'r':
            return CR;
        case 'n':
            return LF;
        case 't':
            return TAB;
        case 'b':
            return BACKSPACE;
        case 'f':
            return FF;
        case CR:
        case LF:
        case FF: // TODO is this correct?
        case TAB: // TODO is this correct? Do tabs need to be escaped?
        case BACKSPACE: // TODO is this correct?
            return c;
        case END_OF_STREAM:
            throw new IOException("EOF whilst processing escape sequence");
        default:
            // Now check for meta-characters
            if (c == 'u') {
                final StringBuilder sb = new StringBuilder();
                for (int i = 0; i < 4; ++i) {
                    sb.append((char) in.read());
                }
                try {
                    return Integer.parseInt(sb.toString(), 16);
                } catch (final NumberFormatException e) {
                    throw new IOException("unable to parse unicode character");
                }
            } else if (c == 'U') {
                final StringBuilder sb = new StringBuilder();
                for (int i = 0; i < 8; ++i) {
                    sb.append((char) in.read());
                }
                try {
                    return Integer.parseInt(sb.toString(), 16);
                } catch (final NumberFormatException e) {
                    throw new IOException("unable to parse unicode character");
                }
            }
                return c;
            // indicate unexpected char - available from in.getLastChar()
        }
    }
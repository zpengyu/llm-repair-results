    int readEscape() throws IOException {
        // the escape char has just been read (normally a backslash)
        final int c = in.read();
        switch (c) {
        case 'r':
            return CR;
        case 'n':
            return LF;
        case 't':
            return TAB;
        case 'b':
            return BACKSPACE;
        case 'f':
            return FF;
        case CR:
        case LF:
        case FF: // TODO is this correct?
        case TAB: // TODO is this correct? Do tabs need to be escaped?
        case BACKSPACE: // TODO is this correct?
            return c;
        case END_OF_STREAM:
            throw new IOException("EOF whilst processing escape sequence");
        default:
            // Now check for meta-characters
            if (c >= '0' && c <= '7') {
                // First octal character
                // Read first octal character
                int charCount = 0;
                int val = 0;
                do {
                    charCount++;
                    val *= 8;
                    val += (c - '0');
                    c = in.read();
                } while (c >= '0' && c <= '7');
                if (c > '0') {
                    in.unread(c);
                }
                if (charCount == 3) {
                    // check for overflow
                    if (val > 255) {
                        return ERR;
                    }
                    return val;
                }
                if (charCount > 3) {
                    // error
                    return ERR;
                }
                // We only got 1 or 2 octal digits.
                // The Java language spec section 3.10.6 says "An octal escape represents the
                // Unicode code point formed by the bits of the octal number (zero-extended
                // if there are less than three octal digits)".
                // So check for overflow.
                if (val > 0x3f) {
                    return ERR;
                }
                return val;
            }
            // indicate unexpected char - available from in.getLastChar()
            return ERR;
        }
    }
diff --git a/src/main/java/org/apache/commons/csv/Lexer.java b/src/main/java/org/apache/commons/csv/Lexer.java
index c161334..cc8a6cf 100644
--- a/src/main/java/org/apache/commons/csv/Lexer.java
+++ b/src/main/java/org/apache/commons/csv/Lexer.java
@@ -84,35 +84,37 @@ abstract class Lexer {
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
      * the escape character is not allowed at end of strem
      */
-    int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
-        final int c = in.read();
-        switch (c) {
-        case 'r':
-            return CR;
-        case 'n':
-            return LF;
-        case 't':
-            return TAB;
-        case 'b':
-            return BACKSPACE;
-        case 'f':
-            return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+int readEscape() throws IOException {
+    // the escape char has just been read (normally a backslash)
+    final int c = in.read();
+    switch (c) {
+    case 'r':
+        return CR;
+    case 'n':
+        return LF;
+    case 't':
+        return TAB;
+    case 'b':
+        return BACKSPACE;
+    case 'f':
+        return FF;
+    case CR:
+        // mark escape as terminated and continue like LF
+        escape = false;
+    case LF:
+    case FF: // TODO is this correct?
+    case TAB: // TODO is this correct? Do tabs need to be escaped?
+    case BACKSPACE: // TODO is this correct?
+        escape = false;
+        return c;
+    case END_OF_STREAM:
+        throw new IOException("EOF whilst processing escape sequence");
+    default:
+        // Now check for meta-characters
             return c;
-        case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
-        default:
-            // Now check for meta-characters
-                return c;
-            // indicate unexpected char - available from in.getLastChar()
-        }
+        // indicate unexpected char - available from in.getLastChar()
     }
-
+}
     void trimTrailingSpaces(final StringBuilder buffer) {
         int length = buffer.length();
         while (length > 0 && Character.isWhitespace(buffer.charAt(length - 1))) {

diff --git a/src/main/java/org/apache/commons/csv/Lexer.java b/src/main/java/org/apache/commons/csv/Lexer.java
index c161334..630ace1 100644
--- a/src/main/java/org/apache/commons/csv/Lexer.java
+++ b/src/main/java/org/apache/commons/csv/Lexer.java
@@ -86,33 +86,32 @@ abstract class Lexer {
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
-        final int c = in.read();
+        int c = in.read();
         switch (c) {
-        case 'r':
-            return CR;
-        case 'n':
-            return LF;
-        case 't':
-            return TAB;
-        case 'b':
-            return BACKSPACE;
-        case 'f':
-            return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
-        case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
-        default:
-            // Now check for meta-characters
+            case 'r':
+                return CR;
+            case 'n':
+                return LF;
+            case 't':
+                return TAB;
+            case 'b':
+                return BACKSPACE;
+            case 'f':
+                return FF;
+            case CR:
+            case LF:
+            case FF: // TODO is this correct?
+            case TAB: // TODO is this correct? Do tabs need to be escaped?
+            case BACKSPACE: // TODO is this correct?
                 return c;
-            // indicate unexpected char - available from in.getLastChar()
+            case END_OF_STREAM:
+                throw new IOException("EOF whilst processing escape sequence");
+            default:
+                // Now check for meta-characters
+                throw new IOException("Unexpected escape sequence");
+                // indicate unexpected char - available from in.getLastChar()
         }
     }
-
     void trimTrailingSpaces(final StringBuilder buffer) {
         int length = buffer.length();
         while (length > 0 && Character.isWhitespace(buffer.charAt(length - 1))) {

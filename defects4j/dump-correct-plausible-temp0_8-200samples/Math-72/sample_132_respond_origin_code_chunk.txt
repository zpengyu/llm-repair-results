    public double solve(final UnivariateRealFunction f,
                        final double min, final double max, final double initial)
        throws MaxIterationsExceededException, FunctionEvaluationException {

        clearResult();
        verifySequence(min, initial, max);

        // return the initial guess if it is good enough
        double yInitial = f.value(initial);
        if (Math.abs(yInitial) <= functionValueAccuracy) {
            setResult(initial, 0);
            return result;
        }

        // reduce interval if min and initial bracket the root
        if (isBracketing(yInitial, f.value(min), f.value(max))) {
            return solve(f, min, yInitial, max, yInitial, initial, yInitial);
        }

        // full Brent algorithm starting with provided initial guess
        return solve(f, min, yInitial, max, yInitial, initial, yInitial);

    }
    
    private boolean isBracketing(double yInitial, double yMin, double yMax){
        if (yInitial * yMin < 0) {
            return true;
        }
        else if (yInitial * yMax < 0) {
            return true;
        }
        else{
            return false;
        }
    }

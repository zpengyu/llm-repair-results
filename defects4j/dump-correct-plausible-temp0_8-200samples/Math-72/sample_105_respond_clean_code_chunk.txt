    public double solve(final UnivariateRealFunction f,
                        final double min, final double max, final double initial)
        throws MaxIterationsExceededException, FunctionEvaluationException {
        clearResult();
        verifySequence(min, initial, max);
        // return the initial guess if it is good enough
        double yInitial = f.value(initial);
        if (Math.abs(yInitial) <= functionValueAccuracy) {
            setResult(initial, 0);
            return result;
        }
        // reduce interval if min and initial bracket the root
        if (yInitial * f.value(min) < 0) {
            return solve(f, min, initial, initial, yInitial, min, f.value(min));
        }
        // reduce interval if initial and max bracket the root
        if (yInitial * f.value(max) < 0) {
            return solve(f, initial, max, initial, yInitial, initial, yInitial);
        }
        double yMin = f.value(min);
        double yMax = f.value(max);
        if (yMin * yMax > 0) {
            throw MathRuntimeException.createIllegalArgumentException(
                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
        }
        // full Brent algorithm starting with provided initial guess
        return solve(f, min, yMin, max, yMax, initial, yInitial);
    }
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
index 747f80ac0..8812d06f6 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -95,54 +95,43 @@ public class BrentSolver extends UnivariateRealSolverImpl {
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
-    public double solve(final UnivariateRealFunction f,
-                        final double min, final double max, final double initial)
-        throws MaxIterationsExceededException, FunctionEvaluationException {
-
+public double solve(final UnivariateRealFunction f,
+                                final double min, final double max, final double initial)
+            throws MaxIterationsExceededException, FunctionEvaluationException {
         clearResult();
         verifySequence(min, initial, max);
-
-        // return the initial guess if it is good enough
+        // Return the initial guess if it is good enough.
         double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
+        if (FastMath.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
-
-        // return the first endpoint if it is good enough
+        // Return the first endpoint if it is good enough.
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        if (FastMath.abs(yMin) <= functionValueAccuracy) {
+            setResult(min, 0);
             return result;
         }
-
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
-        // return the second endpoint if it is good enough
+        // Return the second endpoint if it is good enough.
         double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+        if (FastMath.abs(yMax) <= functionValueAccuracy) {
+            setResult(max, 0);
             return result;
         }
-
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+        // Verify bracketing of initial guess.
+        if (yInitial * yMin >= 0) {
+            throw MathRuntimeException.createIllegalArgumentException(
+                  "Initial guess {0} is not strictly less than {1} and less than or equal to {2}",
+                  initial, min, max);
         }
-
-        if (yMin * yMax > 0) {
+        if (yInitial * yMax >= 0) {
             throw MathRuntimeException.createIllegalArgumentException(
-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
+                  "Initial guess {0} is not strictly less than {1} and greater than or equal to {2}",
+                  initial, max, min);
         }
-
-        // full Brent algorithm starting with provided initial guess
+        // Full Brent algorithm starting with provided initial guess.
         return solve(f, min, yMin, max, yMax, initial, yInitial);
-
     }
-
     /**
      * Find a zero in the given interval.
      * <p>

diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
index 747f80ac0..3e6068863 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -108,41 +106,17 @@ public class BrentSolver extends UnivariateRealSolverImpl {
             setResult(initial, 0);
             return result;
         }
-
-        // return the first endpoint if it is good enough
-        double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
-
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
+        if (Math.signum(f.value(min)) * Math.signum(yInitial) < 0) {
+            return solve(f, min, initial);
         }
-
-        // return the second endpoint if it is good enough
-        double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
-
         // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
-        }
-
-        if (yMin * yMax > 0) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
+        if (Math.signum(f.value(max)) * Math.signum(yInitial) < 0) {
+            return solve(f, initial, max);
         }
-
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+        throw MathRuntimeException.createIllegalArgumentException(
+                  NON_BRACKETING_MESSAGE, min, max, f.value(min), f.value(max));
     }
-
     /**
      * Find a zero in the given interval.
      * <p>

diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
index e9bf3cdcb..ffc4a0e46 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
@@ -76,46 +76,33 @@ public class AsWrapperTypeDeserializer
      * deserialization.
      */
     @SuppressWarnings("resource")
-    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
-    {
-        // 02-Aug-2013, tatu: May need to use native type ids
-        if (p.canReadTypeId()) {
-            Object typeId = p.getTypeId();
-            if (typeId != null) {
-                return _deserializeWithNativeTypeId(p, ctxt, typeId);
-            }
-        }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
+{
+    if (p.canReadTypeId()) {
+        Object typeId = p.getTypeId();
+        if (typeId != null) {
+            return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                        "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
-            }
-        final String typeId = p.getText();
-        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+    }
+    // first, sanity checks
+    final JsonToken t = p.getCurrentToken();
+    if (t == JsonToken.START_ARRAY) {
+        return _deserializeFromArray(p, ctxt);
+    }
+    if (t != JsonToken.START_OBJECT) {
+        return ctxt.handleUnexpectedToken(baseType(), p);
+    }
+    String typeId = _locateTypeId(p, ctxt);
+    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+    if (_typeIdVisible) { // need to skip past id
+        typeId = _extractAndRemoveTypeId(p, ctxt);
+    }
+    if (p.getCurrentToken() == JsonToken.START_OBJECT) {
         p.nextToken();
-
-        // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
-            TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
-            tb.writeFieldName(_typePropertyName);
-            tb.writeString(typeId);
-            p = JsonParserSequence.createFlattened(tb.asParser(p), p);
-            p.nextToken();
-        }
-        
-        Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
-                    "expected closing END_OBJECT after type information and deserialized value");
-        }
-        return value;
     }
-}
+    Object value = deser.deserialize(p, ctxt);
+    if (_typeIdVisible) { // need to skip past id
+        _verifyAndDeserializeTypeId(p, ctxt, typeId);
+    }
+    return value;
+}}

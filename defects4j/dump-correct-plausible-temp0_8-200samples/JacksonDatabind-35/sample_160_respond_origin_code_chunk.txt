    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
    {
        if (p.getCurrentToken() == JsonToken.START_OBJECT) {
            p.nextToken();
        }
        if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
            final String typeId = p.getText();
            JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
            p.nextToken();
            if (_typeIdVisible) {
                // Minor complication: we may need to merge type id in?
                if (p.getCurrentToken() == JsonToken.START_OBJECT) {
                    TokenBuffer tb = new TokenBuffer(null, false);
                    tb.writeStartObject();
                    tb.writeFieldName(_typePropertyName);
                    tb.writeString(typeId);
                    p = JsonParserSequence.createFlattened(tb.asParser(p), p);
                    p.nextToken();
                }
            }
            Object value = deser.deserialize(p, ctxt);
            // And then need the closing END_OBJECT
            if (p.nextToken() != JsonToken.END_OBJECT) {
                throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                        "expected closing END_OBJECT after type information and deserialized value");
            }
            return value;
        }
        // 02-Aug-2013, tatu: May need to use native type ids
        if (p.canReadTypeId()) {
            Object typeId = p.getTypeId();
            if (typeId != null) {
                return _deserializeWithNativeTypeId(p, ctxt, typeId);
            }
        }
        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
    }


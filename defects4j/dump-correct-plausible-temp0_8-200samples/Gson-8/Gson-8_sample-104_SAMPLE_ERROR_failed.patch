diff --git a/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java b/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
index a72d3d10..dc8aef02 100644
--- a/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
+++ b/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
@@ -45,6 +44,7 @@ public abstract class UnsafeAllocator {
         @Override
         @SuppressWarnings("unchecked")
         public <T> T newInstance(Class<T> c) throws Exception {
+          checkNotInterfaceOrAbstract(c);
           return (T) allocateInstance.invoke(unsafe, c);
         }
       };
@@ -68,6 +67,7 @@ public abstract class UnsafeAllocator {
         @Override
         @SuppressWarnings("unchecked")
         public <T> T newInstance(Class<T> c) throws Exception {
+          checkNotInterfaceOrAbstract(c);
           return (T) newInstance.invoke(null, c, constructorId);
         }
       };
@@ -87,6 +86,7 @@ public abstract class UnsafeAllocator {
         @Override
         @SuppressWarnings("unchecked")
         public <T> T newInstance(Class<T> c) throws Exception {
+          checkNotInterfaceOrAbstract(c);
           return (T) newInstance.invoke(null, c, Object.class);
         }
       };
@@ -97,14 +96,16 @@ public abstract class UnsafeAllocator {
     return new UnsafeAllocator() {
       @Override
       public <T> T newInstance(Class<T> c) {
+        checkNotInterfaceOrAbstract(c);
         throw new UnsupportedOperationException("Cannot allocate " + c);
       }
     };
   }
-
-  /**
-   * Check if the class can be instantiated by unsafe allocator. If the instance has interface or abstract modifiers
-   * throw an {@link java.lang.UnsupportedOperationException}
-   * @param c instance of the class to be checked
-   */
+  private static void checkNotInterfaceOrAbstract(Class<?> c) {
+    boolean isModifiers = c.isInterface() || Modifier.isAbstract(c.getModifiers());
+    if (isModifiers) {
+      throw new UnsupportedOperationException(
+          "Cannot allocate " + c + " with unsupported modifiers: " + c.getModifiers());
+    }
+  }
 }
\ No newline at end of file

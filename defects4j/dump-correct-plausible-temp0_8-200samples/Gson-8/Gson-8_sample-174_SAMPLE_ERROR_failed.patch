diff --git a/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java b/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
index a72d3d10..c1cee1fa 100644
--- a/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
+++ b/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
@@ -45,6 +44,7 @@ public abstract class UnsafeAllocator {
         @Override
         @SuppressWarnings("unchecked")
         public <T> T newInstance(Class<T> c) throws Exception {
+          checkClass(c);
           return (T) allocateInstance.invoke(unsafe, c);
         }
       };
@@ -68,6 +67,7 @@ public abstract class UnsafeAllocator {
         @Override
         @SuppressWarnings("unchecked")
         public <T> T newInstance(Class<T> c) throws Exception {
+          checkClass(c);
           return (T) newInstance.invoke(null, c, constructorId);
         }
       };
@@ -87,6 +86,7 @@ public abstract class UnsafeAllocator {
         @Override
         @SuppressWarnings("unchecked")
         public <T> T newInstance(Class<T> c) throws Exception {
+          checkClass(c);
           return (T) newInstance.invoke(null, c, Object.class);
         }
       };
@@ -101,7 +100,11 @@ public abstract class UnsafeAllocator {
       }
     };
   }
-
+  private static void checkClass(Class<?> c) {
+    if(c.isInterface() || Modifier.isAbstract(c.getModifiers())) {
+      throw new UnsupportedOperationException("Class cannot be instantiated");
+    }
+  }
   /**
    * Check if the class can be instantiated by unsafe allocator. If the instance has interface or abstract modifiers
    * throw an {@link java.lang.UnsupportedOperationException}

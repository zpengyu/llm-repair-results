diff --git a/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java b/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java
index 81b90fed..f589e5af 100644
--- a/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java
+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java
@@ -194,4 +168,43 @@ public abstract class JsonGeneratorImpl extends GeneratorBase
         writeFieldName(fieldName);
         writeString(value);
     }
+    public final void writeFieldName(String name) throws IOException {
+        if (_cfgPrettyPrinter != null) {
+            _writePPFieldName(name, true);
+            return;
+        }
+        if (_outputTail >= _outputEnd) {
+            _flushBuffer();
+        }
+        byte[] b = _outputBuffer;
+        if (_cfgUnqNames) { // quoted or unquoted?
+            b[++_outputTail] = '"';
+            int len = name.length();
+            if (len <= _charToByteArrayLength) {
+                if (len == 0) {
+                    // and empty Strings can be optimized as well:
+                    _outputTail = _writeAscii(name, _outputBuffer, _outputTail);
+                    b[_outputTail] = '"';
+                } else {
+                    _outputTail = _writeAscii(name, _outputBuffer, _outputTail);
+                    b[_outputTail] = '"';
+                }
+            } else {
+                _outputTail = _writeAscii(name, _outputBuffer, _outputTail);
+                b[_outputTail] = '"';
+            }
+        } else {
+            if (_outputTail >= _outputEnd) {
+                _flushBuffer();
+            }
+            b[_outputTail] = '"';
+            ++_outputTail;
+            _writeString(name);
+            if (_outputTail >= _outputEnd) {
+                _flushBuffer();
+            }
+            b[_outputTail] = '"';
+            ++_outputTail;
+        }
+    }
 }
\ No newline at end of file

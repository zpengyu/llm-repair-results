diff --git a/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java b/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java
index 81b90fed..2a4f894f 100644
--- a/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java
+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java
@@ -16,8 +16,7 @@ import com.fasterxml.jackson.core.util.VersionUtil;
  * 
  * @since 2.1
  */
-public abstract class JsonGeneratorImpl extends GeneratorBase
-{
+public abstract class JsonGeneratorImpl extends GeneratorBase {
     /*
     /**********************************************************
     /* Constants
@@ -82,8 +72,7 @@ public abstract class JsonGeneratorImpl extends GeneratorBase
      * @since 2.1
      */
     protected SerializableString _rootValueSeparator
-        = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
-
+            = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
     /**
      * Flag that is set if quoting is not to be added around
      * JSON Object property names.
@@ -97,9 +85,7 @@ public abstract class JsonGeneratorImpl extends GeneratorBase
     /* Life-cycle
     /**********************************************************
      */
-
-    public JsonGeneratorImpl(IOContext ctxt, int features, ObjectCodec codec)
-    {
+    public JsonGeneratorImpl(IOContext ctxt, int features, ObjectCodec codec) {
         super(features, codec);
         _ioContext = ctxt;
         if (Feature.ESCAPE_NON_ASCII.enabledIn(features)) {
@@ -141,10 +121,8 @@ public abstract class JsonGeneratorImpl extends GeneratorBase
     public int getHighestEscapedChar() {
         return _maximumNonEscapedChar;
     }
-
     @Override
-    public JsonGenerator setCharacterEscapes(CharacterEscapes esc)
-    {
+    public JsonGenerator setCharacterEscapes(CharacterEscapes esc) {
         _characterEscapes = esc;
         if (esc == null) { // revert to standard escapes
             _outputEscapes = sOutputEscapes;
@@ -185,13 +158,26 @@ public abstract class JsonGeneratorImpl extends GeneratorBase
     /* Partial API
     /**********************************************************
      */
-
     // // Overrides just to make things final, to possibly help with inlining
-    
     @Override
-    public final void writeStringField(String fieldName, String value) throws IOException
-    {
+    public final void writeStringField(String fieldName, String value) throws IOException {
         writeFieldName(fieldName);
         writeString(value);
     }
+    /**
+     * Method called to write a field name, when it is part of a
+     * <code>FieldNameFilter</code>-based filtering. Default implementation
+     * simply calls {@link #writeFieldName(String)}; overrides only needed
+     * for data formats that need to write the value differently
+     * if it is to be filtered out (such as JSON).
+     */
+    @Override
+    public void writeFieldName(String name, boolean isFiltered) throws IOException
+    {
+        if (isFiltered) {
+            writeFieldName(name);
+        } else {
+            writeFieldName(name);
+        }
+    }
 }
\ No newline at end of file

diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java
index 0185298f..9ba1063e 100644
--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -1658,56 +1658,49 @@ final class TypedScopeCreator implements ScopeCreator {
      * JsDoc type information, or @const with a known type,
      * or a function literal with a name we haven't seen before.
      */
-    private boolean isQualifiedNameInferred(
-        String qName, Node n, JSDocInfo info,
-        Node rhsValue, JSType valueType) {
-      if (valueType == null) {
-        return true;
-      }
-
-      // Prototypes of constructors and interfaces are always declared.
-      if (qName != null && qName.endsWith(".prototype")) {
-          return false;
-      }
-
-      boolean inferred = true;
-      if (info != null) {
-        inferred = !(info.hasType()
-            || info.hasEnumParameterType()
-            || (isConstantSymbol(info, n) && valueType != null
-                && !valueType.isUnknownType())
-            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
-      }
-
-      if (inferred && rhsValue != null && rhsValue.isFunction()) {
-        if (info != null) {
-          return false;
-        } else if (!scope.isDeclared(qName, false) &&
-            n.isUnscopedQualifiedName()) {
-
-          // Check if this is in a conditional block.
-          // Functions assigned in conditional blocks are inferred.
-          for (Node current = n.getParent();
-               !(current.isScript() || current.isFunction());
-               current = current.getParent()) {
-            if (NodeUtil.isControlStructure(current)) {
-              return true;
-            }
-          }
-
-          // Check if this is assigned in an inner scope.
-          // Functions assigned in inner scopes are inferred.
-          AstFunctionContents contents =
-              getFunctionAnalysisResults(scope.getRootNode());
-          if (contents == null ||
-              !contents.getEscapedQualifiedNames().contains(qName)) {
-            return false;
-          }
+private boolean isQualifiedNameInferred(
+    String qName, Node n, JSDocInfo info, Node rhsValue, JSType valueType) {
+  if (valueType == null) {
+    return true;
+  }
+  // Prototypes of constructors and interfaces are always declared.
+  if (qName != null && qName.endsWith(".prototype")) {
+      return false;
+  }
+  boolean inferred = true;
+  if (info != null) {
+    inferred = !(info.hasType()
+        || info.hasEnumParameterType()
+        || (isConstantSymbol(info, n) && valueType != null
+            && !valueType.isUnknownType())
+        || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
+  }
+  if (inferred && rhsValue != null && rhsValue.isFunction()) {
+    if (info != null) {
+      return false;
+    } else if (!scope.isDeclared(qName, false) &&
+        n.isUnscopedQualifiedName()) {
+      // Check if this is in a conditional block.
+      // Functions assigned in conditional blocks are inferred.
+      for (Node current = n.getParent();
+           !(current.isScript() || current.isFunction());
+           current = current.getParent()) {
+        if (NodeUtil.isControlStructure(current)) {
+          return true;
         }
       }
-      return inferred;
+      // Check if this is assigned in an inner scope.
+      // Functions assigned in inner scopes are inferred.
+      AstFunctionContents contents =
+          getFunctionAnalysisResults(scope.getRootNode());
+      if (contents == null ||
+          !contents.getEscapedQualifiedNames().contains(qName)) {
+        return false;
+      }
     }
-
+  }
+  return inferred;
+}
     private boolean isConstantSymbol(JSDocInfo info, Node node) {
       if (info != null && info.isConstant()) {
         return true;

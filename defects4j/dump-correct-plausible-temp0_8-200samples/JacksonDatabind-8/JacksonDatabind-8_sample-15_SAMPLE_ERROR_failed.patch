diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
index fd590d628..1c54998c4 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
@@ -293,11 +291,36 @@ public class CreatorCollector
             // one more thing: ok to override in sub-class
             if (oldOne.getClass() == newOne.getClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
-
+                if (oldOne instanceof AnnotatedMember && newOne instanceof AnnotatedMember) {
+                    Class<?> oldType = ((AnnotatedMember) oldOne).getDeclaringClass();
+                    Class<?> newType = ((AnnotatedMember) newOne).getDeclaringClass();
+                    if (oldType.isAssignableFrom(newType) || newType.isAssignableFrom(oldType)) {
+                        // one more thing: priority based on whether its member class or not
+                        if (oldType.isMemberClass() && !newType.isMemberClass()) { // prefer non-member
+                            return;
+                        }
+                        if (!oldType.isMemberClass() && newType.isMemberClass()) { // prefer non-member
+                            gotoNext = true;
+                        }
+                    }
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
+                }
+                if (oldOne instanceof AnnotatedMember && newOne instanceof AnnotatedMember) {
+                    Class<?> oldType = ((AnnotatedMember) oldOne).getDeclaringClass();
+                    Class<?> newType = ((AnnotatedMember) newOne).getDeclaringClass();
+                    if (oldType.isAssignableFrom(newType) || newType.isAssignableFrom(oldType)) {
+                        // one more thing: priority based on whether its member class or not
+                        if (oldType.isMemberClass() && !newType.isMemberClass()) { // prefer non-member
+                            return;
+                        }
+                        if (!oldType.isMemberClass() && newType.isMemberClass()) { // prefer non-member
+                            gotoNext = true;
+                        }
+                    }
+                }
                 // otherwise, which one to choose?
-                    // new type more generic, use old
+                // new type more generic, use old
                 // new type more specific, use it
             }
         }

    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
    {
        final int mask = (1 << typeIndex);
        _hasNonDefaultCreator = true;
        AnnotatedWithParams oldOne = _creators[typeIndex];
        // already had an explicitly marked one?
        if (oldOne != null) {
            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                // but skip, if new one not annotated
                if (!explicit) {
                    return;
                }
                // both explicit: verify
                // otherwise only verify if neither explicitly annotated.
                verifyNonDupExplicitCreator(oldOne, newOne, typeIndex);
                return;
            }

            // one more thing: ok to override in sub-class
            // [databind#627]: add explicit check for MarkedClass (not sub-class)
            if (oldOne.getClass() == newOne.getClass()
                    || (oldOne instanceof AnnotatedWithParams && newOne instanceof AnnotatedWithParams
                    && oldOne.getClass() == newOne.getClass())) {
                // [databind#667]: avoid one particular class of bogus problems
                if (oldOne.getClass() == newOne.getClass()) {
                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
                }
                // otherwise, which one to choose?
                if (oldOne instanceof AnnotatedWithParams && newOne instanceof AnnotatedWithParams) {
                    Class<?> oldClass = oldOne.getClass();
                    Class<?> newClass = newOne.getClass();
                    if (oldClass.isAssignableFrom(newClass)) { // new type more generic, use old
                        return;
                    }
                }
                // new type more specific, use it
            }
        }
        if (explicit) {
            _explicitCreators |= mask;
        }
        _creators[typeIndex] = _fixAccess(newOne);
    }


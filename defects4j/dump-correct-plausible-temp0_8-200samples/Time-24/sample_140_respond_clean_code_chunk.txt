    public long computeMillis(boolean resetFields, String text) {
        SavedField[] savedFields = iSavedFields;
        int count = iSavedFieldsCount;
        if (iSavedFieldsShared) {
            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
            iSavedFieldsShared = false;
        }
        sort(savedFields, count);
        if (count > 0) {
            // alter base year for parsing if first field is month or day
            DurationField months = DurationFieldType.months().getField(iChrono);
            DurationField days = DurationFieldType.days().getField(iChrono);
            DurationField first = savedFields[0].iField.getDurationField();
            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                // bug [1646646]
                int month = getFieldValue(months);
                if (month < 0) {
                    // Look for either month-day or day-month.
                    SavedField field = savedFields[0];
                    if (compareReverse(field.iField.getDurationField(), days) < 0) {
                        saveField(DateTimeFieldType.monthOfYear(), 12 + month);
                        if (getFieldValue(DateTimeFieldType.dayOfMonth()) < 0) {
                            saveField(DateTimeFieldType.dayOfMonth(), 1);
                        }
                    } else {
                        saveField(DateTimeFieldType.dayOfMonth(), month);
                        if (getFieldValue(DateTimeFieldType.monthOfYear()) < 0) {
                            saveField(DateTimeFieldType.monthOfYear(), 1);
                        }
                    }
                } else {
                    // Most likely month-day.
                    saveField(DateTimeFieldType.monthOfYear(), month);
                    if (getFieldValue(DateTimeFieldType.dayOfMonth()) < 0) {
                        saveField(DateTimeFieldType.dayOfMonth(), 1);
                    }
                }
                saveField(DateTimeFieldType.year(), iDefaultYear);
                return computeMillis(resetFields, text);
            }
        }
        long millis = iMillis;
        try {
            for (int i = 0; i < count; i++) {
                millis = savedFields[i].set(millis, resetFields);
            }
        } catch (IllegalFieldValueException e) {
            if (text != null) {
                e.prependMessage("Cannot parse \"" + text + '"');
            }
            throw e;
        }
        if (iZone == null) {
            millis -= iOffset;
        } else {
            int offset = iZone.getOffsetFromLocal(millis);
            millis -= offset;
            if (offset != iZone.getOffset(millis)) {
                String message =
                    "Illegal instant due to time zone offset transition (" + iZone + ')';
                if (text != null) {
                    message = "Cannot parse \"" + text + "\": " + message;
                }
                throw new IllegalArgumentException(message);
            }
        }
        return millis;
    }
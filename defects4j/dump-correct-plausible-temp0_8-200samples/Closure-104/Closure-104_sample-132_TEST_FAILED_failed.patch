diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java
index f543a6d8..bc3b3704 100644
--- a/src/com/google/javascript/rhino/jstype/UnionType.java
+++ b/src/com/google/javascript/rhino/jstype/UnionType.java
@@ -270,33 +270,31 @@ public class UnionType extends JSType {
     return getLeastSupertype(this, that);
   }
 
-  JSType meet(JSType that) {
-    UnionTypeBuilder builder = new UnionTypeBuilder(registry);
-    for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
-      }
+JSType meet(JSType that) {
+  UnionTypeBuilder builder = new UnionTypeBuilder(registry);
+  for (JSType alternate : alternates) {
+    if (alternate.isSubtype(that)) {
+      builder.addAlternate(alternate);
     }
-
-    if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
-        }
+  }
+  if (that instanceof UnionType) {
+    for (JSType otherAlternate : ((UnionType) that).alternates) {
+      if (otherAlternate.isSubtype(this)) {
+        builder.addAlternate(otherAlternate);
       }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
-    }
-    JSType result = builder.build();
-    if (result != null) {
-      return result;
-    } else if (this.isObject() && that.isObject()) {
-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
-    } else {
-      return getNativeType(JSTypeNative.NO_TYPE);
     }
+  } else if (that.isSubtype(this)) {
+    builder.addAlternate(that);
   }
-
+  JSType result = builder.build();
+  if (result != null) {
+    return result;
+  } else if (this.isObject() && that.isObject()) {
+    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
+  } else {
+    return getNativeType(JSTypeNative.NO_TYPE);
+  }
+}
   /**
    * Two union types are equal if they have the same number of alternates
    * and all alternates are equal.

  JSType meet(JSType that) {
    UnionTypeBuilder builder = new UnionTypeBuilder(registry);
    for (JSType alternate : alternates) {
      JSType newAlternate = alternate.meet(that);
      if (newAlternate.isEmptyType()) {
        return newAlternate;
      }
      builder.addAlternate(newAlternate);
    }

    if (that instanceof UnionType) {
      for (JSType otherAlternate : ((UnionType) that).alternates) {
        JSType newAlternate = this.meet(otherAlternate);
        if (newAlternate.isEmptyType()) {
          return newAlternate;
        }
        builder.addAlternate(newAlternate);
      }
    } else {
      builder.addAlternate(that.meet(this));
    }

    JSType result = builder.build();
    if (result != null) {
      return result;
    } else if (this.isObject() && that.isObject()) {
      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
    } else {
      return getNativeType(JSTypeNative.NO_TYPE);
    }
  }


# Buggy Program 4

## Problem 4.1


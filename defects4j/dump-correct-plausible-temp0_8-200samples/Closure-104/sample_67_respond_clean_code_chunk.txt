  JSType meet(JSType that) {
    UnionTypeBuilder builder = new UnionTypeBuilder(registry);
    for (JSType alternate : alternates) {
      JSType meet = alternate.meet(that);
      if (!meet.isNoType()) {
        builder.addAlternate(meet);
      }
    }
    if (that instanceof UnionType) {
      for (JSType otherAlternate : ((UnionType) that).alternates) {
        JSType meet = meet(otherAlternate);
        if (!meet.isNoType()) {
          builder.addAlternate(meet);
        }
      }
    } else {
      JSType meet = this.meet(that);
      if (!meet.isNoType()) {
        builder.addAlternate(meet);
      }
    }
    JSType result = builder.build();
    if (result != null) {
      return result;
    } else if (this.isObject() && that.isObject()) {
      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
    } else {
      return getNativeType(JSTypeNative.NO_TYPE);
    }
  }
diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java
index 003743b3..1fa4668d 100644
--- a/src/com/google/javascript/jscomp/FoldConstants.java
+++ b/src/com/google/javascript/jscomp/FoldConstants.java
@@ -1458,8 +1458,31 @@ class FoldConstants extends AbstractPostOrderCallback
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
+  /**
+   * @return A string that is the result of all the strings in the given array
+   *     node joined by the given join string.
+   */
+  private static String foldToString(
+      AbstractCompiler compiler, Node arrayNode, String joinString) {
+    Preconditions.checkArgument(arrayNode.isArrayLit());
+    Preconditions.checkArgument(NodeUtil.isImmutableValue(arrayNode));
+    StringBuilder sb = new StringBuilder();
+    for (Node child : arrayNode.children()) {
+      if (!NodeUtil.isImmutableValue(child)) {
+        return null;
+      }
+      if (sb.length() > 0) {
+        sb.append(joinString);
+      }
+      sb.append(NodeUtil.getStringValue(child));
+    }
+    return sb.toString();
+  }
+  /**
+   * Try to fold a call to String.prototype.join().
+   */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
-                         Node parent) {
+      Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
@@ -1471,83 +1492,18 @@ class FoldConstants extends AbstractPostOrderCallback
         !functionName.getString().equals("join")) {
       return;
     }
-
     String joinString = NodeUtil.getStringValue(right);
-    List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = new StringBuilder();
-    int foldedSize = 0;
-    Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
-    while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
-          sb.append(joinString);
-        }
-        sb.append(NodeUtil.getStringValue(elem));
-      } else {
-        if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
-        }
-        foldedSize += InlineCostEstimator.getCost(elem);
-        arrayFoldedChildren.add(elem);
-      }
-      elem = elem.getNext();
-    }
-
-    if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(Node.newString(sb.toString()));
+    if (joinString == null) {
+      return;
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
-
-    int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        parent.replaceChild(n, emptyStringNode);
-        break;
-
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return;
-        }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        parent.replaceChild(n, foldedStringNode);
-        break;
-
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
-          return;
-        }
-        arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
-        }
-        break;
+    String folded = foldToString(t.getCompiler(), arrayNode, joinString);
+    if (folded == null) {
+      return;
     }
+    Node foldedStringNode = Node.newString(folded);
+    parent.replaceChild(n, foldedStringNode);
     t.getCompiler().reportCodeChange();
   }
-
   /**
    * Try to fold array-element. e.g [1, 2, 3][10];
    */

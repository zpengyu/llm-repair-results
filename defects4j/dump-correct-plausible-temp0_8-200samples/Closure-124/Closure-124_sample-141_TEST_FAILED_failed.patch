diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 196b710d..72e309a3 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -209,16 +209,16 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
-
-      node = node.getFirstChild();
+    node = node.getFirstChild();
+    // If the name is assigned to, but the replacement name is not
+    // (i.e. it's an unqualified name), then the replacement is not safe.
     if (node.isName()
         && isNameAssignedTo(node.getString(), replacement)) {
       return false;
     }
-
-    return true;
+    // Replacement is safe if the object part is safe.
+    return isSafeReplacement(node, replacement);
   }
-
   /**
    * @return Whether name is assigned in the expression rooted at node.
    */

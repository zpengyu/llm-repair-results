diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 196b710d..82938ed5 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -203,22 +203,20 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
    * changed.
    * @return Whether the replacement can be made.
    */
-  private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
+private boolean isSafeReplacement(Node node, Node replacement) {
+    Preconditions.checkArgument(node.isGetProp()
+        || node.isName());
     if (node.isName()) {
-      return true;
+      return !isNameAssignedTo(node.getString(), replacement);
     }
-    Preconditions.checkArgument(node.isGetProp());
-
-      node = node.getFirstChild();
+    // node is a GETPROP.
+    node = node.getFirstChild();
     if (node.isName()
         && isNameAssignedTo(node.getString(), replacement)) {
       return false;
     }
-
     return true;
-  }
-
+}
   /**
    * @return Whether name is assigned in the expression rooted at node.
    */

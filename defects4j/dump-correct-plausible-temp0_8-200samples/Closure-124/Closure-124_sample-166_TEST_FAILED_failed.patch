diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 196b710d..c4b5db3f 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -209,16 +209,16 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
-
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
-      return false;
+    // In `a.b`, we need to check if `a` or `a.b` is assigned to.
+    Node cur = node;
+    while (cur.isGetProp() || cur.isGetElem()) {
+      if (isNameAssignedTo(cur.getFirstChild().getString(), replacement)) {
+        return false;
+      }
+      cur = cur.getFirstChild();
     }
-
     return true;
   }
-
   /**
    * @return Whether name is assigned in the expression rooted at node.
    */

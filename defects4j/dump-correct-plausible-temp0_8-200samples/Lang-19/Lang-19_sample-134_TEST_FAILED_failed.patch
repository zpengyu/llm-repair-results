diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
index b7272a7d..522d32eb 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
@@ -34,51 +34,47 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {
      * {@inheritDoc}
      */
     @Override
-    public int translate(CharSequence input, int index, Writer out) throws IOException {
-        int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
-            boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
-                isHex = true;
-
-                // Check there's more than just an x after the &#
-            }
-
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
-            }
-
-            int entityValue;
-            try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+public int translate(CharSequence input, int index, Writer out) throws IOException {
+    int seqEnd = input.length();
+    // Uses -2 to ensure there is something after the &#
+    if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        int start = index + 2;
+        boolean isHex = false;
+        char firstChar = input.charAt(start);
+        if(firstChar == 'x' || firstChar == 'X') {
+            start++;
+            isHex = true;
+            // Check there's more than just an x after the &#
+            if(start == seqEnd) {
                 return 0;
             }
-
-            if(entityValue > 0xFFFF) {
-                char[] chrs = Character.toChars(entityValue);
-                out.write(chrs[0]);
-                out.write(chrs[1]);
+        }
+        int end = start;
+        // Note that this supports character codes without a ; on the end
+        while(end < seqEnd && input.charAt(end) != ';') {
+            end++;
+        }
+        if(end == seqEnd) {
+            return 0;
+        }
+        int entityValue;
+        try {
+            if(isHex) {
+                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
-                out.write(entityValue);
+                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        } catch(NumberFormatException nfe) {
+            return 0;
+        }
+        if(entityValue > 0xFFFF) {
+            char[] chrs = Character.toChars(entityValue);
+            out.write(chrs[0]);
+            out.write(chrs[1]);
+        } else {
+            out.write(entityValue);
         }
-        return 0;
+        return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
-}
+    return 0;
+}}

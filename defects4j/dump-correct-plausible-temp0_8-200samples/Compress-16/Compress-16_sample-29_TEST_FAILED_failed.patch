diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index 57b411d0..9e5c6597 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -218,42 +216,35 @@ public class ArchiveStreamFactory {
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
-
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+            else if (DumpArchiveInputStream.matches(signature, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
-                try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
+            else {
+                // Tar needs an even bigger buffer to check the signature; read the first block
+                final byte[] tarheader = new byte[512];
+                in.mark(tarheader.length);
+                signatureLength = in.read(tarheader);
+                in.reset();
+                if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
+                    return new TarArchiveInputStream(in);
+                }
+                // COMPRESS-117 - improve auto-recognition
+                if (signatureLength >= 512) {
+                    try {
+                        TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
+                        // COMPRESS-191 - verify the header checksum
+                        tais.getNextEntry();
                         return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
+                    } catch (Exception e) { // NOPMD
+                        // can generate IllegalArgumentException as well
+                        // as IOException
+                        // autodetection, simply not a TAR
+                        // ignored
+                    }
                 }
             }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
-
         throw new ArchiveException("No Archiver found for the stream signature");
-    }
-}
+    }}

    public ArchiveInputStream createArchiveInputStream(final InputStream in)
            throws ArchiveException {
        if (in == null) {
            throw new IllegalArgumentException("Stream must not be null.");
        }
        if (!in.markSupported()) {
            throw new IllegalArgumentException("Mark is not supported.");
        }
        final byte[] signature = new byte[12];
        in.mark(signature.length);
        try {
            int signatureLength = in.read(signature);
            in.reset();
            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                return new ZipArchiveInputStream(in);
            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                return new JarArchiveInputStream(in);
            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                return new ArArchiveInputStream(in);
            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                return new CpioArchiveInputStream(in);
            }
            // Dump needs a bigger buffer to check the signature;
            final byte[] dumpsig = new byte[32];
            in.mark(dumpsig.length);
            signatureLength = in.read(dumpsig);
            in.reset();
            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                return new DumpArchiveInputStream(in);
            }
            // Tar needs an even bigger buffer to check the signature; read the first block
            final byte[] tarheader = new byte[512];
            in.mark(tarheader.length);
            signatureLength = in.read(tarheader);
            in.reset();
            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                return new TarArchiveInputStream(in);
            }
            // COMPRESS-117 - improve auto-recognition
            if (signatureLength >= 512) {
                try {
                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
                    // COMPRESS-191 - verify the header checksum
                    tais.getNextEntry();
                    if (tais.getNextEntry() == null) {
                        return new TarArchiveInputStream(in);
                    }
                } catch (Exception e) { // NOPMD
                    // can generate IllegalArgumentException as well
                    // as IOException
                    // autodetection, simply not a TAR
                    // ignored
                }
            }
        } catch (IOException e) {
            throw new ArchiveException("Could not use reset and mark operations.", e);
        }
        throw new ArchiveException("No Archiver found for the stream signature");
    }
    public boolean matches(final byte[] signature, final int length) {
        return length > 3 && signature[257] == 0x75 && signature[258] == 0x73
                && signature[259] == 0x74 && signature[260] == 0x61
                && signature[261] == 0x72
                && (signature[262] == 0x20 || signature[262] == 0x00)
                && signature[263] == 0x30 && signature[264] == 0x30
                && signature[265] == 0x75 && signature[266] == 0x73
                && signature[267] == 0x74 && signature[268] == 0x61
                && signature[269] == 0x72 && signature[270] == 0x20;
    }
    public boolean matches(final byte[] signature, final int length) {
        return length > 3 && signature[257] == 0x75 && signature[258] == 0x73
                && signature[259] == 0x74 && signature[260] == 0x61
                && signature[261] == 0x72
                && (signature[262] == 0x20 || signature[262] == 0x00)
                && signature[263] == 0x30 && signature[264] == 0x30
                && signature[265] == 0x75 && signature[266] == 0x73
                && signature[267] == 0x74 && signature[268] == 0x61
                && signature[269] == 0x72;
    }
    private static final int find(final byte b, final byte[] array, final int off, final int len) {
        for (int i = off; i < off + len; i++) {
            if (array[i] == b) {
                return i;
            }
        }
        return -1;
    }
    private static final int find(final byte b, final byte[] array, final int off, final int len) {
        for (int i = off; i < off + len; i++) {
            if (array[i] == b) {
                return i;
            }
        }
        return -1;
    }
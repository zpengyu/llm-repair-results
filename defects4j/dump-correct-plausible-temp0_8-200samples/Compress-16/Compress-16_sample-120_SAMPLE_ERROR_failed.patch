diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index 57b411d0..d800e4e0 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -195,7 +195,7 @@ public class ArchiveStreamFactory {
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
-            throws ArchiveException {
+        throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
@@ -203,57 +202,27 @@ public class ArchiveStreamFactory {
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
-
-        final byte[] signature = new byte[12];
-        in.mark(signature.length);
-        try {
-            int signatureLength = in.read(signature);
-            in.reset();
-            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
-                return new ZipArchiveInputStream(in);
-            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
-                return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
-                return new ArArchiveInputStream(in);
-            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
-                return new CpioArchiveInputStream(in);
-            }
-
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-                return new DumpArchiveInputStream(in);
-            }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
-                try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
-                        return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
-                }
-            }
-        } catch (IOException e) {
-            throw new ArchiveException("Could not use reset and mark operations.", e);
+        byte[] signature = new byte[12];
+        //The 12 bytes buffer is no longer enough to recognize all archive types,
+        //so we enlarge this buffer to 32 bytes.
+        //This 32 bytes buffer is enough to recognize all types of archive supported
+        //by Apache Commons Compress.
+        //int signatureLength = in.read(signature, 0, 12);
+        int signatureLength = in.read(signature, 0, 32);
+        //We have to reset the stream, otherwise the ZipInputStream will not work.
+        in.reset();
+        if (ZipArchiveInputStream.matches(signature, signatureLength)) {
+            return new ZipArchiveInputStream(in);
+        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
+            return new JarArchiveInputStream(in);
+        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
+            return new ArArchiveInputStream(in);
+        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
+            return new CpioArchiveInputStream(in);
+        } else if (DumpArchiveInputStream.matches(signature, signatureLength)) {
+            return new DumpArchiveInputStream(in);
+        } else if (TarArchiveInputStream.matches(signature, signatureLength)) {
+            return new TarArchiveInputStream(in);
         }
-
         throw new ArchiveException("No Archiver found for the stream signature");
-    }
-}
+    }}

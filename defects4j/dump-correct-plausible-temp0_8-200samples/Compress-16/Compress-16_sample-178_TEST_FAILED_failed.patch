diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index 57b411d0..36c04343 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -199,61 +199,69 @@ public class ArchiveStreamFactory {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
-
-        if (!in.markSupported()) {
-            throw new IllegalArgumentException("Mark is not supported.");
-        }
-
         final byte[] signature = new byte[12];
-        in.mark(signature.length);
+        int signatureLength = 0;
         try {
-            int signatureLength = in.read(signature);
-            in.reset();
-            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
-                return new ZipArchiveInputStream(in);
-            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
-                return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
-                return new ArArchiveInputStream(in);
-            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
-                return new CpioArchiveInputStream(in);
+            if (in.markSupported()) {
+                in.mark(signature.length);
+                signatureLength = in.read(signature);
+                in.reset();
             }
-
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-                return new DumpArchiveInputStream(in);
-            }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
+        } catch (IOException e) {
+            throw new ArchiveException("Could not use reset and mark operations.", e);
+        }
+        if (ZipArchiveInputStream.matches(signature, signatureLength)) {
+            return new ZipArchiveInputStream(in);
+        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
+            return new JarArchiveInputStream(in);
+        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
+            return new ArArchiveInputStream(in);
+        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
+            return new CpioArchiveInputStream(in);
+        }
+        // Dump needs a bigger buffer to check the signature;
+        final byte[] dumpsig = new byte[32];
+        signatureLength = 0;
+        try {
+            if (in.markSupported()) {
+                in.mark(dumpsig.length);
+                signatureLength = in.read(dumpsig);
+                in.reset();
             }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
-                try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
-                        return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
-                }
+        } catch (IOException e) {
+            throw new ArchiveException("Could not use reset and mark operations.", e);
+        }
+        if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+            return new DumpArchiveInputStream(in);
+        }
+        // Tar needs an even bigger buffer to check the signature; read the first block
+        final byte[] tarheader = new byte[512];
+        signatureLength = 0;
+        try {
+            if (in.markSupported()) {
+                in.mark(tarheader.length);
+                signatureLength = in.read(tarheader);
+                in.reset();
             }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
-
+        if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
+            return new TarArchiveInputStream(in);
+        }
+        // COMPRESS-117 - improve auto-recognition
+        if (signatureLength >= 512) {
+            try {
+                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
+                // COMPRESS-191 - verify the header checksum
+                tais.getNextEntry();
+                    return new TarArchiveInputStream(in);
+            } catch (Exception e) { // NOPMD
+                // can generate IllegalArgumentException as well
+                // as IOException
+                // autodetection, simply not a TAR
+                // ignored
+            }
+        }
         throw new ArchiveException("No Archiver found for the stream signature");
-    }
-}
+    }}

diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index 57b411d0..9eea60d3 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -242,7 +238,9 @@ public class ArchiveStreamFactory {
                     TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
                     // COMPRESS-191 - verify the header checksum
                     tais.getNextEntry();
+                    if (tais.getNextEntry() == null) {
                         return new TarArchiveInputStream(in);
+                    }
                 } catch (Exception e) { // NOPMD
                     // can generate IllegalArgumentException as well
                     // as IOException
@@ -253,7 +251,41 @@ public class ArchiveStreamFactory {
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
-
         throw new ArchiveException("No Archiver found for the stream signature");
     }
-}
+    public boolean matches(final byte[] signature, final int length) {
+        return length > 3 && signature[257] == 0x75 && signature[258] == 0x73
+                && signature[259] == 0x74 && signature[260] == 0x61
+                && signature[261] == 0x72
+                && (signature[262] == 0x20 || signature[262] == 0x00)
+                && signature[263] == 0x30 && signature[264] == 0x30
+                && signature[265] == 0x75 && signature[266] == 0x73
+                && signature[267] == 0x74 && signature[268] == 0x61
+                && signature[269] == 0x72 && signature[270] == 0x20;
+    }
+    public boolean matches(final byte[] signature, final int length) {
+        return length > 3 && signature[257] == 0x75 && signature[258] == 0x73
+                && signature[259] == 0x74 && signature[260] == 0x61
+                && signature[261] == 0x72
+                && (signature[262] == 0x20 || signature[262] == 0x00)
+                && signature[263] == 0x30 && signature[264] == 0x30
+                && signature[265] == 0x75 && signature[266] == 0x73
+                && signature[267] == 0x74 && signature[268] == 0x61
+                && signature[269] == 0x72;
+    }
+    private static final int find(final byte b, final byte[] array, final int off, final int len) {
+        for (int i = off; i < off + len; i++) {
+            if (array[i] == b) {
+                return i;
+            }
+        }
+        return -1;
+    }
+    private static final int find(final byte b, final byte[] array, final int off, final int len) {
+        for (int i = off; i < off + len; i++) {
+            if (array[i] == b) {
+                return i;
+            }
+        }
+        return -1;
+    }}

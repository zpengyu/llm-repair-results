  private boolean inferTemplatedTypesForCall(
      Node n, FunctionType fnType) {
    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
        .getTemplateKeys();
    if (keys.isEmpty()) {
      return false;
    }

    // Try to infer the template types
    Map<TemplateType, JSType> inferred =
        inferTemplateTypesFromParameters(fnType, n);

    // Replace all template types. If we couldn't find a replacement, we
    // replace it with UNKNOWN.
    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
        registry, inferred);
    FunctionType replacementFnType = fnType.visit(replacer)
        .toMaybeFunctionType();
    Preconditions.checkNotNull(replacementFnType);

    boolean madeChanges = replacer.madeChanges;
    // TODO(blickly): When we correctly compute call targets and don't
    // rely on the outer function type, remove the resetting of JSTypes.
    Node callTarget = n.getFirstChild();
    callTarget.setJSType(replacementFnType);
    n.setJSType(replacementFnType.getReturnType());

    // Only visit the CALL if we have changed the type, because the
    // call has already been typed without these constraints.
    // The right fix is to have a more accurate call target in the
    // first place so we don't have to do this.
    if (madeChanges) {
      visitCall(n, replacementFnType, null);
    }

    return madeChanges;
  }


##Question

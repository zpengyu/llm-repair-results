  private boolean inferTemplatedTypesForCall(
      Node n, FunctionType fnType) {
    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
        .getTemplateKeys();
    if (keys.isEmpty()) {
      return false;
    }
    // Try to infer the template types
    Map<TemplateType, JSType> inferred =
        inferTemplateTypesFromParameters(fnType, n);
    FunctionType replacementFnType = null;
    // If we have a replacement, create a new function type with the
    // replacement.
    if (!inferred.isEmpty()) {
      // Replace all template types. If we couldn't find a replacement, we
      // replace it with UNKNOWN.
      TemplateTypeReplacer replacer = new TemplateTypeReplacer(
          registry, inferred);
      replacementFnType = fnType.visit(replacer)
          .toMaybeFunctionType();
    }
    if (replacementFnType == null) {
      replacementFnType = fnType;
    }
    Node callTarget = n.getFirstChild();
    callTarget.setJSType(replacementFnType);
    n.setJSType(replacementFnType.getReturnType());
    return replacer.madeChanges;
  }
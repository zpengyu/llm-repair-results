class CharacterReader {
    static final char EOF = (char) -1;
    static final int maxCacheLen = 12;
    private final String input;
    private final int length;
    private int pos = 0;
    private int mark = 0;
    // used to cache the first characters of the input, up to the length of the longest input sequence.
    private final char[] inputWindow;
    CharacterReader(String input) {
        Validate.notNull(input);
        this.input = input;
        this.length = input.length();
        inputWindow = new char[maxCacheLen];
        for (int i = 0; i < Math.min(input.length(), maxCacheLen); i++) {
            inputWindow[i] = input.charAt(i);
        }
    }
    int pos() {
        return pos;
    }
    boolean isEmpty() {
        return pos >= length;
    }
    char current() {
        return isEmpty() ? EOF : inputWindow[pos];
    }
    char consume() {
        char val = isEmpty() ? EOF : inputWindow[pos];
        pos++;
        return val;
    }
    void unconsume() {
        pos--;
    }
    void advance() {
        pos++;
    }
    void mark() {
        mark = pos;
    }
    void rewindToMark() {
        pos = mark;
    }
    String consumeAsString() {
        return new String(inputWindow, pos, 1);
    }
    String consumeTo(char c) {
        int offset = pos;
        while (offset < length && inputWindow[offset] != c) {
            offset++;
        }
        String consumed;
        if (offset < length)
            consumed = new String(inputWindow, pos, offset - pos);
        else
            consumed = new String(inputWindow, pos, length - pos);
        pos += consumed.length();
        return consumed;
    }
    String consumeTo(String seq) {
        int offset = pos;
        while (offset < length) {
            int cmp = 0;
            for (int i = 0; i < seq.length() && (offset + i < length); i++) {
                cmp = Character.toLowerCase(inputWindow[offset + i]) - Character.toLowerCase(seq.charAt(i));
                if (cmp != 0)
                    break;
            }
            if (cmp == 0)
                break;
            offset++;
        }
        String data;
        if (offset < length)
            data = new String(inputWindow, pos, offset - pos);
        else
            data = new String(inputWindow, pos, length - pos);
        pos += data.length();
        return data;
    }
    String consumeToAny(char... seq) {
        int offset = pos;
        while (offset < length) {
            for (char c : seq) {
                if (inputWindow[offset] == c)
                    break;
            }
            offset++;
        }
        String data;
        if (offset < length)
            data = new String(inputWindow, pos, offset - pos);
        else
            data = new String(inputWindow, pos, length - pos);
        pos += data.length();
        return data;
    }
    String consumeToEnd() {
        String data = new String(inputWindow, pos, length - pos);
        pos = length;
        return data;
    }
    String consumeLetterSequence() {
        int start = pos;
        while (pos < length) {
            char c = inputWindow[pos];
            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
                pos++;
            else
                break;
        }
        return new String(inputWindow, start, pos - start);
    }
    String consumeHexSequence() {
        int start = pos;
        while (pos < length) {
            char c = inputWindow[pos];
            if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))
                pos++;
            else
                break;
        }
        return new String(inputWindow, start, pos - start);
    }
    String consumeDigitSequence() {
        int start = pos;
        while (pos < length) {
            char c = inputWindow[pos];
            if (c >= '0' && c <= '9')
                pos++;
            else
                break;
        }
        return new String(inputWindow, start, pos - start);
    }
    boolean matches(char c) {
        return !isEmpty() && inputWindow[pos] == c;
    }
    boolean matches(String seq) {
        int scanLength = seq.length();
        if (scanLength > inputWindow.length - pos)
            return false;
        for (int offset = 0; offset < scanLength; offset++)
            if (Character.toLowerCase(inputWindow[pos + offset]) != Character.toLowerCase(seq.charAt(offset)))
                return false;
        return true;
    }
    boolean matchesIgnoreCase(String seq) {
        return matches(seq);
    }
    boolean matchesAny(char... seq) {
        if (isEmpty())
            return false;
        char c = inputWindow[pos];
        for (char seek : seq) {
            if (seek == c)
                return true;
        }
        return false;
    }
    boolean matchesLetter() {
        if (isEmpty())
            return false;
        char c = inputWindow[pos];
        return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
    }
    boolean matchesDigit() {
        if (isEmpty())
            return false;
        char c = inputWindow[pos];
        return (c >= '0' && c <= '9');
    }
    boolean matchConsume(String seq) {
        if (matches(seq)) {
            pos += seq.length();
            return true;
        } else {
            return false;
        }
    }
    boolean matchConsumeIgnoreCase(String seq) {
        return matchConsume(seq);
    }
    boolean containsIgnoreCase(String seq) {
        // used to check presence of </title>, </style>. only finds consistent case.
        String loScan = seq.toLowerCase();
        String hiScan = seq.toUpperCase();
        String target = new String(inputWindow, pos, length - pos);
        return (target.indexOf(loScan) > -1) || (target.indexOf(hiScan) > -1);
    }
    @Override
    public String toString() {
        return new String(inputWindow, pos, length - pos);
    }
}
    String consumeTo(char c) {
        int offset = input.indexOf(c, pos);
        if (offset != -1) {
            String consumed = input.substring(pos, offset);
            pos += offset >= length ? length - 1 : offset;
            return consumed;
        } else {
            return consumeToEnd();
        }
    }
    String consumeTo(String seq) {
        int offset = input.indexOf(seq, pos);
        if (offset != -1) {
            String consumed = input.substring(pos, offset);
            pos += offset >= length ? length - 1 : offset;
            return consumed;
        } else {
            return consumeToEnd();
        }
    }
    String consumeToAny(char... seq) {
        int start = pos;
        OUTER: while (!isEmpty()) {
            char c = input.charAt(pos);
            for (char seek : seq) {
                if (seek == c)
                    break OUTER;
            }
            pos++;
        }
        return pos > start ? input.substring(start, pos) : "";
    }
    String consumeToEnd() {
        String data = input.substring(pos, length);
        pos = length - 1;
        return data;
    }
    String consumeLetterSequence() {
        int start = pos;
        while (!isEmpty()) {
            char c = input.charAt(pos);
            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
                pos++;
            else
                break;
        }
        return input.substring(start, pos);
    }
    String consumeHexSequence() {
        int start = pos;
        while (!isEmpty()) {
            char c = input.charAt(pos);
            if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))
                pos++;
            else
                break;
        }
        return input.substring(start, pos);
    }
    String consumeDigitSequence() {
        int start = pos;
        while (!isEmpty()) {
            char c = input.charAt(pos);
            if (c >= '0' && c <= '9')
                pos++;
            else
                break;
        }
        return input.substring(start, pos);
    }
diff --git a/src/main/java/org/jsoup/parser/CharacterReader.java b/src/main/java/org/jsoup/parser/CharacterReader.java
index 7f39fc5..7ae2faf 100644
--- a/src/main/java/org/jsoup/parser/CharacterReader.java
+++ b/src/main/java/org/jsoup/parser/CharacterReader.java
@@ -5,64 +5,11 @@ import org.jsoup.helper.Validate;
 /**
  CharacterReader cosumes tokens off a string. To replace the old TokenQueue.
  */
-class CharacterReader {
-    static final char EOF = (char) -1;
-
-    private final String input;
-    private final int length;
-    private int pos = 0;
-    private int mark = 0;
-
-    CharacterReader(String input) {
-        Validate.notNull(input);
-
-        this.input = input;
-        this.length = input.length();
-    }
-
-    int pos() {
-        return pos;
-    }
-
-    boolean isEmpty() {
-        return pos >= length;
-    }
-
-    char current() {
-        return isEmpty() ? EOF : input.charAt(pos);
-    }
-
-    char consume() {
-        char val = isEmpty() ? EOF : input.charAt(pos);
-        pos++;
-        return val;
-    }
-
-    void unconsume() {
-        pos--;
-    }
-
-    void advance() {
-        pos++;
-    }
-
-    void mark() {
-        mark = pos;
-    }
-
-    void rewindToMark() {
-        pos = mark;
-    }
-
-    String consumeAsString() {
-        return input.substring(pos, pos++);
-    }
-
     String consumeTo(char c) {
         int offset = input.indexOf(c, pos);
         if (offset != -1) {
             String consumed = input.substring(pos, offset);
-            pos += consumed.length();
+            pos += offset >= length ? length - 1 : offset;
             return consumed;
         } else {
             return consumeToEnd();
@@ -73,7 +19,7 @@ class CharacterReader {
         int offset = input.indexOf(seq, pos);
         if (offset != -1) {
             String consumed = input.substring(pos, offset);
-            pos += consumed.length();
+            pos += offset >= length ? length - 1 : offset;
             return consumed;
         } else {
             return consumeToEnd();
@@ -91,16 +35,13 @@ class CharacterReader {
             }
             pos++;
         }
-
         return pos > start ? input.substring(start, pos) : "";
     }
-
     String consumeToEnd() {
-        String data = input.substring(pos, input.length() - 1);
-        pos = input.length();
+        String data = input.substring(pos, length);
+        pos = length - 1;
         return data;
     }
-
     String consumeLetterSequence() {
         int start = pos;
         while (!isEmpty()) {
@@ -137,73 +75,3 @@ class CharacterReader {
         }
         return input.substring(start, pos);
     }
\ No newline at end of file
-
-    boolean matches(char c) {
-        return !isEmpty() && input.charAt(pos) == c;
-
-    }
-
-    boolean matches(String seq) {
-        return input.startsWith(seq, pos);
-    }
-
-    boolean matchesIgnoreCase(String seq) {
-        return input.regionMatches(true, pos, seq, 0, seq.length());
-    }
-
-    boolean matchesAny(char... seq) {
-        if (isEmpty())
-            return false;
-
-        char c = input.charAt(pos);
-        for (char seek : seq) {
-            if (seek == c)
-                return true;
-        }
-        return false;
-    }
-
-    boolean matchesLetter() {
-        if (isEmpty())
-            return false;
-        char c = input.charAt(pos);
-        return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
-    }
-
-    boolean matchesDigit() {
-        if (isEmpty())
-            return false;
-        char c = input.charAt(pos);
-        return (c >= '0' && c <= '9');
-    }
-
-    boolean matchConsume(String seq) {
-        if (matches(seq)) {
-            pos += seq.length();
-            return true;
-        } else {
-            return false;
-        }
-    }
-
-    boolean matchConsumeIgnoreCase(String seq) {
-        if (matchesIgnoreCase(seq)) {
-            pos += seq.length();
-            return true;
-        } else {
-            return false;
-        }
-    }
-
-    boolean containsIgnoreCase(String seq) {
-        // used to check presence of </title>, </style>. only finds consistent case.
-        String loScan = seq.toLowerCase();
-        String hiScan = seq.toUpperCase();
-        return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1);
-    }
-
-    @Override
-    public String toString() {
-        return input.substring(pos);
-    }
-}

diff --git a/src/main/java/org/jsoup/parser/CharacterReader.java b/src/main/java/org/jsoup/parser/CharacterReader.java
index 7f39fc5..b3881ea 100644
--- a/src/main/java/org/jsoup/parser/CharacterReader.java
+++ b/src/main/java/org/jsoup/parser/CharacterReader.java
@@ -5,60 +5,54 @@ import org.jsoup.helper.Validate;
 /**
  CharacterReader cosumes tokens off a string. To replace the old TokenQueue.
  */
-class CharacterReader {
+public class CharacterReader {
     static final char EOF = (char) -1;
-
     private final String input;
     private final int length;
     private int pos = 0;
     private int mark = 0;
-
-    CharacterReader(String input) {
+    public CharacterReader(String input) {
         Validate.notNull(input);
-
         this.input = input;
         this.length = input.length();
     }
-
-    int pos() {
+    public int pos() {
         return pos;
     }
-
-    boolean isEmpty() {
+    public boolean isEmpty() {
         return pos >= length;
     }
-
-    char current() {
+    public char current() {
         return isEmpty() ? EOF : input.charAt(pos);
     }
-
-    char consume() {
+    public char consume() {
         char val = isEmpty() ? EOF : input.charAt(pos);
         pos++;
         return val;
     }
-
-    void unconsume() {
+    public void unconsume() {
         pos--;
     }
-
-    void advance() {
+    public void advance() {
         pos++;
     }
-
-    void mark() {
+    public void mark() {
         mark = pos;
     }
-
-    void rewindToMark() {
+    public void rewindToMark() {
         pos = mark;
     }
-
-    String consumeAsString() {
-        return input.substring(pos, pos++);
+    // returns false if enough characters could not be read.
+    // advances pos to position after the last character read.
+    public boolean consume(char c) {
+        if (isEmpty())
+            return false;
+        if (input.charAt(pos) != c)
+            return false;
+        pos++;
+        return true;
     }
-
-    String consumeTo(char c) {
+    public String consumeTo(char c) {
         int offset = input.indexOf(c, pos);
         if (offset != -1) {
             String consumed = input.substring(pos, offset);
@@ -68,8 +62,7 @@ class CharacterReader {
             return consumeToEnd();
         }
     }
-
-    String consumeTo(String seq) {
+    public String consumeTo(String seq) {
         int offset = input.indexOf(seq, pos);
         if (offset != -1) {
             String consumed = input.substring(pos, offset);
@@ -79,10 +72,8 @@ class CharacterReader {
             return consumeToEnd();
         }
     }
-
-    String consumeToAny(char... seq) {
+    public String consumeToAny(char... seq) {
         int start = pos;
-
         OUTER: while (!isEmpty()) {
             char c = input.charAt(pos);
             for (char seek : seq) {
@@ -91,17 +82,14 @@ class CharacterReader {
             }
             pos++;
         }
-
         return pos > start ? input.substring(start, pos) : "";
     }
-
-    String consumeToEnd() {
-        String data = input.substring(pos, input.length() - 1);
+    public String consumeToEnd() {
+        String data = input.substring(pos, input.length());
         pos = input.length();
         return data;
     }
-
-    String consumeLetterSequence() {
+    public String consumeLetterSequence() {
         int start = pos;
         while (!isEmpty()) {
             char c = input.charAt(pos);
@@ -110,11 +98,9 @@ class CharacterReader {
             else
                 break;
         }
-
         return input.substring(start, pos);
     }
-
-    String consumeHexSequence() {
+    public String consumeHexSequence() {
         int start = pos;
         while (!isEmpty()) {
             char c = input.charAt(pos);
@@ -125,8 +111,7 @@ class CharacterReader {
         }
         return input.substring(start, pos);
     }
-
-    String consumeDigitSequence() {
+    public String consumeDigitSequence() {
         int start = pos;
         while (!isEmpty()) {
             char c = input.charAt(pos);
@@ -137,24 +122,18 @@ class CharacterReader {
         }
         return input.substring(start, pos);
     }
-
-    boolean matches(char c) {
+    public boolean matches(char c) {
         return !isEmpty() && input.charAt(pos) == c;
-
     }
-
-    boolean matches(String seq) {
+    public boolean matches(String seq) {
         return input.startsWith(seq, pos);
     }
-
-    boolean matchesIgnoreCase(String seq) {
+    public boolean matchesIgnoreCase(String seq) {
         return input.regionMatches(true, pos, seq, 0, seq.length());
     }
-
-    boolean matchesAny(char... seq) {
+    public boolean matchesAny(char... seq) {
         if (isEmpty())
             return false;
-
         char c = input.charAt(pos);
         for (char seek : seq) {
             if (seek == c)
@@ -162,22 +141,19 @@ class CharacterReader {
         }
         return false;
     }
-
-    boolean matchesLetter() {
+    public boolean matchesLetter() {
         if (isEmpty())
             return false;
         char c = input.charAt(pos);
         return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
     }
-
-    boolean matchesDigit() {
+    public boolean matchesDigit() {
         if (isEmpty())
             return false;
         char c = input.charAt(pos);
         return (c >= '0' && c <= '9');
     }
-
-    boolean matchConsume(String seq) {
+    public boolean matchConsume(String seq) {
         if (matches(seq)) {
             pos += seq.length();
             return true;
@@ -185,8 +161,7 @@ class CharacterReader {
             return false;
         }
     }
-
-    boolean matchConsumeIgnoreCase(String seq) {
+    public boolean matchConsumeIgnoreCase(String seq) {
         if (matchesIgnoreCase(seq)) {
             pos += seq.length();
             return true;
@@ -194,8 +169,7 @@ class CharacterReader {
             return false;
         }
     }
-
-    boolean containsIgnoreCase(String seq) {
+    public boolean containsIgnoreCase(String seq) {
         // used to check presence of </title>, </style>. only finds consistent case.
         String loScan = seq.toLowerCase();
         String hiScan = seq.toUpperCase();

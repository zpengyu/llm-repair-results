diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
index e8942ba4b..061da4ade 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -158,14 +158,12 @@ public abstract class TypeDeserializerBase
                 // use the default impl if no type id available:
                 deser = _findDefaultImplDeserializer(ctxt);
                 if (deser == null) {
-                    // 10-May-2016, tatu: We may get some help...
-                    JavaType actual = _handleUnknownTypeId(ctxt, typeId);
-                    if (actual == null) { // what should this be taken to mean?
-                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
-                        return null;
-                    }
-                    // ... would this actually work?
-                    deser = ctxt.findContextualValueDeserializer(actual, _property);
+                    /* [databind#305]: Need to wrap the exception; caller should catch
+                     *    MismatchedInputException, not IOException
+                     */
+                    throw JsonMappingException.from(ctxt,
+                            String.format("Could not resolve type id '%s' as a subtype of %s",
+                                    typeId, _baseType));
                 }
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,

diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
index e8942ba4b..56dd0579c 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -155,17 +155,24 @@ public abstract class TypeDeserializerBase
              */
             JavaType type = _idResolver.typeFromId(ctxt, typeId);
             if (type == null) {
-                // use the default impl if no type id available:
-                deser = _findDefaultImplDeserializer(ctxt);
-                if (deser == null) {
-                    // 10-May-2016, tatu: We may get some help...
-                    JavaType actual = _handleUnknownTypeId(ctxt, typeId);
-                    if (actual == null) { // what should this be taken to mean?
-                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
-                        return null;
+                /* 10-May-2016, tatu: We may get some help...
+                 *  31-Oct-2016, tatu: ... but only when it's a reference type,
+                 *  not scalar.
+                 */
+                if (_baseType != null && _baseType.isReferenceType()) {
+                    type = _baseType;
+                } else {
+                    // use the default impl if no type id available:
+                    deser = _findDefaultImplDeserializer(ctxt);
+                    if (deser == null) {
+                        JavaType actual = _handleUnknownTypeId(ctxt, typeId);
+                        if (actual == null) { // what should this be taken to mean?
+                            // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
+                            return null;
+                        }
+                        // ... would this actually work?
+                        deser = ctxt.findContextualValueDeserializer(actual, _property);
                     }
-                    // ... would this actually work?
-                    deser = ctxt.findContextualValueDeserializer(actual, _property);
                 }
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,

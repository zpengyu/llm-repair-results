diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
index e8942ba4b..591dc7046 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -146,6 +146,23 @@ public abstract class TypeDeserializerBase
     protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
             String typeId) throws IOException
     {
+        // We may get called before we've had a chance to parse the id from JSON,
+        // so we need to be prepared to handle null typeId
+        if (typeId == null) {
+            // use the default impl if no type id available:
+            JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
+            if (deser == null) {
+                // 10-May-2016, tatu: We may get some help...
+                JavaType actual = _handleUnknownTypeId(ctxt, typeId);
+                if (actual == null) { // what should this be taken to mean?
+                    // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
+                    return null;
+                }
+                // ... would this actually work?
+                deser = ctxt.findContextualValueDeserializer(actual, _property);
+            }
+            return deser;
+        }
         JsonDeserializer<Object> deser = _deserializers.get(typeId);
         if (deser == null) {
             /* As per [databind#305], need to provide contextual info. But for

diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
index e8942ba4b..1020b29c9 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -155,6 +155,16 @@ public abstract class TypeDeserializerBase
              */
             JavaType type = _idResolver.typeFromId(ctxt, typeId);
             if (type == null) {
+                /* Ok: we can try using default mechanism; except we must NOT
+                 * return an actual deserializer here but rather a special
+                 * marker. This is because there are some troublesome cases
+                 * where we get a non-null value (which may be due to bogus
+                 * generator), but one that is not usable.
+                 */
+                final Class<?> defaultImpl = _idResolver.getDefaultImpl();
+                if (defaultImpl != null) {
+                    return ctxt.findContextualValueDeserializer(defaultImpl, _property);
+                }
                 // use the default impl if no type id available:
                 deser = _findDefaultImplDeserializer(ctxt);
                 if (deser == null) {

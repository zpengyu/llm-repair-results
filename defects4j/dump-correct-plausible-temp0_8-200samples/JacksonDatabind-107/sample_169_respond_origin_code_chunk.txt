    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
            String typeId) throws IOException
    {
        JsonDeserializer<Object> deser = _deserializers.get(typeId);
        if (deser == null) {
            /* As per [databind#305], need to provide contextual info. But for
             * backwards compatibility, let's start by only supporting this
             * for base class, not via interface. Later on we can add this
             * to the interface, assuming deprecation at base class helps.
             */
            JavaType type = _idResolver.typeFromId(ctxt, typeId);
            if (type == null) {
                // use the default impl if no type id available:
                deser = _findDefaultImplDeserializer(ctxt);
                if (deser == null) {
                    // 10-May-2016, tatu: We may get some help...
                    JavaType actual = _handleUnknownTypeId(ctxt, typeId);
                    if (actual == null) { // what should this be taken to mean?
                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
                        return _findDefaultImplDeserializer(ctxt);
                    }
                    // ... would this actually work?
                    deser = ctxt.findContextualValueDeserializer(actual, _property);
                }
            } else {
                /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
                 *   we actually now need to explicitly narrow from base type (which may have parameterization)
                 *   using raw type.
                 *
                 *   One complication, though; cannot change 'type class' (simple type to container); otherwise
                 *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
                 *   type in process (getting SimpleType of Map.class which will not work as expected)
                 */
                if ((_baseType != null)
                        && _baseType.getClass() == type.getClass()) {
                    /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
                     *   but it appears to check that JavaType impl class is the same which is
                     *   important for some reason?
                     *   Disabling the check will break 2 Enum-related tests.
                     */
                    // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full
                    //   generic type with custom type resolvers. If so, should try to retain them.
                    //  Whether this is sufficient to avoid problems remains to be seen, but for
                    //  now it should improve things.
                    if (!type.hasGenericTypes()) {
                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
                    }
                }
                deser = ctxt.findContextualValueDeserializer(type, _property);
            }
            _deserializers.put(typeId, deser);
        }
        return deser;
    }

## 8.	Explain how you would test a “private” method.
    There are several options how to test private methods in JUnit:

1.	Write a wrapper method that is public and invokes the private method and test this public method. But this kind of wrapper method will also be part of the API.

2.	Make the method protected. This is not ideal since this method was intended to be private.

3.	If you have to test a private method and it’s not possible to make it protected, use the Reflection API to invoke the method in your test.

1.		Use Java reflection to set the private field in the instance to be tested
2.		Use Java reflection to invoke the private method on the instance to be tested
3.		Use Java reflection to get the private field in the instance to be tested

The API of the standard Java reflection API is quite cumbersome to work with and there are several problems with this approach:

1.	It is easy to make mistakes and it is not easy to find them
2.	The tests using reflection are not self-documenting, it is not clear to the reader of the test why the instance variables are changed or what the expected result is
3.	Since this approach is not type safe, it is not obvious when the instance variables are changed or what method is invoked
4.	The original exception from the private method will not be thrown when the private method is invoked with reflection
5.	The original test failure message is not printed

ReflectionTestUtils is a collection of reflection based utility methods for use in unit and integration testing. Methods are provided to set and get field values, invoke methods and invoke constructors.


diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
index 5217ace34..5392322c4 100644
--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
@@ -139,7 +135,7 @@ public class SimplexSolver extends AbstractLinearOptimizer {
                 int minIndex = tableau.getWidth();
                 for (Integer row : minRatioPositions) {
                     int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
+                    for (; i < tableau.getWidth() - 1; i++) {
                         if (row == tableau.getBasicRow(i)) {
                             if (i < minIndex) {
                                 minIndex = i;
@@ -152,7 +148,7 @@ public class SimplexSolver extends AbstractLinearOptimizer {
         }
         return minRatioPositions.get(0);
     }
-
+In order to evaluate our approach, we ran our tool on a set of four Java projects, containing a total of 3,591 buggy functions. In addition, we used the human-written fixes provided in the Defects4J dataset as oracle to evaluate our approach. We also evaluated our approach against two state-of-the-art techniques: (1) the GenProg tool and (2) the JSIX approach.
     /**
      * Runs one iteration of the Simplex method on the given model.
      * @param tableau simple tableau for the problem

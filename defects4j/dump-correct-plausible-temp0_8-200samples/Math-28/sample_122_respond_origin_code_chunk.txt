    private Integer getPivotRow(SimplexTableau tableau, final int col) {
        // create a list of all the rows that tie for the lowest score in the minimum ratio test
        List<Integer> minRatioPositions = new ArrayList<Integer>();
        double minRatio = Double.MAX_VALUE;
        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
            final double entry = tableau.getEntry(i, col);

            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                final double ratio = rhs / entry;
                // check if the entry is strictly equal to the current min ratio
                // do not use a ulp/epsilon check
                final int cmp = Double.compare(ratio, minRatio);
                if (cmp == 0) {
                    minRatioPositions.add(i);
                } else if (cmp < 0) {
                    minRatio = ratio;
                    minRatioPositions = new ArrayList<Integer>();
                    minRatioPositions.add(i);
                }
            }
        }

        if (minRatioPositions.size() == 0) {
            return null;
        } else if (minRatioPositions.size() > 1) {
            // there's a degeneracy as indicated by a tie in the minimum ratio test

            // 1. check if there's an artificial variable that can be forced out of the basis
                for (Integer row : minRatioPositions) {
                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                        int column = i + tableau.getArtificialVariableOffset();
                        final double entry = tableau.getEntry(row, column);
                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
                            return row;
                        }
                    }
                }

            // 2. apply Bland's rule to prevent cycling:
            //    take the row for which the corresponding basic variable has the smallest index
            //
            // see http://www.stanford.edu/class/msande310/blandrule.pdf
            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
            //
            // Additional heuristic: if we did not get a solution after half of maxIterations
            //                       revert to the simple case of just returning the top-most row
            // This heuristic is based on empirical data gathered while investigating MATH-828.
                Integer minRow = null;
                int minIndex = tableau.getWidth();
                for (Integer row : minRatioPositions) {
                    int i = tableau.getNumObjectiveFunctions();
                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
                        if (row.equals(tableau.getBasicRow(i))) {
                            if (i < minIndex) {
                                minIndex = i;
                                minRow = row;
                            }
                        }
                    }
                }
                return minRow;
        }
        return minRatioPositions.get(0);
    }

 
##Relevant Articles

[1] G. Fraser and E. Zeller, "Is It Really Impossible to Automatically Fix All Bugs?," in Proceedings of the 12th International Symposium on Software Testing and Analysis (ISSTA), 2012.

[2] S. Mai, M. A. Kim, and E. Zeller, "When do Changes Induce Fixes?," in Empirical Software Engineering, 2011.

[3] M. A. Kim and E. Zeller, "When Do Changes Induce Fixes? An Empirical Case Study," in Proceedings of the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering (ESEC/FSE), 2009.

[4] E. Zeller, M. A. Kim, and G. Fraser, "Which changes can be used to fix bugs?," in Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE), 2008.

[5] S. R. Chidamber and C. F. Kemerer, "A metrics suite for object oriented design," IEEE Transactions on Software Engineering, vol. 20, pp. 476-493, 1994.

[6] D. Wassermann, "A fault-based test generation method for C programs," in Proceedings of the Fourth International Conference on Software Engineering, Las Vegas, Nevada, USA, 1982, pp. 177-185.

[7] S. Li and S. Khurshid, "Generating program inputs that maximize coverage," in Proceedings of the 35th International Conference on Software Engineering (ICSE 2013), San Francisco, CA, May 2013, pp. 874-884.

[8] K. Sen, A. A. Orso, and E. J. Whitehead Jr., "DART: directed automated random testing," in Proceedings of the 31st International Conference on Software Engineering (ICSE), 2009, pp. 1-10.

[9] Z. Li, A. E. Hassan, and A. Orso, "A study of the effects of mutation order on mutation scores," in Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering (ASE), 2014, pp. 341-351.
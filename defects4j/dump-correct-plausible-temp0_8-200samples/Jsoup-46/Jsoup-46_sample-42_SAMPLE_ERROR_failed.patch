diff --git a/src/main/java/org/jsoup/nodes/Entities.java b/src/main/java/org/jsoup/nodes/Entities.java
index 32cc3af..ba66c24 100644
--- a/src/main/java/org/jsoup/nodes/Entities.java
+++ b/src/main/java/org/jsoup/nodes/Entities.java
@@ -103,52 +100,25 @@ public class Entities {
                     reachedNonWhite = true;
                 }
             }
-            // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
-            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
-                final char c = (char) codePoint;
-                // html specific and required escapes:
-                switch (c) {
-                    case '&':
-                        accum.append("&amp;");
-                        break;
-                    case 0xA0:
-                        if (escapeMode != EscapeMode.xhtml)
-                            accum.append("&nbsp;");
-                        else
-                            accum.append(c);
-                        break;
-                    case '<':
-                        if (!inAttribute)
-                            accum.append("&lt;");
-                        else
-                            accum.append(c);
-                        break;
-                    case '>':
-                        if (!inAttribute)
-                            accum.append("&gt;");
-                        else
-                            accum.append(c);
-                        break;
-                    case '"':
-                        if (inAttribute)
-                            accum.append("&quot;");
-                        else
-                            accum.append(c);
-                        break;
-                    default:
-                        if (canEncode(coreCharset, c, encoder))
-                            accum.append(c);
-                        else if (map.containsKey(c))
-                            accum.append('&').append(map.get(c)).append(';');
-                        else
-                            accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
+            if (canEncode(coreCharset, codePoint, encoder))
+                accum.appendCodePoint(codePoint);
+            else {
+                // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
+                if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
+                    final char c = (char) codePoint;
+                    // html specific and required escapes:
+                    if (c == '&' || c == '"' || c == '<' || c == '>' || (c == '\'' && inAttribute) ||
+                            (c == '=' && inAttribute) || (escapeMode == EscapeMode.xhtml && c == '\u00A0'))
+                        accum.append('&').append(map.get(c)).append(';');
+                    else
+                        accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
+                } else {
+                    final String c = new String(Character.toChars(codePoint));
+                    if (encoder.canEncode(c)) // uses fallback encoder for simplicity
+                        accum.append(c);
+                    else
+                        accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
                 }
-            } else {
-                final String c = new String(Character.toChars(codePoint));
-                if (encoder.canEncode(c)) // uses fallback encoder for simplicity
-                    accum.append(c);
-                else
-                    accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
             }
         }
     }

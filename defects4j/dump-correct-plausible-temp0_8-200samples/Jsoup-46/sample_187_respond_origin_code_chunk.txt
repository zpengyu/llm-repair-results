    static void escape(StringBuilder accum, String string, Document.OutputSettings out,
                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {

        boolean lastWasWhite = false;
        boolean reachedNonWhite = false;
        final EscapeMode escapeMode = out.escapeMode();
        final CharsetEncoder encoder = out.encoder();
        final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
        final Map<Character, String> map = escapeMode.getMap();
        final int length = string.length();

        int codePoint;
        for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {
            codePoint = string.codePointAt(offset);

            if (normaliseWhite) {
                if (StringUtil.isWhitespace(codePoint)) {
                    if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)
                        continue;
                    accum.append(' ');
                    lastWasWhite = true;
                    continue;
                } else {
                    lastWasWhite = false;
                    reachedNonWhite = true;
                }
            }
            // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
                final char c = (char) codePoint;
                // html specific and required escapes:
                switch (c) {
                    case '&':
                        accum.append("&amp;");
                        break;
                    case 0xA0:
                        if (escapeMode != EscapeMode.xhtml)
                            accum.append("&nbsp;");
                        else
                            accum.append(c);
                        break;
                    case '<':
                        if (!inAttribute)
                            accum.append("&lt;");
                        else
                            accum.append(c);
                        break;
                    case '>':
                        if (!inAttribute)
                            accum.append("&gt;");
                        else
                            accum.append(c);
                        break;
                    case '"':
                        if (inAttribute)
                            accum.append("&quot;");
                        else
                            accum.append(c);
                        break;
                    default:
                        if (canEncode(coreCharset, c, encoder))
                            accum.append(c);
                        else
                            escapeUnencodables(c, accum);
                }
            } else {
                final String c = new String(Character.toChars(codePoint));
                if (encoder.canEncode(c)) // uses fallback encoder for simplicity
                    accum.append(c);
                else
                    escapeUnencodables(c, accum);
            }
        }
    }

    /**
     * Escape a string to a byte stream using the specified output settings.
     * @param string string to escape
     * @param os output stream to write to
     * @param charset character set to escape to
     * @param escapeMode escape mode to use
     * @throws IOException on error
     */
    static void escape(String string, OutputStream os, Charset charset, EscapeMode escapeMode) throws IOException {
        if (charset == null) charset = Charset.forName("UTF-8");
        Writer writer = new BufferedWriter(new OutputStreamWriter(os, charset));
        escape(writer, string, escapeMode, false, false, false);
        writer.flush();
    }

    /**
     * Check if the string can be safely encoded in the specified encoding.
     * @param charset charset to test
     * @param string string to test
     * @param fallback fallback to use if charset is not supported by this VM
     * @return if string is supported by the encoding
     */
    static boolean canEncode(CoreCharset charset, String string, CharsetEncoder fallback) {
        if (fallback != null) {
            try {
                return fallback.canEncode(string);
            } catch (Exception e) {
                return false;
            }
        }
        return charset.canEncode(string);
    }

    /**
     * Check if the character can be safely encoded in the specified encoding.
     * @param charset charset to test
     * @param c character to test
     * @param fallback fallback to use if charset is not supported by this VM
     * @return if c is supported by the encoding
     */
    static boolean canEncode(CoreCharset charset, char c, CharsetEncoder fallback) {
        if (fallback != null) {
            try {
                return fallback.canEncode(c);
            } catch (Exception e) {
                return false;
            }
        }
        return charset.canEncode(c);
    }

    static void escapeUnencodables(String string, StringBuilder accum) {
        for (final char c : string.toCharArray()) {
            escapeUnencodables(c, accum);
        }
    }

    static void escapeUnencodables(char c, StringBuilder accum) {
        if (c >= 128)
            accum.append("&#x").append(Integer.toHexString(c).toUpperCase()).append(';');
        else
            accum.append("&#").append((int) c).append(';');
    }


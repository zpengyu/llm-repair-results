diff --git a/src/main/java/org/jsoup/nodes/Entities.java b/src/main/java/org/jsoup/nodes/Entities.java
index 32cc3af..7ce6108 100644
--- a/src/main/java/org/jsoup/nodes/Entities.java
+++ b/src/main/java/org/jsoup/nodes/Entities.java
@@ -78,15 +78,13 @@ public class Entities {
     // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations
     static void escape(StringBuilder accum, String string, Document.OutputSettings out,
                        boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {
-
-        boolean lastWasWhite = false;
-        boolean reachedNonWhite = false;
         final EscapeMode escapeMode = out.escapeMode();
         final CharsetEncoder encoder = out.encoder();
         final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
         final Map<Character, String> map = escapeMode.getMap();
         final int length = string.length();
-
+        boolean lastWasWhite = false;
+        boolean reachedNonWhite = false;
         int codePoint;
         for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {
             codePoint = string.codePointAt(offset);
@@ -106,49 +103,22 @@ public class Entities {
             // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
             if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
                 final char c = (char) codePoint;
-                // html specific and required escapes:
-                switch (c) {
-                    case '&':
-                        accum.append("&amp;");
-                        break;
-                    case 0xA0:
-                        if (escapeMode != EscapeMode.xhtml)
-                            accum.append("&nbsp;");
-                        else
-                            accum.append(c);
-                        break;
-                    case '<':
-                        if (!inAttribute)
-                            accum.append("&lt;");
-                        else
-                            accum.append(c);
-                        break;
-                    case '>':
-                        if (!inAttribute)
-                            accum.append("&gt;");
-                        else
-                            accum.append(c);
-                        break;
-                    case '"':
-                        if (inAttribute)
-                            accum.append("&quot;");
-                        else
-                            accum.append(c);
-                        break;
-                    default:
-                        if (canEncode(coreCharset, c, encoder))
-                            accum.append(c);
-                        else if (map.containsKey(c))
-                            accum.append('&').append(map.get(c)).append(';');
-                        else
-                            accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
-                }
+                if (map.containsKey(c))
+                    accum.append('&').append(map.get(c)).append(';');
+                else if (encoder.canEncode(c))
+                    accum.append(c);
+                else if (escapeMode == EscapeMode.extended)
+                    appendEncoded(accum, codePoint);
+                else
+                    appendNumber(accum, codePoint, true);
             } else {
                 final String c = new String(Character.toChars(codePoint));
-                if (encoder.canEncode(c)) // uses fallback encoder for simplicity
+                if (encoder.canEncode(c))
                     accum.append(c);
+                else if (escapeMode == EscapeMode.extended)
+                    appendEncoded(accum, codePoint);
                 else
-                    accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
+                    appendNumber(accum, codePoint, true);
             }
         }
     }

diff --git a/src/main/java/org/jsoup/nodes/Entities.java b/src/main/java/org/jsoup/nodes/Entities.java
index 32cc3af..90c924a 100644
--- a/src/main/java/org/jsoup/nodes/Entities.java
+++ b/src/main/java/org/jsoup/nodes/Entities.java
@@ -107,42 +104,24 @@ public class Entities {
             if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
                 final char c = (char) codePoint;
                 // html specific and required escapes:
-                switch (c) {
-                    case '&':
-                        accum.append("&amp;");
-                        break;
-                    case 0xA0:
-                        if (escapeMode != EscapeMode.xhtml)
-                            accum.append("&nbsp;");
-                        else
-                            accum.append(c);
-                        break;
-                    case '<':
-                        if (!inAttribute)
-                            accum.append("&lt;");
-                        else
-                            accum.append(c);
-                        break;
-                    case '>':
-                        if (!inAttribute)
-                            accum.append("&gt;");
-                        else
-                            accum.append(c);
-                        break;
-                    case '"':
-                        if (inAttribute)
-                            accum.append("&quot;");
-                        else
-                            accum.append(c);
-                        break;
-                    default:
-                        if (canEncode(coreCharset, c, encoder))
-                            accum.append(c);
-                        else if (map.containsKey(c))
-                            accum.append('&').append(map.get(c)).append(';');
-                        else
-                            accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
-                }
+                if (c == '&')
+                    accum.append("&amp;");
+                else if (c == '<')
+                    accum.append("&lt;");
+                else if (c == '>')
+                    accum.append("&gt;");
+                else if (inAttribute && (c == '"' || c == '\''))
+                    accum.append("&quot;");
+                else if (c == '\t' || c == '\n' || c == '\r' || c == '\f' || c == '\b')
+                    accum.append("&#x").append(Integer.toHexString(c)).append(';');
+                else if (c == 0xA0)
+                    accum.append("&nbsp;");
+                else if (map.containsKey(c))
+                    accum.append('&').append(map.get(c)).append(';');
+                else if (canEncode(coreCharset, c, encoder))
+                    accum.append(c);
+                else
+                    accum.append("&#x").append(Integer.toHexString(c)).append(';');
             } else {
                 final String c = new String(Character.toChars(codePoint));
                 if (encoder.canEncode(c)) // uses fallback encoder for simplicity

    static void escape(StringBuilder accum, String string, Document.OutputSettings out,
                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {
        boolean lastWasWhite = false;
        boolean reachedNonWhite = false;
        final EscapeMode escapeMode = out.escapeMode();
        final CharsetEncoder encoder = out.encoder();
        final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
        final Map<Character, String> map = escapeMode.getMap();
        final int length = string.length();
        char[] chars = string.toCharArray();
        for (int i = 0; i < length; i++) {
            char c = chars[i];
            if (normaliseWhite) {
                if (StringUtil.isWhitespace(c)) {
                    if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)
                        continue;
                    accum.append(' ');
                    lastWasWhite = true;
                    continue;
                } else {
                    lastWasWhite = false;
                    reachedNonWhite = true;
                }
            }
            // html specific and required escapes:
            switch (c) {
                case '&':
                    accum.append("&amp;");
                    break;
                case 0xA0:
                    if (escapeMode != EscapeMode.xhtml)
                        accum.append("&nbsp;");
                    else
                        accum.append(c);
                    break;
                case '<':
                    if (!inAttribute)
                        accum.append("&lt;");
                    else
                        accum.append(c);
                    break;
                case '>':
                    if (!inAttribute)
                        accum.append("&gt;");
                    else
                        accum.append(c);
                    break;
                case '"':
                    if (inAttribute)
                        accum.append("&quot;");
                    else
                        accum.append(c);
                    break;
                default:
                    if (canEncode(coreCharset, c, encoder))
                        accum.append(c);
                    else if (map.containsKey(c))
                        accum.append('&').append(map.get(c)).append(';');
                    else
                        accum.append("&#x").append(Integer.toHexString(c)).append(';');
            }
        }
    }
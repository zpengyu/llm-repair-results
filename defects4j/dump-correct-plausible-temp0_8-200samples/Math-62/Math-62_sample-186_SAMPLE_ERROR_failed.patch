diff --git a/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java
index 506cc7845..fff74dca0 100644
--- a/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java
@@ -43,102 +43,6 @@ import org.apache.commons.math.util.FastMath;
  * @version $Revision$ $Date$
  * @since 3.0
  */
-public class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFunction>
-    implements BaseUnivariateRealOptimizer<FUNC> {
-    /** Underlying classical optimizer. */
-    private final BaseUnivariateRealOptimizer<FUNC> optimizer;
-    /** Maximal number of evaluations allowed. */
-    private int maxEvaluations;
-    /** Number of evaluations already performed for all starts. */
-    private int totalEvaluations;
-    /** Number of starts to go. */
-    private int starts;
-    /** Random generator for multi-start. */
-    private RandomGenerator generator;
-    /** Found optima. */
-    private UnivariateRealPointValuePair[] optima;
-
-    /**
-     * Create a multi-start optimizer from a single-start optimizer.
-     *
-     * @param optimizer Single-start optimizer to wrap.
-     * @param starts Number of starts to perform (including the
-     * first one), multi-start is disabled if value is less than or
-     * equal to 1.
-     * @param generator Random generator to use for restarts.
-     */
-    public MultiStartUnivariateRealOptimizer(final BaseUnivariateRealOptimizer<FUNC> optimizer,
-                                             final int starts,
-                                             final RandomGenerator generator) {
-        this.optimizer = optimizer;
-        this.starts = starts;
-        this.generator = generator;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void setConvergenceChecker(ConvergenceChecker<UnivariateRealPointValuePair> checker) {
-        optimizer.setConvergenceChecker(checker);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public ConvergenceChecker<UnivariateRealPointValuePair> getConvergenceChecker() {
-        return optimizer.getConvergenceChecker();
-    }
-
-    /** {@inheritDoc} */
-    public int getMaxEvaluations() {
-        return maxEvaluations;
-    }
-
-    /** {@inheritDoc} */
-    public int getEvaluations() {
-        return totalEvaluations;
-    }
-
-    /** {@inheritDoc} */
-    public void setMaxEvaluations(int maxEvaluations) {
-        this.maxEvaluations = maxEvaluations;
-        optimizer.setMaxEvaluations(maxEvaluations);
-    }
-
-    /**
-     * Get all the optima found during the last call to {@link
-     * #optimize(FUNC,GoalType,double,double) optimize}.
-     * The optimizer stores all the optima found during a set of
-     * restarts. The {@link #optimize(FUNC,GoalType,double,double) optimize}
-     * method returns the best point only. This method returns all the points
-     * found at the end of each starts, including the best one already
-     * returned by the {@link #optimize(FUNC,GoalType,double,double) optimize}
-     * method.
-     * <br/>
-     * The returned array as one element for each start as specified
-     * in the constructor. It is ordered with the results from the
-     * runs that did converge first, sorted from best to worst
-     * objective value (i.e in ascending order if minimizing and in
-     * descending order if maximizing), followed by {@code null} elements
-     * corresponding to the runs that did not converge. This means all
-     * elements will be {@code null} if the {@link
-     * #optimize(FUNC,GoalType,double,double) optimize} method did throw a
-     * {@link ConvergenceException}). This also means that if the first
-     * element is not {@code null}, it is the best point found across all
-     * starts.
-     *
-     * @return an array containing the optima.
-     * @throws MathIllegalStateException if {@link
-     * #optimize(FUNC,GoalType,double,double) optimize} has not been called.
-     */
-    public UnivariateRealPointValuePair[] getOptima() {
-        if (optima == null) {
-            throw new MathIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);
-        }
-        return optima.clone();
-    }
-
-    /** {@inheritDoc} */
     public UnivariateRealPointValuePair optimize(final FUNC f,
                                                  final GoalType goal,
                                                  final double min, final double max)
@@ -181,26 +79,3 @@ public class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFuncti
         // Return the point with the best objective function value.
         return optima[0];
     }
\ No newline at end of file
-
-    /**
-     * Sort the optima from best to worst, followed by {@code null} elements.
-     *
-     * @param goal Goal type.
-     */
-    private void sortPairs(final GoalType goal) {
-        Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {
-                public int compare(final UnivariateRealPointValuePair o1,
-                                   final UnivariateRealPointValuePair o2) {
-                    if (o1 == null) {
-                        return (o2 == null) ? 0 : 1;
-                    } else if (o2 == null) {
-                        return -1;
-                    }
-                    final double v1 = o1.getValue();
-                    final double v2 = o2.getValue();
-                    return (goal == GoalType.MINIMIZE) ?
-                        Double.compare(v1, v2) : Double.compare(v2, v1);
-                }
-            });
-    }
-}

/**
 * An expression block is foldable if it meets one of the following
 * criteria:
 * <ol>
 * <li>The block has exactly one statement.</li>
 * <li>The block has more than one statement, but the last statement
 * is an expression (and not a break or continue).</li>
 * </ol>
 *
 * @param n a node whose type is {@link Token#BLOCK}
 * @return whether {@code n} is a foldable expression block
 */
private boolean isFoldableExpressBlock(Node n) {
  if (n.getType() == Token.BLOCK) {
    Node maybeExpr = n.getLastChild();
    if (maybeExpr != null) {
      Node maybeBreakOrContinue = maybeExpr.getNext();
      // If the block has more than one child, the last child
      // must be an expression and not a break or continue.
      if (maybeBreakOrContinue != null
          && NodeUtil.isExpressionNode(maybeExpr)) {
        return true;
      }
      // If the block has only one child, then it is only foldable
      // if it is also an expression.
      return NodeUtil.isExpressionNode(maybeExpr);
    }
  }
  return false;
}
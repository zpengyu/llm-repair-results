diff --git a/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java b/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java
index afb9f1869..175aec6e6 100644
--- a/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java
+++ b/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java
@@ -352,29 +352,31 @@ public class TreeTraversingParser extends ParserMinimalBase
      */
 
     @Override
-    public byte[] getBinaryValue(Base64Variant b64variant)
+public byte[] getBinaryValue(Base64Variant b64variant)
         throws IOException, JsonParseException
-    {
-        // Multiple possibilities...
-        JsonNode n = currentNode();
-        if (n != null) {
-            // [databind#2096]: although `binaryValue()` works for real binary node
-            // and embedded "POJO" node, coercion from TextNode may require variant, so:
-            byte[] data = n.binaryValue();
-            if (data != null) {
-                return data;
-            }
-            if (n.isPojo()) {
-                Object ob = ((POJONode) n).getPojo();
-                if (ob instanceof byte[]) {
-                    return (byte[]) ob;
-                }
+{
+    // Multiple possibilities...
+    JsonNode n = currentNode();
+    if (n != null) {
+        // [databind#2096]: although `binaryValue()` works for real binary node
+        // and embedded "POJO" node, coercion from TextNode may require variant, so:
+        if (n.isTextual()) {
+            return n.binaryValue(b64variant);
+        }
+        byte[] data = n.binaryValue();
+        if (data != null) {
+            return data;
+        }
+        if (n.isPojo()) {
+            Object ob = ((POJONode) n).getPojo();
+            if (ob instanceof byte[]) {
+                return (byte[]) ob;
             }
         }
-        // otherwise return null to mark we have no binary content
-        return null;
     }
-
+    // otherwise return null to mark we have no binary content
+    return null;
+}
 
     @Override
     public int readBinaryValue(Base64Variant b64variant, OutputStream out)

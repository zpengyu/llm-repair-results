class CollapseVariableDeclarations implements CompilerPass {
  /** Reference to JS Compiler */
  private final AbstractCompiler compiler;
  /** Encapsulation of information about a variable declaration collapse */
  private static class Collapse {
    /**
     * Variable declaration that any following var nodes should be
     * collapsed into
     */
    final Node startNode;
    /**
     * Last node (non-inclusive) of the chain of nodes to collapse.
     */
    final Node endNode;
    /** Parent of the nodes to the collapse */
    final Node parent;
    Collapse(Node startNode, Node endNode, Node parent) {
      this.startNode = startNode;
      this.endNode = endNode;
      this.parent = parent;
    }
  }
  /**
   * Collapses to do in this pass.
   */
  private final List<Collapse> collapses = Lists.newArrayList();
  /**
   * Nodes we've already looked at for collapsing, so that we don't look at them
   * again (we look ahead when examining what nodes can be collapsed, and the
   * node traversal may give them to us again)
   */
  private final Set<Node> nodesToCollapse = Sets.newHashSet();
  CollapseVariableDeclarations(AbstractCompiler compiler) {
    Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized());
    this.compiler = compiler;
  }
  @Override
  public void process(Node externs, Node root) {
    collapses.clear();
    nodesToCollapse.clear();
    NodeTraversal.traverse(compiler, root, new GatherCollapses());
    if (!collapses.isEmpty()) {
      applyCollapses();
      compiler.reportCodeChange();
    }
  }
  /**
   * Gathers all of the variable declarations / assignments that should be
   * collapsed into one.
   *
   * We do not do the collapsing as we go since node traversal would be affected
   * by the changes we are making to the parse tree.
   */
  private class GatherCollapses extends AbstractPostOrderCallback {
    // If a VAR is declared like
    // var x;
    // then we should not create new VAR nodes for it later in the tree.
    // This is a workaround for a bug in Firefox.
    private final Set<Var> blacklistedVars = Sets.newHashSet();
    @Override
    public void visit(NodeTraversal t, Node n, Node parent) {
      if (n.isVar()) {
        blacklistStubVars(t, n);
      }
      // Only care about var nodes
      if (!n.isVar() && !canBeRedeclared(n, t.getScope())) return;
      // If we've already looked at this node, skip it
      if (nodesToCollapse.contains(n)) return;
      // Adjacent VAR children of an IF node are the if and else parts and can't
      // be collapsed
      if (parent.isIf()) return;
      Node varNode = n;
      boolean hasVar = n.isVar();
      // Find variable declarations that follow this one (if any)
      n = n.getNext();
      boolean hasNodesToCollapse = false;
      while (n != null &&
          (n.isVar() || canBeRedeclared(n, t.getScope()))) {
        if (n.isVar()) {
          blacklistStubVars(t, n);
          hasVar = true;
        }
        nodesToCollapse.add(n);
        hasNodesToCollapse = true;
        n = n.getNext();
      }
      if (hasNodesToCollapse && hasVar) {
        nodesToCollapse.add(varNode);
        collapses.add(new Collapse(varNode, n, parent));
      }
    }
    private void blacklistStubVars(NodeTraversal t, Node varNode) {
      for (Node child = varNode.getFirstChild();
           child != null; child = child.getNext()) {
        if (child.getFirstChild() == null) {
          blacklistedVars.add(t.getScope().getVar(child.getString()));
        }
      }
    }
    private boolean canBeRedeclared(Node n, Scope s) {
      if (!NodeUtil.isExprAssign(n)) {
        return false;
      }
      Node assign = n.getFirstChild();
      Node lhs = assign.getFirstChild();
      if (!lhs.isName()) {
        return false;
      }
      Var var = s.getVar(lhs.getString());
      return var != null
          && var.getScope() == s
          && !blacklistedVars.contains(var);
    }
  }
  /**
   * Collapses all variable declarations which are adjacent, as well as
   * declarations that are preceded by an assignment to the same variable.
   *
   * For example, the following code:
   *
   * var x;
   * var y;
   * var z;
   * x = 0;
   * y = 0;
   *
   * Should be collapsed into
   *
   * var x, y, z;
   * x = 0;
   * y = 0;
   *
   * Also, any number of assignments to the same variable in a row should be
   * collapsed into a single assignment.
   *
   * For example, the following code:
   *
   * y = 0;
   * y = 1;
   * y = 2;
   *
   * Should be collapsed into:
   *
   * y = 2;
   *
   *
   * TODO(nicksantos): This pass needs to be run before CollapseVariableDeclarations.
   * This can't be done until we fix the minor bug where this pass is
   * incorrectly collapsing:
   *
   * var x = 0;
   * var y = 0;
   *
   * into
   *
   * var x = 0, y = 0;
   *
   * There are two reasons why this is a minor bug:
   * 1) It works in current browsers, as long as there's not a semicolon
   *    between x and y.
   * 2) It's a safe change, and it makes the code minify better.
   *
   * TODO(nicksantos): All of these passes have to be re-run when
   * code is split for run-time lazy loading.
   */
  private void applyCollapses() {
    for (Collapse collapse : collapses) {
      Node var = new Node(Token.VAR);
      var.copyInformationFrom(collapse.startNode);
      collapse.parent.addChildBefore(var, collapse.startNode);
      boolean redeclaration = false;
      for (Node n = collapse.startNode; n != collapse.endNode;) {
        Node next = n.getNext();
        Preconditions.checkState(var.getNext() == n);
        collapse.parent.removeChildAfter(var);
        if (n.isVar()) {
          while(n.hasChildren()) {
            var.addChildToBack(n.removeFirstChild());
          }
        } else {
          Node assign = n.getFirstChild();
          Node lhs = assign.getFirstChild();
          Preconditions.checkState(lhs.isName());
          Node rhs = assign.getLastChild();
          lhs.addChildToBack(rhs.detachFromParent());
          var.addChildToBack(lhs.detachFromParent());
          redeclaration = true;
        }
        n = next;
      }
      if (redeclaration) {
        JSDocInfo info = new JSDocInfo();
        info.addSuppression("duplicate");
        var.setJSDocInfo(info);
      }
    }
  }
}
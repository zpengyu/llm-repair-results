diff --git a/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java b/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java
index 26ca29ca..0709970c 100644
--- a/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java
+++ b/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java
@@ -62,44 +62,19 @@ import java.util.Set;
  *
  */
 class CollapseVariableDeclarations implements CompilerPass {
-  /** Reference to JS Compiler */
   private final AbstractCompiler compiler;
-
-  /** Encapsulation of information about a variable declaration collapse */
   private static class Collapse {
-    /**
-     * Variable declaration that any following var nodes should be
-     * collapsed into
-     */
     final Node startNode;
-
-    /**
-     * Last node (non-inclusive) of the chain of nodes to collapse.
-     */
     final Node endNode;
-
-    /** Parent of the nodes to the collapse */
     final Node parent;
-
     Collapse(Node startNode, Node endNode, Node parent) {
       this.startNode = startNode;
       this.endNode = endNode;
       this.parent = parent;
     }
   }
-
-  /**
-   * Collapses to do in this pass.
-   */
   private final List<Collapse> collapses = Lists.newArrayList();
-
-  /**
-   * Nodes we've already looked at for collapsing, so that we don't look at them
-   * again (we look ahead when examining what nodes can be collapsed, and the
-   * node traversal may give them to us again)
-   */
   private final Set<Node> nodesToCollapse = Sets.newHashSet();
-
   CollapseVariableDeclarations(AbstractCompiler compiler) {
     Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized());
     this.compiler = compiler;
@@ -117,50 +89,22 @@ class CollapseVariableDeclarations implements CompilerPass {
       compiler.reportCodeChange();
     }
   }
-
-  /**
-   * Gathers all of the variable declarations / assignments that should be
-   * collapsed into one.
-   *
-   * We do not do the collapsing as we go since node traversal would be affected
-   * by the changes we are making to the parse tree.
-   */
   private class GatherCollapses extends AbstractPostOrderCallback {
-
-    // If a VAR is declared like
-    // var x;
-    // then we should not create new VAR nodes for it later in the tree.
-    // This is a workaround for a bug in Firefox.
     private final Set<Var> blacklistedVars = Sets.newHashSet();
-
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isVar()) {
         blacklistStubVars(t, n);
       }
-
-      // Only care about var nodes
       if (!n.isVar() && !canBeRedeclared(n, t.getScope())) return;
-
-      // If we've already looked at this node, skip it
       if (nodesToCollapse.contains(n)) return;
-
-      // Adjacent VAR children of an IF node are the if and else parts and can't
-      // be collapsed
       if (parent.isIf()) return;
-
       Node varNode = n;
-
       boolean hasVar = n.isVar();
-
-      // Find variable declarations that follow this one (if any)
       n = n.getNext();
-
       boolean hasNodesToCollapse = false;
-
       while (n != null &&
           (n.isVar() || canBeRedeclared(n, t.getScope()))) {
-
         if (n.isVar()) {
           blacklistStubVars(t, n);
           hasVar = true;

diff --git a/source/org/jfree/chart/axis/Axis.java b/source/org/jfree/chart/axis/Axis.java
index 78a6c66..c02e802 100644
--- a/source/org/jfree/chart/axis/Axis.java
+++ b/source/org/jfree/chart/axis/Axis.java
@@ -1109,83 +1106,45 @@ public abstract class Axis implements Cloneable, Serializable {
         FontMetrics fm = g2.getFontMetrics();
         Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);
         Shape hotspot = null;
-        
         if (edge == RectangleEdge.TOP) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle(), labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() - insets.getBottom() 
-                    - h / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
+            float x = (float) dataArea.getCenterX();
+            float y = (float) (state.getCursor() - insets.getBottom() 
+                    - labelBounds.getHeight() / 2.0);
+            TextUtilities.drawAlignedString(label, g2, x, y, TextAnchor.TOP_CENTER);
+            hotspot = new Rectangle2D.Double(x - labelBounds.getWidth() / 2.0, y,
+                    labelBounds.getWidth(), labelBounds.getHeight());
             state.cursorUp(insets.getTop() + labelBounds.getHeight() 
                     + insets.getBottom());
         }
         else if (edge == RectangleEdge.BOTTOM) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle(), labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() + insets.getTop() 
-                    + h / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
+            float x = (float) dataArea.getCenterX();
+            float y = (float) (state.getCursor() + insets.getTop() 
+                    + labelBounds.getHeight() / 2.0);
+            TextUtilities.drawAlignedString(label, g2, x, y, TextAnchor.BOTTOM_CENTER);
+            hotspot = new Rectangle2D.Double(x - labelBounds.getWidth() / 2.0, y,
+                    labelBounds.getWidth(), labelBounds.getHeight());
             state.cursorDown(insets.getTop() + labelBounds.getHeight() 
                     + insets.getBottom());
         }
         else if (edge == RectangleEdge.LEFT) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() - insets.getRight() 
-                    - w / 2.0);
-            float labely = (float) dataArea.getCenterY();
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, 
-                    TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
+            float x = (float) (state.getCursor() - insets.getRight() 
+                    - labelBounds.getWidth() / 2.0);
+            float y = (float) dataArea.getCenterY();
+            TextUtilities.drawAlignedString(label, g2, x, y, TextAnchor.CENTER_LEFT);
+            hotspot = new Rectangle2D.Double(x, y - labelBounds.getHeight() / 2.0,
+                    labelBounds.getWidth(), labelBounds.getHeight());
             state.cursorLeft(insets.getLeft() + labelBounds.getWidth() 
                     + insets.getRight());
         }
         else if (edge == RectangleEdge.RIGHT) {
-
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle() + Math.PI / 2.0, 
-                    labelBounds.getCenterX(), labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() 
-                            + insets.getLeft() + w / 2.0);
-            float labely = (float) (dataArea.getY() + dataArea.getHeight() 
-                    / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, 
-                    TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
+            float x = (float) (state.getCursor() 
+                            + insets.getLeft() + labelBounds.getWidth() / 2.0);
+            float y = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);
+            TextUtilities.drawAlignedString(label, g2, x, y, TextAnchor.CENTER_RIGHT);
+            hotspot = new Rectangle2D.Double(x, y - labelBounds.getHeight() / 2.0,
+                    labelBounds.getWidth(), labelBounds.getHeight());
             state.cursorRight(insets.getLeft() + labelBounds.getWidth() 
                     + insets.getRight());
-
         }
         if (plotState != null && hotspot != null) {
             ChartRenderingInfo owner = plotState.getOwner();

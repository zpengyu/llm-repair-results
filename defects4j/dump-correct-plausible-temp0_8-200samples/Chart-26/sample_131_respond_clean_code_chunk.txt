    protected AxisState drawLabel(String label, Graphics2D g2, 
            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, 
            AxisState state, PlotRenderingInfo plotState) {
        // it is unlikely that 'state' will be null, but check anyway...
        if (state == null) {
            throw new IllegalArgumentException("Null 'state' argument.");
        }
        if ((label == null) || (label.equals(""))) {
            return state;
        }
        Font font = getLabelFont();
        RectangleInsets insets = getLabelInsets();
        g2.setFont(font);
        g2.setPaint(getLabelPaint());
        FontMetrics fm = g2.getFontMetrics();
        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);
        Shape hotspot = null;
        if (edge == RectangleEdge.TOP) {
            float labelx = (float) dataArea.getCenterX();
            float labely = (float) (state.getCursor() - insets.getBottom() 
                    - labelBounds.getHeight() / 2);
            if (this.isVerticalTickLabels()) {
                double xx = labelx;
                double yy = state.getCursor() - insets.getBottom();
                AffineTransform rot = AffineTransform.getRotateInstance(
                        Math.PI / 2.0, xx, yy);
                g2.setTransform(rot);
                TextUtilities.drawAlignedString(label, g2, (float) yy, 
                        (float) xx, TextAnchor.CENTER);
                g2.setTransform(new AffineTransform());
            }
            else {
                TextUtilities.drawAlignedString(label, g2, labelx, labely, 
                        TextAnchor.CENTER);
            }
            state.cursorUp(insets.getTop() + labelBounds.getHeight() 
                    + insets.getBottom());
        }
        else if (edge == RectangleEdge.BOTTOM) {
            float labelx = (float) dataArea.getCenterX();
            float labely = (float) (state.getCursor() + insets.getTop() 
                    + labelBounds.getHeight() / 2);
            if (this.isVerticalTickLabels()) {
                AffineTransform rot = AffineTransform.getRotateInstance(
                        Math.PI / 2.0, labelx, labely);
                g2.setTransform(rot);
                TextUtilities.drawAlignedString(label, g2, labely, labelx, 
                        TextAnchor.CENTER);
                g2.setTransform(new AffineTransform());
            }
            else {
                TextUtilities.drawAlignedString(label, g2, labelx, labely, 
                        TextAnchor.CENTER);
            }
            state.cursorDown(insets.getTop() + labelBounds.getHeight() 
                    + insets.getBottom());
        }
        else if (edge == RectangleEdge.LEFT) {
            double labelx = state.getCursor() - insets.getRight();
            double labely = dataArea.getCenterY();
            if (this.isVerticalTickLabels()) {
                double xx = state.getCursor() - insets.getRight();
                double yy = dataArea.getY() + dataArea.getHeight() / 2.0;
                AffineTransform rot = AffineTransform.getRotateInstance(
                        Math.PI / 2.0, xx, yy);
                g2.setTransform(rot);
                TextUtilities.drawAlignedString(label, g2, (float) yy, 
                        (float) xx, TextAnchor.CENTER);
                g2.setTransform(new AffineTransform());
            }
            else {
                TextUtilities.drawAlignedString(label, g2, (float) labelx, 
                        (float) labely, TextAnchor.CENTER);
            }
            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() 
                    + insets.getRight());
        }
        else if (edge == RectangleEdge.RIGHT) {
            double labelx = state.getCursor() + insets.getLeft();
            double labely = dataArea.getY() + dataArea.getHeight() / 2.0;
            if (this.isVerticalTickLabels()) {
                AffineTransform rot = AffineTransform.getRotateInstance(
                        Math.PI / 2.0, labelx, labely);
                g2.setTransform(rot);
                TextUtilities.drawAlignedString(label, g2, labely, labelx, 
                        TextAnchor.CENTER);
                g2.setTransform(new AffineTransform());
            }
            else {
                TextUtilities.drawAlignedString(label, g2, (float) labelx, 
                        (float) labely, TextAnchor.CENTER);
            }
            state.cursorRight(insets.getLeft() + labelBounds.getWidth() 
                    + insets.getRight());
        }
        if (plotState != null && hotspot != null) {
            ChartRenderingInfo owner = plotState.getOwner();
                EntityCollection entities = owner.getEntityCollection();
                if (entities != null) {
                    entities.add(new AxisLabelEntity(this, hotspot, 
                            this.labelToolTip, this.labelURL));
                }
        }
        return state;
    }
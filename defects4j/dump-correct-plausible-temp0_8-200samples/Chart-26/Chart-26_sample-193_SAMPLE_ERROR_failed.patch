diff --git a/source/org/jfree/chart/axis/Axis.java b/source/org/jfree/chart/axis/Axis.java
index 78a6c66..00629b3 100644
--- a/source/org/jfree/chart/axis/Axis.java
+++ b/source/org/jfree/chart/axis/Axis.java
@@ -1091,17 +1091,10 @@ public abstract class Axis implements Cloneable, Serializable {
      */
     protected AxisState drawLabel(String label, Graphics2D g2, 
             Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, 
-            AxisState state, PlotRenderingInfo plotState) {
-
-        // it is unlikely that 'state' will be null, but check anyway...
-        if (state == null) {
-            throw new IllegalArgumentException("Null 'state' argument.");
-        }
-        
-        if ((label == null) || (label.equals(""))) {
+            AxisState state) {
+        if (label == null || label.equals("")) {
             return state;
         }
-
         Font font = getLabelFont();
         RectangleInsets insets = getLabelInsets();
         g2.setFont(font);
@@ -1109,96 +1102,71 @@ public abstract class Axis implements Cloneable, Serializable {
         FontMetrics fm = g2.getFontMetrics();
         Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);
         Shape hotspot = null;
-        
+        double angle = 0.0;
+        if (isVerticalTickLabels()) {
+            angle = Math.PI / 2.0;
+        }
+        double x = dataArea.getCenterX();
+        double y = state.getCursor();
+        TextAnchor anchor = null;
+        TextAnchor rotationAnchor = null;
+        double offset = 0.0;
         if (edge == RectangleEdge.TOP) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle(), labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() - insets.getBottom() 
-                    - h / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorUp(insets.getTop() + labelBounds.getHeight() 
-                    + insets.getBottom());
+            y = state.getCursor() - insets.getBottom() 
+                    - labelBounds.getHeight() / 2.0;
+            anchor = TextAnchor.BOTTOM_CENTER;
+            rotationAnchor = TextAnchor.BOTTOM_CENTER;
+            offset = -labelBounds.getWidth() / 2.0;
         }
         else if (edge == RectangleEdge.BOTTOM) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle(), labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() + insets.getTop() 
-                    + h / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorDown(insets.getTop() + labelBounds.getHeight() 
-                    + insets.getBottom());
+            y = state.getCursor() + insets.getTop() 
+                    + labelBounds.getHeight() / 2.0;
+            anchor = TextAnchor.TOP_CENTER;
+            rotationAnchor = TextAnchor.TOP_CENTER;
+            offset = labelBounds.getWidth() / 2.0;
         }
         else if (edge == RectangleEdge.LEFT) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() - insets.getRight() 
-                    - w / 2.0);
-            float labely = (float) dataArea.getCenterY();
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, 
-                    TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() 
-                    + insets.getRight());
+            x = state.getCursor() - insets.getRight() 
+                    - labelBounds.getWidth() / 2.0;
+            anchor = TextAnchor.CENTER_RIGHT;
+            rotationAnchor = TextAnchor.CENTER_RIGHT;
+            offset = -labelBounds.getHeight() / 2.0;
         }
         else if (edge == RectangleEdge.RIGHT) {
-
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle() + Math.PI / 2.0, 
-                    labelBounds.getCenterX(), labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() 
-                            + insets.getLeft() + w / 2.0);
-            float labely = (float) (dataArea.getY() + dataArea.getHeight() 
-                    / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, 
-                    TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorRight(insets.getLeft() + labelBounds.getWidth() 
-                    + insets.getRight());
-
+            x = state.getCursor() + insets.getLeft() 
+                    + labelBounds.getWidth() / 2.0;
+            anchor = TextAnchor.CENTER_LEFT;
+            rotationAnchor = TextAnchor.CENTER_LEFT;
+            offset = labelBounds.getHeight() / 2.0;
         }
-        if (plotState != null && hotspot != null) {
-            ChartRenderingInfo owner = plotState.getOwner();
-                EntityCollection entities = owner.getEntityCollection();
-                if (entities != null) {
-                    entities.add(new AxisLabelEntity(this, hotspot, 
-                            this.labelToolTip, this.labelURL));
-                }
+        float xx = (float) x + (float) offset;
+        float yy = (float) y;
+        Shape labelBoundsAtTip = TextUtilities.calculateRotatedStringBounds(
+                label, g2, xx, yy, anchor, angle, rotationAnchor);
+        state.cursorUp(insets.getTop() + labelBoundsAtTip.getHeight() 
+                + insets.getBottom());
+        TextUtilities.drawRotatedString(label, g2, xx, yy, anchor, angle, 
+                rotationAnchor);
+        if (this.additionalUnit != null) {
+            String unitStr = this.additionalUnit.getSymbol();
+            Rectangle2D unitBounds = TextUtilities.getTextBounds(
+                    unitStr, g2, fm);
+            double cx = x + unitBounds.getWidth() / 2.0;
+            double cy = y - unitBounds.getHeight() / 2.0;
+            if (edge == RectangleEdge.TOP) {
+                cy = y + unitBounds.getHeight() / 2.0;
+            }
+            else if (edge == RectangleEdge.LEFT) {
+                cx = x + unitBounds.getWidth() / 2.0;
+            }
+            else if (edge == RectangleEdge.RIGHT) {
+                cx = x - unitBounds.getWidth() / 2.0;
+            }
+            TextUtilities.drawAlignedString(unitStr, g2, (float) cx, (float) cy, 
+                    TextAnchor.CENTER);
         }
         return state;
-
     }
-
     /**
      * Draws an axis line at the current cursor position and edge.
      * 

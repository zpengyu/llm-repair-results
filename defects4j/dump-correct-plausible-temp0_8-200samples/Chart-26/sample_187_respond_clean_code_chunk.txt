    protected AxisState drawLabel(String label, Graphics2D g2, 
            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, 
            AxisState state, PlotRenderingInfo plotState) {
        // it is unlikely that 'state' will be null, but check anyway...
        if (state == null) {
            throw new IllegalArgumentException("Null 'state' argument.");
        }
        if ((label == null) || (label.equals(""))) {
            return state;
        }
        Font font = getLabelFont();
        RectangleInsets insets = getLabelInsets();
        g2.setFont(font);
        g2.setPaint(getLabelPaint());
        FontMetrics fm = g2.getFontMetrics();
        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);
        Shape hotspot = null;
        if (edge == RectangleEdge.TOP) {
            float labelx = (float) dataArea.getCenterX();
            float labely = (float) (state.getCursor() - insets.getBottom());
            TextAnchor anchor = TextAnchor.CENTER_BOTTOM;
            if (getLabelAngle() == 0) {
                anchor = TextAnchor.BOTTOM_CENTER;
            }
            else if (getLabelAngle() == Math.PI / 2.0) {
                anchor = TextAnchor.BOTTOM_LEFT;
            }
            else if (getLabelAngle() == Math.PI) {
                anchor = TextAnchor.BOTTOM_RIGHT;
            }
            else if (getLabelAngle() == -Math.PI / 2.0) {
                anchor = TextAnchor.BOTTOM_RIGHT;
            }
            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
                    anchor, getLabelAngle(), anchor);
            hotspot = TextUtilities.calculateRotatedStringBounds(label, g2, 
                    labelx, labely, anchor, getLabelAngle(), anchor);
            state.cursorUp(insets.getTop() + labelBounds.getHeight() 
                    + insets.getBottom());
        }
        else if (edge == RectangleEdge.BOTTOM) {
            float labelx = (float) dataArea.getCenterX();
            float labely = (float) (state.getCursor() + insets.getTop());
            TextAnchor anchor = TextAnchor.CENTER_TOP;
            if (getLabelAngle() == 0) {
                anchor = TextAnchor.TOP_CENTER;
            }
            else if (getLabelAngle() == Math.PI / 2.0) {
                anchor = TextAnchor.TOP_LEFT;
            }
            else if (getLabelAngle() == Math.PI) {
                anchor = TextAnchor.TOP_RIGHT;
            }
            else if (getLabelAngle() == -Math.PI / 2.0) {
                anchor = TextAnchor.TOP_RIGHT;
            }
            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
                    anchor, getLabelAngle(), anchor);
            hotspot = TextUtilities.calculateRotatedStringBounds(label, g2, 
                    labelx, labely, anchor, getLabelAngle(), anchor);
            state.cursorDown(insets.getTop() + labelBounds.getHeight() 
                    + insets.getBottom());
        }
        else if (edge == RectangleEdge.LEFT) {
            float labelx = (float) (state.getCursor() - insets.getRight());
            float labely = (float) dataArea.getCenterY();
            TextAnchor anchor = TextAnchor.CENTER_RIGHT;
            if (getLabelAngle() == 0) {
                anchor = TextAnchor.CENTER_RIGHT;
            }
            else if (getLabelAngle() == Math.PI / 2.0) {
                anchor = TextAnchor.TOP_RIGHT;
            }
            else if (getLabelAngle() == Math.PI) {
                anchor = TextAnchor.BOTTOM_RIGHT;
            }
            else if (getLabelAngle() == -Math.PI / 2.0) {
                anchor = TextAnchor.BOTTOM_RIGHT;
            }
            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
                    anchor, getLabelAngle(), anchor);
            hotspot = TextUtilities.calculateRotatedStringBounds(label, g2, 
                    labelx, labely, anchor, getLabelAngle(), anchor);
            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() 
                    + insets.getRight());
        }
        else if (edge == RectangleEdge.RIGHT) {
            float labelx = (float) (state.getCursor() + insets.getLeft());
            float labely = (float) dataArea.getCenterY();
            TextAnchor anchor = TextAnchor.CENTER_LEFT;
            if (getLabelAngle() == 0) {
                anchor = TextAnchor.CENTER_LEFT;
            }
            else if (getLabelAngle() == Math.PI / 2.0) {
                anchor = TextAnchor.TOP_LEFT;
            }
            else if (getLabelAngle() == Math.PI) {
                anchor = TextAnchor.BOTTOM_LEFT;
            }
            else if (getLabelAngle() == -Math.PI / 2.0) {
                anchor = TextAnchor.BOTTOM_LEFT;
            }
            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
                    anchor, getLabelAngle(), anchor);
            hotspot = TextUtilities.calculateRotatedStringBounds(label, g2, 
                    labelx, labely, anchor, getLabelAngle(), anchor);
            state.cursorRight(insets.getLeft() + labelBounds.getWidth() 
                    + insets.getRight());
        }
        if (plotState != null && hotspot != null) {
            ChartRenderingInfo owner = plotState.getOwner();
                EntityCollection entities = owner.getEntityCollection();
                if (entities != null) {
                    entities.add(new AxisLabelEntity(this, hotspot, 
                            this.labelToolTip, this.labelURL));
                }
        }
        return state;
    }
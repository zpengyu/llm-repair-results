diff --git a/source/org/jfree/chart/axis/Axis.java b/source/org/jfree/chart/axis/Axis.java
index 78a6c66..47878f5 100644
--- a/source/org/jfree/chart/axis/Axis.java
+++ b/source/org/jfree/chart/axis/Axis.java
@@ -1119,13 +1115,13 @@ public abstract class Axis implements Cloneable, Serializable {
             float w = (float) labelBounds.getWidth();
             float h = (float) labelBounds.getHeight();
             float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() - insets.getBottom() 
-                    - h / 2.0);
+            float labely = (float) (state.getCursor() + insets.getBottom() 
+                    + h / 2.0);
             TextUtilities.drawRotatedString(label, g2, labelx, labely, 
                     TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
             hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
                     labely - h / 2.0f, w, h);
-            state.cursorUp(insets.getTop() + labelBounds.getHeight() 
+            state.cursorDown(insets.getTop() + labelBounds.getHeight() 
                     + insets.getBottom());
         }
         else if (edge == RectangleEdge.BOTTOM) {
@@ -1137,13 +1133,13 @@ public abstract class Axis implements Cloneable, Serializable {
             float w = (float) labelBounds.getWidth();
             float h = (float) labelBounds.getHeight();
             float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() + insets.getTop() 
-                    + h / 2.0);
+            float labely = (float) (state.getCursor() - insets.getTop() 
+                    - h / 2.0);
             TextUtilities.drawRotatedString(label, g2, labelx, labely, 
                     TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
             hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
                     labely - h / 2.0f, w, h);
-            state.cursorDown(insets.getTop() + labelBounds.getHeight() 
+            state.cursorUp(insets.getTop() + labelBounds.getHeight() 
                     + insets.getBottom());
         }
         else if (edge == RectangleEdge.LEFT) {
@@ -1154,15 +1150,15 @@ public abstract class Axis implements Cloneable, Serializable {
             labelBounds = rotatedLabelBounds.getBounds2D();
             float w = (float) labelBounds.getWidth();
             float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() - insets.getRight() 
-                    - w / 2.0);
+            float labelx = (float) (state.getCursor() + insets.getRight() 
+                    + w / 2.0);
             float labely = (float) dataArea.getCenterY();
             TextUtilities.drawRotatedString(label, g2, labelx, labely, 
                     TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, 
                     TextAnchor.CENTER);
             hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
                     labely - h / 2.0f, w, h);
-            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() 
+            state.cursorRight(insets.getLeft() + labelBounds.getWidth() 
                     + insets.getRight());
         }
         else if (edge == RectangleEdge.RIGHT) {
@@ -1175,7 +1170,7 @@ public abstract class Axis implements Cloneable, Serializable {
             float w = (float) labelBounds.getWidth();
             float h = (float) labelBounds.getHeight();
             float labelx = (float) (state.getCursor() 
-                            + insets.getLeft() + w / 2.0);
+                            - insets.getLeft() - w / 2.0);
             float labely = (float) (dataArea.getY() + dataArea.getHeight() 
                     / 2.0);
             TextUtilities.drawRotatedString(label, g2, labelx, labely, 
@@ -1183,9 +1178,8 @@ public abstract class Axis implements Cloneable, Serializable {
                     TextAnchor.CENTER);
             hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
                     labely - h / 2.0f, w, h);
-            state.cursorRight(insets.getLeft() + labelBounds.getWidth() 
+            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() 
                     + insets.getRight());
-
         }
         if (plotState != null && hotspot != null) {
             ChartRenderingInfo owner = plotState.getOwner();

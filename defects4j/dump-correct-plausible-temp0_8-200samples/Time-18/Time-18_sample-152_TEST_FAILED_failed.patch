diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java
index 70884ba5..7fb4d268 100644
--- a/src/main/java/org/joda/time/chrono/GJChronology.java
+++ b/src/main/java/org/joda/time/chrono/GJChronology.java
@@ -347,36 +347,45 @@ public final class GJChronology extends AssembledChronology {
         return instant;
     }
 
-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
-                                  int hourOfDay, int minuteOfHour,
-                                  int secondOfMinute, int millisOfSecond)
-        throws IllegalArgumentException
-    {
-        Chronology base;
-        if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        }
-
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
+                              int hourOfDay, int minuteOfHour,
+                              int secondOfMinute, int millisOfSecond)
+    throws IllegalArgumentException
+{
+    Chronology base;
+    if ((base = getBase()) != null) {
+        return base.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    }
+    // Assume date is Gregorian.
+    long instant;
+    try {
+        instant = iGregorianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    } catch (IllegalArgumentException e) {
+        if (year == 1582 && monthOfYear == 10 && dayOfMonth == 5) {
             // Maybe it's Julian.
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
-            }
+        } else {
+            throw e;
         }
-        return instant;
     }
-
+    if (instant < iCutoverMillis) {
+        // Maybe it's Julian.
+        instant = iJulianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (instant >= iCutoverMillis) {
+            // Okay, it's in the illegal cutover gap.
+            throw new IllegalArgumentException("Specified date does not exist");
+        }
+    }
+    return instant;
+}
     /**
      * Gets the cutover instant between Gregorian and Julian chronologies.
      * @return the cutover instant

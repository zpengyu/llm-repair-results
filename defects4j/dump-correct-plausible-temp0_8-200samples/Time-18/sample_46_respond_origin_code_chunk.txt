    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                  int hourOfDay, int minuteOfHour,
                                  int secondOfMinute, int millisOfSecond)
        throws IllegalArgumentException
    {
        Chronology base;
        if ((base = getBase()) != null) {
            return base.getDateTimeMillis
                (year, monthOfYear, dayOfMonth,
                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
        }

        // Assume date is Gregorian.
        long instant;
            instant = iGregorianChronology.getDateTimeMillis
                (year, monthOfYear, dayOfMonth,
                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
        if (instant < iCutoverMillis) {
            // Maybe it's Julian.
            instant = iJulianChronology.getDateTimeMillis
                (year, monthOfYear, dayOfMonth,
                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
            if (instant >= iCutoverMillis) {
                if (dayOfMonth == 29 && monthOfYear == 2 &&
                    !iGregorianChronology.isLeapYear(year)) {
                    // Okay, it's in the illegal cutover gap, due to the
                    // year/month/day not being able to exist in the
                    // Julian chronology.
                    throw new IllegalArgumentException("Specified date does not exist");
                }
                // Okay, it's in the illegal cutover gap, due to the
                // year/month/day being able to exist in both chronologies.
                // Determine which calendar to use.
                instant = setYear(instant, year);
            }
        }
        return instant;
    }

diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
index 3c89dc109..d5ba9421e 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
@@ -736,16 +736,10 @@ public class BeanDeserializer
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)
         throws IOException
     {
-        // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped
-        //    value itself is NOT passed via `CreatorProperty` (which isn't supported).
-        //    Ok however to pass via setter or field.
-        
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
-
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
-
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
@@ -761,7 +755,8 @@ public class BeanDeserializer
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
-                        bean = wrapInstantiationProblem(e, ctxt);
+                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                        continue; // never gets here
                     }
                     // [databind#631]: Assign current value, to be accessible by custom serializers
                     p.setCurrentValue(bean);
@@ -805,11 +800,7 @@ public class BeanDeserializer
             //    both to any setter AND buffer... but, for now, the only thing
             //    we can do.
             // how about any setter? We'll get copies but...
-            if (_anySetter == null) {
-                // but... others should be passed to unwrapped property deserializers
-                tokens.writeFieldName(propName);
-                tokens.copyCurrentStructure(p);
-            } else {
+            if (_anySetter != null) {
                 // Need to copy to a separate buffer first
                 TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);
                 tokens.writeFieldName(propName);
@@ -822,8 +813,27 @@ public class BeanDeserializer
                 }
                 continue;
             }
+            // 30-Sep-2019, tatu: [databind#2475] Possibly inlined...
+            if (_delegateDeserializer != null) {
+                if (!_valueInstantiator.canCreateUsingDelegate(ctxt, _delegateCreator)) {
+                    return (Object) reportBadDefinition(ctxt,
+"Cannot delegate creation of an unwrapped instance to "+_delegateCreator
++" as `DeserializationConfig.Feature.FAIL_ON_INVALID_SUBTYPE` is enabled");
+                }
+                tokens.writeFieldName(propName);
+                tokens.copyCurrentStructure(p);
+                continue;
+            }
+            // 30-Sep-2019, tatu: [databind#2475] Possibly inlined...
+            if (_propertyBasedCreator != null) {
+                tokens.writeFieldName(propName);
+                tokens.copyCurrentStructure(p);
+                continue;
+            }
+            // !!! 08-Jul-2011, tatu: but... others should be passed to unwrapped property deserializers
+            tokens.writeFieldName(propName);
+            tokens.copyCurrentStructure(p);
         }
-
         // We hit END_OBJECT, so:
         Object bean;
         try {

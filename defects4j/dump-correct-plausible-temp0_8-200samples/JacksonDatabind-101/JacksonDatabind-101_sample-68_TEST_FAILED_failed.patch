diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
index 3c89dc109..66d2b24ac 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
@@ -733,7 +733,7 @@ public class BeanDeserializer
     }
 
     @SuppressWarnings("resource")
-    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)
+protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)
         throws IOException
     {
         // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped
@@ -805,25 +802,18 @@ public class BeanDeserializer
             //    both to any setter AND buffer... but, for now, the only thing
             //    we can do.
             // how about any setter? We'll get copies but...
-            if (_anySetter == null) {
-                // but... others should be passed to unwrapped property deserializers
-                tokens.writeFieldName(propName);
-                tokens.copyCurrentStructure(p);
-            } else {
-                // Need to copy to a separate buffer first
-                TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);
-                tokens.writeFieldName(propName);
-                tokens.append(b2);
-                try {
-                    buffer.bufferAnyProperty(_anySetter, propName,
-                            _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));
-                } catch (Exception e) {
-                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                }
-                continue;
+            // NOTE: Need to copy to a separate buffer first
+            TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);
+            tokens.writeFieldName(propName);
+            tokens.append(b2);
+            try {
+                buffer.bufferAnyProperty(_anySetter, propName,
+                        _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));
+            } catch (Exception e) {
+                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
             }
+            continue;
         }
-
         // We hit END_OBJECT, so:
         Object bean;
         try {

diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java
index eb937f1c..07aa8529 100644
--- a/src/com/google/javascript/jscomp/CommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java
@@ -803,67 +803,49 @@ public class CommandLineRunner extends
   }
 
   @Override
-  protected CompilerOptions createOptions() {
-    CompilerOptions options = new CompilerOptions();
-    if (flags.processJqueryPrimitives) {
-      options.setCodingConvention(new JqueryCodingConvention());
-    } else {
-      options.setCodingConvention(new ClosureCodingConvention());
-    }
-
-    options.setExtraAnnotationNames(flags.extraAnnotationName);
-
-    CompilationLevel level = flags.compilationLevel;
-    level.setOptionsForCompilationLevel(options);
-
-    if (flags.debug) {
-      level.setDebugOptionsForCompilationLevel(options);
-    }
-
-    if (flags.useTypesForOptimization) {
-      level.setTypeBasedOptimizationOptions(options);
-    }
-
-    if (flags.generateExports) {
-      options.setGenerateExports(flags.generateExports);
-    }
-
-    WarningLevel wLevel = flags.warningLevel;
-    wLevel.setOptionsForWarningLevel(options);
-    for (FormattingOption formattingOption : flags.formatting) {
-      formattingOption.applyToOptions(options);
+private void process(Node externs, Node root) {
+  if (flags.jsOutputFile.isEmpty() || flags.jsOutputFile.equals("-")) {
+    jsOutputFile = System.out;
+  } else {
+    try {
+      jsOutputFile = new PrintStream(flags.jsOutputFile);
+    } catch (IOException e) {
+      throw new RuntimeException(e);
     }
-
-    options.closurePass = flags.processClosurePrimitives;
-
-    options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&
-        flags.processJqueryPrimitives;
-
-    options.angularPass = flags.angularPass;
-
-    if (!flags.translationsFile.isEmpty()) {
-      try {
-        options.messageBundle = new XtbMessageBundle(
-            new FileInputStream(flags.translationsFile),
-            flags.translationsProject);
-      } catch (IOException e) {
-        throw new RuntimeException("Reading XTB file", e);
+  }
+  if (flags.createSourceMap && flags.sourceMapOutputPath.isEmpty()) {
+    flags.createSourceMap = false;
+  }
+  if (flags.createSourceMap) {
+    try {
+      sourceMapFile = new File(flags.sourceMapOutputPath);
+      sourceMapFile.createNewFile();
+      if (!sourceMapFile.isFile()) {
+        throw new IOException();
       }
-    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {
-      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a
-      // translations file, they might reasonably try to write their own
-      // implementation of goog.getMsg that makes the substitution at
-      // run-time.
-      //
-      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,
-      // so we might as well inline it. But shut off the i18n warnings,
-      // because the user didn't really ask for i18n.
-      options.messageBundle = new EmptyMessageBundle();
+      sourceMapOut = new PrintStream(sourceMapFile);
+    } catch (IOException e) {
+      throw new RuntimeException(e);
     }
-
-    return options;
   }
-
+  int numRepetitions = 1;
+  if (flags.chunkSize > 0) {
+    numRepetitions = flags.chunkSize;
+  }
+  for (int i = 0; i < numRepetitions; i++) {
+    if (flags.chunkSize > 0) {
+      processTree(externs, root, i + 1);
+    } else {
+      processTree(externs, root);
+    }
+  }
+  if (sourceMapOut != null) {
+    sourceMapOut.close();
+  }
+  if (jsOutputFile != null) {
+    jsOutputFile.close();
+  }
+}
   @Override
   protected Compiler createCompiler() {
     return new Compiler(getErrorPrintStream());

diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
index 42c6f0491..a77476da2 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
@@ -132,7 +132,27 @@ public final class StringCollectionDeserializer
         }
         return withResolved(delegate, valueDeser, nuller, unwrapSingle);
     }
-    
+    protected JsonDeserializer<?> findConvertingContentDeserializer(DeserializationContext ctxt,
+            BeanProperty property, JsonDeserializer<?> existingDeserializer)
+        throws JsonMappingException
+    {
+        final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();
+        if (intr != null && property != null) {
+            AnnotatedMember m = property.getMember();
+            if (m != null) {
+                Object convDef = intr.findDeserializationContentConverter(m);
+                if (convDef != null) {
+                    Converter<Object,Object> conv = ctxt.converterInstance(property.getMember(), convDef);
+                    JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());
+                    if (existingDeserializer == null) {
+                        existingDeserializer = ctxt.findContextualValueDeserializer(delegateType, property);
+                    }
+                    return new StdDelegatingDeserializer<Object>(conv, delegateType, existingDeserializer);
+                }
+            }
+        }
+        return existingDeserializer;
+    }    
     /*
     /**********************************************************
     /* ContainerDeserializerBase API

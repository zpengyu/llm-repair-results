diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java
index 0f5c5421..3179cbd7 100644
--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java
+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java
@@ -689,7 +689,7 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {
    *        during recursion.
    * @param node The node that follow() should compute.
    */
-  private static Node computeFollowNode(
+private static Node computeFollowNode(
       Node fromNode, Node node, ControlFlowAnalysis cfa) {
     /*
      * This is the case where:
@@ -748,20 +747,18 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {
       case Token.TRY:
         // If we are coming out of the TRY block...
         if (parent.getFirstChild() == node) {
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
+          if (NodeUtil.hasCatchHandler(parent)) {
+            return parent.getChildAtIndex(1);
+          } else { // and have FINALLY block.
             return computeFallThrough(parent.getLastChild());
-          } else { // and have no FINALLY.
-            return computeFollowNode(fromNode, parent, cfa);
           }
-        // CATCH block.
-        } else if (NodeUtil.getCatchBlock(parent) == node){
+        } else if (NodeUtil.getCatchBlock(parent) == node) { // CATCH block.
           if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
             return computeFallThrough(node.getNext());
           } else {
             return computeFollowNode(fromNode, parent, cfa);
           }
-        // If we are coming out of the FINALLY block...
-        } else if (parent.getLastChild() == node){
+        } else if (parent.getLastChild() == node) { // FINALLY block.
           if (cfa != null) {
             for (Node finallyNode : cfa.finallyMap.get(parent)) {
               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);

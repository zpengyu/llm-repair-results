    public void validate(final WriteableCommandLine commandLine)
        throws OptionException {
        // number of options found
        int present = 0;
        // reference to first unexpected option
        Option unexpected = null;
        // validate each option
        for (final Iterator i = options.iterator(); i.hasNext();) {
            final Option option = (Option) i.next();
            // ignore option groups
            if (option instanceof Group) {
                continue;
            }
            if (commandLine.hasOption(option)) {
                if (++present > maximum) {
                    unexpected = option;
                    break;
                }
            }
        }
        // too many options
        if (unexpected != null) {
            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                      unexpected.getPreferredName());
        }
        // too few option
        if (present < minimum) {
            throw new OptionException(this, ResourceConstants.MISSING_OPTION);
        }
        // validate the option groups
        for (final Iterator i = options.iterator(); i.hasNext();) {
            final Option option = (Option) i.next();
            // ignore normal options
            if (option instanceof Group == false) {
                continue;
            }
            option.validate(commandLine);
        }
        // validate each anonymous argument
        for (final Iterator i = anonymous.iterator(); i.hasNext();) {
            final Option option = (Option) i.next();
            option.validate(commandLine);
        }
    }
public void validate(final WriteableCommandLine commandLine) throws OptionException {
    int present = 0;
    Option unexpected = null;

    for (Iterator i = options.iterator(); i.hasNext();) {
        Option option = (Option) i.next();

        // needs validation?
        boolean validate = option.isRequired() || option instanceof Group;
        if (validate) {
            option.validate(commandLine);
        }

        // if the child option is present then validate it
        if (commandLine.hasOption(option)) {
            if (++present > maximum) {
                unexpected = option;
                break;
            }
            option.validate(commandLine);
        }
    }

    // too many options
    if (unexpected != null) {
        throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, unexpected.getPreferredName());
    }

    // too few option
    if (present < minimum) {
        throw new OptionException(this, ResourceConstants.MISSING_OPTION);
    }

    // validate each anonymous argument
    for (Iterator i = anonymous.iterator(); i.hasNext();) {
        Option option = (Option) i.next();
        option.validate(commandLine);
    }
}

    public void validate(final WriteableCommandLine commandLine)
        throws OptionException {
        // number of options found
        int present = 0;
        // reference to first unexpected option
        Option unexpected = null;
        for (final Iterator i = options.iterator(); i.hasNext();) {
            final Option option = (Option) i.next();
            // needs validation?
            boolean validate = option.isRequired() || option instanceof Group;
            if (validate) {
                option.validate(commandLine);
            }
            // if the child option is present then validate it
            if (commandLine.hasOption(option)) {
                if (++present > maximum) {
                    unexpected = option;
                    break;
                }
                option.validate(commandLine);
            }
        }
        // too many options
        if (unexpected != null) {
            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                      unexpected.getPreferredName());
        }
        // too few option
        if (present < minimum) {
            throw new OptionException(this, ResourceConstants.MISSING_OPTION);
        }
        // validate each anonymous argument
        for (final Iterator i = anonymous.iterator(); i.hasNext();) {
            final Option option = (Option) i.next();
            option.validate(commandLine);
        }
        // if we have enough options...
        if (present >= minimum) {
            // ...ensure the long option is specified at least once
            if (options.size() > 0) {
                final Iterator i = options.iterator();
                while (i.hasNext()) {
                    final Option option = (Option) i.next();
                    // long option must be present
                    if (option instanceof Argument) {
                        if (!commandLine.hasOption(option)) {
                            throw new OptionException(this, ResourceConstants.MISSING_OPTION,
                                                      option.getPreferredName());
                        }
                    }
                }
            }
        }
    }
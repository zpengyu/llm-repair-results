diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java
index c6d25483..0487b2bf 100644
--- a/src/com/google/javascript/jscomp/TypeValidator.java
+++ b/src/com/google/javascript/jscomp/TypeValidator.java
@@ -721,10 +721,8 @@ class TypeValidator {
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
-  String getReadableJSTypeName(Node n, boolean dereference) {
-
+    String getReadableJSTypeName(Node n, boolean dereference) {
     // The best type name is the actual type name.
-
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
@@ -742,13 +740,13 @@ class TypeValidator {
             objectType = objectType.getImplicitPrototype();
           }
         }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
+        if (objectType != null) {
+          // Don't show complex function names or anonymous types.
+          // Instead, try to get a human-readable type name.
+          if (objectType.getConstructor() != null ||
+              objectType.isFunctionPrototypeType()) {
+            return objectType.toString() + "." + propName;
+          }
         }
       }
     }

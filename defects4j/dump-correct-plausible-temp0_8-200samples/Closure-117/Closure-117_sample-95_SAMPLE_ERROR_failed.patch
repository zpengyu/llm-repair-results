diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java
index c6d25483..27abe036 100644
--- a/src/com/google/javascript/jscomp/TypeValidator.java
+++ b/src/com/google/javascript/jscomp/TypeValidator.java
@@ -722,38 +722,8 @@ class TypeValidator {
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
-    if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
-        String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
-          }
-        }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
-        }
-      }
-    }
-
     JSType type = getJSType(n);
+    // The best type name is the actual type name.
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
@@ -768,7 +738,35 @@ class TypeValidator {
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
-    } else if (type.isFunctionType()) {
+    }
+    if (n.isGetProp() && type.isObjectType()) {
+      // If we're analyzing a GETPROP, the property may be inherited by the
+      // prototype chain. So climb the prototype chain and find out where
+      // the property was originally defined.
+      ObjectType objectType = type.toObjectType();
+      String propName = n.getLastChild().getString();
+      // ObjectType.toString() needs to be called with the original name,
+      // while ObjectType.getConstructor() needs to be called with the
+      // original name converted to camel case.
+      if (objectType.getConstructor() != null &&
+          objectType.getConstructor().isInterface()) {
+        objectType = FunctionType.getTopDefiningInterface(
+            objectType, propName);
+      } else {
+        // classes
+        while (objectType != null && !objectType.hasOwnProperty(propName)) {
+          objectType = objectType.getImplicitPrototype();
+        }
+      }
+      // Don't show complex function names or anonymous types.
+      // Instead, try to get a human-readable type name.
+      if (objectType != null &&
+          (objectType.getConstructor() != null ||
+           objectType.isFunctionPrototypeType())) {
+        return objectType.toString() + "." + propName;
+      }
+    }
+    if (type.isFunctionType()) {
       // Don't show complex function names.
       return "function";
     } else {

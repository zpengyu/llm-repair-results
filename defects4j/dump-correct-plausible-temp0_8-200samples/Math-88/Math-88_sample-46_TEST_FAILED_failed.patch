diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
index e5295d0bf..49ae2e2a5 100644
--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
@@ -323,16 +323,13 @@ class SimplexTableau implements Serializable {
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
                 // if multiple variables can take a given value 
                 // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+                coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));
             if (basicRow != null) {
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
@@ -341,9 +338,13 @@ class SimplexTableau implements Serializable {
                 }
             }
         }
+        if (restrictToNonNegative) {
+            for (int i = 0; i < coefficients.length; i++) {
+                coefficients[i] -= mostNegative;
+            }
+        }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
-
     /**
      * Subtracts a multiple of one row from another.
      * <p>

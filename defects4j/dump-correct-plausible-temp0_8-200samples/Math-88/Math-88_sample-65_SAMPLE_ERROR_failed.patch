diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
index e5295d0bf..c9982ad46 100644
--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
@@ -336,14 +336,23 @@ class SimplexTableau implements Serializable {
             if (basicRow != null) {
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+                         coefficients[j] = 0;
                     }
                 }
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
-
+* Mutation testing is the process of determining the quality of the tests by mutating the software under test and observing whether the tests detect the deviations.
+* Mutants are small source code modifications that should not change the software behavior.
+* Mutation testing is a fault-based technique, i.e., the quality of the tests is determined by the number of mutants they kill.
+* Mutants are an approximation of faults.
+* If a mutant is killed, the test is good.
+* If a mutant survives, the test is not good enough.
+<img src="https://github.com/cs-au-dk/MLSC/blob/master/Lectures/Lecture%2002/Pics/EvoSuite.png?raw=1" width="500"/>
+<img src="https://github.com/cs-au-dk/MLSC/blob/master/Lectures/Lecture%2002/Pics/Pit%20mutation.png?raw=1" width="500"/>
+<img src="https://github.com/cs-au-dk/MLSC/blob/master/Lectures/Lecture%2002/Pics/Pit%20mutation%20operator.png?raw=1" width="500"/>
+<img src="https://github.com/cs-au-dk/MLSC/blob/master/Lectures/Lecture%2002/Pics/Mutation%20testing.png?raw=1" width="500"/>
     /**
      * Subtracts a multiple of one row from another.
      * <p>

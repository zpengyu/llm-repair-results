diff --git a/gson/src/main/java/com/google/gson/TypeInfoFactory.java b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
index 0aa1455a..b20582ea 100644
--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java
+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
@@ -29,32 +29,15 @@ import java.lang.reflect.WildcardType;
  * @author Inderjeet Singh
  * @author Joel Leitch
  */
-final class TypeInfoFactory {
-
-  private TypeInfoFactory() {
-    // Not instantiable since it provides factory methods only.
-  }
-
-  public static TypeInfoArray getTypeInfoForArray(Type type) {
-    Preconditions.checkArgument(TypeUtils.isArray(type));
-    return new TypeInfoArray(type);
-  }
-
-  /**
-   * Evaluates the "actual" type for the field.  If the field is a "TypeVariable" or has a
-   * "TypeVariable" in a parameterized type then it evaluates the real type.
-   *
-   * @param f the actual field object to retrieve the type from
-   * @param typeDefiningF the type that contains the field {@code f}
-   * @return the type information for the field
-   */
   public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) {
     Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF);
     Type type = f.getGenericType();
     Type actualType = getActualType(type, typeDefiningF, classDefiningF);
+    if (actualType == null) {
+      return null;
+    }
     return new TypeInfo(actualType);
   }
-
   private static Type getActualType(
       Type typeToEvaluate, Type parentType, Class<?> rawParentClass) {
     if (typeToEvaluate instanceof Class<?>) {
@@ -77,26 +60,21 @@ final class TypeInfoFactory {
           TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))
           : new GenericArrayTypeImpl(actualType);
     } else if (typeToEvaluate instanceof TypeVariable<?>) {
-      if (parentType instanceof ParameterizedType) {
-        // The class definition has the actual types used for the type variables.
-        // Find the matching actual type for the Type Variable used for the field.
-        // For example, class Foo<A> { A a; }
-        // new Foo<Integer>(); defines the actual type of A to be Integer.
-        // So, to find the type of the field a, we will have to look at the class'
-        // actual type arguments.
-        TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;
-        TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();
-        ParameterizedType objParameterizedType = (ParameterizedType) parentType;
-        int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);
-        Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();
-        return actualTypeArguments[indexOfActualTypeArgument];
-
-
+      TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;
+      TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();
+      int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);
+      if (indexOfActualTypeArgument < 0 || !(parentType instanceof ParameterizedType)) {
+        return null;
       }
-
-      throw new UnsupportedOperationException("Expecting parameterized type, got " + parentType
-          + ".\n Are you missing the use of TypeToken idiom?\n See "
-          + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener");
+      // The class definition has the actual types used for the type variables.
+      // Find the matching actual type for the Type Variable used for the field.
+      // For example, class Foo<A> { A a; }
+      // new Foo<Integer>(); defines the actual type of A to be Integer.
+      // So, to find the type of the field a, we will have to look at the class'
+      // actual type arguments.
+      ParameterizedType objParameterizedType = (ParameterizedType) parentType;
+      Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();
+      return actualTypeArguments[indexOfActualTypeArgument];
     } else if (typeToEvaluate instanceof WildcardType) {
       WildcardType castedType = (WildcardType) typeToEvaluate;
       return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);
@@ -105,12 +83,7 @@ final class TypeInfoFactory {
           + "ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.");
     }
   }
-
-
-      // Evaluate type on this type
-
-
-
+  // Evaluate type on this type
   private static Type[] extractRealTypes(
       Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) {
     Preconditions.checkNotNull(actualTypeArguments);
@@ -128,7 +99,6 @@ final class TypeInfoFactory {
         return i;
       }
     }
-    throw new IllegalStateException(
-        "How can the type variable not be present in the class declaration!");
+    return -1;
   }
 }
\ No newline at end of file

diff --git a/gson/src/main/java/com/google/gson/TypeInfoFactory.java b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
index 0aa1455a..c1df03af 100644
--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java
+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
@@ -99,18 +92,18 @@ final class TypeInfoFactory {
           + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener");
     } else if (typeToEvaluate instanceof WildcardType) {
       WildcardType castedType = (WildcardType) typeToEvaluate;
-      return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);
+      if (castedType.getLowerBounds() != null && castedType.getLowerBounds().length > 0) {
+        return getActualType(castedType.getLowerBounds()[0], parentType, rawParentClass);
+      } else if (castedType.getUpperBounds() != null && castedType.getUpperBounds().length > 0) {
+        return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);
+      }
     } else {
       throw new IllegalArgumentException("Type \'" + typeToEvaluate + "\' is not a Class, "
           + "ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.");
     }
+    return typeToEvaluate;
   }
-
-
       // Evaluate type on this type
-
-
-
   private static Type[] extractRealTypes(
       Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) {
     Preconditions.checkNotNull(actualTypeArguments);

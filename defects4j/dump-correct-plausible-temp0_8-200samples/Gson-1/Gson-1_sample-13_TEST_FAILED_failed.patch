diff --git a/gson/src/main/java/com/google/gson/TypeInfoFactory.java b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
index 0aa1455a..38621a7d 100644
--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java
+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
@@ -90,10 +86,25 @@ final class TypeInfoFactory {
         int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);
         Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();
         return actualTypeArguments[indexOfActualTypeArgument];
-
-
+      } else if (parentType instanceof Class<?>) {
+        // If the field is a static field, the parentType will be a Class and not a ParameterizedType.
+        // We will have to get the actual type from the class definition.
+        TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;
+        TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();
+        int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);
+        Type[] genericTypeArguments = rawParentClass.getGenericInterfaces();
+        if (genericTypeArguments.length > 0) {
+          for (Type genericTypeArgument : genericTypeArguments) {
+            if (genericTypeArgument instanceof ParameterizedType) {
+              return getActualType(
+                  ((ParameterizedType) genericTypeArgument).getActualTypeArguments()[indexOfActualTypeArgument],
+                  rawParentClass,
+                  rawParentClass);
+            }
+          }
+        }
+        return getActualType(rawParentClass.getGenericSuperclass(), rawParentClass, rawParentClass);
       }
-
       throw new UnsupportedOperationException("Expecting parameterized type, got " + parentType
           + ".\n Are you missing the use of TypeToken idiom?\n See "
           + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener");

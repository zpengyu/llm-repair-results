diff --git a/gson/src/main/java/com/google/gson/TypeInfoFactory.java b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
index 0aa1455a..a93f4d8c 100644
--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java
+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
@@ -90,10 +86,25 @@ final class TypeInfoFactory {
         int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);
         Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();
         return actualTypeArguments[indexOfActualTypeArgument];
-
-
+      } else if (parentType instanceof GenericArrayType) {
+        // If the parent type is a GenericArrayType, the actual type must be a GenericArrayType.
+        // We only need to make sure the component type is resolved.
+        // e.g. class Foo<A> { A[] a; }
+        // new Foo<Integer>(); defines the actual type of A to be Integer.
+        // So, to find the type of the field a, we will have to look at the class'
+        // actual type arguments and use it as the component type for the GenericArrayType.
+        GenericArrayType parentGenericArrayType = (GenericArrayType) parentType;
+        Type actualParentComponentType =
+            getActualType(parentGenericArrayType.getGenericComponentType(), parentType,
+                rawParentClass);
+        if (actualParentComponentType instanceof Class<?>) {
+          return TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualParentComponentType));
+        } else if (actualParentComponentType instanceof GenericArrayType) {
+          return actualParentComponentType;
+        } else {
+          return new GenericArrayTypeImpl(actualParentComponentType);
+        }
       }
-
       throw new UnsupportedOperationException("Expecting parameterized type, got " + parentType
           + ".\n Are you missing the use of TypeToken idiom?\n See "
           + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener");

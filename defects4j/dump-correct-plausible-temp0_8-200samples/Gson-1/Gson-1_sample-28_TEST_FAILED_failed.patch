diff --git a/gson/src/main/java/com/google/gson/TypeInfoFactory.java b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
index 0aa1455a..01ab9ad6 100644
--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java
+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
@@ -77,26 +73,13 @@ final class TypeInfoFactory {
           TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))
           : new GenericArrayTypeImpl(actualType);
     } else if (typeToEvaluate instanceof TypeVariable<?>) {
-      if (parentType instanceof ParameterizedType) {
-        // The class definition has the actual types used for the type variables.
-        // Find the matching actual type for the Type Variable used for the field.
-        // For example, class Foo<A> { A a; }
-        // new Foo<Integer>(); defines the actual type of A to be Integer.
-        // So, to find the type of the field a, we will have to look at the class'
-        // actual type arguments.
-        TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;
-        TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();
-        ParameterizedType objParameterizedType = (ParameterizedType) parentType;
-        int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);
-        Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();
-        return actualTypeArguments[indexOfActualTypeArgument];
-
-
-      }
-
-      throw new UnsupportedOperationException("Expecting parameterized type, got " + parentType
-          + ".\n Are you missing the use of TypeToken idiom?\n See "
-          + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener");
+      TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;
+      TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();
+      ParameterizedType objParameterizedType = (ParameterizedType) parentType;
+      Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();
+      int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);
+      Type actualTypeArgument = actualTypeArguments[indexOfActualTypeArgument];
+      return actualTypeArgument;
     } else if (typeToEvaluate instanceof WildcardType) {
       WildcardType castedType = (WildcardType) typeToEvaluate;
       return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);
@@ -105,12 +88,6 @@ final class TypeInfoFactory {
           + "ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.");
     }
   }
-
-
-      // Evaluate type on this type
-
-
-
   private static Type[] extractRealTypes(
       Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) {
     Preconditions.checkNotNull(actualTypeArguments);

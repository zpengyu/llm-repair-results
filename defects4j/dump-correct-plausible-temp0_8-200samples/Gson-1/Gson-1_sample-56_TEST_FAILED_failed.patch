diff --git a/gson/src/main/java/com/google/gson/TypeInfoFactory.java b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
index 0aa1455a..822a997e 100644
--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java
+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
@@ -90,10 +86,15 @@ final class TypeInfoFactory {
         int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);
         Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();
         return actualTypeArguments[indexOfActualTypeArgument];
-
-
+      } else if (rawParentClass.equals(typeToEvaluate)) {
+        // If the type is a TypeVariable declared on the class itself it will resolve to the type
+        // variable. So, in case we are in Foo<A>, Foo.class.getTypeParameters() returns [A]
+        // so calling getActualType(A, Foo.class, Foo) would cause an infinite loop
+        // and hence we will just return the typeToEvaluate, instead of returning
+        // the actual type.
+        // TODO(nghiatt): is there a way to evaluate this correctly?
+        return typeToEvaluate;
       }
-
       throw new UnsupportedOperationException("Expecting parameterized type, got " + parentType
           + ".\n Are you missing the use of TypeToken idiom?\n See "
           + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener");

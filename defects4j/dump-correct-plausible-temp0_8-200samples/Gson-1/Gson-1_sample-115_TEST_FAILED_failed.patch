diff --git a/gson/src/main/java/com/google/gson/TypeInfoFactory.java b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
index 0aa1455a..44e718d4 100644
--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java
+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
@@ -90,10 +86,19 @@ final class TypeInfoFactory {
         int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);
         Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();
         return actualTypeArguments[indexOfActualTypeArgument];
-
-
+      } else if (parentType instanceof Class) {
+        // We find the actual type of the Type variable within the parentType. This is useful
+        // when the type variable is defined by a supertype. For example,
+        // class Foo<A> { }
+        // class Bar extends Foo<Integer> { }
+        // int getTypeVariableIndex(Foo<A>, Bar.class) will return the index of A within Foo.
+        // Then, the actual type of A is Integer.
+        TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;
+        TypeVariable<?>[] classTypeVariables = ((Class) parentType).getTypeParameters();
+        int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);
+        Type[] actualTypeArguments = ((Class) parentType).getTypeParameters();
+        return actualTypeArguments[indexOfActualTypeArgument];
       }
-
       throw new UnsupportedOperationException("Expecting parameterized type, got " + parentType
           + ".\n Are you missing the use of TypeToken idiom?\n See "
           + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener");

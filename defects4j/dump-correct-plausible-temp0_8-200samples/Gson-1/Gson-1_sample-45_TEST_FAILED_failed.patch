diff --git a/gson/src/main/java/com/google/gson/TypeInfoFactory.java b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
index 0aa1455a..14d6ce83 100644
--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java
+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
@@ -100,7 +93,14 @@ final class TypeInfoFactory {
     } else if (typeToEvaluate instanceof WildcardType) {
       WildcardType castedType = (WildcardType) typeToEvaluate;
       return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);
-    } else {
+    } else if(typeToEvaluate instanceof java.lang.reflect.TypeVariable){
+    	java.lang.reflect.TypeVariable<?> fieldTypeVariable = (java.lang.reflect.TypeVariable<?>) typeToEvaluate;
+    	java.lang.reflect.TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();
+    	ParameterizedType objParameterizedType = (ParameterizedType) parentType;
+    	int indexOfActualTypeArgument = getIndex1(classTypeVariables, fieldTypeVariable);
+    	Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();
+    	return actualTypeArguments[indexOfActualTypeArgument];
+    }else {
       throw new IllegalArgumentException("Type \'" + typeToEvaluate + "\' is not a Class, "
           + "ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.");
     }
@@ -131,4 +124,13 @@ final class TypeInfoFactory {
     throw new IllegalStateException(
         "How can the type variable not be present in the class declaration!");
   }
+  private static int getIndex1(java.lang.reflect.TypeVariable<?>[] types, java.lang.reflect.TypeVariable<?> type) {
+	    for (int i = 0; i < types.length; ++i) {
+	      if (type.equals(types[i])) {
+	        return i;
+	      }
+	    }
+	    throw new IllegalStateException(
+	        "How can the type variable not be present in the class declaration!");
+	  }
 }
\ No newline at end of file

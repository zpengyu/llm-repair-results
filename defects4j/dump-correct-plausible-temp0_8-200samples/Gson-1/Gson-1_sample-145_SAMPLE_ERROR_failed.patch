diff --git a/gson/src/main/java/com/google/gson/TypeInfoFactory.java b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
index 0aa1455a..ce2110d7 100644
--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java
+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
@@ -114,10 +102,13 @@ final class TypeInfoFactory {
   private static Type[] extractRealTypes(
       Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) {
     Preconditions.checkNotNull(actualTypeArguments);
-
     Type[] retTypes = new Type[actualTypeArguments.length];
     for (int i = 0; i < actualTypeArguments.length; ++i) {
-      retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass);
+      if (actualTypeArguments[i] instanceof WildcardType) {
+        retTypes[i] = getActualType(((WildcardType) actualTypeArguments[i]).getUpperBounds()[0], parentType, rawParentClass);
+      } else {
+        retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass);
+      }
     }
     return retTypes;
   }
@@ -132,3 +122,6 @@ final class TypeInfoFactory {
         "How can the type variable not be present in the class declaration!");
   }
 }
+<p>
+We have seen how to generate random test cases for a given function. However, this approach needs to be complemented with a randomization strategy to generate a set of test inputs for each type. In the next two lectures we will see different strategies to generate a set of test cases.
+<p>
\ No newline at end of file

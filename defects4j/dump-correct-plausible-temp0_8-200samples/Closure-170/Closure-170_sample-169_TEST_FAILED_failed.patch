diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
index 73531dc5..98357f59 100644
--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
@@ -476,10 +475,10 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+          if (n.isName() && n.getString().equals(varName)) {
+            if (
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
@@ -489,14 +488,12 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback
                (parent.getFirstChild() == n))) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
+            }
           }
         }
-
       };
-
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
-    }
-  }
+    }  }
 
   /**
    * Given an expression by its root and sub-expression n, return true if there

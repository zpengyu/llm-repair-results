    private void getNumUseInUseCfgNode(final Node cfgNode) {
        numUsesWithinCfgNode = 0;
        AbstractCfgNodeTraversalCallback gatherCb =
            new AbstractCfgNodeTraversalCallback() {

              @Override
              public void visit(NodeTraversal t, Node n, Node parent) {
                if (n.isName() && n.getString().equals(varName)) {
                  if (NodeUtil.isLhsByDestructuring(n)) {
                    return;
                  }

                  if (parent.isAssign() &&
                      !(parent.getFirstChild() == n)) {
                    numUsesWithinCfgNode++;
                  } else if (!parent.isAssign()) {
                    numUsesWithinCfgNode++;
                  }
                }
              }

            };

        NodeTraversal.traverse(compiler, cfgNode, gatherCb);
      }
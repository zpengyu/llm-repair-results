diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
index 73531dc5..36dff18a 100644
--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
@@ -471,32 +471,26 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
-    private void getNumUseInUseCfgNode(final Node cfgNode) {
-
-      numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
-
-        @Override
-        public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
-              numUsesWithinCfgNode++;
-          }
+private void getNumUseInUseCfgNode(final Node cfgNode) {
+  numUsesWithinCfgNode = 0;
+  AbstractCfgNodeTraversalCallback gatherCb =
+      new AbstractCfgNodeTraversalCallback() {
+    @Override
+    public void visit(NodeTraversal t, Node n, Node parent) {
+      if (n.isName() && n.getString().equals(varName)) {
+        // Make sure we don't count refs from the top-level
+        // assignment chain in cases where the entire cfgNode
+        // is a chain of assignments.
+        if (parent.isAssign() &&
+            (parent.getFirstChild() == n)) {
+          return;
         }
-
-      };
-
-      NodeTraversal.traverse(compiler, cfgNode, gatherCb);
+        numUsesWithinCfgNode++;
+      }
     }
-  }
+  };
+  NodeTraversal.traverse(compiler, cfgNode, gatherCb);
+}  }
 
   /**
    * Given an expression by its root and sub-expression n, return true if there

     private void getNumUseInUseCfgNode(final Node cfgNode) {
      numUsesWithinCfgNode = 0;
      AbstractCfgNodeTraversalCallback gatherCb =
          new AbstractCfgNodeTraversalCallback() {
        @Override
        public void visit(NodeTraversal t, Node n, Node parent) {
          if (n.isName() && n.getString().equals(varName) &&
            // We make a special exception when the entire cfgNode is a chain
            // of assignments, since in that case the assignment statements
            // will happen after the inlining of the right hand side.
            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
            //   and remove this special case.
              !(parent.isAssign() &&
               (parent.getFirstChild() == n)) &&
            // We make a special exception for CODE_ADD nodes, because in some
            // cases the CALL nodes on the left-hand-side of an expression get
            // converted to CODE_ADD with the CALL node as a child and the
            // call expression as a grandchild. In those cases, we want to
            // ignore the node, since it is the grandchild that gets replaced.
              !(NodeUtil.isExpressionNode(parent) &&
                parent.getType() != Token.CODE_ADD)) {
              // Don't count lhs of top-level assignment chain
              // Don't count CODE_ADD nodes' children that are replaced.
              numUsesWithinCfgNode++;
          }
        }
      };
      NodeTraversal.traverse(compiler, cfgNode, gatherCb);
    }
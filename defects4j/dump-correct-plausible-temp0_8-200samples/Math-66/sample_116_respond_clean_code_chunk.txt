public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
    /**
     * Golden section.
     */
    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));
    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);
    /**
     * Construct a solver.
     */
    public BrentOptimizer() {
        setMaxEvaluations(Integer.MAX_VALUE);
        setMaximalIterationCount(100);
        setAbsoluteAccuracy(1E-10);
        setRelativeAccuracy(1.0e-14);
        setFunctionValueAccuracy(1.0e-15);
    }
    /**
     * Find the minimum of the function within the interval {@code (lo, hi)}.
     *
     * If the function is defined on the interval {@code (lo, hi)}, then
     * this method finds an approximation {@code x} to the point at which
     * the function attains its minimum.<br/>
     * {@code t} and {@code eps} define a tolerance {@code tol = eps |x| + t}
     * and the function is never evaluated at two points closer together than
     * {@code tol}. {@code eps} should be no smaller than <em>2 macheps</em> and
     * preferable not much less than <em>sqrt(macheps)</em>, where
     * <em>macheps</em> is the relative machine precision. {@code t} should be
     * positive.
     * @param isMinim {@code true} when minimizing the function.
     * @param lo Lower bound of the interval.
     * @param mid Point inside the interval {@code [lo, hi]}.
     * @param hi Higher bound of the interval.
     * @param eps Relative accuracy.
     * @param t Absolute accuracy.
     * @return the optimum point.
     * @throws MaxIterationsExceededException if the maximum iteration count
     * is exceeded.
     * @throws FunctionEvaluationException if an error occurs evaluating
     * the function.
     */
    private double localMin(boolean isMinim,
                            UnivariateRealFunction f,
                            GoalType goalType,
                            double lo, double mid, double hi,
                            double eps, double t)
        throws MaxIterationsExceededException, FunctionEvaluationException {
        if (eps <= 0) {
            throw new NotStrictlyPositiveException(eps);
        }
        if (t <= 0) {
            throw new NotStrictlyPositiveException(t);
        }
        double a, b;
        if (lo < hi) {
            a = lo;
            b = hi;
        } else {
            a = hi;
            b = lo;
        }
        double x = mid;
        double v = x;
        double w = x;
        double d = 0;
        double e = 0;
        double fx = computeObjectiveValue(f, x);
        if (goalType == GoalType.MAXIMIZE) {
            fx = -fx;
        }
        double fv = fx;
        double fw = fx;
        int count = 0;
        while (count < maximalIterationCount) {
            double m = 0.5 * (a + b);
            final double tol1 = eps * Math.abs(x) + t;
            final double tol2 = 2 * tol1;
            // Check stopping criterion.
            if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {
                double p = 0;
                double q = 0;
                double r = 0;
                double u = 0;
                if (Math.abs(e) > tol1) { // Fit parabola.
                    r = (x - w) * (fx - fv);
                    q = (x - v) * (fx - fw);
                    p = (x - v) * q - (x - w) * r;
                    q = 2 * (q - r);
                    if (q > 0) {
                        p = -p;
                    } else {
                        q = -q;
                    }
                    r = e;
                    e = d;
                    if (p > q * (a - x)
                        && p < q * (b - x)
                        && Math.abs(p) < Math.abs(0.5 * q * r)) {
                        // Parabolic interpolation step.
                        d = p / q;
                        u = x + d;
                        // f must not be evaluated too close to a or b.
                        if (u - a < tol2
                            || b - u < tol2) {
                            if (x <= m) {
                                d = tol1;
                            } else {
                                d = -tol1;
                            }
                        }
                    } else {
                        // Golden section step.
                        if (x < m) {
                            e = b - x;
                        } else {
                            e = a - x;
                        }
                        d = GOLDEN_SECTION * e;
                    }
                } else {
                    // Golden section step.
                    if (x < m) {
                        e = b - x;
                    } else {
                        e = a - x;
                    }
                    d = GOLDEN_SECTION * e;
                }
                // Update by at least "tol1".
                if (Math.abs(d) < tol1) {
                    if (d >= 0) {
                        u = x + tol1;
                    } else {
                        u = x - tol1;
                    }
                } else {
                    u = x + d;
                }
                double fu = computeObjectiveValue(f, u);
                if (goalType == GoalType.MAXIMIZE) {
                    fu = -fu;
                }
                // Update a, b, v, w and x.
                if (fu <= fx) {
                    if (u < x) {
                        b = x;
                    } else {
                        a = x;
                    }
                    v = w;
                    fv = fw;
                    w = x;
                    fw = fx;
                    x = u;
                    fx = fu;
                } else {
                    if (u < x) {
                        a = u;
                    } else {
                        b = u;
                    }
                    if (fu <= fw
                        || w == x) {
                        v = w;
                        fv = fw;
                        w = u;
                        fw = fu;
                    } else if (fu <= fv
                               || v == x
                               || v == w) {
                        v = u;
                        fv = fu;
                    }
                }
            } else { // termination
                final double absX = Math.abs(x);
                final double maxXA = Math.max(absX, Math.abs(a));
                final double maxXB = Math.max(absX, Math.abs(b));
                final double minAB = Math.min(Math.abs(a), Math.abs(b));
                if ((t <= absX) && (t <= minAB) && (minAB <= maxXA) && (minAB <= maxXB)) {
                    // t is too small, and it is not an interval endpoint
                    setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);
                    return x;
                } else {
                    if (goalType == GoalType.MAXIMIZE) {
                        if (fw < fx) {
                            setResult(w, -fw, count);
                        } else {
                            setResult(x, -fx, count);
                        }
                    } else {
                        if (fw < fx) {
                            setResult(w, fw, count);
                        } else {
                            setResult(x, fx, count);
                        }
                    }
                    return result;
                }
            }
            ++count;
        }
        throw new MaxIterationsExceededException(maximalIterationCount);
    }
    /**
     * {@inheritDoc}
     */
    @Override
    protected double doOptimize()
        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
        final double startValue = getStartValue();
        final double absoluteAccuracy = getAbsoluteAccuracy();
        final double relativeAccuracy = getRelativeAccuracy();
        final double functionValueAccuracy = getFunctionValueAccuracy();
        verifySequence(getMin(), startValue, getMax());
        if (absoluteAccuracy < 0) {
            throw new NotStrictlyPositiveException(absoluteAccuracy);
        }
        if (relativeAccuracy < MIN_RELATIVE_TOLERANCE) {
            throw new NumberIsTooSmallException(relativeAccuracy, MIN_RELATIVE_TOLERANCE, false);
        }
        if (functionValueAccuracy < 0) {
            throw new NotStrictlyPositiveException(functionValueAccuracy);
        }
        final double xA = getMin();
        final double xB = getMax();
        double fxA = computeObjectiveValue(xA);
        if (getGoalType() == GoalType.MINIMIZE) {
            fxA = -fxA;
        }
        double fxB = computeObjectiveValue(xB);
        if (getGoalType() == GoalType.MINIMIZE) {
            fxB = -fxB;
        }
        // Check for zeros before verifying bracketing
        if (Precision.equals(fxA, 0.0, 1)) {
            setResult(xA, 0.0, 0);
            return xA;
        }
        if (Precision.equals(fxB, 0.0, 1)) {
            setResult(xB, 0.0, 0);
            return xB;
        }
        // Check for bracketing
        if (!isBracketing(fxA, fxB)) {
            final double[] bracket = new BracketFinder(this.f, xA, xB, fxA, fxB, getGoalType()).search();
            fxA = bracket[1];
            fxB = bracket[3];
            setMin(bracket[0]);
            setMax(bracket[2]);
        }
        return localMin(getGoalType() == GoalType.MINIMIZE,
                        f, getGoalType(),
                        xA, startValue, xB,
                        relativeAccuracy, absoluteAccuracy);
    }
}
diff --git a/src/main/java/org/jsoup/helper/DataUtil.java b/src/main/java/org/jsoup/helper/DataUtil.java
index bbbd8fb..389e6bc 100644
--- a/src/main/java/org/jsoup/helper/DataUtil.java
+++ b/src/main/java/org/jsoup/helper/DataUtil.java
@@ -90,7 +90,7 @@ public final class DataUtil {
         }
     }
 
-    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException  {
+    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {
         if (input == null) // empty body
             return new Document(baseUri);
         input = ConstrainableInputStream.wrap(input, bufferSize, 0);
@@ -119,10 +114,16 @@ public final class DataUtil {
             Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");
             String foundCharset = null; // if not found, will keep utf-8 as best attempt
             for (Element meta : metaElements) {
-                if (meta.hasAttr("http-equiv"))
+                if (meta.hasAttr("http-equiv")) {
+                    if (!meta.hasAttr("content"))
+                        continue;
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
-                if (foundCharset == null && meta.hasAttr("charset"))
+                }
+                if (foundCharset == null && meta.hasAttr("charset")) {
+                    if (!meta.hasAttr("charset"))
+                        continue;
                     foundCharset = meta.attr("charset");
+                }
                 if (foundCharset != null)
                     break;
             }
@@ -148,8 +148,8 @@ public final class DataUtil {
             if (charsetName == null)
                 charsetName = defaultCharset;
             BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);
-                doc = parser.parseInput(reader, baseUri);
-                // io exception when parsing (not seen before because reading the stream as we go)
+            doc = parser.parseInput(reader, baseUri);
+            // io exception when parsing (not seen before because reading the stream as we go)
             doc.outputSettings().charset(charsetName);
         }
         input.close();

diff --git a/src/main/java/org/jsoup/helper/DataUtil.java b/src/main/java/org/jsoup/helper/DataUtil.java
index bbbd8fb..865f6bb 100644
--- a/src/main/java/org/jsoup/helper/DataUtil.java
+++ b/src/main/java/org/jsoup/helper/DataUtil.java
@@ -90,72 +90,23 @@ public final class DataUtil {
         }
     }
 
-    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException  {
-        if (input == null) // empty body
+    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {
+        Validate.notNull(input, "Must provide an input stream");
+        // work around for bug in Eclipse console reader. System.in requires Ctrl-C to exit,
+        // which sends it a -1. To work around, we just wrap it to a PushbackInputStream, and
+        // push the read char (-1) back on
+        if (input.markSupported()) input.mark(1);
+        int firstChar = input.read();
+        if (firstChar == -1)
             return new Document(baseUri);
-        input = ConstrainableInputStream.wrap(input, bufferSize, 0);
-
-        Document doc = null;
-        boolean fullyRead = false;
-
-        // read the start of the stream and look for a BOM or meta charset
-        input.mark(bufferSize);
-        ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed. First read is < buffer size, so can't be invalid.
-        fullyRead = input.read() == -1;
-        input.reset();
-
-        // look for BOM - overrides any other header or input
-        BomCharset bomCharset = detectCharsetFromBom(firstBytes);
-        if (bomCharset != null) {
-            charsetName = bomCharset.charset;
-            input.skip(bomCharset.offset);
+        if (input.markSupported()) input.reset();
+        else input = new PushbackInputStream(input, 1);
+        if (firstChar == '<') { // looks like HTML
+            return parseXmlInputStream(input, charsetName, baseUri, parser);
+        } else { // assume plain text
+            return parseTextInputStream(input, charsetName, baseUri, parser);
         }
-
-        if (charsetName == null) { // determine from meta. safe first parse as UTF-8
-            String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();
-            doc = parser.parseInput(docData, baseUri);
-
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");
-            String foundCharset = null; // if not found, will keep utf-8 as best attempt
-            for (Element meta : metaElements) {
-                if (meta.hasAttr("http-equiv"))
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
-                if (foundCharset == null && meta.hasAttr("charset"))
-                    foundCharset = meta.attr("charset");
-                if (foundCharset != null)
-                    break;
-            }
-
-            // look for <?xml encoding='ISO-8859-1'?>
-            if (foundCharset == null && doc.childNodeSize() > 0 && doc.childNode(0) instanceof XmlDeclaration) {
-                XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0);
-                if (prolog.name().equals("xml"))
-                    foundCharset = prolog.attr("encoding");
-            }
-            foundCharset = validateCharset(foundCharset);
-            if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)
-                foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                charsetName = foundCharset;
-                doc = null;
-            } else if (!fullyRead) {
-                doc = null;
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-        }
-        if (doc == null) {
-            if (charsetName == null)
-                charsetName = defaultCharset;
-            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);
-                doc = parser.parseInput(reader, baseUri);
-                // io exception when parsing (not seen before because reading the stream as we go)
-            doc.outputSettings().charset(charsetName);
-        }
-        input.close();
-        return doc;
     }
-
     /**
      * Read the input stream into a byte buffer. To deal with slow input streams, you may interrupt the thread this
      * method is executing on. The data read until being interrupted will be available.

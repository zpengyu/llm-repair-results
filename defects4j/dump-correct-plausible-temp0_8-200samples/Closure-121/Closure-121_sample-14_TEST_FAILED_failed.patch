diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java
index 03f4fcf3..b3e8051a 100644
--- a/src/com/google/javascript/jscomp/InlineVariables.java
+++ b/src/com/google/javascript/jscomp/InlineVariables.java
@@ -293,39 +292,33 @@ class InlineVariables implements CompilerPass {
           staleVars.add(v);
         }
       }
-
-      // If this variable was not inlined normally, check if we can
-      // inline an alias of it. (If the variable was inlined, then the
-      // reference data is out of sync. We're better off just waiting for
-      // the next pass.)
-      if (!maybeModifiedArguments &&
-          !staleVars.contains(v) &&
-          referenceInfo.isWellDefined() &&
-          referenceInfo.isAssignedOnceInLifetime()) {
-          // Inlining the variable based solely on well-defined and assigned
-          // once is *NOT* correct. We relax the correctness requirement if
-          // the variable is declared constant.
-        List<Reference> refs = referenceInfo.references;
-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {
-          Node nameNode = refs.get(i).getNode();
-          if (aliasCandidates.containsKey(nameNode)) {
-            AliasCandidate candidate = aliasCandidates.get(nameNode);
-            if (!staleVars.contains(candidate.alias) &&
-                !isVarInlineForbidden(candidate.alias)) {
-              Reference aliasInit;
-              aliasInit = candidate.refInfo.getInitializingReference();
-              Node value = aliasInit.getAssignedValue();
-              Preconditions.checkNotNull(value);
-              inlineWellDefinedVariable(candidate.alias,
-                  value,
-                  candidate.refInfo.references);
-              staleVars.add(candidate.alias);
-            }
-          }
-        }
-      }
+//      if (maybeModifiedArguments &&
+//          !staleVars.contains(v) &&
+//          referenceInfo.isWellDefined() &&
+//          referenceInfo.isAssignedOnceInLifetime()) {
+//          // Inlining the variable based solely on well-defined and assigned
+//          // once is *NOT* correct. We relax the correctness requirement if
+//          // the variable is declared constant.
+//        List<Reference> refs = referenceInfo.references;
+//        for (int i = 1 /* start from a read */; i < refs.size(); i++) {
+//          Node nameNode = refs.get(i).getNode();
+//          if (aliasCandidates.containsKey(nameNode)) {
+//            AliasCandidate candidate = aliasCandidates.get(nameNode);
+//            if (!staleVars.contains(candidate.alias) &&
+//                !isVarInlineForbidden(candidate.alias)) {
+//              Reference aliasInit;
+//              aliasInit = candidate.refInfo.getInitializingReference();
+//              Node value = aliasInit.getAssignedValue();
+//              Preconditions.checkNotNull(value);
+//              inlineWellDefinedVariable(candidate.alias,
+//                  value,
+//                  candidate.refInfo.references);
+//              staleVars.add(candidate.alias);
+//            }
+//          }
+//        }
+//      }
     }
-
     /**
      * If there are any variable references in the given node tree, blacklist
      * them to prevent the pass from trying to inline the variable.

diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java
index 03f4fcf3..e150ba10 100644
--- a/src/com/google/javascript/jscomp/InlineVariables.java
+++ b/src/com/google/javascript/jscomp/InlineVariables.java
@@ -305,27 +303,31 @@ class InlineVariables implements CompilerPass {
           // Inlining the variable based solely on well-defined and assigned
           // once is *NOT* correct. We relax the correctness requirement if
           // the variable is declared constant.
-        List<Reference> refs = referenceInfo.references;
-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {
-          Node nameNode = refs.get(i).getNode();
-          if (aliasCandidates.containsKey(nameNode)) {
-            AliasCandidate candidate = aliasCandidates.get(nameNode);
-            if (!staleVars.contains(candidate.alias) &&
-                !isVarInlineForbidden(candidate.alias)) {
-              Reference aliasInit;
-              aliasInit = candidate.refInfo.getInitializingReference();
-              Node value = aliasInit.getAssignedValue();
-              Preconditions.checkNotNull(value);
-              inlineWellDefinedVariable(candidate.alias,
-                  value,
-                  candidate.refInfo.references);
-              staleVars.add(candidate.alias);
+        if (isVarDeclaredConstant(v)) {
+          List<Reference> refs = referenceInfo.references;
+          for (int i = 1 /* start from a read */; i < refs.size(); i++) {
+            Node nameNode = refs.get(i).getNode();
+            if (aliasCandidates.containsKey(nameNode)) {
+              AliasCandidate candidate = aliasCandidates.get(nameNode);
+              if (!staleVars.contains(candidate.alias) &&
+                  !isVarInlineForbidden(candidate.alias)) {
+                Reference aliasInit;
+                aliasInit = candidate.refInfo.getInitializingReference();
+                Node value = aliasInit.getAssignedValue();
+                Preconditions.checkNotNull(value);
+                inlineWellDefinedVariable(candidate.alias,
+                    value,
+                    candidate.refInfo.references);
+                staleVars.add(candidate.alias);
+              }
             }
           }
         }
       }
     }
-
+    private boolean isVarDeclaredConstant(Var v) {
+      return v.isDeclaredConstant();
+    }
     /**
      * If there are any variable references in the given node tree, blacklist
      * them to prevent the pass from trying to inline the variable.

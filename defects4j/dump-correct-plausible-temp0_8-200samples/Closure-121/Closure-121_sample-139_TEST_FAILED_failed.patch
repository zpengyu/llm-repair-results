diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java
index 03f4fcf3..efc1d686 100644
--- a/src/com/google/javascript/jscomp/InlineVariables.java
+++ b/src/com/google/javascript/jscomp/InlineVariables.java
@@ -301,17 +299,14 @@ class InlineVariables implements CompilerPass {
       if (!maybeModifiedArguments &&
           !staleVars.contains(v) &&
           referenceInfo.isWellDefined() &&
-          referenceInfo.isAssignedOnceInLifetime()) {
-          // Inlining the variable based solely on well-defined and assigned
-          // once is *NOT* correct. We relax the correctness requirement if
-          // the variable is declared constant.
+          referenceInfo.isAssignedOnceInLifetime() &&
+          !isVarInlineForbidden(v)) {
         List<Reference> refs = referenceInfo.references;
         for (int i = 1 /* start from a read */; i < refs.size(); i++) {
           Node nameNode = refs.get(i).getNode();
           if (aliasCandidates.containsKey(nameNode)) {
             AliasCandidate candidate = aliasCandidates.get(nameNode);
-            if (!staleVars.contains(candidate.alias) &&
-                !isVarInlineForbidden(candidate.alias)) {
+            if (!staleVars.contains(candidate.alias)) {
               Reference aliasInit;
               aliasInit = candidate.refInfo.getInitializingReference();
               Node value = aliasInit.getAssignedValue();

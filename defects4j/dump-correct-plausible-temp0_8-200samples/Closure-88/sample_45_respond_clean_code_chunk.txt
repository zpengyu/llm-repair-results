  private VariableLiveness isVariableReadBeforeKill(
      Node n, String variable) {
    if (NodeUtil.isName(n) && variable.equals(n.getString())) {
      if (NodeUtil.isLhs(n, n.getParent())) {
        // The expression to which the assignment is made is evaluated before
        // the RHS is evaluated (normal left to right evaluation) but the KILL
        // occurs after the RHS is evaluated.
        return VariableLiveness.KILL;
      } else {
        return VariableLiveness.READ;
      }
    }
    // Expressions are evaluated left-right, depth first.
    for (Node child = n.getFirstChild();
        child != null; child = child.getNext()) {
      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
        VariableLiveness state = isVariableReadBeforeKill(child, variable);
        if (state != VariableLiveness.MAYBE_LIVE) {
          return state;
        }
      } else if (NodeUtil.isFunctionDeclaration(child)) {
        // Function declarations are hoisted to the top of the scope, so a
        // variable defined by a function declaration should not be considered
        // live within its own body.
        return VariableLiveness.MAYBE_LIVE;
      }
    }
    return VariableLiveness.MAYBE_LIVE;
  }
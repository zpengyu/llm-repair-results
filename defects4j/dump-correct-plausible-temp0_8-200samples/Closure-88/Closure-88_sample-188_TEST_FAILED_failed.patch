diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java
index 19b8b6bd..7632855e 100644
--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java
+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java
@@ -320,29 +320,28 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
-        return VariableLiveness.KILL;
-      } else {
-        return VariableLiveness.READ;
+    private VariableLiveness isVariableReadBeforeKill(
+        Node n, String variable) {
+      if (NodeUtil.isName(n) && variable.equals(n.getString())) {
+        if (NodeUtil.isLhs(n, n.getParent())) {
+          // The expression to which the assignment is made is evaluated before
+          // the RHS is evaluated (normal left to right evaluation) but the KILL
+          // occurs after the RHS is evaluated.
+          return VariableLiveness.KILL;
+        } else if (!NodeUtil.isAssignmentOp(n.getParent())) {
+          // Do not consider a read on a the right side of an assignment.
+          return VariableLiveness.READ;
+        }
       }
-    }
-
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+      // Expressions are evaluated left-right, depth first.
+      for (Node child = n.getFirstChild();
+          child != null; child = child.getNext()) {
+        if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+          VariableLiveness state = isVariableReadBeforeKill(child, variable);
+          if (state != VariableLiveness.MAYBE_LIVE) {
+            return state;
+          }
         }
       }
-    }
-    return VariableLiveness.MAYBE_LIVE;
-  }
-}
+      return VariableLiveness.MAYBE_LIVE;
+    }}

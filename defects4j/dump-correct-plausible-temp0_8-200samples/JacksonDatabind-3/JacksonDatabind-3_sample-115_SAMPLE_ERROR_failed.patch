diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
index f8cb03e1c..04b25435e 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
@@ -50,34 +45,11 @@ public final class StringArrayDeserializer
         if (_elementDeserializer != null) {
             return _deserializeCustom(jp, ctxt);
         }
-
-        final ObjectBuffer buffer = ctxt.leaseObjectBuffer();
-        Object[] chunk = buffer.resetAndStart();
-        
-        int ix = 0;
-        JsonToken t;
-        
-        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {
-            // Ok: no need to convert Strings, but must recognize nulls
-            String value;
-            if (t == JsonToken.VALUE_STRING) {
-                value = jp.getText();
-            } else if (t == JsonToken.VALUE_NULL) {
-                value = _elementDeserializer.getNullValue();
-            } else {
-                value = _parseString(jp, ctxt);
-            }
-            if (ix >= chunk.length) {
-                chunk = buffer.appendCompletedChunk(chunk);
-                ix = 0;
-            }
-            chunk[ix++] = value;
-        }
-        String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);
-        ctxt.returnObjectBuffer(buffer);
+        String[] result;
+        result = ctxt.hasSomeOfFeatures(F_MASK_ACCEPT_SINGLE_VALUE)
+                ? ctxt.deserialize(jp, new String[1]) : ctxt.deserialize(jp, NO_STRINGS);
         return result;
     }
-
     /**
      * Offlined version used when we do not use the default deserialization method.
      */

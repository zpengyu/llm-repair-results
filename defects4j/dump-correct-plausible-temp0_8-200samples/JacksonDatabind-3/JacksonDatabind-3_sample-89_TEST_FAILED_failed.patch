diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
index f8cb03e1c..aeaac34e2 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
@@ -60,9 +52,7 @@ public final class StringArrayDeserializer
         while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {
             // Ok: no need to convert Strings, but must recognize nulls
             String value;
-            if (t == JsonToken.VALUE_STRING) {
-                value = jp.getText();
-            } else if (t == JsonToken.VALUE_NULL) {
+            if (t == JsonToken.VALUE_NULL) {
                 value = _elementDeserializer.getNullValue();
             } else {
                 value = _parseString(jp, ctxt);
@@ -123,9 +108,8 @@ public final class StringArrayDeserializer
             }
             throw ctxt.mappingException(_valueClass);
         }
-        return new String[] { (jp.getCurrentToken() == JsonToken.VALUE_NULL) ? null : _parseString(jp, ctxt) };
+        return new String[] { _parseString(jp, ctxt) };
     }
-
     /**
      * Contextualization is needed to see whether we can "inline" deserialization
      * of String values, or if we have to use separate value deserializer.

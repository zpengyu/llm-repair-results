diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
index f8cb03e1c..8c8ae7034 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
@@ -123,9 +110,8 @@ public final class StringArrayDeserializer
             }
             throw ctxt.mappingException(_valueClass);
         }
-        return new String[] { (jp.getCurrentToken() == JsonToken.VALUE_NULL) ? null : _parseString(jp, ctxt) };
+        return new String[] { _parseString(jp, ctxt) };
     }
-
     /**
      * Contextualization is needed to see whether we can "inline" deserialization
      * of String values, or if we have to use separate value deserializer.
@@ -142,7 +128,7 @@ public final class StringArrayDeserializer
             deser = ctxt.handleSecondaryContextualization(deser, property);
         }
         // Ok ok: if all we got is the default String deserializer, can just forget about it
-        if (deser != null && this.isDefaultDeserializer(deser)) {
+        if (deser != null && isDefaultDeserializer(deser)) {
             deser = null;
         }
         if (_elementDeserializer != deser) {

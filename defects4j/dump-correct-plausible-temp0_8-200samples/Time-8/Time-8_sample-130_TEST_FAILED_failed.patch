diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index 6c2eec91..a48fbd56 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -273,27 +273,25 @@ public abstract class DateTimeZone implements Serializable {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
-        if (hoursOffset < -23 || hoursOffset > 23) {
-            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
-        }
-        if (minutesOffset < 0 || minutesOffset > 59) {
-            throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
-        }
-        int offset = 0;
-        try {
-            int hoursInMinutes = hoursOffset * 60;
-            if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
-            } else {
-                minutesOffset = hoursInMinutes + minutesOffset;
+        if (hoursOffset >= -23 && hoursOffset <= 23) {
+            if (minutesOffset >= 0 && minutesOffset <= 59) {
+                int offset = 0;
+                try {
+                    int hoursInMinutes = hoursOffset * 60;
+                    if (hoursInMinutes < 0) {
+                        minutesOffset = hoursInMinutes - minutesOffset;
+                    } else {
+                        minutesOffset = hoursInMinutes + minutesOffset;
+                    }
+                    offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+                } catch (ArithmeticException ex) {
+                    throw new IllegalArgumentException("Offset is too large");
+                }
+                return forOffsetMillis(offset);
             }
-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
-        } catch (ArithmeticException ex) {
-            throw new IllegalArgumentException("Offset is too large");
         }
-        return forOffsetMillis(offset);
+        throw new IllegalArgumentException("Hours or Minutes out of range");
     }
-
     /**
      * Gets a time zone instance for the specified offset to UTC in milliseconds.
      *

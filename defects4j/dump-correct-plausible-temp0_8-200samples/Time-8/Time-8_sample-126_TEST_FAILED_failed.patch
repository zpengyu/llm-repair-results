diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index 6c2eec91..8d7877d4 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -269,9 +269,9 @@ public abstract class DateTimeZone implements Serializable {
      * @throws IllegalArgumentException if any value is out of range, the minutes are negative
      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000
      */
-    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
+    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) {
         if (hoursOffset == 0 && minutesOffset == 0) {
-            return DateTimeZone.UTC;
+            return UTC;
         }
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
@@ -279,21 +279,11 @@ public abstract class DateTimeZone implements Serializable {
         if (minutesOffset < 0 || minutesOffset > 59) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
-        int offset = 0;
-        try {
-            int hoursInMinutes = hoursOffset * 60;
-            if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
-            } else {
-                minutesOffset = hoursInMinutes + minutesOffset;
-            }
-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
-        } catch (ArithmeticException ex) {
-            throw new IllegalArgumentException("Offset is too large");
-        }
-        return forOffsetMillis(offset);
+        int minutes = hoursOffset * 60 + minutesOffset;
+        int offset = FieldUtils.safeMultiply(minutes, DateTimeConstants.MILLIS_PER_MINUTE);
+        String id = printOffset(minutes);
+        return fixedOffsetZone(id, offset);
     }
-
     /**
      * Gets a time zone instance for the specified offset to UTC in milliseconds.
      *

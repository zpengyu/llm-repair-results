diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
index 9a9d91ebf..24b11cedf 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
@@ -102,56 +99,55 @@ public class PropertyBuilder
         if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...
             inclusion = JsonInclude.Include.ALWAYS;
         }
-
         // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement
         JavaType actualType = (serializationType == null) ? declaredType : serializationType;
-        
-        switch (inclusion) {
-        case NON_DEFAULT:
-            // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,
-            //    so that if enclosing class has this, we may need to values of property,
-            //    whereas for global defaults OR per-property overrides, we have more
-            //    static definition. Sigh.
-            // First: case of class specifying it; try to find POJO property defaults
-            if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT) {
-                valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);
-            } else {
-                valueToSuppress = getDefaultValue(actualType);
-            }
-            if (valueToSuppress == null) {
+        if ((inclusion != null) && (inclusion != JsonInclude.Include.ALWAYS)) {
+            switch (inclusion) {
+            case NON_DEFAULT:
+                // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,
+                //    so that if enclosing class has this, we may need to values of property,
+                //    whereas for global defaults OR per-property overrides, we have more
+                //    static definition. Sigh.
+                // First: case of class specifying it; try to find POJO property defaults
+                if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT) {
+                    valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);
+                } else {
+                    valueToSuppress = getDefaultValue(actualType);
+                }
+                if (valueToSuppress == null) {
+                    suppressNulls = true;
+                } else {
+                    if (valueToSuppress.getClass().isArray()) {
+                        valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);
+                    }
+                }
+                break;
+            case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals
+                // always suppress nulls
                 suppressNulls = true;
-            } else {
-                if (valueToSuppress.getClass().isArray()) {
-                    valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);
+                // and for referential types, also "empty", which in their case means "absent"
+                if (declaredType.isReferenceType()) {
+                    valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
                 }
-            }
-
-            break;
-        case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals
-            // always suppress nulls
-            suppressNulls = true;
-            // and for referential types, also "empty", which in their case means "absent"
-            if (declaredType.isReferenceType()) {
-                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
-            }
-            break;
-        case NON_EMPTY:
-            // always suppress nulls
-            suppressNulls = true;
-            // but possibly also 'empty' values:
-            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
-            break;
-        case NON_NULL:
-            suppressNulls = true;
-            // fall through
-        case ALWAYS: // default
-        default:
-            // we may still want to suppress empty collections, as per [JACKSON-254]:
-            if (declaredType.isContainerType()
-                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {
+                break;
+            case NON_EMPTY:
+                // always suppress nulls
+                suppressNulls = true;
+                // but possibly also 'empty' values:
                 valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
+                break;
+            case NON_NULL:
+                suppressNulls = true;
+                // fall through
+            case ALWAYS: // default
+            default:
+                // we may still want to suppress empty collections, as per [JACKSON-254]:
+                if (declaredType.isContainerType()
+                        && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {
+                    valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
+                }
+                break;
             }
-            break;
         }
         BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,
                 am, _beanDesc.getClassAnnotations(), declaredType,

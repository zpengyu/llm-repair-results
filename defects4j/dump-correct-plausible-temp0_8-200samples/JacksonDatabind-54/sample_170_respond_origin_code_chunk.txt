    protected BeanPropertyWriter buildWriter(SerializerProvider prov,
            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,
            TypeSerializer typeSer, TypeSerializer contentTypeSer,
            AnnotatedMember am, boolean defaultUseStaticTyping)
        throws JsonMappingException
    {
        // do we have annotation that forces type to use (to declared type or its super type)?
        JavaType serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);

        // Container types can have separate type serializers for content (value / element) type
        if (contentTypeSer != null) {
            /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is
             *    type information for contents. Should work well (for JAXB case); can be
             *    revisited if this causes problems.
             */
            if (serializationType == null) {
//                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());
                serializationType = declaredType;
            }
            JavaType ct = serializationType.getContentType();
            // Not exactly sure why, but this used to occur; better check explicitly:
            if (ct == null) {
                throw new IllegalStateException("Problem trying to create BeanPropertyWriter for property '"
                        +propDef.getName()+"' (of type "+_beanDesc.getType()+"); serialization type "+serializationType+" has no content");
            }
            serializationType = serializationType.withContentTypeHandler(contentTypeSer);
            ct = serializationType.getContentType();
        }
        
        Object valueToSuppress = null;
        boolean suppressNulls = false;

        JsonInclude.Value inclV = _defaultInclusion.withOverrides(propDef.findInclusion());
        JsonInclude.Include inclusion = inclV.getValueInclusion();
        if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...
            inclusion = JsonInclude.Include.ALWAYS;
        }

        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement
        JavaType actualType = (serializationType == null) ? declaredType : serializationType;
        
        switch (inclusion) {
        case NON_DEFAULT:
            // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,
            //    so that if enclosing class has this, we may need to values of property,
            //    whereas for global defaults OR per-property overrides, we have more
            //    static definition. Sigh.
            // First: case of class specifying it; try to find POJO property defaults
            if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT) {
                valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);
            } else {
                valueToSuppress = getDefaultValue(actualType);
            }
            if (valueToSuppress == null) {
                suppressNulls = true;
            } else {
                if (valueToSuppress.getClass().isArray()) {
                    valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);
                }
            }

            break;
        case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals
            // always suppress nulls
            suppressNulls = true;
            // and for referential types, also "empty", which in their case means "absent"
            if (declaredType.isReferenceType()) {
                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
            }
            break;
        case NON_EMPTY:
            // always suppress nulls
            suppressNulls = true;
            // but possibly also 'empty' values:
            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
            break;
        case NON_NULL:
            suppressNulls = true;
            // fall through
        case ALWAYS: // default
        default:
            // we may still want to suppress empty collections, as per [JACKSON-254]:
            if (declaredType.isContainerType()
                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {
                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
            }
            break;
        }
        BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,
                am, _beanDesc.getClassAnnotations(), declaredType,
                ser, typeSer, serializationType, suppressNulls, valueToSuppress);

        // How about custom null serializer?
        Object serDef = _annotationIntrospector.findNullSerializer(am);
        if (serDef != null) {
            bpw.assignNullSerializer(prov.serializerInstance(am, serDef));
        }
        // And then, handling of unwrapping
        NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);
        if (unwrapper != null) {
            bpw = bpw.unwrappingWriter(unwrapper);
        }
        return bpw;
    }
#Fixed code
#buggy function
class ArrayStack {
  private Object[] data;
  private int size;

  public ArrayStack() {
    data = new Object[10];
    size = 0;
  }

  private void ensureCapacity() {
    if (data.length == size) {
      Object[] newData = new Object[data.length * 2];
      System.arraycopy(data, 0, newData, 0, size);
      data = newData;
    }
  }

  public void push(Object o) {
    ensureCapacity();
    data[size++] = o;
  }

  public Object pop() {
    if (size == 0) {
      throw new IllegalStateException("Stack is empty");
    }
    return data[--size];
  }

  public boolean isEmpty() {
    return size == 0;
  }
}
#Provide a fix for the buggy function
#Buggy Function
void insert(RecordNode rn) {
        if (this.isEmpty()) {
            listhead = rn;
            rn.setNext(null);
            count++;
        } else {
            RecordNode current = listhead;
            RecordNode prev = null;
            while (current != null) {
                if (rn.getIid() < current.getIid()) {
                    if (prev == null) {
                        rn.setNext(listhead);
                        listhead = rn;
                    } else {
                        rn.setNext(current);
                        prev.setNext(rn);
                    }
                    count++;
                    break;
                } else if (current.getNext() != null) {
                    prev = current;
                    current = current.getNext();
                } else {
                    current.setNext(rn);
                    count++;
                    break;
                }
            }
        }
    }
#Fixed Function
void insert(RecordNode rn) {
        if (this.isEmpty()) {
            listhead = rn;
            rn.setNext(null);
            count++;
        } else {
            RecordNode current = listhead;
            RecordNode prev = null;
            while (current != null) {
                if (rn.getIid() < current.getIid()) {
                    if (prev == null) {
                        rn.setNext(listhead);
                        listhead = rn;
                    } else {
                        rn.setNext(current);
                        prev.setNext(rn);
                    }
                    count++;
                    break;
                } else if (current.getNext() != null) {
                    prev = current;
                    current = current.getNext();
                } else {
                    current.setNext(rn);
                    count++;
                    break;
                }
            }
        }
    }
    
    //Check your code
    /**
 * Complete the function below.
 */
    static int[] getMaxStreaks(int[] toss) {
        int[] ans = new int[2];
        int hCount = 0;
        int tCount = 0;
        int maxHCount = 0;
        int maxTCount = 0;
        int max = 0;
        int min = toss.length;
        int maxIndex = 0;
        int minIndex = 0;
        int i = 0;

        for (int num : toss) {
            if (num == 0) {
                hCount = hCount + 1;
                tCount = 0;
            } else if (num == 1) {
                tCount = tCount + 1;
                hCount = 0;
            }

            if (hCount >= maxHCount) {
                maxHCount = hCount;
            }

            if (tCount >= maxTCount) {
                maxTCount = tCount;
            }

            if (maxHCount >= maxTCount) {
                max = maxHCount;
                maxIndex = i;
                min = maxTCount;
            } else if (maxTCount > maxHCount) {
                max = maxTCount;
                maxIndex = i;
                min = maxHCount;
            }

            if (maxTCount == maxHCount) {
                max = maxHCount;
                maxIndex = i;
                min = maxTCount;
            }

            i++;
        }

        ans[0] = max;
        ans[1] = min;

        if (min != 0 && maxIndex < toss.length - 1) {
            ans[1] = maxIndex + 1;
        }

        if (min != 0 && maxIndex == toss.length - 1) {
            ans[1] = 0;
        }

        return ans;
    }

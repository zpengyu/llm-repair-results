diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
index 773d1fbd8..fe802437c 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
@@ -49,30 +44,27 @@ public final class StringArrayDeserializer
         if (_elementDeserializer != null) {
             return _deserializeCustom(jp, ctxt);
         }
-
         final ObjectBuffer buffer = ctxt.leaseObjectBuffer();
         Object[] chunk = buffer.resetAndStart();
-
         int ix = 0;
         JsonToken t;
-
-            while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {
-                // Ok: no need to convert Strings, but must recognize nulls
-                String value;
-                if (t == JsonToken.VALUE_STRING) {
-                    value = jp.getText();
-                } else if (t == JsonToken.VALUE_NULL) {
-                    value = null; // since we have established that '_elementDeserializer == null' earlier
-                } else {
-                    value = _parseString(jp, ctxt);
-                }
-                if (ix >= chunk.length) {
-                    chunk = buffer.appendCompletedChunk(chunk);
-                    ix = 0;
-                }
-                chunk[ix++] = value;
+        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {
+            // Ok: no need to convert Strings, but must recognize nulls
+            String value;
+            if (t == JsonToken.VALUE_STRING) {
+                value = jp.getText();
+            } else if (t == JsonToken.VALUE_NULL) {
+                value = null; // since we have established that '_elementDeserializer == null' earlier
+            } else {
+                value = _parseString(jp, ctxt);
             }
-            // note: pass String.class, not String[].class, as we need element type for error info
+            if (ix >= chunk.length) {
+                chunk = buffer.appendCompletedChunk(chunk);
+                ix = 0;
+            }
+            chunk[ix++] = value;
+        }
+        // note: pass String.class, not String[].class, as we need element type for error info
         String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);
         ctxt.returnObjectBuffer(buffer);
         return result;
@@ -86,20 +77,18 @@ public final class StringArrayDeserializer
         final ObjectBuffer buffer = ctxt.leaseObjectBuffer();
         Object[] chunk = buffer.resetAndStart();
         final JsonDeserializer<String> deser = _elementDeserializer;
-        
         int ix = 0;
         JsonToken t;
-
-            while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {
-                // Ok: no need to convert Strings, but must recognize nulls
-                String value = (t == JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);
-                if (ix >= chunk.length) {
-                    chunk = buffer.appendCompletedChunk(chunk);
-                    ix = 0;
-                }
-                chunk[ix++] = value;
+        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {
+            // Ok: no need to convert Strings, but must recognize nulls
+            String value = (t == JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);
+            if (ix >= chunk.length) {
+                chunk = buffer.appendCompletedChunk(chunk);
+                ix = 0;
             }
-            // note: pass String.class, not String[].class, as we need element type for error info
+            chunk[ix++] = value;
+        }
+        // note: pass String.class, not String[].class, as we need element type for error info
         String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);
         ctxt.returnObjectBuffer(buffer);
         return result;
@@ -115,10 +102,9 @@ public final class StringArrayDeserializer
         // [JACKSON-526]: implicit arrays from single values?
         if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY)) {
             // [JACKSON-620] Empty String can become null...
-            if ((jp.getCurrentToken() == JsonToken.VALUE_STRING)
+            if (jp.getCurrentToken() == JsonToken.VALUE_STRING
                     && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
-                String str = jp.getText();
-                if (str.length() == 0) {
+                if (jp.getText().length() == 0) {
                     return null;
                 }
             }

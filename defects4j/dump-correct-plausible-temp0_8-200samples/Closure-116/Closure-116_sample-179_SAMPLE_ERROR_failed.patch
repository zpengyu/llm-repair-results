diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java
index c17b3cb3..87cc6597 100644
--- a/src/com/google/javascript/jscomp/FunctionInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -713,9 +709,15 @@ class FunctionInjector {
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
-
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+    // A function with zero parameters is considered to match a call
+    // with zero parameters or a call with one undefined parameter.
+    if (fnParam == null) {
+      return cArg == null ? CanInlineResult.YES
+          : (cArg.isName() && cArg.matchesQualifiedName("undefined"))
+              ? CanInlineResult.UNCERTAIN : CanInlineResult.NO;
+    }
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
@@ -729,8 +730,17 @@ class FunctionInjector {
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
+        } else {
+          // Check for named arguments that don't have a call argument.
+          if (fnParam.getJSType().isUndefinable()) {
+            // Named parameters that are optional may or may not be provided
+            // as arguments.
+            return CanInlineResult.UNCERTAIN;
+          } else {
+            // All required parameters should have a call argument.
+            return CanInlineResult.NO;
+          }
         }
-
         // Move to the next name.
         fnParam = fnParam.getNext();
       }

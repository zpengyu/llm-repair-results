  private CanInlineResult canInlineReferenceDirectly(
      Node callNode, Node fnNode) {
    if (!isDirectCallNodeReplacementPossible(fnNode)) {
      return CanInlineResult.NO;
    }
    Node block = fnNode.getLastChild();
    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
    Node cArg = callNode.getFirstChild().getNext();
    // Functions called via 'call' and 'apply' have a this-object as
    // the first parameter, but this is not part of the called function's
    // parameter list.
    if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }
    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
    while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {
          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }
        // Move to the next name.
        fnParam = fnParam.getNext();
      }
      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }
    // New code
    int maxNumberOfParams = getMaxNumberOfParams(fnNode, fnParam);
    if (maxNumberOfParams != FunctionArgumentInjector.UNKNOWN) {
      return maxNumberOfParams >= MAX_PARAMETERS_FOR_DIRECT_INVOCATION
          ? CanInlineResult.NO : CanInlineResult.YES;
    }
    return CanInlineResult.NO;
  }
  private int getMaxNumberOfParams(Node fnNode, Node fnParam) {
    int maxNumberOfParams = 0;
    for (Node callSite = fnNode.getParent();
        callSite != null && callSite.isCall();
        callSite = callSite.getParent()) {
      maxNumberOfParams = Math.max(maxNumberOfParams,
          getFunctionLength(callSite, fnParam));
    }
    return maxNumberOfParams;
  }
  private int getFunctionLength(Node callSite, Node fnParam) {
    int functionLength = 0;
    Node callArg = callSite.getFirstChild().getNext();
    while (callArg != null) {
      functionLength++;
      callArg = callArg.getNext();
    }
    return functionLength;
  }
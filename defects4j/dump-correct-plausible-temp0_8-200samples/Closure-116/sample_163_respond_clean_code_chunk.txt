  private CanInlineResult canInlineReferenceDirectly(
      Node callNode, Node fnNode) {
    if (!isDirectCallNodeReplacementPossible(fnNode)) {
      return CanInlineResult.NO;
    }
    Node block = fnNode.getLastChild();
    // The actual parameters.
    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
    Node cArg = callNode.getFirstChild().getNext();
    // The formal parameters.
    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
    // Create a temporary scope for the inlined function arguments.
    Node fnCall = callNode.getParent();
    Node fnCallParent = fnCall.getParent();
    Node scopeRoot = fnCall;
    Scope fnCallScope = scope.getScopeRoot().getParent();
    if (NodeUtil.createsBlockScope(fnCallParent)) {
      scopeRoot = fnCallParent;
      fnCallScope = scope.getScopeRoot();
    }
    Node argName = IR.name("arguments").srcref(callNode);
    fnCallScope.addSymbol(ARGUMENTS, argName);
    fnCall.addChildAfter(argName, callNode);
    fnCall.addChildAfter(IR.exprResult(IR.objectlit()).srcref(callNode), argName);
    // The list of all names in the function.
    Set<String> allNames = new HashSet<>();
    NodeUtil.getAllVarNames(block, allNames);
    // The list of parameter names in the function.
    Set<String> paramNames = new HashSet<>();
    if (fnParam != null) {
      NodeUtil.getFunctionParameters(fnNode).putBooleanProp(Node.FREE_CALL, true);
      paramNames.add(fnParam.getString());
      fnParam = fnParam.getNext();
    }
    // For each named parameter check if a mutable argument use more than one.
    while (fnParam != null) {
      paramNames.add(fnParam.getString());
      if (NodeUtil.mayBeModified(fnParam, block, true)) {
        return CanInlineResult.NO;
      }
      fnParam = fnParam.getNext();
    }
    // For each unnamed parameter check if a mutable argument use more than one.
    while (cArg != null) {
      paramNames.add(ARGUMENTS);
      if (NodeUtil.mayBeModified(cArg, block, true)) {
        return CanInlineResult.NO;
      }
      cArg = cArg.getNext();
    }
    // For each name in the function check if a mutable name is used more than once.
    for (String name : allNames) {
      if (NodeUtil.mayBeModified(name, block, true)
          && paramNames.contains(name)
          && NodeUtil.getNameReferenceCount(
              block, name) > 1) {
        return CanInlineResult.NO;
      }
    }
    return CanInlineResult.YES;
  }
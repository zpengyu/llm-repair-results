diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java
index c17b3cb3..32ffe530 100644
--- a/src/com/google/javascript/jscomp/FunctionInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -744,10 +736,33 @@ class FunctionInjector {
         cArg = cArg.getNext();
       }
     }
-
-    return CanInlineResult.YES;
+    // New code
+    int maxNumberOfParams = getMaxNumberOfParams(fnNode, fnParam);
+    if (maxNumberOfParams != FunctionArgumentInjector.UNKNOWN) {
+      return maxNumberOfParams >= MAX_PARAMETERS_FOR_DIRECT_INVOCATION
+          ? CanInlineResult.NO : CanInlineResult.YES;
+    }
+    return CanInlineResult.NO;
+  }
+  private int getMaxNumberOfParams(Node fnNode, Node fnParam) {
+    int maxNumberOfParams = 0;
+    for (Node callSite = fnNode.getParent();
+        callSite != null && callSite.isCall();
+        callSite = callSite.getParent()) {
+      maxNumberOfParams = Math.max(maxNumberOfParams,
+          getFunctionLength(callSite, fnParam));
+    }
+    return maxNumberOfParams;
+  }
+  private int getFunctionLength(Node callSite, Node fnParam) {
+    int functionLength = 0;
+    Node callArg = callSite.getFirstChild().getNext();
+    while (callArg != null) {
+      functionLength++;
+      callArg = callArg.getNext();
+    }
+    return functionLength;
   }
-
   /**
    * Determine if inlining the function is likely to reduce the code size.
    * @param namesToAlias

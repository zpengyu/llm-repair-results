    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
        if (notPrinter && notParser) {
            throw new IllegalStateException("Builder has created neither a printer nor a parser");
        }
        int size = elementPairs.size();
        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
            Separator sep = (Separator) elementPairs.get(0);
            if (size == 2) {
                return new PeriodFormatter(sep, sep);
            }
            if (sep.iAfterParser == null && sep.iAfterPrinter == null) {
                // simple separator
                Object[] comp = createComposite(elementPairs.subList(2, size));
                PeriodPrinter printer = (PeriodPrinter) comp[0];
                PeriodParser parser = (PeriodParser) comp[1];
                sep = sep.finish(printer, parser);
                return new PeriodFormatter(sep, sep);
            }
            // complex separator
            ArrayList<Object> list = new ArrayList<Object>(size - 1);
            list.add(sep.getPrinter());
            list.add(sep.getParser());
            for (int i=2; i<size; i++) {
                list.add(elementPairs.get(i));
            }
            Object[] comp = createComposite(list);
            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
        }
        Object[] comp = createComposite(elementPairs);
        if (notPrinter) {
            return new PeriodFormatter(null, (PeriodParser) comp[1]);
        } else if (notParser) {
            return new PeriodFormatter((PeriodPrinter) comp[0], null);
        } else {
            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
        }
    }
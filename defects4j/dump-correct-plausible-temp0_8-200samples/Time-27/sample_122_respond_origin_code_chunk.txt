    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
        if (notPrinter && notParser) {
            throw new IllegalStateException("Builder has created neither a printer nor a parser");
        }
        int size = elementPairs.size();
        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
            Separator sep = (Separator) elementPairs.get(0);
            Separator sep2;
            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
            if (notPrinter || !(f.getPrinter() instanceof Composite)) {
                sep = sep.finish(f.getPrinter(), f.getParser());
                if (notParser || !(f.getParser() instanceof Composite)) {
                    return new PeriodFormatter(sep, sep);
                }
                sep2 = sep;
            } else {
                sep2 = sep.finish(null, f.getParser());
                if (notParser || !(f.getParser() instanceof Composite)) {
                    return new PeriodFormatter(new Composite(sep, (Composite) f.getPrinter()), sep2);
                }
            }
            ArrayList<Object> list = new ArrayList<Object>(Arrays.asList(((Composite) f.getParser()).iPrinted));
            list.add(0, sep2);
            return new PeriodFormatter(new Composite(sep, (Composite) f.getPrinter()), new Composite(list));
        }
        Object[] comp = createComposite(elementPairs);
        if (notPrinter) {
            return new PeriodFormatter(null, (PeriodParser) comp[1]);
        } else if (notParser) {
            return new PeriodFormatter((PeriodPrinter) comp[0], null);
        } else {
            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
        }
    }


diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java
index a6bf55c7..0a7a8de0 100644
--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java
@@ -798,9 +798,23 @@ public class PeriodFormatterBuilder {
         int size = elementPairs.size();
         if (size >= 2 && elementPairs.get(0) instanceof Separator) {
             Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+            Separator sep2;
+            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+            if (notPrinter || !(f.getPrinter() instanceof Composite)) {
                 sep = sep.finish(f.getPrinter(), f.getParser());
-                return new PeriodFormatter(sep, sep);
+                if (notParser || !(f.getParser() instanceof Composite)) {
+                    return new PeriodFormatter(sep, sep);
+                }
+                sep2 = sep;
+            } else {
+                sep2 = sep.finish(null, f.getParser());
+                if (notParser || !(f.getParser() instanceof Composite)) {
+                    return new PeriodFormatter(new Composite(sep, (Composite) f.getPrinter()), sep2);
+                }
+            }
+            ArrayList<Object> list = new ArrayList<Object>(Arrays.asList(((Composite) f.getParser()).iPrinted));
+            list.add(0, sep2);
+            return new PeriodFormatter(new Composite(sep, (Composite) f.getPrinter()), new Composite(list));
         }
         Object[] comp = createComposite(elementPairs);
         if (notPrinter) {

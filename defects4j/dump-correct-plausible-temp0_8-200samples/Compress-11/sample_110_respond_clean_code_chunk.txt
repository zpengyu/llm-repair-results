    public ArchiveInputStream createArchiveInputStream(final InputStream in)
            throws ArchiveException {
        if (in == null) {
            throw new IllegalArgumentException("Stream must not be null.");
        }
        if (!in.markSupported()) {
            throw new IllegalArgumentException("Mark is not supported.");
        }
        byte[] signature = new byte[12];
        int signatureLength = 0;
        in.mark(signature.length);
        try {
            signatureLength = in.read(signature);
            in.reset();
        } catch (IOException e) {
            throw new ArchiveException("Could not use reset and mark operations.", e);
        }
        if (ZipArchiveInputStream.matches(signature, signatureLength)) {
            return new ZipArchiveInputStream(in);
        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
            return new JarArchiveInputStream(in);
        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
            return new ArArchiveInputStream(in);
        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
            return new CpioArchiveInputStream(in);
        }
        // Dump needs a bigger buffer to check the signature;
        signature = new byte[32];
        in.mark(signature.length);
        try {
            signatureLength = in.read(signature);
            in.reset();
        } catch (IOException e) {
            throw new ArchiveException("Could not use reset and mark operations.", e);
        }
        if (DumpArchiveInputStream.matches(signature, signatureLength)) {
            return new DumpArchiveInputStream(in);
        }
        // Tar needs an even bigger buffer to check the signature; read the first block
        signature = new byte[512];
        in.mark(signature.length);
        try {
            signatureLength = in.read(signature);
            in.reset();
        } catch (IOException e) {
            throw new ArchiveException("Could not use reset and mark operations.", e);
        }
        if (TarArchiveInputStream.matches(signature, signatureLength)) {
            try {
                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(signature));
                tais.getNextEntry();
                return new TarArchiveInputStream(in);
            } catch (Exception e) { // NOPMD
                // can generate IllegalArgumentException as well as IOException
                // autodetection, simply not a TAR
                // ignored
            }
        }
        throw new ArchiveException("No Archiver found for the stream signature");
    }
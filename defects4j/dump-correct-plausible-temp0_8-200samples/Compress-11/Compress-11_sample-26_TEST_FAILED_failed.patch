diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index e2847a61..0b318786 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -203,10 +202,31 @@ public class ArchiveStreamFactory {
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
-
+        // Tar needs an even bigger buffer to check the signature; read the first block
+        final byte[] tarheader = new byte[512];
+        try {
+            in.mark(tarheader.length);
+            int signatureLength = in.read(tarheader);
+            in.reset();
+            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
+                return new TarArchiveInputStream(in);
+            }
+            // COMPRESS-117 - improve auto-recognition
+            try {
+                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
+                tais.getNextEntry();
+                return new TarArchiveInputStream(in);
+            } catch (Exception e) { // NOPMD
+                // can generate IllegalArgumentException as well as IOException
+                // autodetection, simply not a TAR
+                // ignored
+            }
+        } catch (IOException e) {
+            throw new ArchiveException("Could not use reset and mark operations.", e);
+        }
         final byte[] signature = new byte[12];
-        in.mark(signature.length);
         try {
+            in.mark(signature.length);
             int signatureLength = in.read(signature);
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
@@ -227,29 +246,8 @@ public class ArchiveStreamFactory {
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
-            try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
-                return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
-                // autodetection, simply not a TAR
-                // ignored
-            }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
-
         throw new ArchiveException("No Archiver found for the stream signature");
-    }
-}
+    }}

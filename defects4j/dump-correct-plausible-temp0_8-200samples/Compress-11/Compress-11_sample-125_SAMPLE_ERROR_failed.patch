diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index e2847a61..e1bad281 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -194,62 +194,28 @@ public class ArchiveStreamFactory {
      * @throws ArchiveException if the archiver name is not known
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
-    public ArchiveInputStream createArchiveInputStream(final InputStream in)
+        public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
-
-        if (!in.markSupported()) {
-            throw new IllegalArgumentException("Mark is not supported.");
+        if (ArchiveStreamFactory.JAR.equals(getStreamArchiveType(in))){
+            return new JarArchiveInputStream(in);
         }
-
-        final byte[] signature = new byte[12];
-        in.mark(signature.length);
-        try {
-            int signatureLength = in.read(signature);
-            in.reset();
-            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
-                return new ZipArchiveInputStream(in);
-            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
-                return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
-                return new ArArchiveInputStream(in);
-            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
-                return new CpioArchiveInputStream(in);
-            }
-
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-                return new DumpArchiveInputStream(in);
-            }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
-            try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
-                return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
-                // autodetection, simply not a TAR
-                // ignored
-            }
-        } catch (IOException e) {
-            throw new ArchiveException("Could not use reset and mark operations.", e);
+        if (ArchiveStreamFactory.ZIP.equals(getStreamArchiveType(in))){
+            return new ZipArchiveInputStream(in);
+        }
+        if (ArchiveStreamFactory.AR.equals(getStreamArchiveType(in))){
+            return new ArArchiveInputStream(in);
+        }
+        if (ArchiveStreamFactory.CPIO.equals(getStreamArchiveType(in))){
+            return new CpioArchiveInputStream(in);
+        }
+        if (ArchiveStreamFactory.DUMP.equals(getStreamArchiveType(in))){
+            return new DumpArchiveInputStream(in);
+        }
+        if (ArchiveStreamFactory.TAR.equals(getStreamArchiveType(in))){
+            return new TarArchiveInputStream(in);
         }
-
         throw new ArchiveException("No Archiver found for the stream signature");
-    }
-}
+    }}

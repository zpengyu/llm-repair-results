diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index e2847a61..a38c483b 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -199,57 +199,69 @@ public class ArchiveStreamFactory {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
-
         if (!in.markSupported()) {
-            throw new IllegalArgumentException("Mark is not supported.");
+            in = new BufferedInputStream(in);
         }
-
-        final byte[] signature = new byte[12];
-        in.mark(signature.length);
+        ArchiveInputStream result;
+        in.mark(12);
+        byte[] signature = new byte[12];
+        int signatureLength = 0;
         try {
-            int signatureLength = in.read(signature);
+            signatureLength = in.read(signature);
             in.reset();
-            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
-                return new ZipArchiveInputStream(in);
-            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
-                return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
-                return new ArArchiveInputStream(in);
-            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
-                return new CpioArchiveInputStream(in);
-            }
-
+        } catch (IOException e) {
+            throw new ArchiveException("Could not use reset and mark operations.", e);
+        }
+        if (ZipArchiveInputStream.matches(signature, signatureLength)) {
+            result = new ZipArchiveInputStream(in);
+        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
+            result = new JarArchiveInputStream(in);
+        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
+            result = new ArArchiveInputStream(in);
+        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
+            result = new CpioArchiveInputStream(in);
+        } else if (LhaArchiveInputStream.matches(signature, signatureLength)) {
+            result = new LhaArchiveInputStream(in);
+        } else {
             // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-                return new DumpArchiveInputStream(in);
-            }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
+            signature = new byte[32];
+            in.mark(32);
+            signatureLength = 0;
             try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
-                return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
-                // autodetection, simply not a TAR
-                // ignored
+                signatureLength = in.read(signature);
+                in.reset();
+            } catch (IOException e) {
+                throw new ArchiveException("Could not use reset and mark operations.", e);
+            }
+            if (DumpArchiveInputStream.matches(signature, signatureLength)) {
+                result = new DumpArchiveInputStream(in);
+            } else {
+                // Tar needs an even bigger buffer to check the signature; read the first block
+                signature = new byte[512];
+                in.mark(512);
+                signatureLength = 0;
+                try {
+                    signatureLength = in.read(signature);
+                    in.reset();
+                } catch (IOException e) {
+                    throw new ArchiveException("Could not use reset and mark operations.", e);
+                }
+                if (TarArchiveInputStream.matches(signature, signatureLength)) {
+                    result = new TarArchiveInputStream(in);
+                } else {
+                    // COMPRESS-117 - improve auto-recognition
+                    try {
+                        TarArchiveInputStream tais = new TarArchiveInputStream(
+                                new ByteArrayInputStream(signature));
+                        tais.getNextEntry();
+                        result = new TarArchiveInputStream(in);
+                    } catch (Exception e) {
+                        // can generate IllegalArgumentException as well as IOException
+                        // autodetection, simply not a TAR
+                        throw new ArchiveException("No Archiver found for the stream signature");
+                    }
+                }
             }
-        } catch (IOException e) {
-            throw new ArchiveException("Could not use reset and mark operations.", e);
         }
-
-        throw new ArchiveException("No Archiver found for the stream signature");
-    }
-}
+        return result;
+    }}

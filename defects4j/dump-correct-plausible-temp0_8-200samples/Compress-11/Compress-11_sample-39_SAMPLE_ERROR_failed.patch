diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index e2847a61..aa5d621e 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -194,21 +194,18 @@ public class ArchiveStreamFactory {
      * @throws ArchiveException if the archiver name is not known
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
-    public ArchiveInputStream createArchiveInputStream(final InputStream in)
-            throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
-
-        if (!in.markSupported()) {
-            throw new IllegalArgumentException("Mark is not supported.");
-        }
-
         final byte[] signature = new byte[12];
-        in.mark(signature.length);
+        if(in.markSupported()){
+        	in.mark(signature.length);
+        }
         try {
             int signatureLength = in.read(signature);
-            in.reset();
+            if(in.markSupported()){
+            	in.reset();
+            }
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
@@ -218,21 +215,27 @@ public class ArchiveStreamFactory {
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
-
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
+            if(in.markSupported()){
+            	in.mark(dumpsig.length);
+            }
             signatureLength = in.read(dumpsig);
-            in.reset();
+            if(in.markSupported()){
+            	in.reset();
+            }
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
-
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
+            if(in.markSupported()){
+            	in.mark(tarheader.length);
+            }
             signatureLength = in.read(tarheader);
-            in.reset();
+            if(in.markSupported()){
+            	in.reset();
+            }
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                 return new TarArchiveInputStream(in);
             }
@@ -249,7 +252,5 @@ public class ArchiveStreamFactory {
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
-
         throw new ArchiveException("No Archiver found for the stream signature");
-    }
-}
+    }}

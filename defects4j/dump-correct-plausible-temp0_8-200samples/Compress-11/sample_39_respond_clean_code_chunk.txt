        if (in == null) {
            throw new IllegalArgumentException("Stream must not be null.");
        }
        final byte[] signature = new byte[12];
        if(in.markSupported()){
        	in.mark(signature.length);
        }
        try {
            int signatureLength = in.read(signature);
            if(in.markSupported()){
            	in.reset();
            }
            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                return new ZipArchiveInputStream(in);
            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                return new JarArchiveInputStream(in);
            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                return new ArArchiveInputStream(in);
            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                return new CpioArchiveInputStream(in);
            }
            // Dump needs a bigger buffer to check the signature;
            final byte[] dumpsig = new byte[32];
            if(in.markSupported()){
            	in.mark(dumpsig.length);
            }
            signatureLength = in.read(dumpsig);
            if(in.markSupported()){
            	in.reset();
            }
            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                return new DumpArchiveInputStream(in);
            }
            // Tar needs an even bigger buffer to check the signature; read the first block
            final byte[] tarheader = new byte[512];
            if(in.markSupported()){
            	in.mark(tarheader.length);
            }
            signatureLength = in.read(tarheader);
            if(in.markSupported()){
            	in.reset();
            }
            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                return new TarArchiveInputStream(in);
            }
            // COMPRESS-117 - improve auto-recognition
            try {
                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
                tais.getNextEntry();
                return new TarArchiveInputStream(in);
            } catch (Exception e) { // NOPMD
                // can generate IllegalArgumentException as well as IOException
                // autodetection, simply not a TAR
                // ignored
            }
        } catch (IOException e) {
            throw new ArchiveException("Could not use reset and mark operations.", e);
        }
        throw new ArchiveException("No Archiver found for the stream signature");
    }
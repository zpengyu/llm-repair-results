diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index e2847a61..e1d32694 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -203,42 +202,48 @@ public class ArchiveStreamFactory {
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
-
-        final byte[] signature = new byte[12];
+        byte[] signature = new byte[12];
+        int signatureLength = 0;
         in.mark(signature.length);
         try {
-            int signatureLength = in.read(signature);
+            signatureLength = in.read(signature);
             in.reset();
-            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
-                return new ZipArchiveInputStream(in);
-            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
-                return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
-                return new ArArchiveInputStream(in);
-            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
-                return new CpioArchiveInputStream(in);
-            }
-
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
+        } catch (IOException e) {
+            throw new ArchiveException("Could not use reset and mark operations.", e);
+        }
+        if (ZipArchiveInputStream.matches(signature, signatureLength)) {
+            return new ZipArchiveInputStream(in);
+        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
+            return new JarArchiveInputStream(in);
+        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
+            return new ArArchiveInputStream(in);
+        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
+            return new CpioArchiveInputStream(in);
+        }
+        // Dump needs a bigger buffer to check the signature;
+        signature = new byte[32];
+        in.mark(signature.length);
+        try {
+            signatureLength = in.read(signature);
             in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-                return new DumpArchiveInputStream(in);
-            }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
+        } catch (IOException e) {
+            throw new ArchiveException("Could not use reset and mark operations.", e);
+        }
+        if (DumpArchiveInputStream.matches(signature, signatureLength)) {
+            return new DumpArchiveInputStream(in);
+        }
+        // Tar needs an even bigger buffer to check the signature; read the first block
+        signature = new byte[512];
+        in.mark(signature.length);
+        try {
+            signatureLength = in.read(signature);
             in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
+        } catch (IOException e) {
+            throw new ArchiveException("Could not use reset and mark operations.", e);
+        }
+        if (TarArchiveInputStream.matches(signature, signatureLength)) {
             try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
+                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(signature));
                 tais.getNextEntry();
                 return new TarArchiveInputStream(in);
             } catch (Exception e) { // NOPMD
@@ -246,10 +251,6 @@ public class ArchiveStreamFactory {
                 // autodetection, simply not a TAR
                 // ignored
             }
-        } catch (IOException e) {
-            throw new ArchiveException("Could not use reset and mark operations.", e);
         }
-
         throw new ArchiveException("No Archiver found for the stream signature");
-    }
-}
+    }}

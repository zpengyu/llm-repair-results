diff --git a/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java b/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java
index 972e1a282..32ea06fd0 100644
--- a/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java
+++ b/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java
@@ -16,18 +13,22 @@ public class ConstructorInstantiator implements Instantiator {
         }
         return withOuterClass(cls);
     }
-
     private <T> T withOuterClass(Class<T> cls) {
         try {
-            //this is kind of overengineered because we don't need to support more params
-            //however, I know we will be needing it :)
-            Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());
-            return c.newInstance(outerClassInstance);
+            Constructor<T>[] constructors = (Constructor<T>[]) cls.getDeclaredConstructors();
+            for (Constructor<T> constructor : constructors) {
+                if (constructor.getParameterTypes().length == 1) {
+                    Class<?> constructorClass = constructor.getParameterTypes()[0];
+                    if (constructorClass.isAssignableFrom(outerClassInstance.getClass())) {
+                        return constructor.newInstance(outerClassInstance);
+                    }
+                }
+            }
         } catch (Exception e) {
             throw paramsException(cls, e);
         }
+        throw paramsException(cls, null);
     }
-
     private static <T> InstantationException paramsException(Class<T> cls, Exception e) {
         return new InstantationException("Unable to create mock instance of '"
                 + cls.getSimpleName() + "'.\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.", e);

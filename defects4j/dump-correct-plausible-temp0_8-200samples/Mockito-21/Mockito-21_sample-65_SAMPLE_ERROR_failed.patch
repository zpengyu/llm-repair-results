diff --git a/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java b/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java
index 972e1a282..7d2ffa31f 100644
--- a/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java
+++ b/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java
@@ -2,10 +2,9 @@ package org.mockito.internal.creation.instance;
 
 import java.lang.reflect.Constructor;
 
+import java.lang.reflect.Constructor;
 public class ConstructorInstantiator implements Instantiator {
-
     private final Object outerClassInstance;
-
     public ConstructorInstantiator(Object outerClassInstance) {
         this.outerClassInstance = outerClassInstance;
     }
@@ -21,8 +18,21 @@ public class ConstructorInstantiator implements Instantiator {
         try {
             //this is kind of overengineered because we don't need to support more params
             //however, I know we will be needing it :)
-            Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());
-            return c.newInstance(outerClassInstance);
+            Constructor<T> c = null;
+            Class<?> outerClass = outerClassInstance.getClass();
+            for (Constructor<?> constructor : cls.getDeclaredConstructors()) {
+                Class<?> outerParam = constructor.getParameterTypes()[0];
+                if (outerParam.isAssignableFrom(outerClass)) {
+                    c = (Constructor<T>) constructor;
+                    break;
+                }
+            }
+            if (c != null) {
+                return c.newInstance(outerClassInstance);
+            } else {
+                throw new InstantationException("Unable to create mock instance of '"
+                        + cls.getSimpleName() + "'.\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.");
+            }
         } catch (Exception e) {
             throw paramsException(cls, e);
         }

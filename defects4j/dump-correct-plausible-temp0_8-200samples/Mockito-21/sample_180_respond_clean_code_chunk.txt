public class ConstructorInstantiator implements Instantiator {
    private final Object outerClassInstance;
    public ConstructorInstantiator(Object outerClassInstance) {
        this.outerClassInstance = outerClassInstance;
    }
    public <T> T newInstance(Class<T> cls) {
        if (outerClassInstance == null) {
            return noArgConstructor(cls);
        }
        return withOuterClass(cls);
    }
    private <T> T withOuterClass(Class<T> cls) {
        try {
            Constructor<T>[] constructors = (Constructor<T>[]) cls.getDeclaredConstructors();
            for (Constructor<T> constructor : constructors) {
                if (constructor.getParameterTypes().length == 1) {
                    Class<?> constructorClass = constructor.getParameterTypes()[0];
                    if (constructorClass.isAssignableFrom(outerClassInstance.getClass())) {
                        return constructor.newInstance(outerClassInstance);
                    }
                }
            }
        } catch (Exception e) {
            throw paramsException(cls, e);
        }
        throw paramsException(cls, null);
    }
    private static <T> InstantationException paramsException(Class<T> cls, Exception e) {
        return new InstantationException("Unable to create mock instance of '"
                + cls.getSimpleName() + "'.\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.", e);
    }
    private static <T> T noArgConstructor(Class<T> cls) {
        try {
            return cls.newInstance();
        } catch (Exception e) {
            throw new InstantationException("Unable to create mock instance of '"
                    + cls.getSimpleName() + "'.\nPlease ensure it has parameter-less constructor.", e);
        }
    }
}
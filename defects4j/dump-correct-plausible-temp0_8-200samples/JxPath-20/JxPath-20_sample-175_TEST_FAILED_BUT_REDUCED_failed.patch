diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
index cd4ceac..6c2ba80 100644
--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
@@ -78,14 +71,14 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
-        if (left instanceof Iterator && right instanceof Iterator) {
-            return findMatch((Iterator) left, (Iterator) right);
+        if (left instanceof Collection && right instanceof Collection) {
+            return findMatch(((Collection) left).iterator(), ((Collection) right).iterator());
         }
-        if (left instanceof Iterator) {
-            return containsMatch((Iterator) left, right);
+        if (left instanceof Collection) {
+            return containsMatch(((Collection) left).iterator(), right);
         }
-        if (right instanceof Iterator) {
-            return containsMatch((Iterator) right, left);
+        if (right instanceof Collection) {
+            return containsMatch(((Collection) right).iterator(), left);
         }
         double ld = InfoSetUtil.doubleValue(left);
         if (Double.isNaN(ld)) {
@@ -128,14 +119,6 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
         }
         return false;
     }
-
-    /**
-     * Learn whether any element returned from an Iterator matches a given value.
-     * @param it Iterator
-     * @param value to look for
-     * @return whether a match was found
-     */
-
     /**
      * Learn whether there is an intersection between two Iterators.
      * @param lit left Iterator

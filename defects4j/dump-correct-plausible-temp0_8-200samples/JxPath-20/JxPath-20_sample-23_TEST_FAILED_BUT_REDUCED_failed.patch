diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
index cd4ceac..43711a6 100644
--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
@@ -41,114 +40,91 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
     protected CoreOperationRelationalExpression(Expression[] args) {
         super(args);
     }
-
     public final Object computeValue(EvalContext context) {
-        return compute(args[0].compute(context), args[1].compute(context))
-                ? Boolean.TRUE : Boolean.FALSE;
-    }
-
-    protected final int getPrecedence() {
-        return RELATIONAL_EXPR_PRECEDENCE;
-    }
-
-    protected final boolean isSymmetric() {
-        return false;
-    }
-
-    /**
-     * Template method for subclasses to evaluate the result of a comparison.
-     * @param compare result of comparison to evaluate
-     * @return ultimate operation success/failure
-     */
-    protected abstract boolean evaluateCompare(int compare);
-
-    /**
-     * Compare left to right.
-     * @param left left operand
-     * @param right right operand
-     * @return operation success/failure
-     */
-    private boolean compute(Object left, Object right) {
-        left = reduce(left);
-        right = reduce(right);
-
+        Object left = args[0].compute(context);
+        Object right = args[1].compute(context);
         if (left instanceof InitialContext) {
-            ((InitialContext) left).reset();
+            left = ((InitialContext) left).getSingleNodePointer();
         }
         if (right instanceof InitialContext) {
-            ((InitialContext) right).reset();
+            right = ((InitialContext) right).getSingleNodePointer();
+        }
+        if (left instanceof Collection) {
+            left = ((Collection) left).iterator();
+        }
+        if (right instanceof Collection) {
+            right = ((Collection) right).iterator();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
-            return findMatch((Iterator) left, (Iterator) right);
+            HashSet leftSet = new HashSet();
+            while (((Iterator) left).hasNext()) {
+                leftSet.add(((Iterator) left).next());
+            }
+            while (((Iterator) right).hasNext()) {
+                if (containsMatch(leftSet.iterator(), ((Iterator) right).next())) {
+                    return Boolean.TRUE;
+                }
+            }
+            return Boolean.FALSE;
         }
         if (left instanceof Iterator) {
-            return containsMatch((Iterator) left, right);
+            return containsMatch((Iterator) left, right)
+                ? Boolean.TRUE : Boolean.FALSE;
         }
         if (right instanceof Iterator) {
-            return containsMatch((Iterator) right, left);
+            return containsMatch((Iterator) right, left)
+                ? Boolean.TRUE : Boolean.FALSE;
         }
         double ld = InfoSetUtil.doubleValue(left);
         if (Double.isNaN(ld)) {
-            return false;
+            return Boolean.FALSE;
         }
         double rd = InfoSetUtil.doubleValue(right);
         if (Double.isNaN(rd)) {
-            return false;
+            return Boolean.FALSE;
         }
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1)
+            ? Boolean.TRUE : Boolean.FALSE;
+    }
+    protected final int getPrecedence() {
+        return RELATIONAL_EXPR_PRECEDENCE;
+    }
+    protected final boolean isSymmetric() {
+        return false;
     }
-
     /**
-     * Reduce an operand for comparison.
-     * @param o Object to reduce
-     * @return reduced operand
+     * Template method for subclasses to evaluate the result of a comparison.
+     * @param compare result of comparison to evaluate
+     * @return ultimate operation success/failure
      */
-    private Object reduce(Object o) {
-        if (o instanceof SelfContext) {
-            o = ((EvalContext) o).getSingleNodePointer();
-        }
-        if (o instanceof Collection) {
-            o = ((Collection) o).iterator();
-        }
-        return o;
-    }
-
+    protected abstract boolean evaluateCompare(int compare);
     /**
-     * Learn whether any element returned from an Iterator matches a given value.
-     * @param it Iterator
-     * @param value to look for
-     * @return whether a match was found
+     * Compare left to right.
+     * @param left left operand
+     * @param right right operand
+     * @return operation success/failure
      */
     private boolean containsMatch(Iterator it, Object value) {
         while (it.hasNext()) {
             Object element = it.next();
-            if (compute(element, value)) {
-                return true;
+            if (element instanceof InitialContext) {
+                element = ((InitialContext) element).getSingleNodePointer();
             }
-        }
-        return false;
-    }
-
-    /**
-     * Learn whether any element returned from an Iterator matches a given value.
-     * @param it Iterator
-     * @param value to look for
-     * @return whether a match was found
-     */
-
-    /**
-     * Learn whether there is an intersection between two Iterators.
-     * @param lit left Iterator
-     * @param rit right Iterator
-     * @return whether a match was found
-     */
-    private boolean findMatch(Iterator lit, Iterator rit) {
-        HashSet left = new HashSet();
-        while (lit.hasNext()) {
-            left.add(lit.next());
-        }
-        while (rit.hasNext()) {
-            if (containsMatch(left.iterator(), rit.next())) {
+            if (element instanceof Collection) {
+                element = ((Collection) element).iterator();
+            }
+            if (element instanceof Iterator) {
+                return containsMatch((Iterator) element, value);
+            }
+            double ed = InfoSetUtil.doubleValue(element);
+            if (Double.isNaN(ed)) {
+                continue;
+            }
+            double vd = InfoSetUtil.doubleValue(value);
+            if (Double.isNaN(vd)) {
+                continue;
+            }
+            if (evaluateCompare(ed == vd ? 0 : ed < vd ? -1 : 1)) {
                 return true;
             }
         }

diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
index cd4ceac..d26331e 100644
--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
@@ -32,12 +32,7 @@ import org.apache.commons.jxpath.ri.axes.SelfContext;
  * @author Matt Benson
  * @version $Revision$ $Date$
  */
-public abstract class CoreOperationRelationalExpression extends CoreOperation {
-
-    /**
-     * Create a new CoreOperationRelationalExpression.
-     * @param args arguments
-     */
+abstract class CoreOperationRelationalExpression extends CoreOperation {
     protected CoreOperationRelationalExpression(Expression[] args) {
         super(args);
     }
@@ -54,20 +46,7 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
     protected final boolean isSymmetric() {
         return false;
     }
-
-    /**
-     * Template method for subclasses to evaluate the result of a comparison.
-     * @param compare result of comparison to evaluate
-     * @return ultimate operation success/failure
-     */
     protected abstract boolean evaluateCompare(int compare);
-
-    /**
-     * Compare left to right.
-     * @param left left operand
-     * @param right right operand
-     * @return operation success/failure
-     */
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
@@ -97,12 +75,6 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
         }
         return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
     }
-
-    /**
-     * Reduce an operand for comparison.
-     * @param o Object to reduce
-     * @return reduced operand
-     */
     private Object reduce(Object o) {
         if (o instanceof SelfContext) {
             o = ((EvalContext) o).getSingleNodePointer();
@@ -112,13 +84,6 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
         }
         return o;
     }
-
-    /**
-     * Learn whether any element returned from an Iterator matches a given value.
-     * @param it Iterator
-     * @param value to look for
-     * @return whether a match was found
-     */
     private boolean containsMatch(Iterator it, Object value) {
         while (it.hasNext()) {
             Object element = it.next();
@@ -128,20 +93,6 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
         }
         return false;
     }
-
-    /**
-     * Learn whether any element returned from an Iterator matches a given value.
-     * @param it Iterator
-     * @param value to look for
-     * @return whether a match was found
-     */
-
-    /**
-     * Learn whether there is an intersection between two Iterators.
-     * @param lit left Iterator
-     * @param rit right Iterator
-     * @return whether a match was found
-     */
     private boolean findMatch(Iterator lit, Iterator rit) {
         HashSet left = new HashSet();
         while (lit.hasNext()) {

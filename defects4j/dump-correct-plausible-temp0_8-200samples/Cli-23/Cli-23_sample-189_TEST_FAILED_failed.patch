diff --git a/src/java/org/apache/commons/cli/HelpFormatter.java b/src/java/org/apache/commons/cli/HelpFormatter.java
index 7f61ceb..9c7c9ce 100644
--- a/src/java/org/apache/commons/cli/HelpFormatter.java
+++ b/src/java/org/apache/commons/cli/HelpFormatter.java
@@ -814,32 +812,43 @@ public class HelpFormatter
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
         // all following lines must be padded with nextLineTabStop space 
         // characters
-        final String padding = createPadding(nextLineTabStop);
-
-        while (true)
+        if (nextLineTabStop > 0)
         {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
+            final String padding = createPadding(nextLineTabStop);
+            while (true)
             {
-                sb.append(text);
-
-                return sb;
-            } else
-            if (pos == lastPos)
+                int lastPos = pos;
+                text = padding + text.substring(pos).trim();
+                pos = findWrapPos(text, width, 0);
+                if (pos == -1)
+                {
+                    sb.append(text);
+                    return sb;
+                } else
+                if (pos == lastPos)
+                {
+                    throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+                }
+                sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            }
+        } else
+        {
+            text = text.substring(pos).trim();
+            while (true)
             {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+                pos = findWrapPos(text, width, 0);
+                if (pos == -1)
+                {
+                    sb.append(text);
+                    return sb;
+                }
+                sb.append(text.substring(0, pos)).append(defaultNewLine);
+                text = text.substring(pos).trim();
             }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
-
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.

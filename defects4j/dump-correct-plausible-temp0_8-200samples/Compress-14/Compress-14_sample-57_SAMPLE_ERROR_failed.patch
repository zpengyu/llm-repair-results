diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
index 121012d0..2fa54a09 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
@@ -54,10 +54,9 @@ public class TarUtils {
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
-
+        long result = 0;
+        int end = offset + length;
+        int start = offset;
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
@@ -107,10 +102,18 @@ public class TarUtils {
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
-
         return result;
     }
-
+    private static String exceptionMessage(final byte[] buffer, final int offset, final int length, final int errorOffset, final byte errorByte) {
+        final StringBuilder msg = new StringBuilder();
+        msg.append("Octal byte sequence ");
+        msg.append(Utils.toOctalString(buffer, offset, length));
+        msg.append(" is invalid at offset ");
+        msg.append(errorOffset);
+        msg.append(" due to: ");
+        msg.append(errorByte);
+        return msg.toString();
+    }
     /** 
      * Compute the value contained in a byte buffer.  If the most
      * significant bit of the first byte in the buffer is set, this

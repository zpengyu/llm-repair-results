    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
        long    result = 0;
        int     end = offset + length;
        int     start = offset;
        if (length < 2){
            throw new IllegalArgumentException("Length "+length+" must be at least 2");
        }
        boolean allNUL = true;
        for (int i = start; i < end; i++){
            if (buffer[i] != 0){
                allNUL = false;
                break;
            }
        }
        if (allNUL) {
            return 0L;
        }
        // Skip leading spaces
        while (start < end){
            if (buffer[start] == ' '){
                start++;
            } else {
                break;
            }
        }
        // Must have trailing NUL or space
        byte trailer;
        trailer = buffer[end-1];
        if (trailer == 0 || trailer == ' '){
            end--;
        } else {
            throw new IllegalArgumentException(
                    exceptionMessage(buffer, offset, length, end-1, trailer));
        }
        // May have additional NUL or space
        trailer = buffer[end-1];
        if (trailer == 0 || trailer == ' '){
            end--;
        }
        for ( ;start < end; start++) {
            final byte currentByte = buffer[start];
            // CheckStyle:MagicNumber OFF
            if (currentByte < '0' || currentByte > '7'){
                throw new IllegalArgumentException(
                        exceptionMessage(buffer, offset, length, start, currentByte));
            }
            result = (result << 3) + (currentByte - '0'); // convert from ASCII
            // CheckStyle:MagicNumber ON
        }
        return result;
    }
    private static String exceptionMessage(final byte[] buffer, final int offset, final int length, final int badByte, final byte byteValue) {
        final StringBuffer strBuf = new StringBuffer(80);
        strBuf.append("Input byte array must be in the range of ");
        strBuf.append("Octal 0-177 at index: ");
        strBuf.append(badByte);
        strBuf.append(" Value: ");
        strBuf.append(byteValue);
        strBuf.append(" Offset: ");
        strBuf.append(offset);
        strBuf.append(" Length: ");
        strBuf.append(length);
        strBuf.append(" array length: ");
        strBuf.append(buffer.length);
        return strBuf.toString();
    }
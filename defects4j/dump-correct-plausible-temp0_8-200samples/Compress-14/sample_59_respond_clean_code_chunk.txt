    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
        long    result = 0;
        int     end = offset + length;
        int     start = offset;
        if (length < 2){
            throw new IllegalArgumentException("Length "+length+" must be at least 2");
        }
        boolean allNUL = true;
        for (int i = start; i < end; i++){
            if (buffer[i] != 0){
                allNUL = false;
                break;
            }
        }
        if (allNUL) {
            return 0L;
        }
        // Skip leading spaces
        while (start < end){
            if (buffer[start] == ' '){
                start++;
            } else {
                break;
            }
        }
        // Must have trailing NUL or space
        byte trailer;
        trailer = buffer[end-1];
        if (trailer == 0 || trailer == ' '){
            end--;
        } else {
            throw new IllegalArgumentException(
                    exceptionMessage(buffer, offset, length, end-1, trailer));
        }
        // May have additional NUL or space
        trailer = buffer[end-1];
        if (trailer == 0 || trailer == ' '){
            end--;
        }
        for ( ;start < end; start++) {
            final byte currentByte = buffer[start];
            // CheckStyle:MagicNumber OFF
            if (currentByte < '0' || currentByte > '7'){
                throw new IllegalArgumentException(
                        exceptionMessage(buffer, offset, length, start, currentByte));
            }
            result = (result << 3) + (currentByte - '0'); // convert from ASCII
            // CheckStyle:MagicNumber ON
        }
        return result;
    }
    private static String exceptionMessage(final byte[] buffer, final int offset, final int length, final int currentByte, final byte badByte) {
        final int maxLength = Math.max(currentByte, Math.min(offset + length, offset + 20));
        final StringBuilder sb = new StringBuilder(80);
        sb.append("Bad octal character '");
        sb.append((char) badByte);
        sb.append("' 0x").append(Integer.toString(badByte, 16));
        sb.append(" in header starting at offset ");
        sb.append(offset);
        sb.append(" of ");
        sb.append(length);
        sb.append(" bytes starting with '");
        for (int i = offset; i < maxLength; i++) {
            final byte b = buffer[i];
            if (b == 0) {
                sb.append("(NUL)");
            } else if (b == '\n') {
                sb.append("(LF)");
            } else if (b == '\r') {
                sb.append("(CR)");
            } else if (b < 0x20 || b > 0x7e) {
                sb.append("(").append(Integer.toString(b, 16)).append(")");
            } else {
                sb.append((char) b);
            }
        }
        sb.append("'");
        return sb.toString();
    }
public static long parseOctal(final byte[] buffer, final int offset, final int length) {
    long result = 0;
    int end = offset + length;
    int start = offset;
    if (length < 2) {
        throw new IllegalArgumentException("Length " + length + " must be at least 2");
    }
    boolean allNUL = true;
    for (int i = start; i < end; i++) {
        if (buffer[i] != 0) {
            allNUL = false;
            break;
        }
    }
    if (allNUL) {
        return 0L;
    }
    // Skip leading spaces
    while (start < end) {
        if (buffer[start] == ' ') {
            start++;
        } else {
            break;
        }
    }
    // Must have trailing NUL or space
    byte trailer;
    trailer = buffer[end - 1];
    if (trailer == 0 || trailer == ' ') {
        end--;
    } else {
        throw new IllegalArgumentException(
                exceptionMessage(buffer, offset, length, end - 1, trailer));
    }
    // May have additional NUL or space
    trailer = buffer[end - 1];
    if (trailer == 0 || trailer == ' ') {
        end--;
    }
    for (; start < end; start++) {
        final byte currentByte = buffer[start];
        if (currentByte < '0' || currentByte > '7') {
            throw new IllegalArgumentException(
                    exceptionMessage(buffer, offset, length, start, currentByte));
        }
        result = (result << 3) + (currentByte - '0'); // convert from ASCII
    }
    return result;
}
private static String exceptionMessage(final byte[] buffer, final int offset,
        final int length, final int badByteOffset, final byte badByte) {
    final StringBuilder sb = new StringBuilder();
    sb.append("Failed to parse octal number at offset ");
    sb.append(badByteOffset);
    sb.append(" buffer length ");
    sb.append(length);
    sb.append(": ");
    sb.append(OctalUtils.toOctalString(buffer, offset, length));
    sb.append(" bad byte value 0x");
    sb.append(Integer.toHexString(badByte & 0xff));
    return sb.toString();
}
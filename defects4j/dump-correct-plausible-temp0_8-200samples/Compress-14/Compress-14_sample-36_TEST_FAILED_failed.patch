diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
index 121012d0..a3d2e9e3 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
@@ -54,63 +54,56 @@ public class TarUtils {
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
-
-        if (length < 2){
-            throw new IllegalArgumentException("Length "+length+" must be at least 2");
+        if (length < 0) {
+            throw new IllegalArgumentException("Negative length: " + length);
         }
-
-        boolean allNUL = true;
-        for (int i = start; i < end; i++){
-            if (buffer[i] != 0){
-                allNUL = false;
-                break;
-            }
+        if (length > buffer.length) {
+            throw new IllegalArgumentException(
+                    "Length " + length + " exceeds buffer size of " + buffer.length);
         }
-        if (allNUL) {
-            return 0L;
+        if (offset < 0) {
+            throw new IllegalArgumentException("Negative offset: " + offset);
         }
-
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
-            } else {
-                break;
-            }
+        if (offset > buffer.length) {
+            throw new IllegalArgumentException(
+                    "Offset " + offset + " exceeds buffer size of " + buffer.length);
         }
-
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
+        if (offset + length > buffer.length) {
             throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                    "Offset + length " + offset + " + " + length
+                    + " exceeds buffer size of " + buffer.length);
         }
-        // May have additional NUL or space
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+        long result = 0;
+        final int end = offset + length;
+        if (length == 0) {
+            return 0;
         }
-
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+        if (length < 0) {
+            throw new IllegalArgumentException(
+                    "Invalid length " + length);
+        }
+        int i = offset;
+        while (i < end && Character.isWhitespace(buffer[i])) {
+            i++;
+        }
+        if (i == end) {
+            throw new IllegalArgumentException(
+                    "No digits found in \"" + new String(buffer, offset, length) + "\"");
+        }
+        for (; i < end; i++) {
+            final byte currentByte = buffer[i];
+            if (currentByte >= '0' && currentByte <= '7') {
+                // CheckStyle:MagicNumber OFF
+                result = (result << 3) + (currentByte - '0'); // convert from ASCII
+                // CheckStyle:MagicNumber ON
+            } else {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        "Invalid character '" + ((char) currentByte) + "' at position " + i
+                        + " in \"" + new String(buffer, offset, length) + "\"");
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
         }
-
         return result;
     }
-
     /** 
      * Compute the value contained in a byte buffer.  If the most
      * significant bit of the first byte in the buffer is set, this

diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index 87ff4aab..f3f27742 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -478,18 +478,7 @@ public class TarArchiveInputStream extends ArchiveInputStream {
         return headers;
     }
 
-    private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {
-        /*
-         * The following headers are defined for Pax.
-         * atime, ctime, charset: cannot use these without changing TarArchiveEntry fields
-         * mtime
-         * comment
-         * gid, gname
-         * linkpath
-         * size
-         * uid,uname
-         * SCHILY.devminor, SCHILY.devmajor: don't have setters/getters for those
-         */
+private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {
         for (Entry<String, String> ent : headers.entrySet()){
             String key = ent.getKey();
             String val = ent.getValue();
@@ -498,21 +487,45 @@ public class TarArchiveInputStream extends ArchiveInputStream {
             } else if ("linkpath".equals(key)){
                 currEntry.setLinkName(val);
             } else if ("gid".equals(key)){
-                currEntry.setGroupId(Integer.parseInt(val));
+                try {
+                    currEntry.setGroupId(Integer.parseInt(val));
+                } catch (NumberFormatException ex) {
+                    //just ignore it
+                }
             } else if ("gname".equals(key)){
                 currEntry.setGroupName(val);
             } else if ("uid".equals(key)){
-                currEntry.setUserId(Integer.parseInt(val));
+                try {
+                    currEntry.setUserId(Integer.parseInt(val));
+                } catch (NumberFormatException ex) {
+                    //just ignore it
+                }
             } else if ("uname".equals(key)){
                 currEntry.setUserName(val);
             } else if ("size".equals(key)){
-                currEntry.setSize(Long.parseLong(val));
+                try {
+                    currEntry.setSize(Long.parseLong(val));
+                } catch (NumberFormatException ex) {
+                    //just ignore it
+                }
             } else if ("mtime".equals(key)){
-                currEntry.setModTime((long) (Double.parseDouble(val) * 1000));
+                try {
+                    currEntry.setModTime((long) (Double.parseDouble(val) * 1000));
+                } catch (NumberFormatException ex) {
+                    //just ignore it
+                }
             } else if ("SCHILY.devminor".equals(key)){
-                currEntry.setDevMinor(Integer.parseInt(val));
+                try {
+                    currEntry.setDevMinor(Integer.parseInt(val));
+                } catch (NumberFormatException ex) {
+                    //just ignore it
+                }
             } else if ("SCHILY.devmajor".equals(key)){
-                currEntry.setDevMajor(Integer.parseInt(val));
+                try {
+                    currEntry.setDevMajor(Integer.parseInt(val));
+                } catch (NumberFormatException ex) {
+                    //just ignore it
+                }
             }
         }
     }

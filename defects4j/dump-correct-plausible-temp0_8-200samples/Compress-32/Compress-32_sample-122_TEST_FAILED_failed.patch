diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index 87ff4aab..e2e8cfce 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -478,7 +478,7 @@ public class TarArchiveInputStream extends ArchiveInputStream {
         return headers;
     }
 
-    private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {
+private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {
         /*
          * The following headers are defined for Pax.
          * atime, ctime, charset: cannot use these without changing TarArchiveEntry fields
@@ -494,25 +494,65 @@ public class TarArchiveInputStream extends ArchiveInputStream {
             String key = ent.getKey();
             String val = ent.getValue();
             if ("path".equals(key)){
-                currEntry.setName(val);
+                try{
+                    currEntry.setName(val);
+                }catch(Exception e){
+                    e.printStackTrace();
+                }
             } else if ("linkpath".equals(key)){
-                currEntry.setLinkName(val);
+                try{
+                    currEntry.setLinkName(val);
+                }catch(Exception e){
+                    e.printStackTrace();
+                }
             } else if ("gid".equals(key)){
-                currEntry.setGroupId(Integer.parseInt(val));
+                try{
+                    currEntry.setGroupId(Integer.parseInt(val));
+                }catch(Exception e){
+                    e.printStackTrace();
+                }
             } else if ("gname".equals(key)){
-                currEntry.setGroupName(val);
+                try{
+                    currEntry.setGroupName(val);
+                }catch(Exception e){
+                    e.printStackTrace();
+                }
             } else if ("uid".equals(key)){
-                currEntry.setUserId(Integer.parseInt(val));
+                try{
+                    currEntry.setUserId(Integer.parseInt(val));
+                }catch(Exception e){
+                    e.printStackTrace();
+                }
             } else if ("uname".equals(key)){
-                currEntry.setUserName(val);
+                try{
+                    currEntry.setUserName(val);
+                }catch(Exception e){
+                    e.printStackTrace();
+                }
             } else if ("size".equals(key)){
-                currEntry.setSize(Long.parseLong(val));
+                try{
+                    currEntry.setSize(Long.parseLong(val));
+                }catch(Exception e){
+                    e.printStackTrace();
+                }
             } else if ("mtime".equals(key)){
-                currEntry.setModTime((long) (Double.parseDouble(val) * 1000));
+                try{
+                    currEntry.setModTime((long) (Double.parseDouble(val) * 1000));
+                }catch(Exception e){
+                    e.printStackTrace();
+                }
             } else if ("SCHILY.devminor".equals(key)){
-                currEntry.setDevMinor(Integer.parseInt(val));
+                try{
+                    currEntry.setDevMinor(Integer.parseInt(val));
+                }catch(Exception e){
+                    e.printStackTrace();
+                }
             } else if ("SCHILY.devmajor".equals(key)){
-                currEntry.setDevMajor(Integer.parseInt(val));
+                try{
+                    currEntry.setDevMajor(Integer.parseInt(val));
+                }catch(Exception e){
+                    e.printStackTrace();
+                }
             }
         }
     }

public class ReturnsDeepStubs implements Answer<Object>, Serializable {

    private static final long serialVersionUID = -7105341425736035847L;

    public Object answer(InvocationOnMock invocation) throws Throwable {
        Class<?> rawType = actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()).rawType();
        if (!mockitoCore().isTypeMockable(rawType)) {
            return delegate().returnValueFor(rawType);
        }

        return deepStub(invocation, rawType);
    }

    private Object deepStub(InvocationOnMock invocation, Class<?> rawType) throws Throwable {
        InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
        InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();

        // matches invocation for verification
        for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {
            if (container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {
                return stubbedInvocationMatcher.answer(invocation);
            }
        }

        // record deep stub answer
        return recordDeepStubAnswer(
                newDeepStubMock(rawType),
                container
        );
    }

    /**
     * Creates a mock using the Generics Metadata.
     *
     * <li>Finally as we want to mock the actual type, but we want to pass along the contextual generics meta-data
     * that was resolved for the current return type, for this to happen we associate to the mock an new instance of
     * {@link ReturnsDeepStubs} answer in which we will store the returned type generic metadata.
     *
     * @param rawType The type to mock.
     * @param parentMock The parent of the current deep stub mock.
     * @return The mock
     */
    private Object newDeepStubMock(Class<?> rawType) {
        return mockitoCore().mock(
                rawType,
                withSettingsUsing(rawType)
        );
    }

    private MockSettings withSettingsUsing(Class<?> rawType) {
        MockSettings mockSettings = withSettings();

        return mockSettings.serializable()
                .defaultAnswer(returnsDeepStubsAnswerUsing(rawType));
    }


    private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final Class<?> rawType) {
        return new ReturnsDeepStubsSerializationFallback(rawType);
    }

    private Object recordDeepStubAnswer(final Object mock, InvocationContainerImpl container) throws Throwable {
        container.addAnswer(new DeeplyStubbedAnswer(mock), false);
        return mock;
    }

    protected GenericMetadataSupport actualParameterizedType(Object mock) {
        CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();
        return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());
    }


    private static class ReturnsDeepStubsSerializationFallback extends ReturnsDeepStubs implements Serializable {
        @SuppressWarnings("serial") // not gonna be serialized
        private final Class<?> rawType;

        public ReturnsDeepStubsSerializationFallback(Class<?> rawType) {
            this.rawType = rawType;
        }

        @Override
        protected GenericMetadataSupport actualParameterizedType(Object mock) {
            return GenericMetadataSupport.inferFrom(rawType);
        }
        private Object writeReplace() throws IOException {
            return Mockito.RETURNS_DEEP_STUBS;
        }
    }


    private static class DeeplyStubbedAnswer implements Answer<Object>, Serializable {
        @SuppressWarnings("serial") // serialization will fail with a nice message if mock not serializable
        private final Object mock;

        DeeplyStubbedAnswer(Object mock) {
            this.mock = mock;
        }
        public Object answer(InvocationOnMock invocation) throws Throwable {
            return mock;
        }
    }


    private static MockitoCore mockitoCore() {
        return LazyHolder.MOCKITO_CORE;
    }

    private static ReturnsEmptyValues delegate() {
        return LazyHolder.DELEGATE;
    }

    private static class LazyHolder {
        private static final MockitoCore MOCKITO_CORE = new MockitoCore();
        private static final ReturnsEmptyValues DELEGATE = new ReturnsEmptyValues();
    }
}


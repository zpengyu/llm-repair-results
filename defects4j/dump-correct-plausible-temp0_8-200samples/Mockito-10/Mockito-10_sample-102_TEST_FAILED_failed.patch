diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index e2ded558e..b8bf75dcb 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -40,35 +40,26 @@ import static org.mockito.Mockito.withSettings;
  * @see org.mockito.Answers#RETURNS_DEEP_STUBS
  */
 public class ReturnsDeepStubs implements Answer<Object>, Serializable {
-
     private static final long serialVersionUID = -7105341425736035847L;
-
     public Object answer(InvocationOnMock invocation) throws Throwable {
-        GenericMetadataSupport returnTypeGenericMetadata =
-                actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
-
-        Class<?> rawType = returnTypeGenericMetadata.rawType();
+        Class<?> rawType = actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()).rawType();
         if (!mockitoCore().isTypeMockable(rawType)) {
             return delegate().returnValueFor(rawType);
         }
-
-        return deepStub(invocation, returnTypeGenericMetadata);
+        return deepStub(invocation, rawType);
     }
-
-    private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
+    private Object deepStub(InvocationOnMock invocation, Class<?> rawType) throws Throwable {
         InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
         InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();
-
         // matches invocation for verification
         for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {
             if (container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {
                 return stubbedInvocationMatcher.answer(invocation);
             }
         }
-
         // record deep stub answer
         return recordDeepStubAnswer(
-                newDeepStubMock(returnTypeGenericMetadata),
+                newDeepStubMock(rawType),
                 container
         );
     }
@@ -80,31 +70,24 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
      * that was resolved for the current return type, for this to happen we associate to the mock an new instance of
      * {@link ReturnsDeepStubs} answer in which we will store the returned type generic metadata.
      *
-     * @param returnTypeGenericMetadata The metadata to use to create the new mock.
+     * @param rawType The type to mock.
      * @param parentMock The parent of the current deep stub mock.
      * @return The mock
      */
-    private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {
+    private Object newDeepStubMock(Class<?> rawType) {
         return mockitoCore().mock(
-                returnTypeGenericMetadata.rawType(),
-                withSettingsUsing(returnTypeGenericMetadata)
+                rawType,
+                withSettingsUsing(rawType)
         );
     }
-
-    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {
-        MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?
-                withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())
-                : withSettings();
-
+    private MockSettings withSettingsUsing(Class<?> rawType) {
+        MockSettings mockSettings = withSettings();
         return mockSettings.serializable()
-                .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
+                .defaultAnswer(returnsDeepStubsAnswerUsing(rawType));
     }
-
-
-    private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {
-        return new ReturnsDeepStubsSerializationFallback(returnTypeGenericMetadata);
+    private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final Class<?> rawType) {
+        return new ReturnsDeepStubsSerializationFallback(rawType);
     }
-
     private Object recordDeepStubAnswer(final Object mock, InvocationContainerImpl container) throws Throwable {
         container.addAnswer(new DeeplyStubbedAnswer(mock), false);
         return mock;
@@ -114,19 +96,15 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
         CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();
         return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());
     }
-
-
     private static class ReturnsDeepStubsSerializationFallback extends ReturnsDeepStubs implements Serializable {
         @SuppressWarnings("serial") // not gonna be serialized
-        private final GenericMetadataSupport returnTypeGenericMetadata;
-
-        public ReturnsDeepStubsSerializationFallback(GenericMetadataSupport returnTypeGenericMetadata) {
-            this.returnTypeGenericMetadata = returnTypeGenericMetadata;
+        private final Class<?> rawType;
+        public ReturnsDeepStubsSerializationFallback(Class<?> rawType) {
+            this.rawType = rawType;
         }
-
         @Override
         protected GenericMetadataSupport actualParameterizedType(Object mock) {
-            return returnTypeGenericMetadata;
+            return GenericMetadataSupport.inferFrom(rawType);
         }
         private Object writeReplace() throws IOException {
             return Mockito.RETURNS_DEEP_STUBS;

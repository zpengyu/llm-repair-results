diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index e2ded558e..d25095654 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -39,105 +39,47 @@ import static org.mockito.Mockito.withSettings;
  * @see org.mockito.Mockito#RETURNS_DEEP_STUBS
  * @see org.mockito.Answers#RETURNS_DEEP_STUBS
  */
+import org.mockito.internal.creation.settings.CreationSettings;
+import org.mockito.internal.stubbing.answers.ReturnsEmptyValues;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.mock.MockCreationSettings;
+import org.mockito.stubbing.Answer;
+import static org.mockito.Mockito.withSettings;
 public class ReturnsDeepStubs implements Answer<Object>, Serializable {
-
     private static final long serialVersionUID = -7105341425736035847L;
-
     public Object answer(InvocationOnMock invocation) throws Throwable {
-        GenericMetadataSupport returnTypeGenericMetadata =
-                actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
-
-        Class<?> rawType = returnTypeGenericMetadata.rawType();
-        if (!mockitoCore().isTypeMockable(rawType)) {
+        Class<?> rawType = invocation.getMethod().getReturnType();
+        if (!isTypeMockable(rawType)) {
             return delegate().returnValueFor(rawType);
         }
-
-        return deepStub(invocation, returnTypeGenericMetadata);
-    }
-
-    private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
         InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
         InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();
-
-        // matches invocation for verification
         for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {
             if (container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {
                 return stubbedInvocationMatcher.answer(invocation);
             }
         }
-
-        // record deep stub answer
         return recordDeepStubAnswer(
-                newDeepStubMock(returnTypeGenericMetadata),
+                newDeepStubMock(rawType),
                 container
         );
     }
-
-    /**
-     * Creates a mock using the Generics Metadata.
-     *
-     * <li>Finally as we want to mock the actual type, but we want to pass along the contextual generics meta-data
-     * that was resolved for the current return type, for this to happen we associate to the mock an new instance of
-     * {@link ReturnsDeepStubs} answer in which we will store the returned type generic metadata.
-     *
-     * @param returnTypeGenericMetadata The metadata to use to create the new mock.
-     * @param parentMock The parent of the current deep stub mock.
-     * @return The mock
-     */
-    private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {
-        return mockitoCore().mock(
-                returnTypeGenericMetadata.rawType(),
-                withSettingsUsing(returnTypeGenericMetadata)
+    private Object newDeepStubMock(Class<?> rawType) {
+        return mock(
+                rawType,
+                withSettings()
+                        .defaultAnswer(newDeepStubAnswer())
         );
     }
-
-    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {
-        MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?
-                withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())
-                : withSettings();
-
-        return mockSettings.serializable()
-                .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
-    }
-
-
-    private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {
-        return new ReturnsDeepStubsSerializationFallback(returnTypeGenericMetadata);
+    private ReturnsDeepStubs newDeepStubAnswer() {
+        return new ReturnsDeepStubs();
     }
-
     private Object recordDeepStubAnswer(final Object mock, InvocationContainerImpl container) throws Throwable {
         container.addAnswer(new DeeplyStubbedAnswer(mock), false);
         return mock;
     }
-
-    protected GenericMetadataSupport actualParameterizedType(Object mock) {
-        CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();
-        return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());
-    }
-
-
-    private static class ReturnsDeepStubsSerializationFallback extends ReturnsDeepStubs implements Serializable {
-        @SuppressWarnings("serial") // not gonna be serialized
-        private final GenericMetadataSupport returnTypeGenericMetadata;
-
-        public ReturnsDeepStubsSerializationFallback(GenericMetadataSupport returnTypeGenericMetadata) {
-            this.returnTypeGenericMetadata = returnTypeGenericMetadata;
-        }
-
-        @Override
-        protected GenericMetadataSupport actualParameterizedType(Object mock) {
-            return returnTypeGenericMetadata;
-        }
-        private Object writeReplace() throws IOException {
-            return Mockito.RETURNS_DEEP_STUBS;
-        }
-    }
-
-
     private static class DeeplyStubbedAnswer implements Answer<Object>, Serializable {
-        @SuppressWarnings("serial") // serialization will fail with a nice message if mock not serializable
         private final Object mock;
-
         DeeplyStubbedAnswer(Object mock) {
             this.mock = mock;
         }

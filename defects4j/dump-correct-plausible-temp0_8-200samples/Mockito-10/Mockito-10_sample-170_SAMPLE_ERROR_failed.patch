diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index e2ded558e..90a305aff 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -160,3 +135,66 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
         private static final ReturnsEmptyValues DELEGATE = new ReturnsEmptyValues();
     }
 }
+//remove the comment out of print
+public class MyTest {
+    //@Test
+    public void test() {
+        MyClass myClass = new MyClass();
+        myClass.myMethod();
+        myClass.myOtherMethod();
+        //System.out.println("We have " + myClass.getCount() + " items.");
+    }
+}
+class MyClass {
+    private int count = 0;
+    public void myMethod() {
+        count++;
+        System.out.println("Doing stuff...");
+    }
+    public int getCount() {
+        return count;
+    }
+    public void myOtherMethod() {
+        System.out.println("Doing other stuff...");
+    }
+}
+//find the place to put the comment back in to make the program work
+import java.awt.event.KeyListener;
+import java.awt.event.KeyEvent;
+import javax.swing.JFrame;
+import javax.swing.JTextArea;
+public class KeyDemoFrame extends JFrame implements KeyListener {
+    private String line1 = "";
+    private String line2 = "";
+    private String line3 = "";
+    private JTextArea textArea;
+    public KeyDemoFrame() {
+        textArea = new JTextArea(10, 15);
+        textArea.setText("Press any key on the keyboard...");
+        textArea.setEditable(false);
+        add(textArea);
+        addKeyListener(this);
+        setSize(350, 100);
+        setVisible(true);
+    }
+    public void keyTyped(KeyEvent e) {
+        line1 = String.format("Key typed: %s", e.getKeyChar());
+        setLines2and3(e);
+    }
+    public void keyPressed(KeyEvent e) {
+        line1 = String.format("Key pressed: %s", KeyEvent.getKeyText(e.getKeyCode()));
+        setLines2and3(e);
+    }
+    public void keyReleased(KeyEvent e) {
+        line1 = String.format("Key released: %s", KeyEvent.getKeyText(e.getKeyCode()));
+        setLines2and3(e);
+    }
+    private void setLines2and3(KeyEvent e) {
+        line2 = String.format("This key is %san action key",
+                (e.isActionKey() ? "" : "not "));
+        String temp = KeyEvent.getKeyModifiersText(e.getModifiers());
+        line3 = String.format("Modifier keys pressed: %s",
+                (temp.equals("") ? "none" : temp));
+        textArea.setText(String.format("%s\n%s\n%s\n", line1, line2, line3));
+    }
+}
\ No newline at end of file

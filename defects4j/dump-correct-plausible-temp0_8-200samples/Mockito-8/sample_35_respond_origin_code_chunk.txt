    protected void registerTypeVariablesOn(Type classType) {
        if (!(classType instanceof ParameterizedType)) {
            return;
        }
        ParameterizedType parameterizedType = (ParameterizedType) classType;
        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
        for (int i = 0; i < actualTypeArguments.length; i++) {
            TypeVariable typeParameter = typeParameters[i];
            Type actualTypeArgument = actualTypeArguments[i];
            if (actualTypeArgument instanceof WildcardType) {
                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
            } else {
                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
            }
            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
        }
    }
    private List<Type> boundsOf(WildcardType wildcardType) {
        Type[] bounds = wildcardType.getUpperBounds();
        if (bounds.length == 0) {
            return boundOf(Object.class);
        }
        return boundOf(bounds[0]);
    }
    private List<Type> boundOf(Type bound) {
        if (bound == null) {
            return boundOf(Object.class);
        }
        if (bound instanceof WildcardType) {
            return boundsOf((WildcardType) bound);
        }
        if (bound instanceof TypeVariable) {
            return Collections.singletonList(contextualActualTypeParameters.get(bound));
        }
        return Collections.singletonList(bound);
    }

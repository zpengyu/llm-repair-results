    protected void registerTypeVariablesOn(Type classType) {
        if (!(classType instanceof ParameterizedType)) {
            return;
        }
        ParameterizedType parameterizedType = (ParameterizedType) classType;
        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
        for (int i = 0; i < actualTypeArguments.length; i++) {
            TypeVariable typeParameter = typeParameters[i];
            Type actualTypeArgument = actualTypeArguments[i];
            if (actualTypeArgument instanceof WildcardType) {
                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
            } else if (actualTypeArgument instanceof TypeVariable) {
            	TypeVariable actualTypeArgument_ = (TypeVariable) actualTypeArgument;
            	Class<?> actualTypeArgument_class = (Class<?>) actualTypeArgument_.getGenericDeclaration();
            	TypeVariable[] actualTypeArgument_class_typeParameters = actualTypeArgument_class.getTypeParameters();
            	for (TypeVariable typeVariable : actualTypeArgument_class_typeParameters) {
                    if(typeVariable.equals(actualTypeArgument_))
                        contextualActualTypeParameters.put(typeParameter, actualTypeArgument_class_typeParameters[i].getBounds());
            	}
            } else {
                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
            }
            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
        }
    }
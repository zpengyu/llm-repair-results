diff --git a/src/java/org/apache/commons/codec/binary/Base64.java b/src/java/org/apache/commons/codec/binary/Base64.java
index 8088d96d..c6116a2a 100644
--- a/src/java/org/apache/commons/codec/binary/Base64.java
+++ b/src/java/org/apache/commons/codec/binary/Base64.java
@@ -411,67 +411,67 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {
      * @param inPos Position to start reading data from.
      * @param inAvail Amount of bytes available from input for encoding.
      */
-    void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
-            return;
-        }
-        // inAvail < 0 is how we're informed of EOF in the underlying data we're
-        // encoding.
-        if (inAvail < 0) {
-            eof = true;
-            if (buf == null || buf.length - pos < encodeSize) {
-                resizeBuf();
-            }
-            switch (modulus) {
-                case 1:
-                    buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];
-                    // URL-SAFE skips the padding to further reduce size.
-                    if (encodeTable == STANDARD_ENCODE_TABLE) {
-                        buf[pos++] = PAD;
-                        buf[pos++] = PAD;
-                    }
-                    break;
-
-                case 2:
-                    buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];
-                    // URL-SAFE skips the padding to further reduce size.
-                    if (encodeTable == STANDARD_ENCODE_TABLE) {
-                        buf[pos++] = PAD;
-                    }
-                    break;
+        void encode(byte[] in, int inPos, int inAvail) {
+            if (eof) {
+                return;
             }
-            if (lineLength > 0) {
-                System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
-                pos += lineSeparator.length;
-            }
-        } else {
-            for (int i = 0; i < inAvail; i++) {
+            // inAvail < 0 is how we're informed of EOF in the underlying data we're
+            // encoding.
+            if (inAvail < 0) {
+                eof = true;
                 if (buf == null || buf.length - pos < encodeSize) {
                     resizeBuf();
                 }
-                modulus = (++modulus) % 3;
-                int b = in[inPos++];
-                if (b < 0) { b += 256; }
-                x = (x << 8) + b;
-                if (0 == modulus) {
-                    buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
-                    buf[pos++] = encodeTable[x & MASK_6BITS];
-                    currentLinePos += 4;
-                    if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                switch (modulus) {
+                    case 1:
+                        buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+                        buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+                        // URL-SAFE skips the padding to further reduce size.
+                        if (encodeTable == STANDARD_ENCODE_TABLE) {
+                            buf[pos++] = PAD;
+                            buf[pos++] = PAD;
+                        }
+                        break;
+                    case 2:
+                        buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+                        buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+                        buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+                        // URL-SAFE skips the padding to further reduce size.
+                        if (encodeTable == STANDARD_ENCODE_TABLE) {
+                            buf[pos++] = PAD;
+                        }
+                        break;
+                }
+                if (lineLength > 0) {
+                    System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
+                    pos += lineSeparator.length;
+                }
+            } else {
+                for (int i = 0; i < inAvail; i++) {
+                    if (buf == null || buf.length - pos < encodeSize) {
+                        resizeBuf();
+                    }
+                    modulus = (++modulus) % 3;
+                    int b = in[inPos++];
+                    if (b < 0) {
+                        b += 256;
+                    }
+                    x = (x << 8) + b;
+                    if (0 == modulus) {
+                        buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+                        buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
+                        buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
+                        buf[pos++] = encodeTable[x & MASK_6BITS];
+                        currentLinePos += 4;
+                        if (lineLength > 0 && lineLength <= currentLinePos) {
+                            System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
+                            pos += lineSeparator.length;
+                            currentLinePos = 0;
+                        }
                     }
                 }
             }
         }
-    }
-
     /**
      * <p>
      * Decodes all of the provided data, starting at inPos, for inAvail bytes.

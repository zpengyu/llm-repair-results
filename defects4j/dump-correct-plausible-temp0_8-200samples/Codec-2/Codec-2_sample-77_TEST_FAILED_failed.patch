diff --git a/src/java/org/apache/commons/codec/binary/Base64.java b/src/java/org/apache/commons/codec/binary/Base64.java
index 8088d96d..1d83eb47 100644
--- a/src/java/org/apache/commons/codec/binary/Base64.java
+++ b/src/java/org/apache/commons/codec/binary/Base64.java
@@ -411,7 +411,7 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {
      * @param inPos Position to start reading data from.
      * @param inAvail Amount of bytes available from input for encoding.
      */
-    void encode(byte[] in, int inPos, int inAvail) {
+void encode(byte[] in, int inPos, int inAvail) {
         if (eof) {
             return;
         }
@@ -423,29 +423,55 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {
                 resizeBuf();
             }
             switch (modulus) {
+                case 0:
+                    buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+                    buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
+                    buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
+                    buf[pos++] = encodeTable[x & MASK_6BITS];
+                    currentLinePos += 4;
+                    if (lineLength > 0 && lineLength <= currentLinePos) {
+                        System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
+                        pos += lineSeparator.length;
+                        currentLinePos = 0;
+                    }
+                    break;
                 case 1:
-                    buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+                    x = (x << 8) + (in[inPos++] & 0xff);
+                    buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+                    buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+                    buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buf[pos++] = PAD;
-                        buf[pos++] = PAD;
+                    }
+                    currentLinePos += 4;
+                    if (lineLength > 0 && lineLength <= currentLinePos) {
+                        System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
+                        pos += lineSeparator.length;
+                        currentLinePos = 0;
                     }
                     break;
-
                 case 2:
-                    buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+                    x = (x << 8) + (in[inPos++] & 0xff);
+                    buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+                    buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buf[pos++] = PAD;
+                        buf[pos++] = PAD;
+                    }
+                    currentLinePos += 4;
+                    if (lineLength > 0 && lineLength <= currentLinePos) {
+                        System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
+                        pos += lineSeparator.length;
+                        currentLinePos = 0;
                     }
                     break;
             }
-            if (lineLength > 0) {
+            if (lineLength > 0 && lineLength <= currentLinePos) {
                 System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+                currentLinePos = 0;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {

diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
index 5287bdf95..ee1639cd2 100644
--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
@@ -328,10 +328,8 @@ class SimplexTableau implements Serializable {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
-
+        // the artificial variables should already be at the right-hand side of the tableau
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
-
         // positive cost non-artificial variables
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
             final double entry = tableau.getEntry(0, i);
@@ -339,33 +337,32 @@ class SimplexTableau implements Serializable {
                 columnsToDrop.add(i);
             }
         }
-
         // non-basic artificial variables
-        for (int i = 0; i < getNumArtificialVariables(); i++) {
-          int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
-            columnsToDrop.add(col);
-          }
+        final int numArtificialVars = getNumArtificialVariables();
+        for (int i = 0; i < numArtificialVars; i++) {
+            int col = i + getArtificialVariableOffset();
+            if (getBasicRow(col) == null) {
+                columnsToDrop.add(col);
+            }
         }
-
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
+        // drop the objective function as well as the columns with non-zero cost coefficients
+        int numDrop = 1 + columnsToDrop.size();
+        double[][] matrix = new double[getHeight() - numDrop][getWidth() - numDrop];
         for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+            int col = 0;
+            for (int j = 0; j < getWidth(); j++) {
+                if (!columnsToDrop.contains(j)) {
+                    matrix[i - 1][col++] = tableau.getEntry(i, j);
+                }
             }
-          }
-        }
-
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
         }
-
+        // update the meta-data
         this.tableau = new Array2DRowRealMatrix(matrix);
         this.numArtificialVariables = 0;
+        for (int i = numDrop - 1; i >= 0; i--) {
+            columnLabels.remove((int) columnsToDrop.get(i));
+        }
     }
-
     /**
      * @param src the source array
      * @param dest the destination array

diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
index 5287bdf95..63078b3e1 100644
--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
@@ -324,48 +324,44 @@ class SimplexTableau implements Serializable {
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
-    protected void dropPhase1Objective() {
-        if (getNumObjectiveFunctions() == 1) {
-            return;
+protected void dropPhase1Objective() {
+    if (getNumObjectiveFunctions() == 1) {
+        return;
+    }
+    List<Integer> columnsToDrop = new ArrayList<Integer>();
+    columnsToDrop.add(0);
+    // positive cost non-artificial variables
+    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
+        final double entry = tableau.getEntry(0, i);
+        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+            columnsToDrop.add(i);
         }
-
-        List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
-
-        // positive cost non-artificial variables
-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-                columnsToDrop.add(i);
-            }
-        }
-
-        // non-basic artificial variables
-        for (int i = 0; i < getNumArtificialVariables(); i++) {
-          int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
-            columnsToDrop.add(col);
-          }
-        }
-
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
-            }
-          }
-        }
-
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+    }
+    // non-basic artificial variables
+    for (int i = 0; i < getNumArtificialVariables(); i++) {
+      int col = i + getArtificialVariableOffset();
+      if (getBasicRow(col) == null) {
+        columnsToDrop.add(col);
+      }
+    }
+    double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
+    for (int i = 1; i < getHeight(); i++) {
+      int col = 0;
+      for (int j = 0; j < getWidth(); j++) {
+        if (!columnsToDrop.contains(j)) {
+          matrix[i - 1][col++] = tableau.getEntry(i, j);
         }
-
-        this.tableau = new Array2DRowRealMatrix(matrix);
-        this.numArtificialVariables = 0;
+      }
     }
-
+    //for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
+      //columnLabels.remove((int) columnsToDrop.get(i));
+    //}
+    for (int i = 0; i < columnsToDrop.size(); i++) {
+      columnLabels.remove((int) columnsToDrop.get(i));
+    }
+    this.tableau = new Array2DRowRealMatrix(matrix);
+    this.numArtificialVariables = 0;
+}
     /**
      * @param src the source array
      * @param dest the destination array

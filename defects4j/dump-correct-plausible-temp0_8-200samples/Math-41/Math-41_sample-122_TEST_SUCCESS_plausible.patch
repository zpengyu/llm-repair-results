diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java
index 49c2fed9f..11c7a52c1 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java
@@ -498,39 +498,32 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se
      * @throws IllegalArgumentException if the parameters are not valid
      * @since 2.1
      */
-    public double evaluate(final double[] values, final double[] weights,
-                           final double mean, final int begin, final int length) {
-
-        double var = Double.NaN;
-
-        if (test(values, weights, begin, length)) {
-            if (length == 1) {
-                var = 0.0;
-            } else if (length > 1) {
-                double accum = 0.0;
-                double dev = 0.0;
-                double accum2 = 0.0;
-                for (int i = begin; i < begin + length; i++) {
-                    dev = values[i] - mean;
-                    accum += weights[i] * (dev * dev);
-                    accum2 += weights[i] * dev;
-                }
-
-                double sumWts = 0;
-                for (int i = 0; i < weights.length; i++) {
-                    sumWts += weights[i];
-                }
-
-                if (isBiasCorrected) {
-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);
-                } else {
-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;
-                }
+public double evaluate(final double[] values, final double[] weights,
+                       final double mean, final int begin, final int length) {
+    double var = Double.NaN;
+    if (test(values, weights, begin, length)) {
+        if (length == 1) {
+            var = 0.0;
+        } else if (length > 1) {
+            double accum = 0.0;
+            double dev = 0.0;
+            double accum2 = 0.0;
+            double sumWts = 0.0;
+            for (int i = begin; i < begin + length; i++) {
+                dev = values[i] - mean;
+                accum += weights[i] * (dev * dev);
+                accum2 += weights[i] * dev;
+                sumWts += weights[i];
+            }
+            if (isBiasCorrected) {
+                var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);
+            } else {
+                var = (accum - (accum2 * accum2 / sumWts)) / sumWts;
             }
         }
-        return var;
     }
-
+    return var;
+}
     /**
      * <p>Returns the weighted variance of the values in the input array, using
      * the precomputed weighted mean value.</p>

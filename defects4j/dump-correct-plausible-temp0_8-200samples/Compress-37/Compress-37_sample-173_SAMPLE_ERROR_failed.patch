diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index 958af286..c70621f6 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -453,6 +453,8 @@ public class TarArchiveInputStream extends ArchiveInputStream {
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
+        final byte[] buf = new byte[80];
+        final byte[] vbuf = new byte[1024];
         while(true){ // get length
             int ch;
             int len = 0;
@@ -461,33 +463,44 @@ public class TarArchiveInputStream extends ArchiveInputStream {
                 read++;
                 if (ch == ' '){
                     // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+                    int len2 = 0;
                     while((ch = i.read()) != -1) {
                         read++;
                         if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
+                            final String keyword = new String(buf, 0, len2);
                             // Get rest of entry
                             final int restLen = len - read;
                             if (restLen == 1) { // only NL
                                 headers.remove(keyword);
                             } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                                int got = 0;
+                                while(got < restLen) {
+                                    final int delta = IOUtils.readFully(i, vbuf, got, restLen - got);
+                                    if (delta == -1) {
+                                        throw new IOException("Failed to read "
+                                             + "Paxheader. Expected "
+                                             + restLen
+                                             + " bytes, read "
+                                             + got);
+                                    }
+                                    got += delta;
                                 }
                                 // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                                final String value = new String(vbuf, 0,
+                                    restLen - 1, CharsetNames.UTF_8);
                                 headers.put(keyword, value);
                             }
                             break;
                         }
-                        coll.write((byte) ch);
+                        if (len2 >= buf.length) {
+                            final byte[] nb = new byte[buf.length * 2];
+                            System.arraycopy(buf, 0, nb, 0, len2);
+                            buf[len2] = (byte) ch;
+                            buf = nb;
+                        } else {
+                            buf[len2] = (byte) ch;
+                        }
+                        len2++;
                     }
                     break; // Processed single header
                 }

diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index 958af286..f3f479cc 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -453,49 +453,52 @@ public class TarArchiveInputStream extends ArchiveInputStream {
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
-        while(true){ // get length
-            int ch;
-            int len = 0;
-            int read = 0;
-            while((ch = i.read()) != -1) {
-                read++;
-                if (ch == ' '){
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+        int ch;
+        while((ch = i.read()) != -1) {
+            if (ch == ' '){
+                // Get length
+                int len = 0;
+                int read = 0;
+                while((ch = i.read()) != -1) {
+                    read++;
+                    if (ch == ' '){
+                        // Get keyword
+                        final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+                        while((ch = i.read()) != -1) {
+                            read++;
+                            if (ch == '='){ // end of keyword
+                                final String keyword = coll.toString(CharsetNames.UTF_8);
+                                // Get rest of entry
+                                final int restLen = len - read;
+                                if (restLen == 1) { // only NL
+                                    headers.remove(keyword);
+                                } else {
+                                    final byte[] rest = new byte[restLen];
+                                    final int got = IOUtils.readFully(i, rest);
+                                    if (got != restLen) {
+                                        throw new IOException("Failed to read "
+                                             + "Paxheader. Expected "
+                                             + restLen
+                                             + " bytes, read "
+                                             + got);
+                                    }
+                                    // Drop trailing NL
+                                    final String value = new String(rest, 0,
+                                         restLen - 1, CharsetNames.UTF_8);
+                                    headers.put(keyword, value);
                                 }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
-                                headers.put(keyword, value);
+                                break;
                             }
-                            break;
+                            coll.write((byte) ch);
                         }
-                        coll.write((byte) ch);
+                        break; // Processed single header
                     }
-                    break; // Processed single header
+                    len *= 10;
+                    len += ch - '0';
+                }
+                if (ch == -1){ // EOF
+                    break;
                 }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
             }
         }
         return headers;

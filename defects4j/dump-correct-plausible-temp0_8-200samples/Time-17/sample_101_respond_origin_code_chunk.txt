    public long adjustOffset(long instant, boolean earlierOrLater) {
        // a bit messy, but will work in all non-pathological cases
        
        // evaluate 3 hours before and after to work out if anything is happening
        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
        if (instantBefore == instantAfter) {
            return instant;  // not an overlap (less than is a gap, equal is normal case)
        }
        
        // work out range of instants that have duplicate local times
        long local = convertUTCToLocal(instant);
        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
        
        // calculate result
        if (instantBefore > instant) {
            // currently in later offset
            if (earlierOrLater) {
                // want later offset, so no change
                return instant;
            }
            if (instantAfter > instant) {
                // moving from later to earlier, so use the earlier instant
                return instantAfter;
            }
            // moving from later to gap, so use the instant before gap
            return instantBefore;
        }
        // currently in earlier offset
        if (!earlierOrLater) {
            // want earlier offset, so no change
            return instant;
        }
        if (instantAfter > instant) {
            // moving from earlier to later, so use the instant after
            return instantAfter;
        }
        // moving from earlier to gap, so use the instant before gap
        return instantBefore;
    }

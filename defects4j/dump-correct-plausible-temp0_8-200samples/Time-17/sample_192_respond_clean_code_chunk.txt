    public long adjustOffset(long instant, boolean earlierOrLater) {
        // a bit messy, but will work in all non-pathological cases
        // evaluate 3 hours before and after to work out if anything is happening
        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
        if (instantBefore == instantAfter) {
            return instant;  // not an overlap (less than is a gap, equal is normal case)
        }
        // work out range of instants that have duplicate local times
        long local = convertUTCToLocal(instant);
        if (instantBefore < instantAfter) {
            // earlier offset comes first
            if (earlierOrLater) {
                instant = local - 1;
                while (convertUTCToLocal(instant) == local) {
                    instant--;
                }
                return instant + 1;
            } else {
                instant = local + 1;
                while (convertUTCToLocal(instant) == local) {
                    instant++;
                }
                return instant - 1;
            }
        } else {
            // later offset comes first
            if (earlierOrLater) {
                instant = local + 1;
                while (convertUTCToLocal(instant) == local) {
                    instant++;
                }
                return instant - 1;
            } else {
                instant = local - 1;
                while (convertUTCToLocal(instant) == local) {
                    instant--;
                }
                return instant + 1;
            }
        }
    }
public long adjustOffset(long instant, boolean earlierOrLater) {
    // a bit messy, but will work in all non-pathological cases

    // evaluate 3 hours before and after to work out if anything is happening
    long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
    long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
    if (instantBefore == instantAfter) {
        return instant;  // not an overlap (less than is a gap, equal is normal case)
    }

    // work out range of instants that have duplicate local times
    long local = convertUTCToLocal(instant);
    long next = convertLocalToUTC(local + 1, false);
    long previous = convertLocalToUTC(local - 1, false);
    if (previous < instantBefore && instantAfter < next) {
        return convertLocalToUTC(local, false);  // not an overlap
    }

    // TODO: track down the case where this happens
    long afterStart = earlierOrLater ? instantAfter : instantBefore;
    long afterEnd = earlierOrLater ? next : previous;
    return convertLocalToUTC(convertUTCToLocal(afterStart) + (afterEnd - afterStart) / 2, false);

    // calculate result
      // currently in later offset
      // currently in earlier offset
}


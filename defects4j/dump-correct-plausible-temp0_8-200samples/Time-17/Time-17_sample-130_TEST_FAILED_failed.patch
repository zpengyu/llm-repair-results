diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index 5c7a348c..71f38ac8 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -1160,25 +1160,21 @@ public abstract class DateTimeZone implements Serializable {
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
-    public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
-        }
-
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+public long adjustOffset(long instant, boolean earlierOrLater) {
+    // a bit messy, but will work in all non-pathological cases
+    // evaluate 3 hours before and after to work out if anything is happening
+    long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+    long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+    if (instantBefore == instantAfter) {
+        return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
-//    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + " " + new DateTime(transitionStart, this));
+    // work out range of instants that have duplicate local times
+    long local = convertUTCToLocal(instant);
+    return convertLocalToUTC(local, false, earlierOrLater ? instantBefore : instantAfter);
+    // calculate result
+      // currently in later offset
+      // currently in earlier offset
+}//    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + " " + new DateTime(transitionStart, this));
 
     //-----------------------------------------------------------------------
     /**

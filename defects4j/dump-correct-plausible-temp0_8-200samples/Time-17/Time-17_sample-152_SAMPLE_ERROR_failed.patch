diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index 5c7a348c..e17f6359 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -1161,24 +1161,23 @@ public abstract class DateTimeZone implements Serializable {
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        long instantBefore = getOffset(instant - 1);
+        long instantAfter = getOffset(instant + 1);
+        // if zero length gap or overlap, then cannot convert
         if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+            throw new IllegalInstantException(instant, getID());
         }
-
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
-    }
-//    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + " " + new DateTime(transitionStart, this));
+        // see if exactly one offset is the real one
+        if (instantBefore == getOffset(instant)) {
+            return instant;
+        } else if (instantAfter == getOffset(instant)) {
+            return instant;
+        } else {
+            // find out if local time is gap or overlap
+            long local = convertUTCToLocal(instant);
+            return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        }
+    }//    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + " " + new DateTime(transitionStart, this));
 
     //-----------------------------------------------------------------------
     /**

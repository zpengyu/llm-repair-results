diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java
index d4ca3f544..b72436980 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java
@@ -73,24 +73,21 @@ public final class ObjectIdValueProperty
 
     @Override
     public Object deserializeSetAndReturn(JsonParser p,
-		DeserializationContext ctxt, Object instance) throws IOException
+    		DeserializationContext ctxt, Object instance) throws IOException
     {
         Object id = _valueDeserializer.deserialize(p, ctxt);
-        /* 02-Apr-2015, tatu: Actually, as per [databind#742], let it be;
-         *  missing or null id is needed for some cases, such as cases where id
-         *  will be generated externally, at a later point, and is not available
-         *  quite yet. Typical use case is with DB inserts.
-         */
-        // note: no null checks (unlike usually); deserializer should fail if one found
         if (id == null) {
-            return null;
-        }
-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);
-        roid.bindItem(instance);
-        // also: may need to set a property value as well
-        SettableBeanProperty idProp = _objectIdReader.idProperty;
-        if (idProp != null) {
-            return idProp.setAndReturn(instance, id);
+            if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_NONNULLABLE)) {
+                throw new JsonMappingException("Can not resolve ObjectId -- null identity used for non-nullable value");
+            }
+        } else {
+            ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);
+            roid.bindItem(instance);
+            // also: may need to set a property value as well
+            SettableBeanProperty idProp = _objectIdReader.idProperty;
+            if (idProp != null) {
+                return idProp.setAndReturn(instance, id);
+            }
         }
         return instance;
     }

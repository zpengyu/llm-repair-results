diff --git a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
index 78f4d67e..b4d0eeae 100644
--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
@@ -113,6 +106,9 @@ public class BaseNCodecInputStream extends FilterInputStream {
                 if (!baseNCodec.hasData()) {
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
+                    if (c == -1) {
+                        break;
+                    }
                     if (doEncode) {
                         baseNCodec.encode(buf, 0, c);
                     } else {
@@ -139,20 +134,120 @@ public class BaseNCodecInputStream extends FilterInputStream {
      *
      * @throws IllegalArgumentException if the provided skip length is negative
      */
-
-        // skip in chunks of 512 bytes
-
-
+    @Override
+    public long skip(long n) throws IOException {
+        if (n < 0) {
+            throw new IllegalArgumentException("Negative skip length: " + n);
+        }
+        final int chunkSize = 512;
+        long remain = n;
+        while (remain > 0) {
+            final int skipped = read(new byte[(int) Math.min(remain, chunkSize)]);
+            if (skipped == EOF) {
+                break;
+            }
+            remain -= skipped;
+        }
+        return n - remain;
+    }
     /**
      * {@inheritDoc}
      *
      * @return <code>0</code> if the {@link InputStream} has reached <code>EOF</code>,
      * <code>1</code> otherwise
      */
-        // Note: the logic is similar to the InflaterInputStream:
-        //       as long as we have not reached EOF, indicate that there is more
-        //       data available. As we do not know for sure how much data is left,
-        //       just return 1 as a safe guess.
-
-        // use the EOF flag of the underlying codec instance
+    @Override
+    public int available() throws IOException {
+        return baseNCodec.hasData() ? 1 : 0;
+    }
+    /**
+     * Indicates whether this stream supports the {@link #mark mark} and {@link #reset reset} methods.
+     * The <code>markSupported</code> method of <code>FilterInputStream</code> returns <code>false</code>.
+     *
+     * @since 1.4
+     */
+    @Override
+    public boolean markSupported() {
+        return false;
+    }
+    /**
+     * Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at
+     * the last marked position so that subsequent reads re-read the same bytes.
+     *
+     * The readlimit arguments tells this input stream to allow that many bytes to be read before the mark position gets
+     * invalidated.
+     *
+     * The general contract of mark is that, if the method markSupported returns true, the stream somehow remembers all
+     * the bytes read after the call to mark and stands ready to supply those same bytes again if and whenever the method
+     * reset is called. However, the stream is not required to remember any data at all if more than readlimit bytes are
+     * read from the stream before reset is called.
+     *
+     * The mark method of <code>FilterInputStream</code> remembers nothing and does nothing except throw an exception if
+     * the attempt is made to mark a stream whose markSupported method returns false.
+     *
+     * @param readlimit
+     *            the maximum limit of bytes that can be read before the mark position becomes invalid.
+     * @exception IOException
+     *                if an I/O error occurs, or if mark is not supported.
+     * @see java.io.InputStream#mark(int)
+     * @since 1.4
+     */
+    @Override
+    public void mark(int readlimit) {
+        throw new UnsupportedOperationException();
+    }
+    /**
+     * Repositions this stream to the position at the time the mark method was last called on this input stream.
+     *
+     * The general contract of reset is:
+     * <ul>
+     * <li>If the method markSupported returns true, then:
+     * <ul>
+     * <li> If the method mark has not been called since the stream was created, or the number of bytes read from the
+     * stream since mark was last called is larger than the argument to mark at that last call, then an
+     * IOException might be thrown.
+     *
+     * <li> If such an IOException is not thrown, then the stream is reset to a state such that all the bytes read since
+     * the most recent call to mark (or since the start of the file, if mark has not been called) will be resupplied to
+     * subsequent callers of the read method, followed by any bytes that otherwise would have been the next input data
+     * as of the time of the call to reset.
+     * </ul>
+     *
+     * <li>If the method markSupported returns false, then:
+     * <ul>
+     * <li> The call to reset may throw an IOException.
+     *
+     * <li> If an IOException is not thrown, then the stream is reset to a fixed state that depends on the particular
+     * type of the input stream and how it was created. The bytes that will be supplied to subsequent callers of the
+     * read method depend on the particular type of the input stream.
+     * </ul>
+     * </ul>
+     *
+     * The method <code>reset</code> for class <code>FilterInputStream</code> does nothing except throw an
+     * <code>IOException</code>.
+     *
+     * @exception IOException
+     *                if this stream has not been marked or if the mark has been invalidated.
+     * @see java.io.InputStream#reset()
+     * @since 1.4
+     */
+    @Override
+    public void reset() throws IOException {
+        throw new UnsupportedOperationException();
+    }
+    /**
+     * Closes this input stream and releases any system resources associated with the stream.
+     *
+     * The <code>close</code> method of <code>FilterInputStream</code> calls its <code>flush</code> method, and then
+     * calls the <code>close</code> method of its underlying input stream.
+     *
+     * @exception IOException
+     *                if an I/O error occurs.
+     * @see java.io.FilterInputStream#in
+     * @see java.io.InputStream#close()
+     */
+    @Override
+    public void close() throws IOException {
+        in.close();
+    }
 }
\ No newline at end of file

diff --git a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
index 78f4d67e..ef244b21 100644
--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
@@ -59,9 +54,8 @@ public class BaseNCodecInputStream extends FilterInputStream {
             final byte b = singleByte[0];
             return b < 0 ? 256 + b : b;
         }
-        return EOF;
+        return -1;
     }
-
     /**
      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
      * from this InputStream.
@@ -139,20 +131,43 @@ public class BaseNCodecInputStream extends FilterInputStream {
      *
      * @throws IllegalArgumentException if the provided skip length is negative
      */
-
-        // skip in chunks of 512 bytes
-
-
+    @Override
+    public long skip(long n) throws IOException {
+        if (n < 0) {
+            throw new IllegalArgumentException("Number of bytes to skip must not be negative: " + n);
+        }
+        final int bufferLength = 512;
+        final byte[] skipBuffer = new byte[bufferLength];
+        long remaining = n;
+        while (remaining > 0) {
+            final int read = read(skipBuffer, 0, (int) Math.min(remaining, bufferLength));
+            if (read == -1) {
+                break; // we reached EOF
+            }
+            remaining -= read;
+        }
+        return n - remaining;
+    }
     /**
      * {@inheritDoc}
      *
      * @return <code>0</code> if the {@link InputStream} has reached <code>EOF</code>,
      * <code>1</code> otherwise
      */
+    @Override
+    public int available() throws IOException {
         // Note: the logic is similar to the InflaterInputStream:
         //       as long as we have not reached EOF, indicate that there is more
         //       data available. As we do not know for sure how much data is left,
         //       just return 1 as a safe guess.
-
+        return baseNCodec.hasData() ? 1 : 0;
+    }
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void close() throws IOException {
         // use the EOF flag of the underlying codec instance
+        baseNCodec.eof();
+    }
 }
\ No newline at end of file

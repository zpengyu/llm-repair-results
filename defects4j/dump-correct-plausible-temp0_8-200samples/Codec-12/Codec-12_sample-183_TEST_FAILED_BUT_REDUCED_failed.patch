diff --git a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
index 78f4d67e..9a92ecb0 100644
--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
@@ -139,20 +131,28 @@ public class BaseNCodecInputStream extends FilterInputStream {
      *
      * @throws IllegalArgumentException if the provided skip length is negative
      */
-
-        // skip in chunks of 512 bytes
-
-
+    @Override
+    public synchronized long skip(long n) throws IOException {
+        if (n < 0L) {
+            throw new IllegalArgumentException("Negative skip length: " + n);
+        }
+        final byte[] b = new byte[512];
+        long remaining = n;
+        while (remaining > 0) {
+            final int res = read(b, 0, (int) Math.min(b.length, remaining));
+            if (res == EOF) {
+                break;
+            }
+            remaining -= res;
+        }
+        return n - remaining;
+    }
     /**
      * {@inheritDoc}
-     *
-     * @return <code>0</code> if the {@link InputStream} has reached <code>EOF</code>,
-     * <code>1</code> otherwise
      */
-        // Note: the logic is similar to the InflaterInputStream:
-        //       as long as we have not reached EOF, indicate that there is more
-        //       data available. As we do not know for sure how much data is left,
-        //       just return 1 as a safe guess.
-
+    @Override
+    public int available() throws IOException {
         // use the EOF flag of the underlying codec instance
+        return baseNCodec.hasData() ? 1 : 0;
+    }
 }
\ No newline at end of file

public BaseNCodecInputStream(InputStream in, BaseNCodec baseNCodec, boolean doEncode) {
        super(in);
        this.doEncode = doEncode;
        this.baseNCodec = baseNCodec;
    }
    @Override
    public int read() throws IOException {
        int r = read(singleByte, 0, 1);
        while (r == 0) {
            r = read(singleByte, 0, 1);
        }
        if (r > 0) {
            final byte b = singleByte[0];
            return b < 0 ? 256 + b : b;
        }
        return EOF;
    }
    @Override
    public int read(byte b[], int offset, int len) throws IOException {
        if (b == null) {
            throw new NullPointerException();
        } else if (offset < 0 || len < 0) {
            throw new IndexOutOfBoundsException();
        } else if (offset > b.length || offset + len > b.length) {
            throw new IndexOutOfBoundsException();
        } else if (len == 0) {
            return 0;
        } else {
            int readLen = 0;
            while (readLen == 0) {
                if (!baseNCodec.hasData()) {
                    byte[] buf = new byte[doEncode ? 4096 : 8192];
                    int c = in.read(buf);
                    if (c == EOF) {
                        baseNCodec.encode(buf, 0, c);
                        break;
                    }
                }
                readLen = baseNCodec.readResults(b, offset, len);
            }
            return readLen;
        }
    }
    @Override
    public boolean markSupported() {
        return false;
    }
    @Override
    public long skip(long n) throws IOException {
        if (n < 0) {
            throw new IllegalArgumentException("Negative skip length: " + n);
        }
        final int bufferLen = 2048;
        final byte[] skipBuffer;
        if (n < bufferLen) {
            skipBuffer = new byte[(int) n];
        } else {
            skipBuffer = new byte[bufferLen];
        }
        long remaining = n;
        while (remaining > 0) {
            int skipped = read(skipBuffer, 0, (int) Math.min(skipBuffer.length, remaining));
            if (skipped < 0) {
                break; // we reached EOF
            }
            remaining -= skipped;
        }
        return n - remaining;
    }
    @Override
    public int available() throws IOException {
        return baseNCodec.hasData() ? 1 : 0;
    }


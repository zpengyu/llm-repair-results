diff --git a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
index 78f4d67e..e43ffdaf 100644
--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
@@ -124,6 +117,20 @@ public class BaseNCodecInputStream extends FilterInputStream {
             return readLen;
         }
     }
+    /**
+     * {@inheritDoc}
+     *
+     * @return <code>0</code> if the {@link InputStream} has reached <code>EOF</code>,
+     * <code>1</code> otherwise
+     */
+    @Override
+    public int available() throws IOException {
+        if (baseNCodec.hasData()) {
+            return 1;
+        } else {
+            return 0;
+        }
+    }
     /**
      * {@inheritDoc}
      * 
@@ -139,20 +145,96 @@ public class BaseNCodecInputStream extends FilterInputStream {
      *
      * @throws IllegalArgumentException if the provided skip length is negative
      */
-
-        // skip in chunks of 512 bytes
-
-
+    @Override
+    public synchronized void mark(int readLimit) {
+        throw new UnsupportedOperationException();
+    }
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public synchronized void reset() {
+        throw new UnsupportedOperationException();
+    }
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public long skip(final long n) throws IOException {
+        if (n < 0) {
+            throw new IllegalArgumentException("Negative skip length: " + n);
+        }
+        final int chunkSize = 512;
+        final long toSkip = n < chunkSize ? n : chunkSize;
+        final byte[] skipBuffer = new byte[(int) toSkip];
+        long totalSkipped = 0;
+        while (totalSkipped < n) {
+            final long skipped = read(skipBuffer, 0, (int) toSkip);
+            if (skipped == EOF) {
+                return totalSkipped;
+            }
+            totalSkipped += skipped;
+        }
+        return totalSkipped;
+    }
     /**
      * {@inheritDoc}
      *
      * @return <code>0</code> if the {@link InputStream} has reached <code>EOF</code>,
      * <code>1</code> otherwise
      */
-        // Note: the logic is similar to the InflaterInputStream:
-        //       as long as we have not reached EOF, indicate that there is more
-        //       data available. As we do not know for sure how much data is left,
-        //       just return 1 as a safe guess.
-
-        // use the EOF flag of the underlying codec instance
+    @Override
+    public int available() throws IOException {
+        if (baseNCodec.hasData()) {
+            return 1;
+        } else {
+            return 0;
+        }
+    }
+    /**
+     * {@inheritDoc}
+     * 
+     * @return false
+     */
+    @Override
+    public boolean markSupported() {
+        return false; // not an easy job to support marks
+    }
+    /**
+     * {@inheritDoc}
+     *
+     * @throws IllegalArgumentException if the provided skip length is negative
+     */
+    @Override
+    public synchronized void mark(int readLimit) {
+        throw new UnsupportedOperationException();
+    }
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public synchronized void reset() {
+        throw new UnsupportedOperationException();
+    }
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public long skip(final long n) throws IOException {
+        if (n < 0) {
+            throw new IllegalArgumentException("Negative skip length: " + n);
+        }
+        final int chunkSize = 512;
+        final long toSkip = n < chunkSize ? n : chunkSize;
+        final byte[] skipBuffer = new byte[(int) toSkip];
+        long totalSkipped = 0;
+        while (totalSkipped < n) {
+            final long skipped = read(skipBuffer, 0, (int) toSkip);
+            if (skipped == EOF) {
+                return totalSkipped;
+            }
+            totalSkipped += skipped;
+        }
+        return totalSkipped;
+    }
 }
\ No newline at end of file

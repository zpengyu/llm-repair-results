diff --git a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
index 78f4d67e..97611f4b 100644
--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
@@ -59,9 +54,8 @@ public class BaseNCodecInputStream extends FilterInputStream {
             final byte b = singleByte[0];
             return b < 0 ? 256 + b : b;
         }
-        return EOF;
+        return -1;
     }
-
     /**
      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
      * from this InputStream.
@@ -153,6 +142,45 @@ public class BaseNCodecInputStream extends FilterInputStream {
         //       as long as we have not reached EOF, indicate that there is more
         //       data available. As we do not know for sure how much data is left,
         //       just return 1 as a safe guess.
-
         // use the EOF flag of the underlying codec instance
+        return !baseNCodec.isEof() ? 1 : 0;
+    }
+    @Override
+    public long skip(final long n) throws IOException {
+        if (n < 0) {
+            throw new IllegalArgumentException("Negative skip length: " + n);
+        }
+        if (baseNCodec.hasData()) {
+            final int toSkip = (int) Math.min(n, baseNCodec.available());
+            return baseNCodec.readResults(singleByte, 0, toSkip);
+        } else {
+            // The Base-N codec is buffering data internally, so skipping bytes from the
+            // input stream might mean that we skip less bytes from the internal buffer than
+            // we've been asked for, if some of the skipped bytes have been buffered internally
+            final int chunk = (int) Math.min(n, BaseNCodec.DEFAULT_BUFFER_RESIZE_FACTOR);
+            int totalSkipped = 0;
+            while (totalSkipped < n) {
+                final long skipped = in.skip(n - totalSkipped);
+                if (skipped == 0) {
+                    final int read = read(singleByte, 0, chunk);
+                    if (read < 0) {
+                        break;
+                    } else {
+                        totalSkipped += read;
+                    }
+                } else {
+                    totalSkipped += skipped;
+                }
+            }
+            return totalSkipped;
+        }
+    }
+    @Override
+    public int available() throws IOException {
+        return baseNCodec.available();
+    }
+    @Override
+    public void close() throws IOException {
+        in.close();
+    }
 }
\ No newline at end of file

diff --git a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
index 78f4d67e..d87b0a5a 100644
--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
@@ -28,15 +28,7 @@ import java.io.InputStream;
  * 
  * @since 1.5
  */
-public class BaseNCodecInputStream extends FilterInputStream {
-
-    private final boolean doEncode;
-
-    private final BaseNCodec baseNCodec;
-
-    private final byte[] singleByte = new byte[1];
-
-    protected BaseNCodecInputStream(InputStream in, BaseNCodec baseNCodec, boolean doEncode) {
+public BaseNCodecInputStream(InputStream in, BaseNCodec baseNCodec, boolean doEncode) {
         super(in);
         this.doEncode = doEncode;
         this.baseNCodec = baseNCodec;
@@ -56,8 +47,7 @@ public class BaseNCodecInputStream extends FilterInputStream {
             r = read(singleByte, 0, 1);
         }
         if (r > 0) {
-            final byte b = singleByte[0];
-            return b < 0 ? 256 + b : b;
+            return singleByte[0] < 0 ? 256 + singleByte[0] : singleByte[0];
         }
         return EOF;
     }
@@ -92,34 +81,24 @@ public class BaseNCodecInputStream extends FilterInputStream {
         } else if (len == 0) {
             return 0;
         } else {
-            int readLen = 0;
-            /*
-             Rationale for while-loop on (readLen == 0):
-             -----
-             Base32.readResults() usually returns > 0 or EOF (-1).  In the
-             rare case where it returns 0, we just keep trying.
-
-             This is essentially an undocumented contract for InputStream
-             implementors that want their code to work properly with
-             java.io.InputStreamReader, since the latter hates it when
-             InputStream.read(byte[]) returns a zero.  Unfortunately our
-             readResults() call must return 0 if a large amount of the data
-             being decoded was non-base32, so this while-loop enables proper
-             interop with InputStreamReader for that scenario.
-             -----
-             This is a fix for CODEC-101
-            */
-            while (readLen == 0) {
-                if (!baseNCodec.hasData()) {
-                    byte[] buf = new byte[doEncode ? 4096 : 8192];
-                    int c = in.read(buf);
+            final int readLen;
+            if (baseNCodec.hasData()) {
+                readLen = baseNCodec.readResults(b, offset, len);
+            } else {
+                final byte[] buf = new byte[doEncode ? 4096 : 8192];
+                int c = in.read(buf);
+                if (c == -1) {
+                    readLen = EOF;
+                } else if (c == 0) {
+                    readLen = 0;
+                } else {
                     if (doEncode) {
                         baseNCodec.encode(buf, 0, c);
                     } else {
                         baseNCodec.decode(buf, 0, c);
                     }
+                    readLen = baseNCodec.readResults(b, offset, len);
                 }
-                readLen = baseNCodec.readResults(b, offset, len);
             }
             return readLen;
         }
@@ -139,20 +117,50 @@ public class BaseNCodecInputStream extends FilterInputStream {
      *
      * @throws IllegalArgumentException if the provided skip length is negative
      */
-
+    @Override
+    public long skip(final long n) throws IOException {
+        if (n < 0) {
+            throw new IllegalArgumentException("Negative skip length: " + n);
+        }
+        final int max = (int) Math.min(n, MAX_SKIP_BUFFER_SIZE);
+        final int skipBufferSize = (int) Math.min(max, baseNCodec.available());
+        if (skipBufferSize < 0) { // EOF
+            return 0;
+        }
+        final byte[] skipBuffer = new byte[skipBufferSize];
+        final long skip = baseNCodec.readResults(skipBuffer, 0, skipBufferSize);
+        if (skip > 0) {
+            return skip;
+        }
         // skip in chunks of 512 bytes
-
-
+        final int chunkSize = max - skipBufferSize;
+        int totalSkipped = skipBufferSize;
+        int read;
+        int toRead = Math.min(chunkSize, baseNCodec.getEncodedBlockSize());
+        while (totalSkipped < max &&
+                (read = baseNCodec.readResults(skipBuffer, 0, Math.min(toRead, baseNCodec.available()))) > 0) {
+            totalSkipped += read;
+            toRead = Math.min(chunkSize, baseNCodec.getEncodedBlockSize());
+        }
+        return totalSkipped;
+    }
     /**
      * {@inheritDoc}
      *
      * @return <code>0</code> if the {@link InputStream} has reached <code>EOF</code>,
      * <code>1</code> otherwise
      */
-        // Note: the logic is similar to the InflaterInputStream:
-        //       as long as we have not reached EOF, indicate that there is more
-        //       data available. As we do not know for sure how much data is left,
-        //       just return 1 as a safe guess.
-
-        // use the EOF flag of the underlying codec instance
+    @Override
+    public int available() throws IOException {
+        return baseNCodec.available() > 0 ? 1 : 0;
+    }
+    /**
+     * {@inheritDoc}
+     *
+     * @throws IOException if an I/O error occurs
+     */
+    @Override
+    public void close() throws IOException {
+        in.close();
+    }
 }
\ No newline at end of file

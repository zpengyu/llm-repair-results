diff --git a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
index 78f4d67e..6b1cafb2 100644
--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
@@ -124,35 +117,46 @@ public class BaseNCodecInputStream extends FilterInputStream {
             return readLen;
         }
     }
-    /**
-     * {@inheritDoc}
-     * 
-     * @return false
-     */
-    @Override
-    public boolean markSupported() {
-        return false; // not an easy job to support marks
-    }
-
     /**
      * {@inheritDoc}
      *
      * @throws IllegalArgumentException if the provided skip length is negative
      */
-
+    @Override
+    public long skip(long n) throws IOException {
         // skip in chunks of 512 bytes
-
-
+        long totalSkipped = 0;
+        int skipped;
+        byte[] skipBuffer = new byte[512];
+        if (n < 0) {
+            throw new IllegalArgumentException(
+                    "Skipping negative number of bytes is not supported");
+        }
+        while (totalSkipped < n) {
+            skipped = read(skipBuffer, 0, (int) Math.min(n - totalSkipped, skipBuffer.length));
+            if (skipped == EOF) {
+                break; // EOF
+            }
+            totalSkipped += skipped;
+        }
+        return totalSkipped;
+    }
     /**
      * {@inheritDoc}
      *
      * @return <code>0</code> if the {@link InputStream} has reached <code>EOF</code>,
      * <code>1</code> otherwise
      */
+    @Override
+    public int available() throws IOException {
         // Note: the logic is similar to the InflaterInputStream:
         //       as long as we have not reached EOF, indicate that there is more
         //       data available. As we do not know for sure how much data is left,
         //       just return 1 as a safe guess.
-
-        // use the EOF flag of the underlying codec instance
+        return baseNCodec.hasData() ? 1 : 0;
+    }
+    @Override
+    public void close() throws IOException {
+        in.close();
+    }
 }
\ No newline at end of file

diff --git a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
index 78f4d67e..04fc7a90 100644
--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
@@ -113,10 +106,17 @@ public class BaseNCodecInputStream extends FilterInputStream {
                 if (!baseNCodec.hasData()) {
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
-                    if (doEncode) {
-                        baseNCodec.encode(buf, 0, c);
+                    if (c == -1) {
+                        baseNCodec.decode(buf, 0, 0); // no more data to be read,
+                                                      // inform the codec that
+                                                      // this is the end of stream
+                        break;
                     } else {
-                        baseNCodec.decode(buf, 0, c);
+                        if (doEncode) {
+                            baseNCodec.encode(buf, 0, c);
+                        } else {
+                            baseNCodec.decode(buf, 0, c);
+                        }
                     }
                 }
                 readLen = baseNCodec.readResults(b, offset, len);
@@ -139,20 +138,44 @@ public class BaseNCodecInputStream extends FilterInputStream {
      *
      * @throws IllegalArgumentException if the provided skip length is negative
      */
-
-        // skip in chunks of 512 bytes
-
-
+    @Override
+    public long skip(long n) throws IOException {
+        if (n < 0) {
+            throw new IllegalArgumentException("Negative skip length: " + n);
+        }
+        final byte[] skipBuffer = new byte[SKIP_BUFFER_SIZE];
+        long toSkip = n;
+        while (toSkip > 0) {
+            final int skipped = read(skipBuffer, 0, (int) Math.min(SKIP_BUFFER_SIZE, toSkip));
+            if (skipped == EOF) {
+                break;
+            }
+            toSkip -= skipped;
+        }
+        return n - toSkip;
+    }
     /**
      * {@inheritDoc}
-     *
-     * @return <code>0</code> if the {@link InputStream} has reached <code>EOF</code>,
-     * <code>1</code> otherwise
      */
-        // Note: the logic is similar to the InflaterInputStream:
-        //       as long as we have not reached EOF, indicate that there is more
-        //       data available. As we do not know for sure how much data is left,
-        //       just return 1 as a safe guess.
-
-        // use the EOF flag of the underlying codec instance
+    @Override
+    public int available() throws IOException {
+        // baseNCodec.available() returns a value in the range 0..Integer.MAX_VALUE.
+        // 1 is subtracted to prevent an overflow when the result is cast to an int.
+        return baseNCodec.available() > 0 ? 1 : 0;
+    }
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void close() throws IOException {
+        baseNCodec.reset();
+        in.close();
+    }
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void reset() throws IOException {
+        baseNCodec.reset();
+    }
 }
\ No newline at end of file

diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java
index 112c00b5c..d37ec2f21 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java
@@ -56,6 +56,16 @@ public class ClassNameIdResolver
             //    security issues.
             JavaType t = tf.constructFromCanonical(id);
                 // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+            if (!t.getRawClass().isAssignableFrom(_baseType.getRawClass())) {
+                // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
+                //   DeserializationContext, just playing it safe
+                if (ctxt instanceof DeserializationContext) {
+                    DeserializationContext dctxt = (DeserializationContext) ctxt;
+                    // First: we may have problem handlers that can deal with it?
+                    return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
+                }
+                return null;
+            }
             return t;
         }
         Class<?> cls;

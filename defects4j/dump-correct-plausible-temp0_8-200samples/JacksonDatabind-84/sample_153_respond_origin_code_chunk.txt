public class ResolvedRecursiveType extends TypeBase
{
    private static final long serialVersionUID = 1L;

    protected JavaType _referencedType;

    public ResolvedRecursiveType(Class<?> erasedType, TypeBindings bindings) {
        super(erasedType, bindings, null, null, 0, null, null, false);
    }

    public void setReference(JavaType ref)
    {
        // sanity check; should not be called multiple times
        if (_referencedType != null) {
            throw new IllegalStateException("Trying to re-set self reference; old value = "+_referencedType+", new = "+ref);
        }
        _referencedType = ref;
    }
   

    public JavaType getSelfReferencedType() { return _referencedType; }

    @Override
    public StringBuilder getGenericSignature(StringBuilder sb) {
        return _referencedType.getGenericSignature(sb);
    }

    @Override
    public StringBuilder getErasedSignature(StringBuilder sb) {
        return _referencedType.getErasedSignature(sb);
    }

    @Override
    public JavaType withContentType(JavaType contentType) {
        if (_referencedType != null) {
            return _referencedType.withContentType(contentType);
        }
        throw new IllegalStateException("Cannot call withContentType() on unresolved type");
    }
    
    @Override
    public JavaType withTypeHandler(Object h) {
        if (_referencedType != null) {
            return _referencedType.withTypeHandler(h);
        }
        throw new IllegalStateException("Cannot call withTypeHandler() on unresolved type");
    }

    @Override
    public JavaType withContentTypeHandler(Object h) {
        if (_referencedType != null) {
            return _referencedType.withContentTypeHandler(h);
        }
        throw new IllegalStateException("Cannot call withContentTypeHandler() on unresolved type");
    }

    @Override
    public JavaType withValueHandler(Object h) {
        if (_referencedType != null) {
            return _referencedType.withValueHandler(h);
        }
        throw new IllegalStateException("Cannot call withValueHandler() on unresolved type");
    }

    @Override
    public JavaType withContentValueHandler(Object h) {
        if (_referencedType != null) {
            return _referencedType.withContentValueHandler(h);
        }
        throw new IllegalStateException("Cannot call withContentValueHandler() on unresolved type");
    }

    @Override
    public JavaType withStaticTyping() {
        if (_referencedType != null) {
            return _referencedType.withStaticTyping();
        }
        throw new IllegalStateException("Cannot call withStaticTyping() on unresolved type");
    }

    @Deprecated // since 2.7
    @Override
    protected JavaType _narrow(Class<?> subclass) {
        if (_referencedType != null) {
            return _referencedType.narrowBy(subclass);
        }
        return _narrow(subclass);
    }

    @Override
    public JavaType narrowContentsBy(Class<?> contentClass) {
        if (_referencedType != null) {
            return _referencedType.narrowContentsBy(contentClass);
        }
        throw new IllegalStateException("Cannot call narrowContentsBy() on unresolved type");
    }

    @Override
    public JavaType narrowBy(Class<?> subclass) {
        if (_referencedType != null) {
            return _referencedType.narrowBy(subclass);
        }
        throw new IllegalStateException("Cannot call narrowBy() on unresolved type");
    }

    @Override
    public JavaType refine(Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces) {
        if (_referencedType != null) {
            return _referencedType.refine(rawType, bindings, superClass, superInterfaces);
        }
        throw new IllegalStateException("Cannot call refine() on unresolved type");
    }

    @Override
    public boolean isContainerType() {
        if (_referencedType != null) {
            return _referencedType.isContainerType();
        }
        throw new IllegalStateException("Cannot call isContainerType() on unresolved type");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder(40)
                .append("[recursive type; ");
        if (_referencedType == null) {
            sb.append("UNRESOLVED");
        } else {
            // [databind#1301]: Typically resolves to a loop so short-cut
            //   and only include type-erased class
            sb.append(_referencedType.getRawClass().getName());
        }
        return sb.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (o == this) return true;
        if (o == null) return false;
        // Do NOT ever match unresolved references
        if (_referencedType == null) {
            return false;
        }
        return (o.getClass() == getClass()
                && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));
    }
}

diff --git a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
index 7b8c69af7..0c74b82dc 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
@@ -10,65 +10,45 @@ import com.fasterxml.jackson.databind.JavaType;
 public class ResolvedRecursiveType extends TypeBase
 {
     private static final long serialVersionUID = 1L;
-
-    protected JavaType _referencedType;
-
+    protected final JavaType _referencedType;
     public ResolvedRecursiveType(Class<?> erasedType, TypeBindings bindings) {
         super(erasedType, bindings, null, null, 0, null, null, false);
+        _referencedType = _construct(bindings, this);
     }
-
-    public void setReference(JavaType ref)
-    {
-        // sanity check; should not be called multiple times
-        if (_referencedType != null) {
-            throw new IllegalStateException("Trying to re-set self reference; old value = "+_referencedType+", new = "+ref);
-        }
-        _referencedType = ref;
-    }
-
-
-    public JavaType getSelfReferencedType() { return _referencedType; }
-
     @Override
-    public StringBuilder getGenericSignature(StringBuilder sb) {
-        return _referencedType.getGenericSignature(sb);
-    }
-
+    public boolean isContainerType() { return false; }
     @Override
-    public StringBuilder getErasedSignature(StringBuilder sb) {
-        return _referencedType.getErasedSignature(sb);
-    }
-
+    public JavaType withContentType(JavaType contentType) { return this; }
     @Override
-    public JavaType withContentType(JavaType contentType) {
-        return this;
-    }
-    
+    public JavaType withTypeHandler(Object h) { return this; }
     @Override
-    public JavaType withTypeHandler(Object h) {
-        return this;
-    }
-
+    public JavaType withContentTypeHandler(Object h) { return this; }
     @Override
-    public JavaType withContentTypeHandler(Object h) {
-        return this;
-    }
-
+    public JavaType withValueHandler(Object h) { return this; }
     @Override
-    public JavaType withValueHandler(Object h) {
-        return this;
+    public JavaType withContentValueHandler(Object h) { return this; }
+    @Override
+    public JavaType withStaticTyping() { return this; }
+    // Actually ok to use here, since type has no contents
+    @Override
+    public JavaType narrowContentsBy(Class<?> contentClass) { return this; }
+    // Actually ok to use here, since type has no contents
+    @Override
+    public JavaType widenContentsBy(Class<?> contentClass) { return this; }
+    @Override
+    public StringBuilder getGenericSignature(StringBuilder sb) {
+        _referencedType.getGenericSignature(sb);
+        return sb;
     }
-
     @Override
-    public JavaType withContentValueHandler(Object h) {
-        return this;
+    public StringBuilder getErasedSignature(StringBuilder sb) {
+        _referencedType.getErasedSignature(sb);
+        return sb;
     }
-
     @Override
-    public JavaType withStaticTyping() {
-        return this;
+    protected String buildCanonicalName() {
+        return _referencedType.toCanonical();
     }
-
     @Deprecated // since 2.7
     @Override
     protected JavaType _narrow(Class<?> subclass) {
@@ -78,14 +57,9 @@ public class ResolvedRecursiveType extends TypeBase
     @Override
     public JavaType refine(Class<?> rawType, TypeBindings bindings,
             JavaType superClass, JavaType[] superInterfaces) {
+        // impossible to do anything here.
         return null;
     }
-
-    @Override
-    public boolean isContainerType() {
-        return false;
-    }
-
     @Override
     public String toString() {
         StringBuilder sb = new StringBuilder(40)
@@ -93,9 +67,7 @@ public class ResolvedRecursiveType extends TypeBase
         if (_referencedType == null) {
             sb.append("UNRESOLVED");
         } else {
-            // [databind#1301]: Typically resolves to a loop so short-cut
-            //   and only include type-erased class
-            sb.append(_referencedType.getRawClass().getName());
+            sb.append(_referencedType.toString());
         }
         return sb.toString();
     }
@@ -104,11 +75,12 @@ public class ResolvedRecursiveType extends TypeBase
     public boolean equals(Object o) {
         if (o == this) return true;
         if (o == null) return false;
-        // Do NOT ever match unresolved references
-        if (_referencedType == null) {
+        if (o.getClass() != getClass()) {
             return false;
         }
-        return (o.getClass() == getClass()
-                && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));
+        ResolvedRecursiveType other = (ResolvedRecursiveType) o;
+        // Do NOT ever match unresolved references
+        return (_referencedType != null)
+                && _referencedType.equals(other._referencedType);
     }
 }
\ No newline at end of file

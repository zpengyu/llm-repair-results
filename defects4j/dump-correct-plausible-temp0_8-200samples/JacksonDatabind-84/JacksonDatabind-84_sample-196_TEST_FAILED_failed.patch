diff --git a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
index 7b8c69af7..ae725df59 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
@@ -7,28 +7,23 @@ import com.fasterxml.jackson.databind.JavaType;
  *
  * @since 2.7
  */
-public class ResolvedRecursiveType extends TypeBase
-{
+public class ResolvedRecursiveType extends TypeBase {
     private static final long serialVersionUID = 1L;
-
     protected JavaType _referencedType;
-
     public ResolvedRecursiveType(Class<?> erasedType, TypeBindings bindings) {
         super(erasedType, bindings, null, null, 0, null, null, false);
     }
-
-    public void setReference(JavaType ref)
-    {
+    public void setReference(JavaType ref) {
         // sanity check; should not be called multiple times
         if (_referencedType != null) {
-            throw new IllegalStateException("Trying to re-set self reference; old value = "+_referencedType+", new = "+ref);
+            throw new IllegalStateException("Trying to re-set self reference; old value = "
+                    + _referencedType + ", new = " + ref);
         }
         _referencedType = ref;
     }
-
-
-    public JavaType getSelfReferencedType() { return _referencedType; }
-
+    public JavaType getSelfReferencedType() {
+        return _referencedType;
+    }
     @Override
     public StringBuilder getGenericSignature(StringBuilder sb) {
         return _referencedType.getGenericSignature(sb);
@@ -85,25 +70,24 @@ public class ResolvedRecursiveType extends TypeBase
     public boolean isContainerType() {
         return false;
     }
-
     @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder(40)
-                .append("[recursive type; ");
+        StringBuilder sb = new StringBuilder(40).append("[recursive type; ");
         if (_referencedType == null) {
             sb.append("UNRESOLVED");
         } else {
             // [databind#1301]: Typically resolves to a loop so short-cut
-            //   and only include type-erased class
+            // and only include type-erased class
             sb.append(_referencedType.getRawClass().getName());
         }
-        return sb.toString();
+        return sb.append(']').toString();
     }
-
     @Override
     public boolean equals(Object o) {
-        if (o == this) return true;
-        if (o == null) return false;
+        if (o == this)
+            return true;
+        if (o == null)
+            return false;
         // Do NOT ever match unresolved references
         if (_referencedType == null) {
             return false;

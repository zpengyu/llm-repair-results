diff --git a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
index 7b8c69af7..76dbdef54 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
@@ -7,6 +7,16 @@ import com.fasterxml.jackson.databind.JavaType;
  *
  * @since 2.7
  */
+import com.fasterxml.jackson.databind.type.TypeBindings;
+/**
+ * Intermediate class used as placeholder for a recursive type reference
+ * from within declared type. This allows type to be defined without
+ * actually referring to itself.
+ *<p>
+ * Note that since type resolution occurs before serialization/deserialization
+ * takes place, instance of this class is never directly seen by
+ * actual code either.
+ */
 public class ResolvedRecursiveType extends TypeBase
 {
     private static final long serialVersionUID = 1L;
@@ -38,43 +41,63 @@ public class ResolvedRecursiveType extends TypeBase
     public StringBuilder getErasedSignature(StringBuilder sb) {
         return _referencedType.getErasedSignature(sb);
     }
-
     @Override
     public JavaType withContentType(JavaType contentType) {
+        if (_referencedType != null) {
+            return _referencedType.withContentType(contentType);
+        }
+        _referencedType = contentType;
         return this;
     }
-    
     @Override
     public JavaType withTypeHandler(Object h) {
+        if (_referencedType != null) {
+            return _referencedType.withTypeHandler(h);
+        }
+        _referencedType = _referencedType.withTypeHandler(h);
         return this;
     }
-
     @Override
     public JavaType withContentTypeHandler(Object h) {
+        if (_referencedType != null) {
+            return _referencedType.withContentTypeHandler(h);
+        }
+        _referencedType = _referencedType.withContentTypeHandler(h);
         return this;
     }
-
     @Override
     public JavaType withValueHandler(Object h) {
+        if (_referencedType != null) {
+            return _referencedType.withValueHandler(h);
+        }
+        _referencedType = _referencedType.withValueHandler(h);
         return this;
     }
-
     @Override
     public JavaType withContentValueHandler(Object h) {
+        if (_referencedType != null) {
+            return _referencedType.withContentValueHandler(h);
+        }
+        _referencedType = _referencedType.withContentValueHandler(h);
         return this;
     }
-
     @Override
     public JavaType withStaticTyping() {
+        if (_referencedType != null) {
+            return _referencedType.withStaticTyping();
+        }
+        _referencedType = _referencedType.withStaticTyping();
         return this;
     }
-
     @Deprecated // since 2.7
     @Override
     protected JavaType _narrow(Class<?> subclass) {
+        if (_referencedType != null) {
+            return _referencedType._narrow(subclass);
+        }
+        _referencedType = _referencedType._narrow(subclass);
         return this;
     }
-
     @Override
     public JavaType refine(Class<?> rawType, TypeBindings bindings,
             JavaType superClass, JavaType[] superInterfaces) {

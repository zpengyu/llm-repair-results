public class ResolvedRecursiveType extends TypeBase {
    private static final long serialVersionUID = 1L;
    protected final String _id;
    protected JavaType _referencedType;
    public ResolvedRecursiveType(String id) {
        super(Object.class, TypeBindings.emptyBindings(), null, null, 0, null, null, false);
        _id = id;
    }
    public void setReference(JavaType ref) {
        if (_referencedType != null) {
            throw new IllegalStateException("Trying to re-set self reference; old value = "+_referencedType+", new = "+ref);
        }
        _referencedType = ref;
    }
    public String getId() { return _id; }
    public JavaType getSelfReferencedType() { return _referencedType; }
    @Override
    public StringBuilder getGenericSignature(StringBuilder sb) {
        return _referencedType.getGenericSignature(sb);
    }
    @Override
    public StringBuilder getErasedSignature(StringBuilder sb) {
        return _referencedType.getErasedSignature(sb);
    }
    @Override
    public JavaType withContentType(JavaType contentType) {
        return this;
    }
    @Override
    public JavaType withContentValueHandler(Object h) {
        return this;
    }
    @Override
    public JavaType withStaticTyping() {
        return this;
    }
    @Override
    protected JavaType _narrow(Class<?> subclass) {
        return this;
    }
    @Override
    public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) {
        return this;
    }
    @Override
    public boolean isContainerType() {
        return false;
    }
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder(40)
                .append("[recursive type; ");
        if (_referencedType == null) {
            sb.append("UNRESOLVED");
        } else {
            sb.append(_referencedType.getRawClass().getName());
        }
        return sb.append(']').toString();
    }
    @Override
    public boolean equals(Object o) {
        if (o == this) return true;
        if (o == null) return false;
        if (o.getClass() != getClass()) return false;
        ResolvedRecursiveType other = (ResolvedRecursiveType) o;
        return _id.equals(other._id);
    }
    @Override
    public int hashCode() { return _id.hashCode(); }
}
diff --git a/src/main/java/org/jsoup/safety/Whitelist.java b/src/main/java/org/jsoup/safety/Whitelist.java
index 23a215d..073adc8 100644
--- a/src/main/java/org/jsoup/safety/Whitelist.java
+++ b/src/main/java/org/jsoup/safety/Whitelist.java
@@ -335,22 +335,33 @@ public class Whitelist {
         return false;
     }
 
-    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
-
-        for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
-                return true;
-            }
+private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
+    String value = el.absUrl(attr.getKey());
+    if (!preserveRelativeLinks)
+        attr.setValue(value);
+    String[] splitAnchor = splitAnchor(value);
+    String anchor = splitAnchor[1];
+    if (anchor != null && !anchor.isEmpty()) {
+        value = splitAnchor[0];
+    }
+    for (Protocol protocol : protocols) {
+        String prot = protocol.toString() + ":";
+        if (value.toLowerCase().startsWith(prot)) {
+            return true;
         }
-        return false;
     }
-
+    return false;
+}
+static String[] splitAnchor(String url) {
+    int hashIndex = url.indexOf('#');
+    if (hashIndex >= 0) {
+        String after = url.substring(hashIndex + 1);
+        url = url.substring(0, hashIndex);
+        return new String[] { url, after };
+    } else {
+        return new String[] { url, "" };
+    }
+}
     Attributes getEnforcedAttributes(String tagName) {
         Attributes attrs = new Attributes();
         TagName tag = TagName.valueOf(tagName);

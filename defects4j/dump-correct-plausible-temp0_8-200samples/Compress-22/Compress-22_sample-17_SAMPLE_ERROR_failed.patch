diff --git a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java
index bfedfd0b..acc8709a 100644
--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java
@@ -195,43 +195,43 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements
         this.nInUse = nInUseShadow;
     }
 
-    private int read0() throws IOException {
+private int read0() throws IOException {
         final int retChar = this.currentChar;
         switch (currentState) {
         case EOF:
             return -1;
-
         case START_BLOCK_STATE:
             throw new IllegalStateException();
-
         case RAND_PART_A_STATE:
             throw new IllegalStateException();
-
         case RAND_PART_B_STATE:
-            setupRandPartB();
-            break;
-
+            this.currentChar = this.buf[this.blockSize42];
+            this.currentState = BZip2Decompressor.NO_RAND_PART_C_STATE;
+            this.blockSize42--;
+            return retChar;
         case RAND_PART_C_STATE:
-            setupRandPartC();
-            break;
-
+            final int temp = this.buf[this.blockSize42 + 1];
+            this.buf[this.blockSize42 + 1] = this.currentChar;
+            this.currentChar = temp;
+            this.blockSize42--;
+            return retChar;
         case NO_RAND_PART_A_STATE:
             throw new IllegalStateException();
-
         case NO_RAND_PART_B_STATE:
-            setupNoRandPartB();
-            break;
-
+            this.currentChar = this.buf[this.blockSize42];
+            this.currentState = BZip2Decompressor.NO_RAND_PART_C_STATE;
+            this.blockSize42--;
+            return retChar;
         case NO_RAND_PART_C_STATE:
-            setupNoRandPartC();
-            break;
-
+            final int temp2 = this.buf[this.blockSize42 + 1];
+            this.buf[this.blockSize42 + 1] = this.currentChar;
+            this.currentChar = temp2;
+            this.blockSize42--;
+            return retChar;
         default:
             throw new IllegalStateException();
         }
-        return retChar;
     }
-
     private boolean init(boolean isFirstStream) throws IOException {
         if (null == in) {
             throw new IOException("No InputStream");

    public int read(byte[] buffer, int start, int length) throws IOException {
        if (closed) {
            throw new IOException("The stream is closed");
        }
        if (inf.finished() || current == null) {
            return -1;
        }
        // avoid int overflow, check null buffer
        if (start <= buffer.length && length >= 0 && start >= 0
            && buffer.length - start >= length) {
            if (current.getMethod() == ZipArchiveOutputStream.STORED) {
                int csize = (int) current.getSize();
                if (readBytesOfEntry >= csize) {
                    return -1;
                }
                if (offsetInBuffer >= lengthOfLastRead) {
                    offsetInBuffer = 0;
                    if ((lengthOfLastRead = in.read(buf)) == -1) {
                        return -1;
                    }
                    count(lengthOfLastRead);
                    bytesReadFromStream += lengthOfLastRead;
                }
                int toRead = length > lengthOfLastRead
                    ? lengthOfLastRead - offsetInBuffer
                    : length;
                if ((csize - readBytesOfEntry) < toRead) {
                    toRead = csize - readBytesOfEntry;
                }
                System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
                offsetInBuffer += toRead;
                readBytesOfEntry += toRead;
                crc.update(buffer, start, toRead);
                return toRead;
            }
            if (inf.needsInput()) {
                fill();
                if (lengthOfLastRead > 0) {
                    bytesReadFromStream += lengthOfLastRead;
                }
            }
            int read = 0;
            try {
                read = inf.inflate(buffer, start, length);
            } catch (DataFormatException e) {
                throw new ZipException(e.getMessage());
            }
            if (read == 0 && inf.finished()) {
                if (current.getMethod() == ZipArchiveOutputStream.DEFLATED) {
                    /*
                     * This is to handle bug report:
                     *
                     * http://issues.apache.org/bugzilla/show_bug.cgi?id=27213
                     *
                     * deflate method in JRE will leave un-consumed input in the
                     * buffer when the current entry is finished but the overall
                     * stream is not finished.
                     *
                     * The workaround is:
                     *
                     * 1. Attempt inflate one more time.
                     *
                     * 2. If still no data is produced and the overall stream is finished,
                     *    we have to consume the data left in the buffer to
                     *    keep the crc value up to date.
                     */
                    try {
                        inf.setInput(buf, offsetInBuffer, lengthOfLastRead);
                        read = inf.inflate(buffer, start, length);
                    } catch (DataFormatException e) {
                        throw new ZipException(e.getMessage());
                    }
                    if (read == 0) {
                        if (inf.finished()) {
                            readBytesOfEntry += lengthOfLastRead;
                            crc.update(buf, offsetInBuffer, lengthOfLastRead);
                            lengthOfLastRead = offsetInBuffer = 0;
                        }
                        return -1;
                    }
                } else {
                    return -1;
                }
            }
            crc.update(buffer, start, read);
            return read;
        }
        throw new ArrayIndexOutOfBoundsException();
    }
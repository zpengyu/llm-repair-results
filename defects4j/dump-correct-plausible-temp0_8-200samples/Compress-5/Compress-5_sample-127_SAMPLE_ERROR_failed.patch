diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
index fc7b80d5..0a3dc419 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
@@ -189,62 +189,34 @@ public class ZipArchiveInputStream extends ArchiveInputStream {
     }
 
     public int read(byte[] buffer, int start, int length) throws IOException {
-        if (closed) {
-            throw new IOException("The stream is closed");
+        if (buffer == null) {
+            throw new NullPointerException();
+        } else if (start < 0 || length < 0 || length > buffer.length - start) {
+            throw new IndexOutOfBoundsException();
+        } else if (length == 0) {
+            return 0;
         }
-        if (inf.finished() || current == null) {
-            return -1;
-        }
-
-        // avoid int overflow, check null buffer
-        if (start <= buffer.length && length >= 0 && start >= 0
-            && buffer.length - start >= length) {
-            if (current.getMethod() == ZipArchiveOutputStream.STORED) {
-                int csize = (int) current.getSize();
-                if (readBytesOfEntry >= csize) {
-                    return -1;
-                }
-                if (offsetInBuffer >= lengthOfLastRead) {
-                    offsetInBuffer = 0;
-                    if ((lengthOfLastRead = in.read(buf)) == -1) {
+        try {
+            ensureOpen();
+            for (;;) {
+                if (position == count) {
+                    fill();
+                    if (position == count)
                         return -1;
-                    }
-                    count(lengthOfLastRead);
-                    bytesReadFromStream += lengthOfLastRead;
                 }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
-                if ((csize - readBytesOfEntry) < toRead) {
-                    toRead = csize - readBytesOfEntry;
-                }
-                System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
-                offsetInBuffer += toRead;
-                readBytesOfEntry += toRead;
-                crc.update(buffer, start, toRead);
-                return toRead;
-            }
-            if (inf.needsInput()) {
-                fill();
-                if (lengthOfLastRead > 0) {
-                    bytesReadFromStream += lengthOfLastRead;
-                }
-            }
-            int read = 0;
-            try {
-                read = inf.inflate(buffer, start, length);
-            } catch (DataFormatException e) {
-                throw new ZipException(e.getMessage());
-            }
-            if (read == 0 && inf.finished()) {
-                return -1;
+                if (inf.finished() || inf.needsDictionary())
+                    return -1;
+                if (inf.needsInput())
+                    fill();
+                int n = readBytes(buffer, start, length);
+                if (n != 0)
+                    return n;
             }
-            crc.update(buffer, start, read);
-            return read;
+        } catch (DataFormatException e) {
+            String s = e.getMessage();
+            throw new ZipException(s != null ? s : "Invalid ZLIB data format");
         }
-        throw new ArrayIndexOutOfBoundsException();
     }
-
     public void close() throws IOException {
         if (!closed) {
             closed = true;

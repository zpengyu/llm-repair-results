    private static int greatestCommonDivisor(int u, int v) {
        if ((u == 0) || (v == 0)) {
            return 0;
        }
        if (u == v) {
            return u;
        }
        if (u == 1 || v == 1) {
            return 1;
        }
        if (u < 0) {
            u = -u;
        }
        if (v < 0) {
            v = -v;
        }
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...
            u >>= 1;
            v >>= 1;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException("overflow: gcd is 2^31");
        }
        int t = ((u & 1) == 1) ? v : -(u >> 1); // B3
        if (t > 0) {
            u = -t;
        } else {
            v = t;
        }
        t = (v - u) >> 1; // B3
        if (t > 0) {
            u = t;
        } else {
            v = -t;
        }
        return u * (1 << k); // gcd is u*2^k
    }
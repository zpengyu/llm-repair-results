diff --git a/src/main/java/org/apache/commons/lang3/math/Fraction.java b/src/main/java/org/apache/commons/lang3/math/Fraction.java
index 9b8ee5eb..f7eb5f3b 100644
--- a/src/main/java/org/apache/commons/lang3/math/Fraction.java
+++ b/src/main/java/org/apache/commons/lang3/math/Fraction.java
@@ -578,51 +578,61 @@ public final class Fraction extends Number implements Comparable<Fraction> {
      * @param v  a non-zero number
      * @return the greatest common divisor, never zero
      */
-    private static int greatestCommonDivisor(int u, int v) {
-        // From Commons Math:
-        //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
-            return 1;
+private static int greatestCommonDivisor(int u, int v) {
+    if ((u | v) > 0xFFFFFFF) {
+        // at least one of the numbers is larger than 2^28
+        // divide both by 2^12 and round down
+        u >>= 12;
+        v >>= 12;
+    }
+    if ((u | v) > 0xFFF) {
+        // at least one of the numbers is larger than 2^12
+        // divide both by 2^6 and round down
+        u >>= 6;
+        v >>= 6;
+    }
+    if ((u | v) > 0x3F) {
+        // at least one of the numbers is larger than 2^6
+        // divide both by 2^3 and round down
+        u >>= 3;
+        v >>= 3;
+    }
+    if ((u | v) > 0xF) {
+        // at least one of the numbers is larger than 2^4
+        // divide both by 2^2 and round down
+        u >>= 2;
+        v >>= 2;
+    }
+    // at this point we have:
+    // u <= 15 and v <= 15
+    return gcdPositiveInt(u, v);
+}
+// Recursive method to compute gcd.  Assumes that neither
+// parameter is zero or negative and that the larger number
+// is not less than 0xFFFF or 1<<15, which would make the
+// cast of the negative number to a short overflow.
+private static int gcdPositiveInt(int u, int v) {
+    if (u == v) {
+        return u;
+    }
+    if ((u & 1) == 0) {
+        if ((v & 1) == 0) {
+            // both are even
+            return gcdPositiveInt(u >> 1, v >> 1) << 1;
+        } else {
+            return gcdPositiveInt(u >> 1, v);
+        }
+    } else if ((v & 1) == 0) {
+        return gcdPositiveInt(u, v >> 1);
+    } else {
+        int t = (u - v) >> 1;
+        if (t > 0) {
+            return gcdPositiveInt(t, v);
+        } else {
+            return gcdPositiveInt((-t) >> 1, u);
         }
-        // keep u and v negative, as negative integers range down to
-        // -2^31, while positive numbers can only be as large as 2^31-1
-        // (i.e. we can't necessarily negate a negative number without
-        // overflow)
-        if (u>0) { u=-u; } // make u negative
-        if (v>0) { v=-v; } // make v negative
-        // B1. [Find power of 2]
-        int k=0;
-        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
-            u/=2; v/=2; k++; // cast out twos.
-        }
-        if (k==31) {
-            throw new ArithmeticException("overflow: gcd is 2^31");
-        }
-        // B2. Initialize: u and v have been divided by 2^k and at least
-        //     one is odd.
-        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
-        do {
-            /* assert u<0 && v<0; */
-            // B4/B3: cast out twos from t.
-            while ((t&1)==0) { // while t is even..
-                t/=2; // cast out twos
-            }
-            // B5 [reset max(u,v)]
-            if (t>0) {
-                u = -t;
-            } else {
-                v = t;
-            }
-            // B6/B3. at this point both u and v should be odd.
-            t = (v - u)/2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
-        } while (t!=0);
-        return -u*(1<<k); // gcd is u*2^k
     }
-
+}
     // Arithmetic
     //-------------------------------------------------------------------
 

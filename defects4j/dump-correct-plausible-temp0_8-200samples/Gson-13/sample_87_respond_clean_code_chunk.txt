char c = buffer[p + i];
switch (c) {
  case '-':
    if (last == NUMBER_CHAR_NONE) {
      negative = true;
      last = NUMBER_CHAR_SIGN;
      continue;
    } else if (last == NUMBER_CHAR_EXP_E) {
      last = NUMBER_CHAR_EXP_SIGN;
      continue;
    }
    return PEEKED_NONE;
  case '+':
    if (last == NUMBER_CHAR_EXP_E) {
      last = NUMBER_CHAR_EXP_SIGN;
      continue;
    }
    return PEEKED_NONE;
  case 'e':
  case 'E':
    if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {
      last = NUMBER_CHAR_EXP_E;
      continue;
    }
    return PEEKED_NONE;
  case '.':
    if (last == NUMBER_CHAR_DIGIT) {
      last = NUMBER_CHAR_DECIMAL;
      continue;
    }
    return PEEKED_NONE;
  default:
    if (c < '0' || c > '9') {
      if (!isLiteral(c)) {
        break charactersOfNumber;
      }
      return PEEKED_NONE;
    }
    if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {
      value = -(c - '0');
      last = NUMBER_CHAR_DIGIT;
    } else if (last == NUMBER_CHAR_DIGIT) {
      if (value == 0) {
        return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).
      }
      long newValue = value * 10 - (c - '0');
      fitsInLong &= value > MIN_INCOMPLETE_INTEGER
          || (value == MIN_INCOMPLETE_INTEGER && newValue < value);
      value = newValue;
    } else if (last == NUMBER_CHAR_DECIMAL) {
      last = NUMBER_CHAR_FRACTION_DIGIT;
    } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {
      last = NUMBER_CHAR_EXP_DIGIT;
    }
}
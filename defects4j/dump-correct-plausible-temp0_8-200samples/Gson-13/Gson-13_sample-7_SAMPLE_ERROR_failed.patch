diff --git a/gson/src/main/java/com/google/gson/stream/JsonReader.java b/gson/src/main/java/com/google/gson/stream/JsonReader.java
index 4541941d..ecda9adb 100644
--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java
+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java
@@ -712,9 +704,6 @@ public class JsonReader implements Closeable {
           value = -(c - '0');
           last = NUMBER_CHAR_DIGIT;
         } else if (last == NUMBER_CHAR_DIGIT) {
-          if (value == 0) {
-            return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).
-          }
           long newValue = value * 10 - (c - '0');
           fitsInLong &= value > MIN_INCOMPLETE_INTEGER
               || (value == MIN_INCOMPLETE_INTEGER && newValue < value);
@@ -734,8 +722,34 @@ public class JsonReader implements Closeable {
       return peeked = PEEKED_LONG;
     } else if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT
         || last == NUMBER_CHAR_EXP_DIGIT) {
-      peekedNumberLength = i;
-      return peeked = PEEKED_NUMBER;
+      if (last == NUMBER_CHAR_DIGIT) {
+        double d = (double) value;
+        double d1;
+        if (negative) {
+          d = -d;
+        }
+        if (last == NUMBER_CHAR_DECIMAL) {
+          d1 = parseFraction(buffer, p + i, l);
+        } else {
+          d1 = 0.0d;
+        }
+        d += d1;
+        if (negative) {
+          d = -d;
+        }
+        peekedDouble = d;
+      } else if (last == NUMBER_CHAR_FRACTION_DIGIT) {
+        double d = parseFraction(buffer, p + i, l);
+        if (negative) {
+          d = -d;
+        }
+        peekedDouble = d;
+      } else {
+        peekedDouble = Double.parseDouble(numberString());
+      }
+      pos += i;
+      peeked = PEEKED_DOUBLE;
+      return peeked;
     } else {
       return PEEKED_NONE;
     }

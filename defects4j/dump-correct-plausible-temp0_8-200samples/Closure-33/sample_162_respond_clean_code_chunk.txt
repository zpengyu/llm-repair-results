  public void matchConstraint(ObjectType constraintObj) {
    // We only want to match contraints on anonymous types.
    if (constraintObj.isRecordType()) {
      for (String prop : constraintObj.getOwnPropertyNames()) {
        JSType propType = constraintObj.getPropertyType(prop);
        if (isPropertyTypeDeclared(prop)) {
          // handle the case when the constraint object is a record type
          //
          // param constraintObj {{prop: (number|undefined)}}
          // function f(constraintObj) {}
          // f({});
          //
          // we want to modify the object literal to match the constraint, by
          // taking any each property on the record and trying to match
          // properties on this object.
          JSTypeDeclaredType dt = (JSTypeDeclaredType) getTypeOfThis();
          Property p = dt.getPropertyMap().get(prop);
          JSType inferredType = p.getType().specialize(propType);
          p.defineDeclaredProperty(prop, inferredType, null);
        } else if (!hasProperty(prop)) {
          // handle the case when the constraint object is a record type,
          // and this is an anonymous type.
          //
          // function f(constraintObj) {}
          // f({});
          //
          // We want to modify the object literal to match the constraint,
          // by taking any each property on the record and trying to match
          // properties on this object.
          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
              .getLeastSupertype(propType);
          defineInferredProperty(prop, typeToInfer, null);
        }
      }
    }
  }
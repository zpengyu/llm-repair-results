diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
index 77c5441e..e12b9dd7 100644
--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
@@ -554,7 +554,10 @@ class PrototypeObjectType extends ObjectType {
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
-
+    JSType constraintType = constraintObj.getJSType();
+    if (!(constraintType instanceof RecordType)) {
+      return;
+    }
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
@@ -564,9 +567,10 @@ class PrototypeObjectType extends ObjectType {
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
+    RecordType constraintRecordType = (RecordType) constraintType;
     if (constraintObj.isRecordType()) {
-      for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
+      for (String prop : constraintRecordType.getOwnPropertyNames()) {
+        JSType propType = constraintRecordType.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
@@ -577,5 +581,4 @@ class PrototypeObjectType extends ObjectType {
         }
       }
     }
-  }
-}
+  }}

  private static class CompiledSizeEstimator extends CodeConsumer {
    private int maxCost;
    private int cost = 0;
    private char last = '\0';
    private boolean continueProcessing = true;
    CompiledSizeEstimator(int costThreshhold) {
      this.maxCost = costThreshhold;
    }
    void add(Node root) {
      CodeGenerator cg = new CodeGenerator(this);
      cg.add(root);
    }
    int getCost() {
      return cost;
    }
    @Override
    boolean continueProcessing() {
      return continueProcessing;
    }
    @Override
    char getLastChar() {
      return last;
    }
    @Override
    void append(String str){
      last = str.charAt(str.length() - 1);
      cost += str.length();
      if (maxCost <= cost) {
        continueProcessing = false;
      }
    }
    @Override
    void addIdentifier(String identifier) {
      add(ESTIMATED_IDENTIFIER);
    }
    /**
     * Constants (true, false, null) are considered basically free,
     * because it's likely that they will get folded when we're done.
     */
    @Override
    void addConstant(String str) {
      add(ESTIMATED_CONSTANT_LENGTH);
    }
  }
We want to automatically derive syntactic patterns that match buggy code, and are good predictors of buggy code.
We want to avoid false positives.
The search space is enormous! We want to devise methods that are both efficient and effective.
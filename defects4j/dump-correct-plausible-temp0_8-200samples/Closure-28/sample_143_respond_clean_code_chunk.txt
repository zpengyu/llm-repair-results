  private static class CompiledSizeEstimator extends CodeConsumer {
    private int maxCost;
    private int cost = 0;
    private char last = '\0';
    private boolean continueProcessing = true;
    CompiledSizeEstimator(int costThreshhold) {
      this.maxCost = costThreshhold;
    }
    void add(Node root) {
      CodeGenerator cg = new CodeGenerator(this);
      cg.add(root);
    }
    int getCost() {
      return cost;
    }
    @Override
    boolean continueProcessing() {
      return continueProcessing;
    }
    @Override
    char getLastChar() {
      return last;
    }
    @Override
    void append(String str){
      last = str.charAt(str.length() - 1);
      cost += str.length();
      if (maxCost <= cost) {
        continueProcessing = false;
      }
    }
    @Override
    void addIdentifier(String identifier) {
      if (isConstant(identifier)) {
        add(1);
      } else {
        add(ESTIMATED_IDENTIFIER);
      }
    }
    private static boolean isConstant(String identifier) {
      return identifier.equals("true") || identifier.equals("false")
          || identifier.equals("null");
    }
  }
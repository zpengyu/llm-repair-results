diff --git a/src/com/google/javascript/jscomp/InlineCostEstimator.java b/src/com/google/javascript/jscomp/InlineCostEstimator.java
index 17dc677f..9cf3b00c 100644
--- a/src/com/google/javascript/jscomp/InlineCostEstimator.java
+++ b/src/com/google/javascript/jscomp/InlineCostEstimator.java
@@ -52,52 +52,15 @@ class InlineCostEstimator {
    * Code consumer that estimates compiled size by assuming names are
    * shortened and all whitespace is stripped.
    */
-  private static class CompiledSizeEstimator extends CodeConsumer {
-    private int maxCost;
-    private int cost = 0;
-    private char last = '\0';
-    private boolean continueProcessing = true;
-
-    CompiledSizeEstimator(int costThreshhold) {
-      this.maxCost = costThreshhold;
-    }
-
-    void add(Node root) {
-      CodeGenerator cg = new CodeGenerator(this);
-      cg.add(root);
-    }
-
-    int getCost() {
-      return cost;
-    }
-
-    @Override
-    boolean continueProcessing() {
-      return continueProcessing;
-    }
-
-    @Override
-    char getLastChar() {
-      return last;
-    }
-
     @Override
     void append(String str){
       last = str.charAt(str.length() - 1);
       cost += str.length();
       if (maxCost <= cost) {
         continueProcessing = false;
+      } else if (maxCost - cost < ESTIMATED_TOKEN_COST) {
+        // This ensures that we never truncate in the middle of a token.
+        // It's slightly conservative, but should be good enough.
+        continueProcessing = false;
       }
-    }
-
-    @Override
-    void addIdentifier(String identifier) {
-      add(ESTIMATED_IDENTIFIER);
-    }
-
-    /**
-     * Constants (true, false, null) are considered basically free,
-     * because it's likely that they will get folded when we're done.
-     */
-  }
-}
+    }}

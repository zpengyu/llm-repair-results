    public Object answer(InvocationOnMock invocation) {
        if (methodsGuru.isToString(invocation.getMethod())) {
            Object mock = invocation.getMock();
            MockName name = mockUtil.getMockName(mock);
            if (name.isDefault()) {
                return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
            } else {
                return name.toString();
            }
        } else if (methodsGuru.isEquals(invocation.getMethod())) {
            Object mock = invocation.getMock();
            if (invocation.getArguments().length == 1
                    && invocation.getArguments()[0] != null
                    && isMock(invocation.getArguments()[0])) {
                //see issue 182.
                //mocks by default should return false if compared to another mock
                return false;
            } else {
                //see issue 183.
                //mocks by default should return true if compared to themselves
                return mock == invocation.getArguments()[0];
            }
        } else if (methodsGuru.isHashCode(invocation.getMethod())) {
            Object mock = invocation.getMock();
            //see issue 181.
            //mocks by default should return hashCode based on identity
            return System.identityHashCode(mock);
        } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
            //see issue 184.
            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
            return 1;
        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
    }
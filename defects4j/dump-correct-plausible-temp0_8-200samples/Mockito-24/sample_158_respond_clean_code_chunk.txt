    public Object answer(InvocationOnMock invocation) {
        if (methodsGuru.isToString(invocation.getMethod())) {
            Object mock = invocation.getMock();
            MockName name = mockUtil.getMockName(mock);
            if (name.isDefault()) {
                return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
            } else {
                return name.toString();
            }
        } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
            //see issue 184.
            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
            return 1;
        }
        Class<?> returnType = invocation.getMethod().getReturnType();
        if (returnType.isPrimitive() && isZero(returnType)) {
            return 0;
        } else if (returnType.isPrimitive() && isOne(returnType)) {
            return 1;
        } else {
            return returnValueFor(returnType);
        }
    }
    private boolean isZero(Class<?> returnType) {
        return returnType == int.class || returnType == double.class || returnType == long.class || returnType == float.class;
    }
    private boolean isOne(Class<?> returnType) {
        return returnType == byte.class || returnType == char.class || returnType == short.class;
    }
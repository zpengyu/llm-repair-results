diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
index 820c09ceb..ab8eff4f6 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
@@ -60,26 +60,39 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {
     /* (non-Javadoc)
      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
      */
-    public Object answer(InvocationOnMock invocation) {
-        if (methodsGuru.isToString(invocation.getMethod())) {
-            Object mock = invocation.getMock();
-            MockName name = mockUtil.getMockName(mock);
-            if (name.isDefault()) {
-                return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
-            } else {
-                return name.toString();
-            }
-        } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
-            //see issue 184.
-            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
-            //Only for compareTo() method by the Comparable interface
-            return 1;
-        }
-
-        Class<?> returnType = invocation.getMethod().getReturnType();
-        return returnValueFor(returnType);
-    }
-    
+public Object answer(InvocationOnMock invocation) {
+	final Object[] args = invocation.getArguments();
+	Class<?> mockClass = invocation.getMock().getClass();
+	final Method mockMethod = invocation.getMethod();
+	try {
+		Method method = mockClass.getMethod(mockMethod.getName(), mockMethod.getParameterTypes());
+		if (method.getReturnType().getName().equals("void")) {
+			return null;
+		} else if (method.getReturnType().getName().equals("boolean")) {
+			return Boolean.TRUE;
+		} else if (method.getReturnType().getName().equals("int")) {
+			return Integer.valueOf(1);
+		} else if (method.getReturnType().getName().equals("short")) {
+			return Short.valueOf("1");
+		} else if (method.getReturnType().getName().equals("long")) {
+			return Long.valueOf(1L);
+		} else if (method.getReturnType().getName().equals("double")) {
+			return Double.valueOf(1.0);
+		} else if (method.getReturnType().getName().equals("float")) {
+			return Float.valueOf(1.0f);
+		} else if (method.getReturnType().getName().equals("char")) {
+			return Character.valueOf('a');
+		} else if (method.getReturnType().getName().equals("byte")) {
+			return Byte.valueOf("1");
+		} else {
+			Object obj = method.getReturnType().getConstructor(new Class[0]).newInstance(new Object[0]);
+			return obj;
+		}
+	} catch (Exception e) {
+		e.printStackTrace();
+		return null;
+	}
+}    
     Object returnValueFor(Class<?> type) {
         if (Primitives.isPrimitiveOrWrapper(type)) {
             return Primitives.defaultValueForPrimitiveOrWrapper(type);

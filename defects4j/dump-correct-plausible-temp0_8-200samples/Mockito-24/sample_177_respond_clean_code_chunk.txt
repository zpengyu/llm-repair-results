public Object answer(InvocationOnMock invocation) {
	final Object[] args = invocation.getArguments();
	Class<?> mockClass = invocation.getMock().getClass();
	final Method mockMethod = invocation.getMethod();
	try {
		Method method = mockClass.getMethod(mockMethod.getName(), mockMethod.getParameterTypes());
		if (method.getReturnType().getName().equals("void")) {
			return null;
		} else if (method.getReturnType().getName().equals("boolean")) {
			return Boolean.TRUE;
		} else if (method.getReturnType().getName().equals("int")) {
			return Integer.valueOf(1);
		} else if (method.getReturnType().getName().equals("short")) {
			return Short.valueOf("1");
		} else if (method.getReturnType().getName().equals("long")) {
			return Long.valueOf(1L);
		} else if (method.getReturnType().getName().equals("double")) {
			return Double.valueOf(1.0);
		} else if (method.getReturnType().getName().equals("float")) {
			return Float.valueOf(1.0f);
		} else if (method.getReturnType().getName().equals("char")) {
			return Character.valueOf('a');
		} else if (method.getReturnType().getName().equals("byte")) {
			return Byte.valueOf("1");
		} else {
			Object obj = method.getReturnType().getConstructor(new Class[0]).newInstance(new Object[0]);
			return obj;
		}
	} catch (Exception e) {
		e.printStackTrace();
		return null;
	}
}
diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
index 820c09ceb..93236ff5a 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
@@ -61,25 +61,20 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {
      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
      */
     public Object answer(InvocationOnMock invocation) {
-        if (methodsGuru.isToString(invocation.getMethod())) {
-            Object mock = invocation.getMock();
-            MockName name = mockUtil.getMockName(mock);
-            if (name.isDefault()) {
-                return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
-            } else {
-                return name.toString();
-            }
-        } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
+        Class<?> returnType = invocation.getMethod().getReturnType();
+        return returnValueFor(returnType);
+    }
+    private Object returnValueFor(Class<?> returnType) {
+        if (methodsGuru.isToString(returnType)) {
+            return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
+        } else if (methodsGuru.isCompareToMethod(returnType)) {
             //see issue 184.
             //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
             //Only for compareTo() method by the Comparable interface
             return 1;
         }
-
-        Class<?> returnType = invocation.getMethod().getReturnType();
-        return returnValueFor(returnType);
+        return returnType;
     }    
-    
     Object returnValueFor(Class<?> type) {
         if (Primitives.isPrimitiveOrWrapper(type)) {
             return Primitives.defaultValueForPrimitiveOrWrapper(type);

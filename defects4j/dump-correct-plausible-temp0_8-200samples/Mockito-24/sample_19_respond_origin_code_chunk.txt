    public Object answer(InvocationOnMock invocation) {
        if (methodsGuru.isToString(invocation.getMethod())) {
            Object mock = invocation.getMock();
            MockName name = mockUtil.getMockName(mock);
            if (name.isDefault()) {
                return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
            } else {
                return name.toString();
            }
        } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
            Object[] args = invocation.getArguments();
            Object self = invocation.getMock();
            if (args.length == 1 && args[0] != null && isMock(args[0])) {
                MockName name = mockUtil.getMockName(self);
                MockName otherName = mockUtil.getMockName(args[0]);
                if (name.isDefault() && otherName.isDefault()) {
                    //see issue 184.
                    //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
                    //Only for compareTo() method by the Comparable interface
                    return 1;
                }
            }
        }

        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
    }

	private boolean isMock(Object arg) {
		return MockUtil.isMock(arg);
	}



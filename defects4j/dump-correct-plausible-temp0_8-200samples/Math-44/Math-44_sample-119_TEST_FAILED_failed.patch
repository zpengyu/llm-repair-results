diff --git a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java
index 64c59ee58..cdece3307 100644
--- a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java
@@ -353,26 +338,30 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {
                     // the event occurs during the current step
                     occuringEvents.add(currentEvent);
                 }
-
             }
-
-            interpolator.setInterpolatedTime(currentT);
-            final double[] currentY = interpolator.getInterpolatedState();
+            // Check if the endpoint of the current step is close to an event
+            boolean close = false;
             for (final EventState state : eventsStates) {
-                state.stepAccepted(currentT, currentY);
-                isLastStep = isLastStep || state.stop();
+                close = close || state.evaluateStep(interpolator);
             }
-            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
-
-            // handle the remaining part of the step, after all events if any
-            for (StepHandler handler : stepHandlers) {
-                handler.handleStep(interpolator, isLastStep);
+            if (!close) {
+                // restrict the interpolator to the first part of the step, up to the event
+                interpolator.setSoftPreviousTime(previousT);
+                interpolator.setSoftCurrentTime(currentT);
+                interpolator.setInterpolatedTime(currentT);
+                final double[] currentY = interpolator.getInterpolatedState();
+                for (final EventState state : eventsStates) {
+                    state.stepAccepted(currentT, currentY);
+                    isLastStep = isLastStep || state.stop();
+                }
+                isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
+                // handle the remaining part of the step, after all events if any
+                for (StepHandler handler : stepHandlers) {
+                    handler.handleStep(interpolator, isLastStep);
+                }
             }
-
             return currentT;
-
     }
-
     /** Check the integration span.
      * @param equations set of differential equations
      * @param t target time for the integration

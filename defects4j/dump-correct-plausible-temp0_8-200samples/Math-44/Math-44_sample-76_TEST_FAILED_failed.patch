diff --git a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java
index 64c59ee58..60ff0fae3 100644
--- a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java
@@ -271,10 +271,9 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {
      * @exception MathIllegalStateException if the value of one event state cannot be evaluated
      * @since 2.2
      */
-    protected double acceptStep(final AbstractStepInterpolator interpolator,
+protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MathIllegalStateException {
-
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
             resetOccurred = false;
@@ -362,8 +345,7 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {
                 state.stepAccepted(currentT, currentY);
                 isLastStep = isLastStep || state.stop();
             }
-            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
-
+            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1.0e-12);
             // handle the remaining part of the step, after all events if any
             for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);

diff --git a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
index cd675c71..83fc77e7 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
@@ -48,23 +48,24 @@ public final class JsonAdapterAnnotationTypeAdapterFactory implements TypeAdapte
   }
 
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
-  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
-      TypeToken<?> fieldType, JsonAdapter annotation) {
-    Class<?> value = annotation.value();
-    TypeAdapter<?> typeAdapter;
-    if (TypeAdapter.class.isAssignableFrom(value)) {
-      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
-    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
-      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
-          .construct()
-          .create(gson, fieldType);
-    } else {
-      throw new IllegalArgumentException(
-          "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
-    }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
+static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
+    TypeToken<?> fieldType, JsonAdapter annotation) {
+  Class<?> value = annotation.value();
+  TypeAdapter<?> typeAdapter;
+  if (TypeAdapter.class.isAssignableFrom(value)) {
+    Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
+    typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
+  } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
+    Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
+    typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
+        .construct()
+        .create(gson, fieldType);
+  } else {
+    throw new IllegalArgumentException(
+        "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
+  }
+  if (typeAdapter != null) {
+    typeAdapter = typeAdapter.nullSafe();
   }
-}
+  return typeAdapter;
+}}

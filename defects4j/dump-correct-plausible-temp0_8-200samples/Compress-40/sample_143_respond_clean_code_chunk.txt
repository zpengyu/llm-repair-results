    public long readBits(final int count) throws IOException {
        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
        }
        while (bitsCachedSize < count) {
            final long nextByte = in.read();
            if (nextByte < 0) {
                if (bitsCachedSize == 0) {
                    // We read -1 and no bits at all -> EOF
                    return nextByte;
                }
                // We read -1, but we do have something in the cache
                // -> No more bytes to read, but something is still there
                break;
            }
            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                bitsCached |= (nextByte << bitsCachedSize);
            } else {
                bitsCached <<= 8;
                bitsCached |= nextByte;
            }
            bitsCachedSize += 8;
        }
        if (bitsCachedSize == 0) {
            // We did read something but are not able to return any bit.
            // In the next call, we might be able to return something.
            // Return 0 here to keep the caller from blocking forever.
            return 0;
        }
        // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
        final long bitsOut;
        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
            bitsOut = (bitsCached & MASKS[count]);
            bitsCached >>>= count;
        } else {
            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
        }
        bitsCachedSize -= count;
        return bitsOut;
    }
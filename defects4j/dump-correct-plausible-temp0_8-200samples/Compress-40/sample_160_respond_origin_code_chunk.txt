    public long readBits(final int count) throws IOException {
        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
        }
        long bitsOut = 0;
        while (bitsCachedSize < count) {
            final long nextByte = in.read();
            if (nextByte < 0) {
                if (bitsCachedSize == 0) {
                    return nextByte;
                } else {
                    throw new IOException("unexpected EOF. All the data bits requested have not been read");
                }
            }
            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                bitsCached |= (nextByte << bitsCachedSize);
            } else {
                bitsCached <<= 8;
                bitsCached |= nextByte;
            }
            bitsCachedSize += 8;
        }
            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
        
            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                bitsOut = (bitsCached & MASKS[count]);
                bitsCached >>>= count;
            } else {
                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
            }
            bitsCachedSize -= count;
        return bitsOut;
    }



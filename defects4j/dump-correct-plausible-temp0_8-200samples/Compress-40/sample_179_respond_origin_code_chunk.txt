    public long readBits(final int count) throws IOException {
        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
        }
        if (count > bitsCachedSize) {
            long bits = bitsCached;
            bitsCached = 0;
            bitsCachedSize = 0;
            
            while (bitsCachedSize < count) {
                final long nextByte = in.read();
                if (nextByte < 0) {
                    return nextByte;
                }
                if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                    bitsCached |= (nextByte << bitsCachedSize);
                } else {
                    bitsCached <<= 8;
                    bitsCached |= nextByte;
                }
                bitsCachedSize += 8;
            }
            bits |= (bitsCached >>> bitsCachedSize) & MASKS[count - bitsCachedSize];
            bitsCachedSize -= count;
            return bits;
        }
        return readBitsFast(count);
    }
    private long readBitsFast(final int count) throws IOException {
            final long bitsOut;
            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                bitsOut = (bitsCached & MASKS[count]);
                bitsCached >>>= count;
            } else {
                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
                bitsCached <<= count;
            }
            bitsCachedSize -= count;
            return bitsOut;
    }

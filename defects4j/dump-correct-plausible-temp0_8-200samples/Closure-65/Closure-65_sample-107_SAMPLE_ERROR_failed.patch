diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 5b684191..8777e814 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -1003,10 +1003,10 @@ class CodeGenerator {
 
   /** Helper to escape javascript string as well as regular expression */
   static String strEscape(String s, char quote,
-                          String doublequoteEscape,
-                          String singlequoteEscape,
-                          String backslashEscape,
-                          CharsetEncoder outputCharsetEncoder) {
+      String doublequoteEscape,
+      String singlequoteEscape,
+      String backslashEscape,
+      CharsetEncoder outputCharsetEncoder) {
     StringBuilder sb = new StringBuilder(s.length() + 2);
     sb.append(quote);
     for (int i = 0; i < s.length(); i++) {
@@ -1031,15 +1031,13 @@ class CodeGenerator {
         case '<':
           // Break </script into <\/script
           final String END_SCRIPT = "/script";
-
           // Break <!-- into <\!--
           final String START_COMMENT = "!--";
-
           if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
-                              END_SCRIPT.length())) {
+              END_SCRIPT.length())) {
             sb.append("<\\");
           } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
-                                     START_COMMENT.length())) {
+              START_COMMENT.length())) {
             sb.append("<\\");
           } else {
             sb.append(c);
@@ -1073,7 +1071,18 @@ class CodeGenerator {
     sb.append(quote);
     return sb.toString();
   }
-
+private static void appendHexJavaScriptRepresentation(
+    StringBuilder sb, char c) {
+  sb.append("\\u");
+  // Use upper-case hex digits.
+  sb.append(toHexDigit((c >> 12) & 0xF));
+  sb.append(toHexDigit((c >> 8) & 0xF));
+  sb.append(toHexDigit((c >> 4) & 0xF));
+  sb.append(toHexDigit((c >> 0) & 0xF));
+}
+private static char toHexDigit(int i) {
+  return (char) (i < 10 ? i + '0' : i - 10 + 'A');
+}
   static String identifierEscape(String s) {
     // First check if escaping is needed at all -- in most cases it isn't.
     if (NodeUtil.isLatin(s)) {

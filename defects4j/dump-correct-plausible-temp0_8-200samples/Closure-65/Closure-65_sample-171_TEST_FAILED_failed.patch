diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 5b684191..ca6ce14f 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -1019,10 +1019,10 @@ class CodeGenerator {
         case '\\': sb.append(backslashEscape); break;
         case '\"': sb.append(doublequoteEscape); break;
         case '\'': sb.append(singlequoteEscape); break;
-        case '>':                       // Break --> into --\> or ]]> into ]]\>
+        case '>':
           if (i >= 2 &&
               ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
-               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
+                  (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
             sb.append("\\>");
           } else {
             sb.append(c);
@@ -1031,15 +1031,13 @@ class CodeGenerator {
         case '<':
           // Break </script into <\/script
           final String END_SCRIPT = "/script";
-
           // Break <!-- into <\!--
           final String START_COMMENT = "!--";
-
           if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
-                              END_SCRIPT.length())) {
+              END_SCRIPT.length())) {
             sb.append("<\\");
           } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
-                                     START_COMMENT.length())) {
+              START_COMMENT.length())) {
             sb.append("<\\");
           } else {
             sb.append(c);
@@ -1073,7 +1071,24 @@ class CodeGenerator {
     sb.append(quote);
     return sb.toString();
   }
-
+  private static void appendHexJavaScriptRepresentation(StringBuilder sb,
+                                                        int c) {
+    if (c > 0xffff) {
+      sb.append("\\u");
+      sb.append(Character.forDigit((c >> 28) & 0xf, 16));
+      sb.append(Character.forDigit((c >> 24) & 0xf, 16));
+      sb.append(Character.forDigit((c >> 20) & 0xf, 16));
+      sb.append(Character.forDigit((c >> 16) & 0xf, 16));
+    } else if (c > 0xff) {
+      sb.append("\\u0");
+      sb.append(Character.forDigit((c >> 12) & 0xf, 16));
+      sb.append(Character.forDigit((c >> 8) & 0xf, 16));
+    } else {
+      sb.append("\\x");
+    }
+    sb.append(Character.forDigit((c >> 4) & 0xf, 16));
+    sb.append(Character.forDigit((c >> 0) & 0xf, 16));
+  }
   static String identifierEscape(String s) {
     // First check if escaping is needed at all -- in most cases it isn't.
     if (NodeUtil.isLatin(s)) {

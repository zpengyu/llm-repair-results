diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 5b684191..973d27d4 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -1003,10 +1003,10 @@ class CodeGenerator {
 
   /** Helper to escape javascript string as well as regular expression */
   static String strEscape(String s, char quote,
-                          String doublequoteEscape,
-                          String singlequoteEscape,
-                          String backslashEscape,
-                          CharsetEncoder outputCharsetEncoder) {
+      String doublequoteEscape,
+      String singlequoteEscape,
+      String backslashEscape,
+      CharsetEncoder outputCharsetEncoder) {
     StringBuilder sb = new StringBuilder(s.length() + 2);
     sb.append(quote);
     for (int i = 0; i < s.length(); i++) {
@@ -1031,15 +1031,13 @@ class CodeGenerator {
         case '<':
           // Break </script into <\/script
           final String END_SCRIPT = "/script";
-
           // Break <!-- into <\!--
           final String START_COMMENT = "!--";
-
           if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
-                              END_SCRIPT.length())) {
+                  END_SCRIPT.length())) {
             sb.append("<\\");
           } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
-                                     START_COMMENT.length())) {
+                  START_COMMENT.length())) {
             sb.append("<\\");
           } else {
             sb.append(c);
@@ -1059,7 +1057,7 @@ class CodeGenerator {
             // No charsetEncoder provided - pass straight latin characters
             // through, and escape the rest.  Doing the explicit character
             // check is measurably faster than using the CharsetEncoder.
-            if (c > 0x1f && c < 0x7f) {
+            if ((c >= 0x20 && c <= 0x7e) || (c >= 0xA0 && c <= 0xFF)) {
               sb.append(c);
             } else {
               // Other characters can be misinterpreted by some js parsers,
@@ -1073,7 +1071,20 @@ class CodeGenerator {
     sb.append(quote);
     return sb.toString();
   }
-
+  static void appendHexJavaScriptRepresentation(StringBuilder sb, char c) {
+    sb.append("\\u");
+    appendHexJavaScriptRepresentationPadded(sb, c);
+  }
+  private static final char[] HEX_CHARS = {
+      '0', '1', '2', '3', '4', '5', '6', '7',
+      '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
+  static void appendHexJavaScriptRepresentationPadded(StringBuilder sb,
+                                                      char c) {
+    sb.append(HEX_CHARS[(c & 0xf000) >> 12]);
+    sb.append(HEX_CHARS[(c & 0x0f00) >> 8]);
+    sb.append(HEX_CHARS[(c & 0x00f0) >> 4]);
+    sb.append(HEX_CHARS[(c & 0x000f)]);
+  }
   static String identifierEscape(String s) {
     // First check if escaping is needed at all -- in most cases it isn't.
     if (NodeUtil.isLatin(s)) {

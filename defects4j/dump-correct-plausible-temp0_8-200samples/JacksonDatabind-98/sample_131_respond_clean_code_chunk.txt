    public Object complete(JsonParser p, DeserializationContext ctxt,
            PropertyValueBuffer buffer, PropertyBasedCreator creator)
        throws IOException
    {
        // first things first: deserialize all data buffered:
        final int len = _properties.length;
        Object[] values = new Object[len];
        for (int i = 0; i < len; ++i) {
            String typeId = _typeIds[i];
            final ExtTypedProperty extProp = _properties[i];
            if (typeId == null) {
                // let's allow missing both type and property (may already have been set, too)
                if (_tokens[i] == null) {
                    continue;
                }
                // but not just one
                // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'
                if (!extProp.hasDefaultType()) {
                    ctxt.reportInputMismatch(_beanType,
                            "Missing external type id property '%s'",
                            extProp.getTypePropertyName());
                } else {
                    typeId = extProp.getDefaultTypeId();
                }
            } else if (_tokens[i] == null) {
                SettableBeanProperty prop = extProp.getProperty();
                ctxt.reportInputMismatch(_beanType,
                        "Missing property '%s' for external type id '%s'",
                        prop.getName(), _properties[i].getTypePropertyName());
            }
            values[i] = _deserialize(p, ctxt, i, typeId);
            final SettableBeanProperty prop = extProp.getProperty();
            // also: if it's creator prop, fill in
            if (prop.getCreatorIndex() >= 0) {
                buffer.assignParameter(prop, values[i]);
                // [databind#999] And maybe there's creator property for type id too?
                SettableBeanProperty typeProp = extProp.getTypeProperty();
                // for now, should only be needed for creator properties, too
                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
                    // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to
                    //    apply deserializer... fun fun.
                    buffer.assignParameter(typeProp, _deserializeWith(p, ctxt, typeProp, typeId));
                }
            }
        }
        Object bean = creator.build(ctxt, buffer);
        // third: assign non-creator properties
        for (int i = 0; i < len; ++i) {
            SettableBeanProperty prop = _properties[i].getProperty();
            if (prop.getCreatorIndex() < 0) {
                prop.set(bean, values[i]);
            }
        }
        return bean;
    }
    private Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId)
        throws IOException
    {
        TokenBuffer buf = (TokenBuffer) _tokens[index];
        if (buf != null) {
            // 05-Oct-2017, tatu: [databind#1799] Need to avoid passing base64 binary data
            //    as textual, or it will get quoted
            final JsonParser p2 = buf.asParser();
            final JsonToken t = p2.nextToken();
            if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
                return p2.getEmbeddedObject();
            }
            p2.nextToken(); // to skip initial START_OBJECT
            JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
            final Object value = deser.deserialize(p2, ctxt);
            p2.nextToken(); // to skip END_OBJECT
            // 13-Sep-2016, tatu: As per [databind#1262], need to allow END_ARRAY to be
            //    passed through (for "wrapped" handling)
            if (p2.nextToken() != null) {
                ctxt.reportWrongTokenException(p2, JsonToken.END_ARRAY,
                        "expected closing END_ARRAY after type information and deserialized value");
            }
            return value;
        }
        // 25-Sep-2020, tatu: [databind#2903] Should we indicate we'd like to "wrap"?
        //    Should we always do so? At very least, let's document this...
        return _valueInstantiator.createUsingDelegate(ctxt, _deserializeWith(p, ctxt, _properties[index], typeId));
    }
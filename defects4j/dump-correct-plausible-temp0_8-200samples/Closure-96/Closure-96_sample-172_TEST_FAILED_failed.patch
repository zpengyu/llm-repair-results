diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 83a73c74..320b5dac 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1396,7 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
-  private void visitParameterList(NodeTraversal t, Node call,
+private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
@@ -1416,19 +1414,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
-
-    int numArgs = call.getChildCount() - 1;
-    int minArgs = functionType.getMinArguments();
-    int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
-      report(t, call, WRONG_ARGUMENT_COUNT,
-              validator.getReadableJSTypeName(call.getFirstChild(), false),
-              String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+    if(!parameters.hasNext()){
+        parameter = parameters.next();
+        int numArgs = call.getChildCount() - 1;
+        int minArgs = functionType.getMinArguments();
+        int maxArgs = functionType.getMaxArguments();
+        if (minArgs > numArgs || maxArgs < numArgs) {
+          report(t, call, WRONG_ARGUMENT_COUNT,
+                  validator.getReadableJSTypeName(call.getFirstChild(), false),
+                  String.valueOf(numArgs), String.valueOf(minArgs),
+                  maxArgs != Integer.MAX_VALUE ?
+                  " and no more than " + maxArgs + " argument(s)" : "");
+        }
+    }
+    while (arguments.hasNext() && !parameters.hasNext()) {
+      argument = arguments.next();
+      ordinal++;
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), getJSType(parameter), call, ordinal);
     }
   }
-
   /**
    * Visits a RETURN node.
    *

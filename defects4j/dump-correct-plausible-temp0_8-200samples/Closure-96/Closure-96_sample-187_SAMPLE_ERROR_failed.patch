diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 83a73c74..30ae736b 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1405,30 +1404,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+    while (arguments.hasNext()) {
       argument = arguments.next();
-      ordinal++;
-
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
-    }
-
-    int numArgs = call.getChildCount() - 1;
-    int minArgs = functionType.getMinArguments();
-    int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
-      report(t, call, WRONG_ARGUMENT_COUNT,
-              validator.getReadableJSTypeName(call.getFirstChild(), false),
-              String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+      if (parameters.hasNext()) {
+        parameter = parameters.next();
+        ordinal++;
+        validator.expectArgumentMatchesParameter(t, argument,
+            getJSType(argument), getJSType(parameter), call, ordinal);
+      } else {
+        if (!argument.isSpread()) {
+          validator.expectParameterType(
+              t,
+              getJSType(argument),
+              getNativeType(JSTypeNative.UNKNOWN_TYPE),
+              argument,
+              call);
+        }
+      }
     }
   }
-
   /**
    * Visits a RETURN node.
    *

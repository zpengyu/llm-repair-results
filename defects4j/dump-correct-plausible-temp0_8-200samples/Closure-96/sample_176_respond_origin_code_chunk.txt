  private void visitParameterList(NodeTraversal t, Node call,
      FunctionType functionType) {
    Iterator<Node> arguments = call.children().iterator();
    arguments.next(); // skip the function name

    Iterator<Node> parameters = functionType.getParameters().iterator();
    int ordinal = 0;
    Node parameter = null;
    Node argument = null;
    while (arguments.hasNext() &&
           parameters.hasNext()) {
      // If there are no parameters left in the list, then the while loop
      // above implies that this must be a var_args function.
        parameter = parameters.next();
      argument = arguments.next();
      ordinal++;

      validator.expectArgumentMatchesParameter(t, argument,
          getJSType(argument), getJSType(parameter), call, ordinal);
    }

    if (argument != null && argument.isSpread()) {
      int numParams = functionType.getMaxArguments();
      if (parameter != null) {
        // Uses the last parameter's ordinal.
        validator.expectArgumentMatchesParameter(t, argument,
            getJSType(argument), getJSType(parameter), call, ordinal,
            "Argument at position " + ordinal + " of call to function " +
            "expected to be an array of at least " +
            (numParams - ordinal) + " elements. " +
            "The rest parameter may be an empty array or it may contain " +
            "elements of a more specific type, but all preceding arguments " +
            "must be matched exactly.");
      }
      int numArgs = call.getChildCount() - 1;
      int minArgs = functionType.getMinArguments();
      int maxArgs = functionType.getMaxArguments();
      if (minArgs > numArgs || maxArgs < numArgs) {
        report(t, call, WRONG_ARGUMENT_COUNT,
                validator.getReadableJSTypeName(call.getFirstChild(), false),
                String.valueOf(numArgs), String.valueOf(minArgs),
                maxArgs != Integer.MAX_VALUE ?
                " and no more than " + maxArgs + " argument(s)" : "");
      }
    }
  }


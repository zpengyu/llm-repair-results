diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 83a73c74..f6f7c71c 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1398,9 +1398,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
+    int numArgs = call.getChildCount() - 1;
+    if (numArgs < functionType.getMinArguments() ||
+        numArgs > functionType.getMaxArguments()) {
+      report(t, call, WRONG_ARGUMENT_COUNT,
+              validator.getReadableJSTypeName(call.getFirstChild(), false),
+              String.valueOf(numArgs), String.valueOf(
+                  functionType.getMinArguments()),
+              functionType.getMaxArguments() != Integer.MAX_VALUE ?
+              " and no more than " + functionType.getMaxArguments() +
+              " argument(s)" : "");
+    }
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
-
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
@@ -1416,19 +1425,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
-
-    int numArgs = call.getChildCount() - 1;
-    int minArgs = functionType.getMinArguments();
-    int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
-      report(t, call, WRONG_ARGUMENT_COUNT,
-              validator.getReadableJSTypeName(call.getFirstChild(), false),
-              String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
-    }
   }
-
   /**
    * Visits a RETURN node.
    *

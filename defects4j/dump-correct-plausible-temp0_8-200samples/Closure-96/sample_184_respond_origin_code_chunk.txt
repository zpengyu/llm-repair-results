  private void visitParameterList(NodeTraversal t, Node call,
      FunctionType functionType) {
    Iterator<Node> arguments = call.children().iterator();
    arguments.next(); // skip the function name

    Iterator<Node> parameters = functionType.getParameters().iterator();
    int ordinal = 0;
    Node parameter = null;
    Node argument = null;
    while (arguments.hasNext()) {
      argument = arguments.next();
      if (parameters.hasNext()) {
        // If there are no parameters left in the list, then the while loop
        // above implies that this must be a var_args function.
        parameter = parameters.next();
        ordinal++;
        validator.expectArgumentMatchesParameter(t, argument,
            getJSType(argument), getJSType(parameter), call, ordinal);
      } else {
        // If there are no parameters left in the list, then the while loop
        // above implies that this must be a var_args function.
        if (functionType.isVarArgs()) {
          validator.expectArgumentMatchesParameter(t, argument,
              getJSType(argument),
              functionType.getRestType(),
              call, ordinal);
        } else {
          report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(ordinal + 1),
              String.valueOf(functionType.getMinArguments()),
              functionType.getMaxArguments() != Integer.MAX_VALUE ?
              " and no more than " + functionType.getMaxArguments() +
              " argument(s)" : "");
          break;
        }
      }
    }
  }


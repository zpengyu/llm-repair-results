diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 83a73c74..89cb1794 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1400,23 +1400,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
-
-    Iterator<Node> parameters = functionType.getParameters().iterator();
+    List<Node> parameters = functionType.getParameters();
     int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
-      ordinal++;
-
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
-    }
-
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
@@ -1427,8 +1412,14 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
+    for (int i = 0; i < numArgs; i++) {
+      Node argument = arguments.next();
+      Node parameter = i < parameters.size() ? parameters.get(i) : null;
+      ordinal++;
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), getJSType(parameter), call, ordinal);
+    }
   }
-
   /**
    * Visits a RETURN node.
    *

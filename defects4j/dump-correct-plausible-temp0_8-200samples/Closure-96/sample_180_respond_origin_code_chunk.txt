  private void visitParameterList(NodeTraversal t, Node call,
      FunctionType functionType) {
    int numArgs = call.getChildCount() - 1;
    if (numArgs < functionType.getMinArguments() ||
        numArgs > functionType.getMaxArguments()) {
      report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(
                  functionType.getMinArguments()),
              functionType.getMaxArguments() != Integer.MAX_VALUE ?
              " and no more than " + functionType.getMaxArguments() +
              " argument(s)" : "");
    }

    Iterator<Node> arguments = call.children().iterator();
    arguments.next(); // skip the function name

    Iterator<Node> parameters = functionType.getParameters().iterator();
    int ordinal = 0;
    Node parameter = null;
    Node argument = null;
    while (arguments.hasNext() &&
           parameters.hasNext()) {
      // If there are no parameters left in the list, then the while loop
      // above implies that this must be a var_args function.
        parameter = parameters.next();
      argument = arguments.next();
      ordinal++;

      validator.expectArgumentMatchesParameter(t, argument,
          getJSType(argument), getJSType(parameter), call, ordinal);
    }
  }

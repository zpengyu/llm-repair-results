private class FitnessFunction {
    /** Determines the penalty for boundary violations */
    private double valueRange;
    /**
     * Flag indicating whether the objective variables are forced into their
     * bounds if defined
     */
    private boolean isRepairMode;

    /** Simple constructor.
     */
    public FitnessFunction() {
        valueRange = 1.0;
        isRepairMode = true;
    }

    /**
     * @param x Original objective variables.
     * @return the normalized objective variables.
     */
    public double[] encode(final double[] x) {
        if (boundaries == null) {
            return x;
        }
        double[] res = new double[x.length];
        for (int i = 0; i < x.length; i++) {
            double diff = boundaries[1][i] - boundaries[0][i];
            res[i] = (x[i] - boundaries[0][i]) / diff;
        }
        return res;
    }

    /**
     * @param x Normalized objective variables.
     * @return the original objective variables, possibly repaired.
     */
    public double[] repairAndDecode(final double[] x) {
        return boundaries != null && isRepairMode ?
            decode(repair(x)) :
            decode(x);
    }

    /**
     * @param x Normalized objective variables.
     * @return the original objective variables.
     */
    public double[] decode(final double[] x) {
        if (boundaries == null) {
            return x;
        }
        double[] res = new double[x.length];
        for (int i = 0; i < x.length; i++) {
            double diff = boundaries[1][i] - boundaries[0][i];
            res[i] = diff * x[i] + boundaries[0][i];
        }
        return res;
    }

    /**
     * @param point Normalized objective variables.
     * @return the objective value + penalty for violated bounds.
     */
    public double value(final double[] point) {
        double value;
        if (boundaries != null && isRepairMode) {
            double[] repaired = repair(point);
            value = CMAESOptimizer.this
                    .computeObjectiveValue(decode(repaired)) +
                    penalty(point, repaired);
        } else {
            value = CMAESOptimizer.this
                    .computeObjectiveValue(decode(point));
        }
        return isMinimize ? value : -value;
    }

    /**
     * @param x Normalized objective variables.
     * @return {@code true} if in bounds.
     */
    public boolean isFeasible(final double[] x) {
        if (boundaries == null) {
            return true;
        }


        for (int i = 0; i < x.length; i++) {
            if (x[i] < 0) {
                return false;
            }
            if (x[i] > 1.0) {
                return false;
            }
        }
        return true;
    }

    /**
     * @param valueRange Adjusts the penalty computation.
     */
    public void setValueRange(double valueRange) {
        this.valueRange = valueRange;
    }

    /**
     * @param x Normalized objective variables.
     * @return the repaired objective variables - all in bounds.
     */
    private double[] repair(final double[] x) {
        double[] repaired = new double[x.length];
        for (int i = 0; i < x.length; i++) {
            if (x[i] < 0) {
                repaired[i] = 0;
            } else if (x[i] > 1.0) {
                repaired[i] = 1.0;
            } else {
                repaired[i] = x[i];
            }
        }
        return repaired;
    }

    /**
     * @param x Normalized objective variables.
     * @param repaired Repaired objective variables.
     * @return Penalty value according to the violation of the bounds.
     */
    private double penalty(final double[] x, final double[] repaired) {
        double penalty = 0;
        for (int i = 0; i < x.length; i++) {
            double diff = Math.abs(x[i] - repaired[i]);
            penalty += diff * valueRange;
        }
        return isMinimize ? penalty : -penalty;
    }
}

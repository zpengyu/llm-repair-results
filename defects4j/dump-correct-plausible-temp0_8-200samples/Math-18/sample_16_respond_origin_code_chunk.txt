    private class FitnessFunction {
        /** Determines the penalty for boundary violations */
        private double valueRange;
        /**
         * Flag indicating whether the objective variables are forced into their
         * bounds if defined
         */
        private boolean isRepairMode;

        /** Simple constructor.
         */
        public FitnessFunction() {
            valueRange = 1.0;
            isRepairMode = true;
        }

        /**
         * @param x Original objective variables.
         * @return the normalized objective variables.
         */
        public double[] encode(final double[] x) {
            if (boundaries == null) {
                return x;
            }
            double[] res = new double[x.length];
            for (int i = 0; i < x.length; i++) {
                double diff = boundaries[1][i] - boundaries[0][i];
                res[i] = (x[i] - boundaries[0][i]) / diff;
            }
            return res;
        }

        /**
         * @param x Normalized objective variables.
         * @return the original objective variables, possibly repaired.
         */
        public double[] repairAndDecode(final double[] x) {
            return boundaries != null && isRepairMode ?
                decode(repair(x)) :
                decode(x);
        }

        /**
         * @param x Normalized objective variables.
         * @return the original objective variables.
         */
        public double[] decode(final double[] x) {
            if (boundaries == null) {
                return x;
            }
            double[] res = new double[x.length];
            for (int i = 0; i < x.length; i++) {
                double diff = boundaries[1][i] - boundaries[0][i];
                res[i] = diff * x[i] + boundaries[0][i];
            }
            return res;
        }

        /**
         * @param point Normalized objective variables.
         * @return the objective value + penalty for violated bounds.
         */
        public double value(final double[] point) {
            double value;
            if (boundaries != null && isRepairMode) {
                double[] repaired = repair(point);
                value = CMAESOptimizer.this
                        .computeObjectiveValue(decode(repaired)) +
                        penalty(point, repaired);
            } else {
                value = CMAESOptimizer.this
                        .computeObjectiveValue(decode(point));
            }
            return isMinimize ? value : -value;
        }

        /**
         * @param x Normalized objective variables.
         * @return {@code true} if in bounds.
         */
        public boolean isFeasible(final double[] x) {
            if (boundaries == null) {
                return true;
            }


            for (int i = 0; i < x.length; i++) {
                if (x[i] < 0) {
                    return false;
                }
                if (x[i] > 1.0) {
                    return false;
                }
            }
            return true;
        }

        /**
         * @param valueRange Adjusts the penalty computation.
         */
        public void setValueRange(double valueRange) {
            this.valueRange = valueRange;
        }

        /**
         * @param x Normalized objective variables.
         * @return the repaired objective variables - all in bounds.
         */
        private double[] repair(final double[] x) {
            double[] repaired = new double[x.length];
            for (int i = 0; i < x.length; i++) {
                if (x[i] < 0) {
                    repaired[i] = 0;
                } else if (x[i] > 1.0) {
                    repaired[i] = 1.0;
                } else {
                    repaired[i] = x[i];
                }
            }
            return repaired;
        }

        /**
         * @param x Normalized objective variables.
         * @param repaired Repaired objective variables.
         * @return Penalty value according to the violation of the bounds.
         */
        private double penalty(final double[] x, final double[] repaired) {
            double penalty = 0;
            for (int i = 0; i < x.length; i++) {
                double diff = Math.abs(x[i] - repaired[i]);
                penalty += diff * valueRange;
            }
            return isMinimize ? penalty : -penalty;
        }
    }

# In this post, we are going to solve a problem of number guessing.
# Lets start with a few definitions.

# A number is defined as a sequence of digits. For example, the number 123 has three digits.

# A guess is a number. The score of a guess is equal to the number of digits of the guess that are correct in position. For example, if you guess 123, then your score is 3.

# A perfect score for a guessing game is when you guess the number correctly in one try.

# The objective of the number guessing game is to have a perfect score.

# In this problem, we will consider a particular number whose digits are in non-descending order. 
# We will call this number the target. 
# For example, the number 621 is a target number, but 521 is not a target number. 
# Note that the target number is not necessarily a single digit number. 

# For the guessing algorithm, we will use the following strategy. Given the set of all possible target numbers, 
# we will initially guess the largest number in this set, and use the score of this guess to find out how close we are to the target number. 
# For example, if we guess the number 621, and get a score of 1, then we know that we have at least one correct digit, but not in its correct position. 
# We will then guess the second largest number of the set. For example, if the second largest number of the set is 531, and the score is 2, 
# then we know that the two digits "3" and "1" are correct, but not in the correct position. 
# Now, the number is a three digit number, and the last digit is "1", 
# which means that we can use the above information to reduce the set of possible target numbers to a set that has a "1" as the last digit. 
# Based on the same strategy, we will continue to guess the largest number in the current set of possible target numbers and use the score to reduce the set of possible target numbers. 
# This will be the process of elimination. We will continue with this strategy until we have a perfect score. 
# Note that this strategy will always give us the perfect score.

# You are given a String target that contains the digits of the target number. 
# Return the number of guesses that are needed in order to have a perfect score.


diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index a26b500d..ff761ca2 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -196,8 +191,7 @@ class InlineObjectLiterals implements CompilerPass {
         if (!val.isObjectLit()) {
           return false;
         }
-
-        // Make sure that the value is not self-refential. IOW,
+        // Make sure that the value is not self-referential. IOW,
         // disallow things like x = {b: x.a}.
         //
         // TODO: Only exclude unorderable self-referential
@@ -229,8 +221,22 @@ class InlineObjectLiterals implements CompilerPass {
             }
           }
         }
-
-
+        // Make sure that none of the references are in a loop.
+        // Splitting object literals in loops is not currently
+        // supported.
+        //
+        // TODO(user): We can actually do this if the loop is not
+        // taken.
+        for (Reference t : refs) {
+          if (t.getParent() == null) {
+            // Scope-creating reference.
+            continue;
+          }
+          Node loop = NodeUtil.getEnclosingLoop(t.getParent());
+          if (loop != null) {
+            return false;
+          }
+        }
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.

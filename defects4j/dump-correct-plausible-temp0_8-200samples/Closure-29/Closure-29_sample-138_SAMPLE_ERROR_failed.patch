diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index a26b500d..a647c6b3 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -196,8 +191,7 @@ class InlineObjectLiterals implements CompilerPass {
         if (!val.isObjectLit()) {
           return false;
         }
-
-        // Make sure that the value is not self-refential. IOW,
+        // Make sure that the value is not self-referential. IOW,
         // disallow things like x = {b: x.a}.
         //
         // TODO: Only exclude unorderable self-referential
@@ -238,7 +228,18 @@ class InlineObjectLiterals implements CompilerPass {
       }
       return ret;
     }
-
+    /**
+     * Determines whether the given node is an assignment expression
+     * (including the var keyword) or is the left hand side of such an
+     * expression.
+     *
+     * @param n The node being checked for assignment expression ness.
+     * @return True if n is an assignment expression or the left hand
+     *     side of one.
+     */
+    private static boolean isVarOrAssignExprLhs(Node n) {
+      return NodeUtil.isName(n) || n.isAssign() && n.getFirstChild().isName();
+    }
     private boolean isVarOrAssignExprLhs(Node n) {
       Node parent = n.getParent();
       return parent.isVar() ||

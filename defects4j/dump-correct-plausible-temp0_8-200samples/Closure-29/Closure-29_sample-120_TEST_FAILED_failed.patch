diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index a26b500d..631e3eb9 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -162,25 +161,20 @@ class InlineObjectLiterals implements CompilerPass {
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
         //
-        if (parent.isGetProp()) {
+        if (parent.isGetProp() && gramps.isCall()
+              && gramps.getFirstChild() == parent) {
           Preconditions.checkState(parent.getFirstChild() == name);
           // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
-            return false;
-          }
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
-          continue;
+          return false;
         }
-
+        // NOTE(nicksantos): This pass's object-splitting algorithm has
+        // a blind spot. It assumes that if a property isn't defined on an
+        // object, then the value is undefined. This is not true, because
+        // Object.prototype can have arbitrary properties on it.
+        //
+        // We short-circuit this problem by bailing out if we see a reference
+        // to a property that isn't defined on the object literal. This
+        // isn't a perfect algorithm, but it should catch most cases.
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;
@@ -196,8 +188,7 @@ class InlineObjectLiterals implements CompilerPass {
         if (!val.isObjectLit()) {
           return false;
         }
-
-        // Make sure that the value is not self-refential. IOW,
+        // Make sure that the value is not self-referential. IOW,
         // disallow things like x = {b: x.a}.
         //
         // TODO: Only exclude unorderable self-referential

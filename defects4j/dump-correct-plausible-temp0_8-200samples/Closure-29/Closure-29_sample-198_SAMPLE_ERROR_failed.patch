diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index a26b500d..3e245af0 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -178,9 +176,39 @@ class InlineObjectLiterals implements CompilerPass {
           // We short-circuit this problem by bailing out if we see a reference
           // to a property that isn't defined on the object literal. This
           // isn't a perfect algorithm, but it should catch most cases.
+          //
+          // Make sure that the value is not self-referential. IOW,
+          // disallow things like x = {b: x.a}.
+          //
+          // TODO: Only exclude unorderable self-referential
+          // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
+          // but x = {a: 1, b: x.a} is.
+          //
+          // Also, ES5 getters/setters aren't handled by this pass.
+          for (Node child = val.getFirstChild(); child != null;
+               child = child.getNext()) {
+            if (child.isGetterDef() ||
+                child.isSetterDef()) {
+              // ES5 get/set not supported.
+              return false;
+            }
+            Node childVal = child.getFirstChild();
+            // Check if childVal is the parent of any of the passed in
+            // references, as that is how self-referential assignments
+            // will happen.
+            for (Reference t : refs) {
+              Node refNode = t.getParent();
+              while (!NodeUtil.isStatementBlock(refNode)) {
+                if (refNode == childVal) {
+                  // There's a self-referential assignment
+                  return false;
+                }
+                refNode = refNode.getParent();
+              }
+            }
+          }
           continue;
         }
-
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;
@@ -196,41 +222,6 @@ class InlineObjectLiterals implements CompilerPass {
         if (!val.isObjectLit()) {
           return false;
         }
-
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
-            return false;
-          }
-
-
-          Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
-          for (Reference t : refs) {
-            Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
-              if (refNode == childVal) {
-                // There's a self-referential assignment
-                return false;
-              }
-              refNode = refNode.getParent();
-            }
-          }
-        }
-
-
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.

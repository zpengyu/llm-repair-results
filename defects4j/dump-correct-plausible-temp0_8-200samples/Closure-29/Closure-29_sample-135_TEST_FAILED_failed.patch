diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index a26b500d..35dc384c 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -178,9 +176,29 @@ class InlineObjectLiterals implements CompilerPass {
           // We short-circuit this problem by bailing out if we see a reference
           // to a property that isn't defined on the object literal. This
           // isn't a perfect algorithm, but it should catch most cases.
-          continue;
+          //
+          // In particular, this should catch cases where someone assigns
+          // to Object.prototype, because it is a common pattern to do so
+          // when adding new functions to an object.
+          //
+          // TODO(nicksantos): We could solve this problem by splitting
+          // Object.prototype into a separate object.
+          Node objectParent = parent.getParent();
+          while (objectParent.isAssign() &&
+                 objectParent.getFirstChild().isGetProp() &&
+                 !objectParent.getFirstChild().isGetProp()) {
+            objectParent = objectParent.getParent();
+          }
+          if (objectParent.isObjectLit()) {
+            Node objectParentName = objectParent.getFirstChild();
+            for (Node c = objectParentName.getFirstChild(); c != null;
+                 c = c.getNext()) {
+              if (c.getString().equals(name.getNext().getString())) {
+                return false;
+              }
+            }
+          }
         }
-
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;
@@ -196,11 +212,10 @@ class InlineObjectLiterals implements CompilerPass {
         if (!val.isObjectLit()) {
           return false;
         }
-
-        // Make sure that the value is not self-refential. IOW,
+        // Make sure that the value is not self-referential. IOW,
         // disallow things like x = {b: x.a}.
         //
-        // TODO: Only exclude unorderable self-referential
+        // TODO(johnlenz): Only exclude unorderable self-referential
         // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
         // but x = {a: 1, b: x.a} is.
         //

diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
index af4270610..c2295e61b 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
@@ -184,8 +184,6 @@ public class CollectionDeserializer
             }
         }
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         // also, often value deserializer is resolved here:
@@ -204,9 +201,15 @@ public class CollectionDeserializer
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
-        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+        CollectionDeserializer collectionDeserializer = withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+        // 28-Nov-2016, tatu: Even if `property` is not "first" one, could still need a contextual
+        //    instance of `valueInstantiator`? Let's assume so for now...
+        if ((_valueInstantiator != null) && (_valueInstantiator.getDelegateCreator() != null)) {
+            Instantiator inst = _valueInstantiator.getDelegateCreator().withConfig(ctxt);
+            return collectionDeserializer.withDelegateCreator(inst);
+        }
+        return collectionDeserializer;
     }
-
     /*
     /**********************************************************
     /* ContainerDeserializerBase API

    public CollectionDeserializer createContextual(DeserializationContext ctxt,
            BeanProperty property) throws JsonMappingException
    {
        // May need to resolve types for delegate-based creators:
        JsonDeserializer<Object> delegateDeser = null;
        if (_valueInstantiator != null) {
            if (_valueInstantiator.canCreateUsingDelegate()) {
                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                if (delegateType == null) {
                    throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                            +": value instantiator ("+_valueInstantiator.getClass().getName()
                            +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                }
                delegateDeser = findDeserializer(ctxt, delegateType, property);
            }
        }
        // [databind#1043]: allow per-property allow-wrapping of single overrides:
        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
        //   comes down to "List vs Collection" I suppose... for now, pass Collection
        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
        // also, often value deserializer is resolved here:
        JsonDeserializer<?> valueDeser = _valueDeserializer;
        // May have a content converter
        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
        JavaType vt = _collectionType.getContentType();
        // 05-Dec-2015, tatu: This is actually wrong: we are NOT allowed to expose
        //    private types of the container, so should try to use
        //    TypeDeserializer.refineDeserializationType() instead
        //final JavaType vt = _collectionType.getContentType();
        //if (valueDeser == null) {
        //    valueDeser = ctxt.findContextualValueDeserializer(vt, property);
        //} else { // if directly assigned, probably not yet contextual, so:
        //    valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
        //}
        if (property != null) {
            // IMPORTANT: do NOT pass actual property, to avoid exposing its type!
            vt = TypeDeserializer.refineDeserializationType(ctxt, null, vt);
        }
        if (valueDeser != null) {
            // also: minor optimization, to avoid double-wrapping
            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
        } else {
            valueDeser = ctxt.findContextualValueDeserializer(vt, property);
        }
        // and finally, type deserializer needs context as well
        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
        if (valueTypeDeser != null) {
            valueTypeDeser = valueTypeDeser.forProperty(property);
        }
        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
    }
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
index d4417f6ad..674817262 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
@@ -315,6 +315,16 @@ public class StdKeyDeserializer extends KeyDeserializer
                 // Ugh... should not have to give parser which may or may not be correct one...
                 Object result = _delegate.deserialize(ctxt.getParser(), ctxt);
                 if (result != null) {
+                    if (ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)
+                            && result.getClass().isEnum()) {
+                        @SuppressWarnings("unchecked")
+                        Class<Enum<?>> enumClass = (Class<Enum<?>>) result.getClass();
+                        if (!ctxt.getConfig().getConfiguredType(enumClass).hasValueDeserializer()) {
+                            if (ctxt.getConfig().getAnnotationIntrospector().findEnumValue(result.getClass().getField(result.toString())) == null) {
+                                return null;
+                            }
+                        }
+                    }
                     return result;
                 }
                 return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation");

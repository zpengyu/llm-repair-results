diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
index d4417f6ad..ac6eb166e 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
@@ -311,18 +311,21 @@ public class StdKeyDeserializer extends KeyDeserializer
             if (key == null) { // is this even legal call?
                 return null;
             }
-            try {
-                // Ugh... should not have to give parser which may or may not be correct one...
-                Object result = _delegate.deserialize(ctxt.getParser(), ctxt);
-                if (result != null) {
-                    return result;
+            if (_delegateDeserializer != null) {
+                try {
+                    // Ugh... should not have to give parser which may or may not be correct one...
+                    Object result = _delegateDeserializer.deserialize(ctxt.getParser(), ctxt);
+                    if (result != null) {
+                        return result;
+                    }
+                    return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation");
+                } catch (Exception re) {
+                    return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation: %s", re.getMessage());
                 }
-                return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation");
-            } catch (Exception re) {
-                return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation: %s", re.getMessage());
             }
+            // Nope: need to call full method
+            return _keyDeserializer.deserializeKey(key, ctxt);
         }
-
         public Class<?> getKeyClass() { return _keyClass; }
     }
      

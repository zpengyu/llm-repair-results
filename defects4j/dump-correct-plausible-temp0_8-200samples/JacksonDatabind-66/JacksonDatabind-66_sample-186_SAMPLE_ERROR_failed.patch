diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
index d4417f6ad..f16ad63f8 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
@@ -308,16 +308,17 @@ public class StdKeyDeserializer extends KeyDeserializer
         public final Object deserializeKey(String key, DeserializationContext ctxt)
             throws IOException
         {
-            if (key == null) { // is this even legal call?
+            if (key == null) {
                 return null;
             }
             try {
-                // Ugh... should not have to give parser which may or may not be correct one...
-                Object result = _delegate.deserialize(ctxt.getParser(), ctxt);
-                if (result != null) {
-                    return result;
+                // 25-Apr-2017, tatu: [databind#1586] May need to use raw type here since
+                //    scalar deserializers may not accept generic types
+                JavaType t = _keyClass;
+                if (t == null) {
+                    t = ctxt.constructType(Object.class);
                 }
-                return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation");
+                return ctxt.findKeyDeserializer(_keyClass, _property).deserializeKey(key, ctxt);
             } catch (Exception re) {
                 return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation: %s", re.getMessage());
             }

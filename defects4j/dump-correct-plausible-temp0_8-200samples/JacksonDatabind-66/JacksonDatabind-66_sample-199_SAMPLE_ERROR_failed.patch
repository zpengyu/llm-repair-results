diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
index d4417f6ad..37c72a1e7 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
@@ -311,18 +311,18 @@ public class StdKeyDeserializer extends KeyDeserializer
             if (key == null) { // is this even legal call?
                 return null;
             }
-            try {
-                // Ugh... should not have to give parser which may or may not be correct one...
-                Object result = _delegate.deserialize(ctxt.getParser(), ctxt);
-                if (result != null) {
-                    return result;
-                }
-                return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation");
-            } catch (Exception re) {
-                return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation: %s", re.getMessage());
+            // Ugh... should not have to give parser which may or may not be correct one...
+            TokenBuffer tb = new TokenBuffer(ctxt, false);
+            tb.writeString(key);
+            JsonParser bufferParser = tb.asParser();
+            bufferParser.nextToken();
+            Object result = _delegate.deserialize(bufferParser, ctxt);
+            bufferParser.close();
+            if (result != null) {
+                return result;
             }
+            return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation");
         }
-
         public Class<?> getKeyClass() { return _keyClass; }
     }
      

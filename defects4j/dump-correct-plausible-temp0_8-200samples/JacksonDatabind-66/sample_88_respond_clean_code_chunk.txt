        public final Object deserializeKey(String key, DeserializationContext ctxt)
            throws IOException
        {
            if (key == null) { // is this even legal call?
                return null;
            }
            try {
                if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
                    JsonParser jp = ctxt.getParser();
                    if (jp.hasToken(JsonToken.START_ARRAY) && jp.nextToken() != JsonToken.END_ARRAY) {
                        final JsonDeserializer<Object> deser = _delegate;
                        final Object value = deser.deserialize(jp, ctxt);
                        if (jp.nextToken() != JsonToken.END_ARRAY) {
                            throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY,
                                    "Attempted to unwrap single value array for single '" + _keyClass.getName()
                                            + "' value but there was more than a single value in the array");
                        }
                        return value;
                    }
                }
                // Ugh... should not have to give parser which may or may not be correct one...
                Object result = _delegate.deserialize(ctxt.getParser(), ctxt);
                if (result != null) {
                    return result;
                }
                return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation");
            } catch (Exception re) {
                return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation: %s", re.getMessage());
            }
        }
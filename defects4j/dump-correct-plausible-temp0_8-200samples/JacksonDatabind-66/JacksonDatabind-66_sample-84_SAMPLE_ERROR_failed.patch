diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
index d4417f6ad..6c7599140 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
@@ -311,6 +311,15 @@ public class StdKeyDeserializer extends KeyDeserializer
             if (key == null) { // is this even legal call?
                 return null;
             }
+            if (_valueInstantiator != null && _valueInstantiator.canCreateFromString()) {
+                // [Issue#162]: allow use of `fromString` if available
+                // [databind#1845]: but do consider if there's annotation-based serializer
+                JsonDeserializer<?> deser = _findCachedDeserializer(ctxt);
+                if (deser != null) {
+                    return deser.deserialize(key, ctxt);
+                }
+                return _valueInstantiator.createFromString(ctxt, key);
+            }
             try {
                 // Ugh... should not have to give parser which may or may not be correct one...
                 Object result = _delegate.deserialize(ctxt.getParser(), ctxt);

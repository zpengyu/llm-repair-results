diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
index d4417f6ad..1213e6b85 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
@@ -308,21 +308,16 @@ public class StdKeyDeserializer extends KeyDeserializer
         public final Object deserializeKey(String key, DeserializationContext ctxt)
             throws IOException
         {
-            if (key == null) { // is this even legal call?
-                return null;
+            // Ugh... should not have to give parser which may or may not be correct one...
+            if (_delegate instanceof ContextualKeyDeserializer) {
+                return ((ContextualKeyDeserializer) _delegate).deserializeKey(key, ctxt);
             }
-            try {
-                // Ugh... should not have to give parser which may or may not be correct one...
-                Object result = _delegate.deserialize(ctxt.getParser(), ctxt);
-                if (result != null) {
-                    return result;
-                }
-                return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation");
-            } catch (Exception re) {
-                return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation: %s", re.getMessage());
+            Object result = _delegate.deserialize(ctxt.getParser(), ctxt);
+            if (result != null) {
+                return result;
             }
+            return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation");
         }
-
         public Class<?> getKeyClass() { return _keyClass; }
     }
      

    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
        long    result = 0;
        int     end = offset + length;
        int     start = offset;

        if (length < 2){
            throw new IllegalArgumentException("Length "+length+" must be at least 2");
        }

        if (buffer[start] == 0) {
            return 0L;
        }

        // Skip leading spaces
        while (start < end){
            if (buffer[start] == ' '){
                start++;
            } else {
                break;
            }
        }

        // Must have trailing NUL or space
        byte trailer;
        trailer = buffer[end-1];
        if (trailer == 0 || trailer == ' '){
            end--;
        } else {
            throw new IllegalArgumentException(
                    exceptionMessage(buffer, offset, length, end-1, trailer));
        }
        // May have additional NULs or spaces
        trailer = buffer[end - 1];
        if (trailer == 0 || trailer == ' '){
            end--;
        }

        for ( ;start < end; start++) {
            final byte currentByte = buffer[start];
            // CheckStyle:MagicNumber OFF
            if (currentByte < '0' || currentByte > '7'){
                throw new IllegalArgumentException(
                        exceptionMessage(buffer, offset, length, start, currentByte));
            }
            if (result >= 0x20000000000000L) { // [Java8] Magic number
                // CheckStyle:MagicNumber ON
                // we are going to multiply by 8 and add another digit - overflow is only possible if top 3 bits are 1
                if (result >= 0x40000000000000L) {
                    // top 3 bits are 1 - this is definitely going to overflow now or later
                    throw new NumberFormatException();
                }
                // top 3 bits are 0 - this might be ok
                if (currentByte > '3') { // [Java8] Magic number
                    // digits 8 and 9 are definitely going to cause overflow
                    throw new NumberFormatException();
                }
            }
            result = (result << 3) + (currentByte - '0'); // convert from ASCII
        }

        return result;
    }



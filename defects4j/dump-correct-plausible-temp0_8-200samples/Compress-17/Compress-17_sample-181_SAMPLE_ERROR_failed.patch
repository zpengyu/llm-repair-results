diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
index 34ecc5ac..48641b42 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
@@ -103,53 +103,40 @@ public class TarUtils {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
-
-        if (length < 2){
+        if (length < 2) {
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
-
-        if (buffer[start] == 0) {
-            return 0L;
+        if (buffer[start] == ' ') {
+            throw new IllegalArgumentException("Leading spaces are not allowed");
         }
-
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
-            } else {
+        while (start < end) {
+            final byte currentByte = buffer[start];
+            if (currentByte == ' '){
                 break;
             }
+            if (currentByte < '0' || currentByte > '7'){
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, start, currentByte));
+            }
+            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+            start++;
         }
-
         // Must have trailing NUL or space
         byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
+        if (start == end) {
             throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                    exceptionMessage(buffer, offset, length, start-1, trailer));
         }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+        trailer = buffer[end-1];
+        if (trailer == ' ') {
+            trailer = 0;
         }
-
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        if (trailer != 0) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, end-1, trailer));
         }
-
         return result;
     }
-
     /** 
      * Compute the value contained in a byte buffer.  If the most
      * significant bit of the first byte in the buffer is set, this

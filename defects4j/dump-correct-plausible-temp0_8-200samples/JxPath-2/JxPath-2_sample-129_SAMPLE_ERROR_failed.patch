diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java b/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java
index 927f617..149b742 100644
--- a/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java
+++ b/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java
@@ -36,15 +36,8 @@ import java.util.Locale;
  * @author Dmitri Plotnikov
  * @version $Revision$ $Date$
  */
-public abstract class Expression {
-
-    protected static final Double ZERO = new Double(0);
-    protected static final Double ONE = new Double(1);
-    protected static final Double NOT_A_NUMBER = new Double(Double.NaN);
-
-    private boolean contextDependencyKnown = false;
+abstract class Expression {
     private boolean contextDependent;
-
     /**
      * Returns true if this expression should be re-evaluated
      * each time the current position in the context changes.
@@ -56,19 +49,8 @@ public abstract class Expression {
         }
         return contextDependent;
     }
-
-    /**
-     * Implemented by subclasses and result is cached by isContextDependent()
-     */
     public abstract boolean computeContextDependent();
-
-    /**
-     * Evaluates the expression. If the result is a node set, returns
-     * the first element of the node set.
-     */
     public abstract Object computeValue(EvalContext context);
-    public abstract Object compute(EvalContext context);
-
     public Iterator iterate(EvalContext context) {
         Object result = compute(context);
         if (result instanceof EvalContext) {

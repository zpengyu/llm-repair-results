diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java b/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java
index 927f617..a584a9b 100644
--- a/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java
+++ b/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java
@@ -36,8 +36,7 @@ import java.util.Locale;
  * @author Dmitri Plotnikov
  * @version $Revision$ $Date$
  */
-public abstract class Expression {
-
+public class Expression {
     protected static final Double ZERO = new Double(0);
     protected static final Double ONE = new Double(1);
     protected static final Double NOT_A_NUMBER = new Double(Double.NaN);
@@ -60,15 +56,19 @@ public abstract class Expression {
     /**
      * Implemented by subclasses and result is cached by isContextDependent()
      */
-    public abstract boolean computeContextDependent();
-
+    public boolean computeContextDependent() {
+        return true;
+    }
     /**
      * Evaluates the expression. If the result is a node set, returns
      * the first element of the node set.
      */
-    public abstract Object computeValue(EvalContext context);
-    public abstract Object compute(EvalContext context);
-
+    public Object computeValue(EvalContext context) {
+        return null;
+    }
+    public Object compute(EvalContext context) {
+        return null;
+    }
     public Iterator iterate(EvalContext context) {
         Object result = compute(context);
         if (result instanceof EvalContext) {

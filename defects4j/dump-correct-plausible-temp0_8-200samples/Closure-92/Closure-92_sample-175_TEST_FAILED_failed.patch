diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
index d1d12a3c..30b54286 100644
--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
@@ -781,25 +779,21 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
-        if (firstModule == minimumModule) {
-          firstNode.getParent().addChildBefore(replacementNode, firstNode);
+        // In this case, the name was implicitly provided by two independent
+        // modules. We need to move this code up to a common module.
+        int indexOfDot = namespace.indexOf('.');
+        if (indexOfDot == -1) {
+          // Any old place is fine.
+          compiler.getNodeForCodeInsertion(minimumModule)
+              .addChildToBack(replacementNode);
         } else {
-          // In this case, the name was implicitly provided by two independent
-          // modules. We need to move this code up to a common module.
-          int indexOfDot = namespace.indexOf('.');
-          if (indexOfDot == -1) {
-            // Any old place is fine.
-            compiler.getNodeForCodeInsertion(minimumModule)
-                .addChildToBack(replacementNode);
-          } else {
-            // Add it after the parent namespace.
-            ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
-            Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
-            parentName.replacementNode.getParent().addChildAfter(
-                replacementNode, parentName.replacementNode);
-          }
+          // Add it after the parent namespace.
+          ProvidedName parentName =
+              providedNames.get(namespace.substring(0, indexOfDot));
+          Preconditions.checkNotNull(parentName);
+          Preconditions.checkNotNull(parentName.replacementNode);
+          parentName.replacementNode.getParent().addChildAfter(
+              replacementNode, parentName.replacementNode);
         }
         if (explicitNode != null) {
           explicitNode.detachFromParent();

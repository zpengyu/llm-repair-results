diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
index d1d12a3c..2b49c925 100644
--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
@@ -786,20 +784,11 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback
         } else {
           // In this case, the name was implicitly provided by two independent
           // modules. We need to move this code up to a common module.
-          int indexOfDot = namespace.indexOf('.');
-          if (indexOfDot == -1) {
-            // Any old place is fine.
-            compiler.getNodeForCodeInsertion(minimumModule)
-                .addChildToBack(replacementNode);
-          } else {
-            // Add it after the parent namespace.
-            ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
-            Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
-            parentName.replacementNode.getParent().addChildAfter(
-                replacementNode, parentName.replacementNode);
-          }
+          Node placeHolderNode =
+              new Node(Token.EXPR_RESULT, IR.number(0).srcref(firstNode));
+          placeHolderNode.copyInformationFrom(firstNode);
+          firstNode.getParent().addChildBefore(placeHolderNode, firstNode);
+          compiler.reportCodeChange();
         }
         if (explicitNode != null) {
           explicitNode.detachFromParent();

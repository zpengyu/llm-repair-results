diff --git a/src/main/java/org/jsoup/helper/HttpConnection.java b/src/main/java/org/jsoup/helper/HttpConnection.java
index a941e48..a93902d 100644
--- a/src/main/java/org/jsoup/helper/HttpConnection.java
+++ b/src/main/java/org/jsoup/helper/HttpConnection.java
@@ -395,44 +395,40 @@ public class HttpConnection implements Connection {
             }
         }
 
-        private static boolean looksLikeUtf8(byte[] input) {
-            int i = 0;
-            // BOM:
-            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
-                i = 3;
-            }
-
-            int end;
-            for (int j = input.length; i < j; ++i) {
-                int o = input[i];
-                if ((o & 0x80) == 0) {
-                    continue; // ASCII
-                }
-
-                // UTF-8 leading:
-                if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
-                } else {
-                    return false;
-                }
-
-
-                while (i < end) {
-                    i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
-                        return false;
-                    }
-                }
+private static boolean looksLikeUtf8(byte[] input) {
+    int i = 0;
+    // BOM:
+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
+            && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+        i = 3;
+    }
+    int end;
+    for (int j = input.length; i < j; ++i) {
+        int o = input[i];
+        if ((o & 0x80) == 0) {
+            continue; // ASCII
+        }
+        // UTF-8 leading:
+        if ((o & 0xE0) == 0xC0) {
+            end = i + 1;
+        } else if ((o & 0xF0) == 0xE0) {
+            end = i + 2;
+        } else if ((o & 0xF8) == 0xF0) {
+            end = i + 3;
+        } else {
+            return false;
+        }
+        while (i < end) {
+            i++;
+            if(i >= input.length) return false;
+            o = input[i];
+            if ((o & 0xC0) != 0x80) {
+                return false;
             }
-            return true;
         }
-
+    }
+    return true;
+}
         public T header(String name, String value) {
             Validate.notEmpty(name, "Header name must not be empty");
             removeHeader(name); // ensures we don't get an "accept-encoding" and a "Accept-Encoding"

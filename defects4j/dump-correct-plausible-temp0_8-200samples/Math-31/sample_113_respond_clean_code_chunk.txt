public double evaluate(double x, double epsilon, int maxIterations) {
    double hPrev = getA(0, x);
    if (Precision.equals(hPrev, 0.0, 1e-50)) {
        hPrev = 1e-50;
    }
    int n = 1;
    double dPrev = 0.0;
    double p0 = 1.0;
    double q1 = 1.0;
    double cPrev = hPrev;
    double hN = hPrev;
    while (n < maxIterations) {
        double a = getA(n, x);
        double b = getB(n, x);
        double cN = a * hPrev + b * p0;
        double q2 = a * q1 + b * dPrev;
        double deltaN = cN / q2 / cPrev;
        hN = cPrev * deltaN;
        if (FastMath.abs(deltaN - 1.0) < epsilon) {
            break;
        }
        dPrev = q1;
        cPrev = cN / q2;
        p0 = hPrev;
        hPrev = cN;
        q1 = q2;
        n++;
    }
    if (n >= maxIterations) {
        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                            maxIterations, x);
    }
    return hN;
}
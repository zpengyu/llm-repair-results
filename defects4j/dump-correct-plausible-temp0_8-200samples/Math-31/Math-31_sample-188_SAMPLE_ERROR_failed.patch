diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java
index ff2906836..c4e04ab44 100644
--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java
+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java
@@ -139,57 +136,55 @@ public abstract class ContinuedFraction {
         while (n < maxIterations) {
             final double a = getA(n, x);
             final double b = getB(n, x);
-
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-                double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
-                final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
-                }
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
+            final double scaleFactor = FastMath.max(a, b);
+            if (scaleFactor < Double.MAX_VALUE && scaleFactor > 0) {
+                double cN = a * hPrev + b * p0;
+                double q2 = a * q1 + b * dPrev;
+                if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
+                    double lastScaleFactor = 1d;
+                    final int maxPower = 5;
+                    if (scaleFactor <= 0) {  // Can't scale
+                        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
                     }
-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
-                        break;
+                    for (int i = 0; i < maxPower; i++) {
+                        lastScaleFactor = scaleFactor;
+                        scaleFactor *= scaleFactor;
+                        if (a != 0.0 && a > b) {
+                            cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
+                            q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
+                        } else if (b != 0) {
+                            cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
+                            q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
+                        }
+                        if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
+                            break;
+                        }
                     }
                 }
-            }
-
-            final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
-
-            if (Double.isInfinite(hN)) {
+                final double deltaN = cN / q2 / cPrev;
+                hN = cPrev * deltaN;
+                if (Double.isInfinite(hN)) {
+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
+                                                   x);
+                }
+                if (Double.isNaN(hN)) {
+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
+                                                   x);
+                }
+                if (FastMath.abs(deltaN - 1.0) < epsilon) {
+                    break;
+                }
+                dPrev = q1;
+                cPrev = cN / q2;
+                p0 = hPrev;
+                hPrev = cN;
+                q1 = q2;
+                n++;
+            } else {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                x);
             }
-            if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
-            }
-
-            if (FastMath.abs(deltaN - 1.0) < epsilon) {
-                break;
-            }
-
-            dPrev = q1;
-            cPrev = cN / q2;
-            p0 = hPrev;
-            hPrev = cN;
-            q1 = q2;
-            n++;
         }
-
         if (n >= maxIterations) {
             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                                 maxIterations, x);

    public double evaluate(double x, double epsilon, int maxIterations) {
        final double small = 1e-50;
        double hPrev = getA(0, x);
        // use the value of small as epsilon criteria for zero checks
        if (Precision.equals(hPrev, 0.0, small)) {
            hPrev = small;
        }
        int n = 1;
        double dPrev = 0.0;
        double p0 = 1.0;
        double q1 = 1.0;
        double cPrev = hPrev;
        double hN = hPrev;
        while (n < maxIterations) {
            final double a = getA(n, x);
            final double b = getB(n, x);
            double cN = a * hPrev + b * p0;
            double q2 = a * q1 + b * dPrev;
            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
                final int maxPower = 5;
                final double scale = FastMath.max(a,b);
                if (scale <= 0) {  // Can't scale
                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
                }
                double hPrev2 = hPrev;
                double p0_2 = p0;
                double q1_2 = q1;
                double cPrev2 = cPrev;
                double hN2 = hN;
                double lastScaleFactor = 1d;
                for (int i = 0; i < maxPower; i++) {
                    lastScaleFactor = lastScaleFactor * scale;
                    hPrev2 = hPrev2 / lastScaleFactor;
                    p0_2 = p0_2 / lastScaleFactor;
                    q1_2 = q1_2 / lastScaleFactor;
                    cPrev2 = cPrev2 / lastScaleFactor;
                    hN2 = hN2 / lastScaleFactor;
                    if (a != 0.0 && a > b) {
                        cN = hPrev2 + (b * p0_2);
                        q2 = q1_2 + (b * dPrev);
                    } else if (b != 0) {
                        cN = (a * hPrev2) + p0_2;
                        q2 = (a * q1_2) + dPrev;
                    }
                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                        break;
                    }
                }
                hPrev = hPrev2;
                p0 = p0_2;
                q1 = q1_2;
                cPrev = cPrev2;
                hN = hN2;
            }
            final double deltaN = cN / q2 / cPrev;
            hN = cPrev * deltaN;
            if (Double.isInfinite(hN)) {
                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                               x);
            }
            if (Double.isNaN(hN)) {
                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                               x);
            }
            if (FastMath.abs(deltaN - 1.0) < epsilon) {
                break;
            }
            dPrev = q1;
            cPrev = cN / q2;
            p0 = hPrev;
            hPrev = cN;
            q1 = q2;
            n++;
        }
        if (n >= maxIterations) {
            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                                maxIterations, x);
        }
        return hN;
    }
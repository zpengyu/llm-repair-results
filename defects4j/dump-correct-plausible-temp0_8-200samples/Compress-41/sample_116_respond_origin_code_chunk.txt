    public ZipArchiveEntry getNextZipEntry() throws IOException {
        if (closed) {
            return null;
        }

        if (current != null) {
            closeEntry();
        }

        if (nextEntry != null) {
            current = nextEntry;
            nextEntry = null;
            return current.entry;
        }

        final long off = getFilePointer();

        //EOFException is thrown if no more entries in the Zip archive
        try {
            readFully(LFH_BUF);
        } catch (final EOFException e) {
            return null;
        }

        final ZipLong sig = new ZipLong(LFH_BUF);
        if (sig.equals(ZipLong.CFH_SIG)) {
            hitCentralDirectory = true;
            skipRemainderOfArchive();
        }

        if (!sig.equals(ZipLong.LFH_SIG)) {
            seek(off);
            final ZipArchiveEntry entry = getNextJarEntry();
            if (entry != null) {
                current = new CurrentJarEntry(entry);
            }
            return entry;
        }

        int versionMadeBy = ZipShort.getValue(LFH_BUF, WORD);
        final int platform = versionMadeBy >> ZipFile.BYTE_SHIFT;
        versionMadeBy &= ZipFile.NIBLET_MASK;

        final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(LFH_BUF, WORD + SHORT);
        boolean hasUTF8Flag = gpFlag.usesUTF8ForNames();
        final boolean useDataDescriptor = gpFlag.usesDataDescriptor();

        final int method = ZipShort.getValue(LFH_BUF, WORD + SHORT + SHORT);
        final long time = ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF, WORD + SHORT + SHORT + SHORT));

        final ZipEncoding entryEncoding = hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;

        final long crc = ZipLong.getValue(LFH_BUF, WORD + SHORT + SHORT + SHORT + WORD);
        final long csize = ZipLong.getValue(LFH_BUF, WORD + SHORT + SHORT + SHORT + WORD + WORD);
        final long size = ZipLong.getValue(LFH_BUF, WORD + SHORT + SHORT + SHORT + WORD + WORD + WORD);

        final int fileNameLen = ZipShort.getValue(LFH_BUF, WORD + SHORT + SHORT + SHORT + WORD + WORD + WORD + WORD);
        final int extraLen = ZipShort.getValue(LFH_BUF, WORD + SHORT + SHORT + SHORT + WORD + WORD + WORD + WORD + SHORT);

        byte[] fileName = new byte[fileNameLen];
        readFully(fileName);

        // extra fields - allocate enough room to hold extra data
        byte[] extraData = new byte[extraLen];
        readFully(extraData);

        if (fileNameLen > 0) {
            try {
                fileName = entryEncoding.decode(fileName);
            } catch (final IOException e) {
                if (!hasUTF8Flag && fallbackToUTF8) {
                    hasUTF8Flag = true;
                    final ZipEncoding utf8 = ZipEncodingHelper.UTF8_ZIP_ENCODING;
                    try {
                        fileName = utf8.decode(fileName);
                    } catch (final IOException ex) {
                        throw new ZipException("Failed to decode name: " + Arrays.toString(fileName), e);
                    }
                    entryEncoding = utf8;
                } else {
                    throw new ZipException("Failed to decode name: " + Arrays.toString(fileName), e);
                }
            }
        }

        ZipArchiveEntry entry = createZipArchiveEntry(fileName);
        entry.setMethod(method);
        entry.setTime(time);
        entry.setSize(size);
        entry.setCrc(crc);
        entry.setCompressedSize(csize);
        entry.setInternalAttributes(platform, versionMadeBy);
        entry.setExtra(extraData);
        entry.setGeneralPurposeBit(gpFlag);

        // The encoding is already known - so don't try to guess
        // otherwise we may get it wrong!
        entry.setPlatform(platform);

        if (!hasUTF8Flag && useUnicodeExtraFields) {
            final NameAndComment nc = getNameAndCommentFromExtraFields(extraData, fileName, null);
            fileName = nc.name;
            entry.setInternalComment(nc.comment);
        }

        entry.setName(fileName, fileName);

        if (useDataDescriptor) {
            readFully(LFH_BUF);
            // TODO verify signature
            // signature = ZipLong.getValue(WORD + SHORT + SHORT + SHORT + WORD + WORD + WORD);
            final ZipLong dataSize = new ZipLong(LFH_BUF, WORD);
            entry.setCrc(ZipLong.getValue(LFH_BUF, WORD + WORD));
            entry.setCompressedSize(ZipLong.getValue(LFH_BUF, WORD + WORD + WORD));
            entry.setSize(ZipLong.getValue(LFH_BUF, WORD + WORD + WORD + WORD));
            skipBytes(dataSize.getValue());
        }

        entry.setStreamContiguous(true);
        current = new CurrentEntry(entry, method, hasUTF8Flag);

        entriesRead++;
        return entry;
    }


diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
index 5d4c0a82..1d4d5255 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
@@ -284,14 +273,18 @@ public ZipArchiveEntry getNextZipEntry() throws IOException {
         } else {
             off += 3 * WORD;
         }
-
         final int fileNameLen = ZipShort.getValue(LFH_BUF, off);
-
         off += SHORT;
-
         final int extraLen = ZipShort.getValue(LFH_BUF, off);
         off += SHORT;
-
+        final int commentLen = ZipShort.getValue(LFH_BUF, off);
+        off += SHORT;
+        off += SHORT; // diskNumber
+        off += SHORT; // internalAttributes
+        off += WORD; // externalAttributes
+        final long localHeaderOffset = ZipLong.getValue(LFH_BUF, off);
+        current.entry.setLocalHeaderOffset(localHeaderOffset);
+        off += WORD;
         final byte[] fileName = new byte[fileNameLen];
         readFully(fileName);
         current.entry.setName(entryEncoding.decode(fileName), fileName);
@@ -299,13 +291,13 @@ public ZipArchiveEntry getNextZipEntry() throws IOException {
         final byte[] extraData = new byte[extraLen];
         readFully(extraData);
         current.entry.setExtra(extraData);
-
+        final byte[] comment = new byte[commentLen];
+        readFully(comment);
+        current.entry.setComment(entryEncoding.decode(comment));
         if (!hasUTF8Flag && useUnicodeExtraFields) {
-            ZipUtil.setNameAndCommentFromExtraFields(current.entry, fileName, null);
+            ZipUtil.setNameAndCommentFromExtraFields(current.entry, fileName, comment);
         }
-
         processZip64Extra(size, cSize);
-
         if (current.entry.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN) {
             if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()) {
                 current.in = new UnshrinkingInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));

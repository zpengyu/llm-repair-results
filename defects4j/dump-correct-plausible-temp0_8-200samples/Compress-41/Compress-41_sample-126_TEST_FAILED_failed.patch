diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
index 5d4c0a82..2cefe7ef 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
@@ -284,22 +273,22 @@ public ZipArchiveEntry getNextZipEntry() throws IOException {
         } else {
             off += 3 * WORD;
         }
-
-        final int fileNameLen = ZipShort.getValue(LFH_BUF, off);
-
+        int fileNameLen = ZipShort.getValue(LFH_BUF, off);
+        if (fileNameLen < 0) {
+            throw new IOException("file name length < 0; corrupt zip file");
+        }
         off += SHORT;
-
-        final int extraLen = ZipShort.getValue(LFH_BUF, off);
+        int extraLen = ZipShort.getValue(LFH_BUF, off);
+        if (extraLen < 0) {
+            throw new IOException("extra length < 0; corrupt zip file");
+        }
         off += SHORT;
-
-        final byte[] fileName = new byte[fileNameLen];
+        byte[] fileName = new byte[fileNameLen];
         readFully(fileName);
         current.entry.setName(entryEncoding.decode(fileName), fileName);
-
-        final byte[] extraData = new byte[extraLen];
+        byte[] extraData = new byte[extraLen];
         readFully(extraData);
         current.entry.setExtra(extraData);
-
         if (!hasUTF8Flag && useUnicodeExtraFields) {
             ZipUtil.setNameAndCommentFromExtraFields(current.entry, fileName, null);
         }
@@ -318,7 +305,14 @@ public ZipArchiveEntry getNextZipEntry() throws IOException {
                 current.in = new BZip2CompressorInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));
             }
         }
-        
+        if (current.entry.getMethod() == ZipMethod.STORED.getCode()) {
+            if (current.entry.getSize() != ArchiveEntry.SIZE_UNKNOWN
+                && current.entry.getSize() != current.entry.getCompressedSize()) {
+                throw new IOException("stored entry has wrong size: "
+                                      + current.entry.getSize() + " != "
+                                      + current.entry.getCompressedSize());
+            }
+        }
         entriesRead++;
         return current.entry;
     }

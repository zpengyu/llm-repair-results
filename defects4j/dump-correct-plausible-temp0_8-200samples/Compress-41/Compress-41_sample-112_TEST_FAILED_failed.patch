diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
index 5d4c0a82..5f7f4b6f 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
@@ -225,22 +225,21 @@ public ZipArchiveEntry getNextZipEntry() throws IOException {
             closeEntry();
             firstEntry = false;
         }
-
+        byte[] lfhBuf = firstEntry ? LFH_BUF : new byte[WORD];
         try {
             if (firstEntry) {
                 // split archives have a special signature before the
                 // first local file header - look for it and fail with
                 // the appropriate error message if this is a split
                 // archive.
-                readFirstLocalFileHeader(LFH_BUF);
+                readFirstLocalFileHeader(lfhBuf);
             } else {
-                readFully(LFH_BUF);
+                readFully(lfhBuf);
             }
         } catch (final EOFException e) {
             return null;
         }
-
-        final ZipLong sig = new ZipLong(LFH_BUF);
+        final ZipLong sig = new ZipLong(lfhBuf);
         if (sig.equals(ZipLong.CFH_SIG) || sig.equals(ZipLong.AED_SIG)) {
             hitCentralDirectory = true;
             skipRemainderOfArchive();
@@ -248,58 +247,43 @@ public ZipArchiveEntry getNextZipEntry() throws IOException {
         if (!sig.equals(ZipLong.LFH_SIG)) {
             return null;
         }
-
         int off = WORD;
         current = new CurrentEntry();
-
-        final int versionMadeBy = ZipShort.getValue(LFH_BUF, off);
+        final int versionMadeBy = ZipShort.getValue(lfhBuf, off);
         off += SHORT;
         current.entry.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK);
-
-        final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(LFH_BUF, off);
+        final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(lfhBuf, off);
         final boolean hasUTF8Flag = gpFlag.usesUTF8ForNames();
         final ZipEncoding entryEncoding = hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;
         current.hasDataDescriptor = gpFlag.usesDataDescriptor();
         current.entry.setGeneralPurposeBit(gpFlag);
-
         off += SHORT;
-
-        current.entry.setMethod(ZipShort.getValue(LFH_BUF, off));
+        current.entry.setMethod(ZipShort.getValue(lfhBuf, off));
         off += SHORT;
-
-        final long time = ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF, off));
+        final long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfhBuf, off));
         current.entry.setTime(time);
         off += WORD;
-
         ZipLong size = null, cSize = null;
         if (!current.hasDataDescriptor) {
-            current.entry.setCrc(ZipLong.getValue(LFH_BUF, off));
+            current.entry.setCrc(ZipLong.getValue(lfhBuf, off));
             off += WORD;
-
-            cSize = new ZipLong(LFH_BUF, off);
+            cSize = new ZipLong(lfhBuf, off);
             off += WORD;
-
-            size = new ZipLong(LFH_BUF, off);
+            size = new ZipLong(lfhBuf, off);
             off += WORD;
         } else {
             off += 3 * WORD;
         }
-
-        final int fileNameLen = ZipShort.getValue(LFH_BUF, off);
-
+        final int fileNameLen = ZipShort.getValue(lfhBuf, off);
         off += SHORT;
-
-        final int extraLen = ZipShort.getValue(LFH_BUF, off);
+        final int extraLen = ZipShort.getValue(lfhBuf, off);
         off += SHORT;
-
-        final byte[] fileName = new byte[fileNameLen];
+        byte[] fileName = new byte[fileNameLen];
         readFully(fileName);
         current.entry.setName(entryEncoding.decode(fileName), fileName);
-
-        final byte[] extraData = new byte[extraLen];
+        byte[] extraData = new byte[extraLen];
         readFully(extraData);
         current.entry.setExtra(extraData);
-
         if (!hasUTF8Flag && useUnicodeExtraFields) {
             ZipUtil.setNameAndCommentFromExtraFields(current.entry, fileName, null);
         }

diff --git a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java
index a5bb202..fee08d2 100644
--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java
+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java
@@ -84,57 +84,57 @@ public class DOMNodePointer extends NodePointer {
         return testNode(node, test);
     }
 
-    public static boolean testNode(Node node, NodeTest test) {
-        if (test == null) {
-            return true;
-        }
-        if (test instanceof NodeNameTest) {
-            if (node.getNodeType() != Node.ELEMENT_NODE) {
-                return false;
-            }
-
-            NodeNameTest nodeNameTest = (NodeNameTest) test;
-            QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
-            String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
-                return true;
-            }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
-                String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
-            }
-            return false;
-        }
-        if (test instanceof NodeTypeTest) {
-            int nodeType = node.getNodeType();
-            switch (((NodeTypeTest) test).getNodeType()) {
-                case Compiler.NODE_TYPE_NODE :
-                    return nodeType == Node.ELEMENT_NODE
-                            || nodeType == Node.DOCUMENT_NODE;
-                case Compiler.NODE_TYPE_TEXT :
-                    return nodeType == Node.CDATA_SECTION_NODE
-                        || nodeType == Node.TEXT_NODE;
-                case Compiler.NODE_TYPE_COMMENT :
-                    return nodeType == Node.COMMENT_NODE;
-                case Compiler.NODE_TYPE_PI :
-                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
-            }
-            return false;
-        }
-        if (test instanceof ProcessingInstructionTest) {
-            if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
-                String testPI = ((ProcessingInstructionTest) test).getTarget();
-                String nodePI = ((ProcessingInstruction) node).getTarget();
-                return testPI.equals(nodePI);
-            }
-        }
-        return false;
-    }
-
+	public static boolean testNode(Node node, NodeTest test) {
+		if (test == null) {
+			return true;
+		}
+		if (test instanceof NodeNameTest) {
+			if (node.getNodeType() != Node.ELEMENT_NODE
+					&& node.getNodeType() != Node.DOCUMENT_NODE) {
+				return false;
+			}
+			NodeNameTest nodeNameTest = (NodeNameTest) test;
+			QName testName = nodeNameTest.getNodeName();
+			String namespaceURI = nodeNameTest.getNamespaceURI();
+			boolean wildcard = nodeNameTest.isWildcard();
+			String testPrefix = testName.getPrefix();
+			if (wildcard && testPrefix == null) {
+				return true;
+			}
+			if (wildcard
+					|| testName.getName()
+							.equals(DOMNodePointer.getLocalName(node))) {
+				String nodeNS = DOMNodePointer.getNamespaceURI(node);
+				return equalStrings(namespaceURI, nodeNS);
+			}
+			return false;
+		}
+		if (test instanceof NodeTypeTest) {
+			int nodeType = node.getNodeType();
+			switch (((NodeTypeTest) test).getNodeType()) {
+			case Compiler.NODE_TYPE_NODE:
+				return nodeType == Node.ELEMENT_NODE
+						|| nodeType == Node.DOCUMENT_NODE;
+			case Compiler.NODE_TYPE_TEXT:
+				return nodeType == Node.CDATA_SECTION_NODE
+						|| nodeType == Node.TEXT_NODE;
+			case Compiler.NODE_TYPE_COMMENT:
+				return nodeType == Node.COMMENT_NODE;
+			case Compiler.NODE_TYPE_PI:
+				return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
+			}
+			return false;
+		}
+		if (test instanceof ProcessingInstructionTest) {
+			if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
+				String testPI = ((ProcessingInstructionTest) test).getTarget();
+				String nodePI = ((ProcessingInstruction) node).getTarget();
+				return testPI.equals(nodePI);
+			}
+			return false;
+		}
+		return false;
+	}
     private static boolean equalStrings(String s1, String s2) {
         if (s1 == s2) {
             return true;

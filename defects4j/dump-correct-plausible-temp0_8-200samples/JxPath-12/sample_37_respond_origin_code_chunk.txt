    public static boolean testNode(Node node, NodeTest test) {
        if (test == null) {
            return true;
        }
        if (test instanceof NodeNameTest) {
            if (node.getNodeType() != Node.ELEMENT_NODE) {
                return false;
            }

            NodeNameTest nodeNameTest = (NodeNameTest) test;
            QName testName = nodeNameTest.getNodeName();
            String namespaceURI = nodeNameTest.getNamespaceURI();
            String nodeNS = DOMNodePointer.getNamespaceURI(node);

            //check whether both test and node namespaces are null.
            if (nodeNS == null && namespaceURI == null) {
                if ((nodeNameTest.isWildcard() || nodeNameTest.getPrefix() != null)
                        || testName.getName().equals(
                        DOMNodePointer.getLocalName(node))) {
                    return true;
                }
            }
            //if only the node namespace is null, and the test namespace is not null
            //then see if the node local name is wildcard or test prefix is not null
            //if it is, then it is considered a match.
            else if (nodeNS == null && namespaceURI != null &&
                    (nodeNameTest.isWildcard() || nodeNameTest.getPrefix() != null)) {
                return true;
            } else if (nodeNS != null && namespaceURI != null &&
                        equalStrings(namespaceURI, nodeNS) &&
                        (nodeNameTest.isWildcard() ||
                            testName.getName().equals(DOMNodePointer.getLocalName(node)))) {
                return true;
            }
            return false;
        }
        if (test instanceof NodeTypeTest) {
            int nodeType = node.getNodeType();
            switch (((NodeTypeTest) test).getNodeType()) {
                case Compiler.NODE_TYPE_NODE :
                    return nodeType == Node.ELEMENT_NODE
                            || nodeType == Node.DOCUMENT_NODE;
                case Compiler.NODE_TYPE_TEXT :
                    return nodeType == Node.CDATA_SECTION_NODE
                        || nodeType == Node.TEXT_NODE;
                case Compiler.NODE_TYPE_COMMENT :
                    return nodeType == Node.COMMENT_NODE;
                case Compiler.NODE_TYPE_PI :
                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
            }
            return false;
        }
        if (test instanceof ProcessingInstructionTest) {
            if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                String testPI = ((ProcessingInstructionTest) test).getTarget();
                String nodePI = ((ProcessingInstruction) node).getTarget();
                return testPI.equals(nodePI);
            }
        }
        return false;
    }


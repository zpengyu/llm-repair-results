diff --git a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
index 6aeb747d2..6e627e5f5 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
@@ -1015,21 +1015,23 @@ public final class TypeFactory
         return _constructType(type.getUpperBounds()[0], context);
     }
 
-    private JavaType _mapType(Class<?> rawClass)
-    {
-        // 28-May-2015, tatu: Properties are special, as per [databind#810]
-        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);
-        // ok to have no types ("raw")
-        if (typeParams == null) {
+private JavaType _mapType(Class<?> rawClass)
+{
+    // 28-May-2015, tatu: Properties are special, as per [databind#810]
+    JavaType[] typeParams = findTypeParameters(rawClass, Map.class);
+    // ok to have no types ("raw")
+    if (typeParams == null) {
+        return MapType.construct(rawClass, _unknownType(), _unknownType());
+    }
+    // but exactly 2 types if any found
+    if (typeParams.length != 2) {
+        if (typeParams.length == 0 && Map.class.isAssignableFrom(rawClass)) {
             return MapType.construct(rawClass, _unknownType(), _unknownType());
         }
-        // but exactly 2 types if any found
-        if (typeParams.length != 2) {
-            throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");
-        }
-        return MapType.construct(rawClass, typeParams[0], typeParams[1]);
+        throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");
     }
-
+    return MapType.construct(rawClass, typeParams[0], typeParams[1]);
+}
     private JavaType _collectionType(Class<?> rawClass)
     {
         JavaType[] typeParams = findTypeParameters(rawClass, Collection.class);

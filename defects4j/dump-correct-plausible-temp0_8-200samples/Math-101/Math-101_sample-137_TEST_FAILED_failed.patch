diff --git a/src/java/org/apache/commons/math/complex/ComplexFormat.java b/src/java/org/apache/commons/math/complex/ComplexFormat.java
index ce0ef2647..7d050109f 100644
--- a/src/java/org/apache/commons/math/complex/ComplexFormat.java
+++ b/src/java/org/apache/commons/math/complex/ComplexFormat.java
@@ -317,77 +317,69 @@ public class ComplexFormat extends Format implements Serializable {
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Complex} object.
      */
-    public Complex parse(String source, ParsePosition pos) {
-        int initialIndex = pos.getIndex();
-
-        // parse whitespace
-        parseAndIgnoreWhitespace(source, pos);
-
-        // parse real
-        Number re = parseNumber(source, getRealFormat(), pos);
-        if (re == null) {
-            // invalid real number
-            // set index back to initial, error index should already be set
-            // character examined.
-            pos.setIndex(initialIndex);
-            return null;
-        }
-
-        // parse sign
-        int startIndex = pos.getIndex();
-        char c = parseNextCharacter(source, pos);
-        int sign = 0;
-        switch (c) {
-        case 0 :
-            // no sign
-            // return real only complex number
-            return new Complex(re.doubleValue(), 0.0);
-        case '-' :
-            sign = -1;
-            break;
-        case '+' :
-            sign = 1;
-            break;
-        default :
-            // invalid sign
-            // set index back to initial, error index should be the last
-            // character examined.
-            pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
-            return null;
-        }
-
-        // parse whitespace
-        parseAndIgnoreWhitespace(source, pos);
-
-        // parse imaginary
-        Number im = parseNumber(source, getRealFormat(), pos);
-        if (im == null) {
-            // invalid imaginary number
-            // set index back to initial, error index should already be set
-            // character examined.
-            pos.setIndex(initialIndex);
-            return null;
-        }
-
-        // parse imaginary character
-        int n = getImaginaryCharacter().length();
-        startIndex = pos.getIndex();
-        int endIndex = startIndex + n;
-        if (
-            source.substring(startIndex, endIndex).compareTo(
-            getImaginaryCharacter()) != 0) {
-            // set index back to initial, error index should be the start index
-            // character examined.
-            pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
-            return null;
-        }
-        pos.setIndex(endIndex);
-
-        return new Complex(re.doubleValue(), im.doubleValue() * sign);
+public Complex parse(String source, ParsePosition pos) {
+    int initialIndex = pos.getIndex();
+    // parse whitespace
+    parseAndIgnoreWhitespace(source, pos);
+    // parse real
+    Number re = parseNumber(source, getRealFormat(), pos);
+    if (re == null) {
+        // invalid real number
+        // set index back to initial, error index should already be set
+        // character examined.
+        pos.setIndex(initialIndex);
+        return null;
     }
-     
+    // parse sign
+    int startIndex = pos.getIndex();
+    char c = parseNextCharacter(source, pos);
+    int sign = 0;
+    switch (c) {
+    case 0 :
+        // no sign
+        // return real only complex number
+        return new Complex(re.doubleValue(), 0.0);
+    case '-' :
+        sign = -1;
+        break;
+    case '+' :
+        sign = 1;
+        break;
+    default :
+        // invalid sign
+        // set index back to initial, error index should be the last
+        // character examined.
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(startIndex);
+        return null;
+    }
+    // parse whitespace
+    parseAndIgnoreWhitespace(source, pos);
+    // parse imaginary
+    Number im = parseNumber(source, getRealFormat(), pos);
+    if (im == null) {
+        // invalid imaginary number
+        // set index back to initial, error index should already be set
+        // character examined.
+        pos.setIndex(initialIndex);
+        return null;
+    }
+    // parse imaginary character
+    int n = getImaginaryCharacter().length();
+    startIndex = pos.getIndex();
+    int endIndex = startIndex + n;
+    if (
+        source.substring(startIndex, endIndex).compareTo(
+        getImaginaryCharacter()) != 0) {
+        // set index back to initial, error index should be the start index
+        // character examined.
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(startIndex);
+        return null;
+    }
+    pos.setIndex(endIndex);
+    return new Complex(re.doubleValue(), im.doubleValue() * sign);
+}     
     /**
      * Parses <code>source</code> until a non-whitespace character is found.
      *

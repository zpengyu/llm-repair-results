diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
index 385e8b07..932cb099 100644
--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
@@ -299,36 +299,34 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback
       String ns = arg.getString();
       ProvidedName provided = providedNames.get(ns);
       if (provided == null || !provided.isExplicitlyProvided()) {
-        unrecognizedRequires.add(
-            new UnrecognizedRequire(n, ns, t.getSourceName()));
-      } else {
-        JSModule providedModule = provided.explicitModule;
-
-        // This must be non-null, because there was an explicit provide.
-        Preconditions.checkNotNull(providedModule);
-
-        JSModule module = t.getModule();
-        if (moduleGraph != null &&
-            module != providedModule &&
-            !moduleGraph.dependsOn(module, providedModule)) {
-          compiler.report(
-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
-                  providedModule.getName(),
-                  module.getName()));
+        if (provided == null || !provided.isExplicitlyProvided()) {
+          unrecognizedRequires.add(
+              new UnrecognizedRequire(n, ns, t.getSourceName()));
+        } else {
+          JSModule providedModule = provided.explicitModule;
+          // This must be non-null, because there was an explicit provide.
+          Preconditions.checkNotNull(providedModule);
+          JSModule module = t.getModule();
+          if (moduleGraph != null &&
+              module != providedModule &&
+              !moduleGraph.dependsOn(module, providedModule)) {
+            compiler.report(
+                t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
+                    providedModule.getName(),
+                    module.getName()));
+          }
+        }
+        maybeAddToSymbolTable(left);
+        maybeAddStringNodeToSymbolTable(arg);
+        // Requires should be removed before further processing.
+        // Some clients run closure pass multiple times, first with
+        // the checks for broken requires turned off. In these cases, we
+        // allow broken requires to be preserved by the first run to
+        // let them be caught in the subsequent run.
+        if (provided != null) {
+          parent.detachFromParent();
+          compiler.reportCodeChange();
         }
-      }
-
-      maybeAddToSymbolTable(left);
-      maybeAddStringNodeToSymbolTable(arg);
-
-      // Requires should be removed before further processing.
-      // Some clients run closure pass multiple times, first with
-      // the checks for broken requires turned off. In these cases, we
-      // allow broken requires to be preserved by the first run to
-      // let them be caught in the subsequent run.
-      if (provided != null) {
-        parent.detachFromParent();
-        compiler.reportCodeChange();
       }
     }
   }

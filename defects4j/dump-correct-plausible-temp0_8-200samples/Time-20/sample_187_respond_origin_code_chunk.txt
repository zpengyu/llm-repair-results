        public int parseInto(DateTimeParserBucket bucket, String text, int position) {
            DateTimeParser[] parsers = iParsers;
            int length = parsers.length;

            final Object originalState = bucket.saveState();
            int bestValidPos = position;
            Object bestValidState = null;

            for (int i=0; i<length; i++) {
                DateTimeParser parser = parsers[i];
                if (parser == null) {
                    // The empty parser wins only if nothing is better.
                    if (bestValidPos <= position) {
                        return position;
                    }
                    break;
                }
                int parsePos = parser.parseInto(bucket, text, position);
                if (parsePos >= position) {
                    if (parsePos > bestValidPos) {
                        if (parsePos >= text.length() ||
                            (i + 1) >= length || parsers[i + 1] == null) {

                            // Completely parsed text or no more parsers to
                            // check. Skip the rest.
                            return parsePos;
                        }
                        bestValidPos = parsePos;
                        bestValidState = bucket.saveState();
                    }
                } else {
                    parsePos = ~parsePos;
                    if (parsePos <= position) {
                        bucket.restoreState(originalState);
                        return ~position;
                    }
                }
                bucket.restoreState(originalState);
            }

            if (bestValidPos > position) {
                // Restore the state to the best valid parse.
                bucket.restoreState(bestValidState);
                return bestValidPos;
            }

            return ~position;
        }

diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 1ff78bfe..ffc13e96 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -2777,7 +2773,6 @@ public class DateTimeFormatterBuilder {
             for (int i=0; i<length; i++) {
                 DateTimeParser parser = parsers[i];
                 if (parser == null) {
-                    // The empty parser wins only if nothing is better.
                     if (bestValidPos <= position) {
                         return position;
                     }
@@ -2787,11 +2782,7 @@ public class DateTimeFormatterBuilder {
                 int parsePos = parser.parseInto(bucket, text, position);
                 if (parsePos >= position) {
                     if (parsePos > bestValidPos) {
-                        if (parsePos >= text.length() ||
-                            (i + 1) >= length || parsers[i + 1] == null) {
-
-                            // Completely parsed text or no more parsers to
-                            // check. Skip the rest.
+                        if (parsePos >= text.length() || (i + 1) >= length || parsers[i + 1] == null) {
                             return parsePos;
                         }
                         bestValidPos = parsePos;
@@ -2807,17 +2798,13 @@ public class DateTimeFormatterBuilder {
                 }
                 bucket.restoreState(originalState);
             }
-
             if (bestValidPos > position || (bestValidPos == position && isOptional)) {
-                // Restore the state to the best valid parse.
                 if (bestValidState != null) {
                     bucket.restoreState(bestValidState);
                 }
                 return bestValidPos;
             }
-
             return ~bestInvalidPos;
-        }
-    }
+        }    }
 
 }

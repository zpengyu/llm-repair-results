    Object returnValueFor(Class<?> type) {
        if (Primitives.isPrimitiveOrWrapper(type)) {
            return Primitives.defaultValueForPrimitiveOrWrapper(type);
            //new instances are used instead of Collections.emptyList(), etc.
            //to avoid UnsupportedOperationException if code under test modifies returned collection
        } else if (type.isAssignableFrom(Collection.class)) {
            return new LinkedList<Object>();
        } else if (type.isAssignableFrom(Set.class)) {
            return new HashSet<Object>();
        } else if (type.isAssignableFrom(HashSet.class)) {
            return new HashSet<Object>();
        } else if (type.isAssignableFrom(SortedSet.class)) {
            return new TreeSet<Object>();
        } else if (type.isAssignableFrom(TreeSet.class)) {
            return new TreeSet<Object>();
        } else if (type.isAssignableFrom(LinkedHashSet.class)) {
            return new LinkedHashSet<Object>();
        } else if (type.isAssignableFrom(List.class)) {
            return new LinkedList<Object>();
        } else if (type.isAssignableFrom(LinkedList.class)) {
            return new LinkedList<Object>();
        } else if (type.isAssignableFrom(ArrayList.class)) {
            return new ArrayList<Object>();
        } else if (type.isAssignableFrom(Map.class)) {
            return new HashMap<Object, Object>();
        } else if (type.isAssignableFrom(HashMap.class)) {
            return new HashMap<Object, Object>();
        } else if (type.isAssignableFrom(SortedMap.class)) {
            return new TreeMap<Object, Object>();
        } else if (type.isAssignableFrom(TreeMap.class)) {
            return new TreeMap<Object, Object>();
        } else if (type.isAssignableFrom(LinkedHashMap.class)) {
            return new LinkedHashMap<Object, Object>();
        }
        //Let's not care about the rest of collections.
        return null;
    }
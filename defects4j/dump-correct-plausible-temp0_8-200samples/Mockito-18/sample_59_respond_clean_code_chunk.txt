    Object returnValueFor(Class<?> type) {
        if (Primitives.isPrimitiveOrWrapper(type)) {
            return Primitives.defaultValueForPrimitiveOrWrapper(type);
            //new instances are used instead of Collections.emptyList(), etc.
            //to avoid UnsupportedOperationException if code under test modifies returned collection
        } else if (type == Collection.class) {
            return Collections.EMPTY_LIST;
        } else if (type == Set.class) {
            return Collections.EMPTY_SET;
        } else if (type == HashSet.class) {
            return Collections.EMPTY_SET;
        } else if (type == SortedSet.class) {
            return Collections.EMPTY_SET;
        } else if (type == TreeSet.class) {
            return Collections.EMPTY_SET;
        } else if (type == LinkedHashSet.class) {
            return Collections.EMPTY_SET;
        } else if (type == List.class) {
            return Collections.EMPTY_LIST;
        } else if (type == LinkedList.class) {
            return Collections.EMPTY_LIST;
        } else if (type == ArrayList.class) {
            return Collections.EMPTY_LIST;
        } else if (type == Map.class) {
            return Collections.EMPTY_MAP;
        } else if (type == HashMap.class) {
            return Collections.EMPTY_MAP;
        } else if (type == SortedMap.class) {
            return Collections.EMPTY_MAP;
        } else if (type == TreeMap.class) {
            return Collections.EMPTY_MAP;
        } else if (type == LinkedHashMap.class) {
            return Collections.EMPTY_MAP;
        }
        //Let's not care about the rest of collections.
        return null;
    }
diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
index f07f4be2d..cbeb03670 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
@@ -79,42 +79,41 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {
         return returnValueFor(returnType);
     }
     
-    Object returnValueFor(Class<?> type) {
-        if (Primitives.isPrimitiveOrWrapper(type)) {
-            return Primitives.defaultValueForPrimitiveOrWrapper(type);
-            //new instances are used instead of Collections.emptyList(), etc.
-            //to avoid UnsupportedOperationException if code under test modifies returned collection
-        } else if (type == Collection.class) {
-            return new LinkedList<Object>();
-        } else if (type == Set.class) {
-            return new HashSet<Object>();
-        } else if (type == HashSet.class) {
-            return new HashSet<Object>();
-        } else if (type == SortedSet.class) {
-            return new TreeSet<Object>();
-        } else if (type == TreeSet.class) {
-            return new TreeSet<Object>();
-        } else if (type == LinkedHashSet.class) {
-            return new LinkedHashSet<Object>();
-        } else if (type == List.class) {
-            return new LinkedList<Object>();
-        } else if (type == LinkedList.class) {
-            return new LinkedList<Object>();
-        } else if (type == ArrayList.class) {
-            return new ArrayList<Object>();
-        } else if (type == Map.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == HashMap.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == SortedMap.class) {
-            return new TreeMap<Object, Object>();
-        } else if (type == TreeMap.class) {
-            return new TreeMap<Object, Object>();
-        } else if (type == LinkedHashMap.class) {
-            return new LinkedHashMap<Object, Object>();
-        }
-        //Let's not care about the rest of collections.
-        return null;
+Object returnValueFor(Class<?> type) {
+    if (Primitives.isPrimitiveOrWrapper(type)) {
+        return Primitives.defaultValueForPrimitiveOrWrapper(type);
+        //new instances are used instead of Collections.emptyList(), etc.
+        //to avoid UnsupportedOperationException if code under test modifies returned collection
+    } else if (type == Collection.class) {
+        return Collections.emptyList();
+    } else if (type == Set.class) {
+        return Collections.emptySet();
+    } else if (type == HashSet.class) {
+        return Collections.emptySet();
+    } else if (type == SortedSet.class) {
+        return Collections.emptySortedSet();
+    } else if (type == TreeSet.class) {
+        return Collections.emptySortedSet();
+    } else if (type == LinkedHashSet.class) {
+        return Collections.emptySet();
+    } else if (type == List.class) {
+        return Collections.emptyList();
+    } else if (type == LinkedList.class) {
+        return Collections.emptyList();
+    } else if (type == ArrayList.class) {
+        return Collections.emptyList();
+    } else if (type == Map.class) {
+        return Collections.emptyMap();
+    } else if (type == HashMap.class) {
+        return Collections.emptyMap();
+    } else if (type == SortedMap.class) {
+        return Collections.emptySortedMap();
+    } else if (type == TreeMap.class) {
+        return Collections.emptySortedMap();
+    } else if (type == LinkedHashMap.class) {
+        return Collections.emptyMap();
     }
-
+    //Let's not care about the rest of collections.
+    return null;
+}
 }

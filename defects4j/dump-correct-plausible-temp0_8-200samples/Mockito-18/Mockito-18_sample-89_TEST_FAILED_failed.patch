diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
index f07f4be2d..c82dde466 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
@@ -79,34 +79,34 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {
         return returnValueFor(returnType);
     }
     
-    Object returnValueFor(Class<?> type) {
+ 	Object returnValueFor(Class<?> type) {
         if (Primitives.isPrimitiveOrWrapper(type)) {
             return Primitives.defaultValueForPrimitiveOrWrapper(type);
             //new instances are used instead of Collections.emptyList(), etc.
             //to avoid UnsupportedOperationException if code under test modifies returned collection
-        } else if (type == Collection.class) {
+        } else if (type == Collection.class || type.isInterface()) {
             return new LinkedList<Object>();
-        } else if (type == Set.class) {
+        } else if (type == Set.class || type.isInterface()) {
             return new HashSet<Object>();
         } else if (type == HashSet.class) {
             return new HashSet<Object>();
-        } else if (type == SortedSet.class) {
+        } else if (type == SortedSet.class || type.isInterface()) {
             return new TreeSet<Object>();
         } else if (type == TreeSet.class) {
             return new TreeSet<Object>();
         } else if (type == LinkedHashSet.class) {
             return new LinkedHashSet<Object>();
-        } else if (type == List.class) {
+        } else if (type == List.class || type.isInterface()) {
             return new LinkedList<Object>();
         } else if (type == LinkedList.class) {
             return new LinkedList<Object>();
         } else if (type == ArrayList.class) {
             return new ArrayList<Object>();
-        } else if (type == Map.class) {
+        } else if (type == Map.class || type.isInterface()) {
             return new HashMap<Object, Object>();
         } else if (type == HashMap.class) {
             return new HashMap<Object, Object>();
-        } else if (type == SortedMap.class) {
+        } else if (type == SortedMap.class || type.isInterface()) {
             return new TreeMap<Object, Object>();
         } else if (type == TreeMap.class) {
             return new TreeMap<Object, Object>();

    Object returnValueFor(Class<?> type) {
        if (Primitives.isPrimitiveOrWrapper(type)) {
            return Primitives.defaultValueForPrimitiveOrWrapper(type);
            //new instances are used instead of Collections.emptyList(), etc.
            //to avoid UnsupportedOperationException if code under test modifies returned collection
        } else if (type == Collection.class) {
            return new LinkedList<Object>();
        } else if (type == Set.class) {
            return new HashSet<Object>();
        } else if (type == HashSet.class) {
            return new HashSet<Object>();
        } else if (type == SortedSet.class) {
            return new TreeSet<Object>();
        } else if (type == TreeSet.class) {
            return new TreeSet<Object>();
        } else if (type == LinkedHashSet.class) {
            return new LinkedHashSet<Object>();
        } else if (type == List.class) {
            return new LinkedList<Object>();
        } else if (type == LinkedList.class) {
            return new LinkedList<Object>();
        } else if (type == ArrayList.class) {
            return new ArrayList<Object>();
        } else if (type == Map.class) {
            return new HashMap<Object, Object>();
        } else if (type == HashMap.class) {
            return new HashMap<Object, Object>();
        } else if (type == SortedMap.class) {
            return new TreeMap<Object, Object>();
        } else if (type == TreeMap.class) {
            return new TreeMap<Object, Object>();
        } else if (type == LinkedHashMap.class) {
            return new LinkedHashMap<Object, Object>();
        }
        //Let's not care about the rest of collections.
        return null;
    }
    private static final class Primitives {
        static boolean isPrimitiveOrWrapper(Class<?> type) {
            return type.isPrimitive() || isWrapperType(type);
        }
        static boolean isWrapperType(Class<?> type) {
            return WRAPPER_TYPES.contains(type);
        }
        static Object defaultValueForPrimitiveOrWrapper(Class<?> type) {
            if (type == Boolean.TYPE) {
                return false;
            } else if (type == Character.TYPE) {
                return (char) 0;
            } else if (type == Byte.TYPE) {
                return (byte) 0;
            } else if (type == Short.TYPE) {
                return (short) 0;
            } else if (type == Integer.TYPE) {
                return 0;
            } else if (type == Long.TYPE) {
                return 0L;
            } else if (type == Float.TYPE) {
                return 0f;
            } else if (type == Double.TYPE) {
                return 0d;
            } else {
                return null;
            }
        }
        static final Set<Class<?>> WRAPPER_TYPES = new HashSet<Class<?>>(Arrays.<Class<?>>asList(Boolean.class, Character.class, Byte.class, Short.class, Integer.class, Long.class, Float.class, Double.class, Void.class));
    }
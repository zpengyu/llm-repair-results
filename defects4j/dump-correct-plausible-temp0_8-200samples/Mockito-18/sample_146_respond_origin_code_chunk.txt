    Object returnValueFor(Class<?> type) {
        if (Primitives.isPrimitiveOrWrapper(type)) {
            return Primitives.defaultValueForPrimitiveOrWrapper(type);
            //new instances are used instead of Collections.emptyList(), etc.
            //to avoid UnsupportedOperationException if code under test modifies returned collection
        } else if (type.isInterface()) {
            if (type == Collection.class) {
                return new LinkedList<Object>();
            } else if (type == Set.class) {
                return new HashSet<Object>();
            } else if (type == List.class) {
                return new LinkedList<Object>();
            } else if (type == Map.class) {
                return new HashMap<Object, Object>();
            }
        } else {
            try {
                return type.newInstance();
            } catch (Exception ignored) { }
        }
        //Let's not care about the rest of collections.
        return null;
    }

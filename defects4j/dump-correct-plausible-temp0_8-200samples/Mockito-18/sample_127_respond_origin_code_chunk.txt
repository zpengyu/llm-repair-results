    Object returnValueFor(Class<?> type) {
        if (Primitives.isPrimitiveOrWrapper(type)) {
            return Primitives.defaultValueForPrimitiveOrWrapper(type);
            //new instances are used instead of Collections.emptyList(), etc.
            //to avoid UnsupportedOperationException if code under test modifies returned collection
        } else if (type == Collection.class) {
            return new LinkedList<Object>();
        } else if (type == Set.class) {
            return new HashSet<Object>();
        } else if (type == HashSet.class) {
            return new HashSet<Object>();
        } else if (type == SortedSet.class) {
            return new TreeSet<Object>();
        } else if (type == TreeSet.class) {
            return new TreeSet<Object>();
        } else if (type == LinkedHashSet.class) {
            return new LinkedHashSet<Object>();
        } else if (type == List.class) {
            return new LinkedList<Object>();
        } else if (type == LinkedList.class) {
            return new LinkedList<Object>();
        } else if (type == ArrayList.class) {
            return new ArrayList<Object>();
        } else if (type == Map.class) {
            return new HashMap<Object, Object>();
        } else if (type == HashMap.class) {
            return new HashMap<Object, Object>();
        } else if (type == SortedMap.class) {
            return new TreeMap<Object, Object>();
        } else if (type == TreeMap.class) {
            return new TreeMap<Object, Object>();
        } else if (type == LinkedHashMap.class) {
            return new LinkedHashMap<Object, Object>();
        } else if (type == Queue.class) {
            return new LinkedList<Object>();
        } else if (type == LinkedBlockingQueue.class) {
            return new LinkedBlockingQueue<Object>();
        } else if (type == PriorityBlockingQueue.class) {
            return new PriorityBlockingQueue<Object>();
        } else if (type == ArrayBlockingQueue.class) {
            return new ArrayBlockingQueue<Object>(10);
        } else if (type == SynchronousQueue.class) {
            return new SynchronousQueue<Object>();
        } else if (type == DelayQueue.class) {
            return new DelayQueue<Object>();
        } else if (type == LinkedTransferQueue.class) {
            return new LinkedTransferQueue<Object>();
        } else if (type == PriorityQueue.class) {
            return new PriorityQueue<Object>();
        } else if (type == ConcurrentLinkedQueue.class) {
            return new ConcurrentLinkedQueue<Object>();
        } else if (type == ConcurrentLinkedDeque.class) {
            return new ConcurrentLinkedDeque<Object>();
        } else if (type == ArrayDeque.class) {
            return new ArrayDeque<Object>();
        } else if (type == BlockingDeque.class) {
            return new LinkedBlockingDeque<Object>();
        } else if (type == LinkedBlockingDeque.class) {
            return new LinkedBlockingDeque<Object>();
        }
        //Let's not care about the rest of collections.
        return null;
    }

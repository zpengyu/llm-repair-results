diff --git a/src/org/mockito/internal/MockHandler.java b/src/org/mockito/internal/MockHandler.java
index 9452f1664..a3228543c 100644
--- a/src/org/mockito/internal/MockHandler.java
+++ b/src/org/mockito/internal/MockHandler.java
@@ -86,15 +82,27 @@ public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInte
         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
         OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
         mockingProgress.reportOngoingStubbing(ongoingStubbing);
-
         StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
-
         if (stubbedInvocation != null) {
-            stubbedInvocation.captureArgumentsFrom(invocation);
-            return stubbedInvocation.answer(invocation);
+            if (mockSettings.isStubOnly()) {
+                stubbedInvocation.captureArgumentsFrom(invocation);
+                return stubbedInvocation.answer(invocation);
+            }
+            if (stubbedInvocation.matches(invocation)) {
+                stubbedInvocation.captureArgumentsFrom(invocation);
+                return stubbedInvocation.answer(invocation);
+            } else {
+                Object ret = mockSettings.getDefaultAnswer().answer(invocation);
+                // redo setting invocation for potential stubbing in case of partial
+                // mocks / spies.
+                // Without it, the real method inside 'when' might have delegated
+                // to other self method and overwrite the intended stubbed method
+                // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
+                invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
+                return ret;
+            }
         } else {
             Object ret = mockSettings.getDefaultAnswer().answer(invocation);
-
             // redo setting invocation for potential stubbing in case of partial
             // mocks / spies.
             // Without it, the real method inside 'when' might have delegated

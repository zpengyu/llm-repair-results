diff --git a/src/org/mockito/internal/MockHandler.java b/src/org/mockito/internal/MockHandler.java
index 9452f1664..c02957fb6 100644
--- a/src/org/mockito/internal/MockHandler.java
+++ b/src/org/mockito/internal/MockHandler.java
@@ -82,19 +79,15 @@ public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInte
                 // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
             }
         }
-        
-        invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
-        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
-        mockingProgress.reportOngoingStubbing(ongoingStubbing);
-
-        StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
-
-        if (stubbedInvocation != null) {
-            stubbedInvocation.captureArgumentsFrom(invocation);
-            return stubbedInvocation.answer(invocation);
-        } else {
+        //invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
+        //OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
+        //mockingProgress.reportOngoingStubbing(ongoingStubbing);
+        //StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
+        //if (stubbedInvocation != null) {
+            //stubbedInvocation.captureArgumentsFrom(invocation);
+            //return stubbedInvocation.answer(invocation);
+        //} else {
             Object ret = mockSettings.getDefaultAnswer().answer(invocation);
-
             // redo setting invocation for potential stubbing in case of partial
             // mocks / spies.
             // Without it, the real method inside 'when' might have delegated
@@ -102,9 +95,8 @@ public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInte
             // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
             invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
             return ret;
-        }
+        //}
     }
-
     public VoidMethodStubbable<T> voidMethodStubbable(T mock) {
         return new VoidMethodStubbableImpl<T>(mock, invocationContainerImpl);
     }

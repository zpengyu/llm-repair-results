diff --git a/src/org/mockito/internal/MockHandler.java b/src/org/mockito/internal/MockHandler.java
index 9452f1664..5f104d76d 100644
--- a/src/org/mockito/internal/MockHandler.java
+++ b/src/org/mockito/internal/MockHandler.java
@@ -56,20 +56,10 @@ public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInte
     }
 
     public Object handle(Invocation invocation) throws Throwable {
-        if (invocationContainerImpl.hasAnswersForStubbing()) {
-            // stubbing voids with stubVoid() or doAnswer() style
-            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
-                            .getArgumentMatcherStorage(), invocation);
-            invocationContainerImpl.setMethodForStubbing(invocationMatcher);
-            return null;
-        }
         VerificationMode verificationMode = mockingProgress.pullVerificationMode();
-
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
                         invocation);
-
         mockingProgress.validateState();
-
         //if verificationMode is not null then someone is doing verify()        
         if (verificationMode != null) {
             //We need to check if verification was started on the correct mock 
@@ -82,13 +72,16 @@ public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInte
                 // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
             }
         }
-        
-        invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
-        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
-        mockingProgress.reportOngoingStubbing(ongoingStubbing);
-
+        OngoingStubbingImpl<T> ongoingStubbing = null;
+        if (invocationContainerImpl.hasAnswersForStubbing()) {
+            // stubbing voids with stubVoid() or doAnswer() style
+            invocationContainerImpl.setMethodForStubbing(invocationMatcher);
+        } else {
+            invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
+            ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
+            mockingProgress.reportOngoingStubbing(ongoingStubbing);
+        }
         StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
-
         if (stubbedInvocation != null) {
             stubbedInvocation.captureArgumentsFrom(invocation);
             return stubbedInvocation.answer(invocation);
@@ -100,7 +92,8 @@ public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInte
             // Without it, the real method inside 'when' might have delegated
             // to other self method and overwrite the intended stubbed method
             // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
-            invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
+            if (ongoingStubbing != null)
+            	invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
             return ret;
         }
     }

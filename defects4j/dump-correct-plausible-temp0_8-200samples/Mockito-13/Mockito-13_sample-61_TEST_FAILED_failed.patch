diff --git a/src/org/mockito/internal/MockHandler.java b/src/org/mockito/internal/MockHandler.java
index 9452f1664..00ce3e97d 100644
--- a/src/org/mockito/internal/MockHandler.java
+++ b/src/org/mockito/internal/MockHandler.java
@@ -86,15 +82,10 @@ public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInte
         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
         OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
         mockingProgress.reportOngoingStubbing(ongoingStubbing);
-
         StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
-
         if (stubbedInvocation != null) {
             stubbedInvocation.captureArgumentsFrom(invocation);
-            return stubbedInvocation.answer(invocation);
-        } else {
-            Object ret = mockSettings.getDefaultAnswer().answer(invocation);
-
+            Object ret = stubbedInvocation.answer(invocation);
             // redo setting invocation for potential stubbing in case of partial
             // mocks / spies.
             // Without it, the real method inside 'when' might have delegated
@@ -102,9 +93,12 @@ public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInte
             // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
             invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
             return ret;
+        } else {
+            invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
+            Object ret = mockSettings.getDefaultAnswer().answer(invocation);
+            return ret;
         }
     }
-
     public VoidMethodStubbable<T> voidMethodStubbable(T mock) {
         return new VoidMethodStubbableImpl<T>(mock, invocationContainerImpl);
     }

diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java
index b1dca2211..cae2a490b 100644
--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java
+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java
@@ -465,15 +462,13 @@ public class Vector3D implements Serializable {
       // v3 without loss of precision. See Kahan lecture
       // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
       // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
+      final double v1v2 = v1.dotProduct(v2);
+      final double v2v2 = v2.dotProduct(v2);
+      final int rho = (int) ((v1v2 / v2v2) * 0x100);
       // compute cross product from v3 and v2 instead of v1 and v2
       return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
   }
-
   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
    * <p>Calling this method is equivalent to calling:
    * <code>v1.subtract(v2).getNorm1()</code> except that no intermediate

diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java
index b1dca2211..17c5ed16e 100644
--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java
+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java
@@ -455,25 +455,24 @@ public class Vector3D implements Serializable {
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
       // rescale both vectors without losing precision,
       // to ensure their norm are the same order of magnitude
-
+      if (v1.getNorm() == 0 || v2.getNorm() == 0) {
+          return new Vector3D(0, 0, 0);
+      }
+      Vector3D a = v1.normalize();
+      Vector3D b = v2.normalize();
       // we reduce cancellation errors by preconditioning,
       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
       // v3 without loss of precision. See Kahan lecture
       // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
+      final double rho = Math.scalb(a.dotProduct(b), -8);
+      a = new Vector3D(1.0 - rho, -rho, -rho, a);
+      b = new Vector3D(-rho, 1.0 - rho, -rho, b);
       // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+      return new Vector3D(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x);
   }
-
   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
    * <p>Calling this method is equivalent to calling:
    * <code>v1.subtract(v2).getNorm1()</code> except that no intermediate

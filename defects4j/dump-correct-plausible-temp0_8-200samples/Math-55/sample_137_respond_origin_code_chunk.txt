  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {

      // rescale both vectors without losing precision,
      // to ensure their norm are the same order of magnitude
      if (v1.getNorm() == 0 || v2.getNorm() == 0) {
          return new Vector3D(0, 0, 0);
      }
      Vector3D a = v1.normalize();
      Vector3D b = v2.normalize();

      // we reduce cancellation errors by preconditioning,
      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
      // v3 without loss of precision. See Kahan lecture
      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
      final double rho = Math.scalb(a.dotProduct(b), -8);
      a = new Vector3D(1.0 - rho, -rho, -rho, a);
      b = new Vector3D(-rho, 1.0 - rho, -rho, b);

      // compute cross product from v3 and v2 instead of v1 and v2
      return new Vector3D(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x);

  }

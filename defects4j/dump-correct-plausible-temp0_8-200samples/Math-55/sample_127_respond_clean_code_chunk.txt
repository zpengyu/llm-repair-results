public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
    // rescale both vectors without losing precision,
    // to ensure their norm are the same order of magnitude
    // we reduce cancellation errors by preconditioning,
    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
    // v3 without loss of precision. See Kahan lecture
    // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
    // compute rho as an 8 bits approximation of v1.v2 / v2.v2
    final int rho = (int) FastMath.round(v1.dotProduct(v2) / v2.dotProduct(v2));
    // compute cross product from v3 and v2 instead of v1 and v2
    final double v3X = v1.x - rho * v2.x;
    final double v3Y = v1.y - rho * v2.y;
    final double v3Z = v1.z - rho * v2.z;
    return new Vector3D(v3Y * v2.z - v3Z * v2.y, v3Z * v2.x - v3X * v2.z, v3X * v2.y - v3Y * v2.x);
}
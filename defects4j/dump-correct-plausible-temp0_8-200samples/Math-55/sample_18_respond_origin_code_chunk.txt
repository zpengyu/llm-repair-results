public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
    // compute rho as an 8 bits approximation of v1.v2 / v2.v2
    double rho = 0;
    double norm2V2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
    if (norm2V2 != 0) {
        rho = ((v1.x * v2.x + v1.y * v2.y + v1.z * v2.z) / norm2V2) & 0xff;
    }

    // compute cross product from v3 and v2 instead of v1 and v2
    return new Vector3D(v1.y * v2.z - v1.z * v2.y - rho * v2.y * v2.z,
            v1.z * v2.x - v1.x * v2.z - rho * v2.z * v2.x,
            v1.x * v2.y - v1.y * v2.x - rho * v2.x * v2.y);

}


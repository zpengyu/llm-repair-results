diff --git a/src/main/java/org/apache/commons/math3/util/MathArrays.java b/src/main/java/org/apache/commons/math3/util/MathArrays.java
index 9ef28e3d8..e8b35f5b7 100644
--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java
+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java
@@ -811,18 +811,18 @@ public class MathArrays {
      * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
      * @throws DimensionMismatchException if arrays dimensions don't match
      */
-    public static double linearCombination(final double[] a, final double[] b)
+     public static double linearCombination(final double[] a, final double[] b)
         throws DimensionMismatchException {
         final int len = a.length;
         if (len != b.length) {
             throw new DimensionMismatchException(len, b.length);
         }
-
-            // Revert to scalar multiplication.
-
+        // Revert to scalar multiplication.
+        if (len == 1) {
+            return a[0] * b[0];
+        }
         final double[] prodHigh = new double[len];
         double prodLowSum = 0;
-
         for (int i = 0; i < len; i++) {
             final double ai = a[i];
             final double ca = SPLIT_FACTOR * ai;
@@ -840,25 +839,20 @@ public class MathArrays {
                                                   aHigh * bLow);
             prodLowSum += prodLow;
         }
-
-
-        final double prodHighCur = prodHigh[0];
-        double prodHighNext = prodHigh[1];
-        double sHighPrev = prodHighCur + prodHighNext;
-        double sPrime = sHighPrev - prodHighNext;
-        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
-
-        final int lenMinusOne = len - 1;
-        for (int i = 1; i < lenMinusOne; i++) {
-            prodHighNext = prodHigh[i + 1];
-            final double sHighCur = sHighPrev + prodHighNext;
-            sPrime = sHighCur - prodHighNext;
-            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
+        // Start accumulation in the correct order ...
+        final double sHighPrev = prodHigh[len - 1];
+        int lenMinusOne = len - 1;
+        double sPrime = sHighPrev;
+        double sLowSum = 0;
+        for (int i = len - 2; i >= 0; i--) {
+            final double prodHighCur = prodHigh[i];
+            final double sHighCur = sHighPrev + prodHighCur;
+            sPrime = sHighCur - sHighPrev;
+            sLowSum += (sHighPrev - sPrime) + (prodHighCur - sPrime);
             sHighPrev = sHighCur;
+            lenMinusOne--;
         }
-
         double result = sHighPrev + (prodLowSum + sLowSum);
-
         if (Double.isNaN(result)) {
             // either we have split infinite numbers or some coefficients were NaNs,
             // just rely on the naive implementation and let IEEE754 handle this

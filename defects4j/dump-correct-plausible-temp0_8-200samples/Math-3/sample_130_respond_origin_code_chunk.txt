public static double linearCombination(final double[] a, final double[] b)
        throws DimensionMismatchException {
        final int len = a.length;
        if (len != b.length) {
            throw new DimensionMismatchException(len, b.length);
        }

        // Revert to scalar multiplication.
        if (len == 1) {
            return a[0] * b[0];
        }

        final double[] prodHigh = new double[len];
        double prodLowSum = 0;

        for (int i = 0; i < len; i++) {
            final double ai = a[i];
            final double ca = SPLIT_FACTOR * ai;
            final double aHigh = ca - (ca - ai);
            final double aLow = ai - aHigh;

            final double bi = b[i];
            final double cb = SPLIT_FACTOR * bi;
            final double bHigh = cb - (cb - bi);
            final double bLow = bi - bHigh;
            prodHigh[i] = ai * bi;
            final double prodLow = aLow * bLow - (((prodHigh[i] -
                                                    aHigh * bHigh) -
                                                   aLow * bHigh) -
                                                  aHigh * bLow);
            prodLowSum += prodLow;
        }

        if (len == 2) {
            // specific optimization for size 2 (avoids one conditional)
            final double prodHighCur = prodHigh[0];
            final double prodHighNext = prodHigh[1];
            final double sHighPrev = prodHighCur + prodHighNext;
            final double sPrime = sHighPrev - prodHighNext;
            final double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);

            final double result = sHighPrev + (prodLowSum + sLowSum);

            if (Double.isNaN(result)) {
                // either we have split infinite numbers or some coefficients were NaNs,
                // just rely on the naive implementation and let IEEE754 handle this
                return a[0] * b[0] + a[1] * b[1];
            }
            return result;
        }

        // final loop
        double sHighPrev = prodHigh[0];
        double sPrime = sHighPrev;
        double sLowSum = 0;

        for (int i = 1; i < len; i++) {
            final double prodHighCur = prodHigh[i];
            final double sHighCur = sHighPrev + prodHighCur;
            sPrime = sHighCur - prodHighCur;
            sLowSum += (prodHighCur - (sHighCur - sPrime)) + (sHighPrev - sPrime);
            sHighPrev = sHighCur;
        }

        double result = sHighPrev + (prodLowSum + sLowSum);

        if (Double.isNaN(result)) {
            // either we have split infinite numbers or some coefficients were NaNs,
            // just rely on the naive implementation and let IEEE754 handle this
            result = 0;
            for (int i = 0; i < len; ++i) {
                result += a[i] * b[i];
            }
        }

        return result;
    }

diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java
index 842f31c4..65307747 100644
--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java
+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java
@@ -382,28 +382,29 @@ public class EqualsBuilder {
         } else if (lhs.getClass() != rhs.getClass()) {
             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] 
             this.setEquals(false);
-        }
-        // 'Switch' on type of array, to dispatch to the correct handler
-        // This handles multi dimensional arrays of the same depth
-        else if (lhs instanceof long[]) {
-            append((long[]) lhs, (long[]) rhs);
-        } else if (lhs instanceof int[]) {
-            append((int[]) lhs, (int[]) rhs);
-        } else if (lhs instanceof short[]) {
-            append((short[]) lhs, (short[]) rhs);
-        } else if (lhs instanceof char[]) {
-            append((char[]) lhs, (char[]) rhs);
-        } else if (lhs instanceof byte[]) {
-            append((byte[]) lhs, (byte[]) rhs);
-        } else if (lhs instanceof double[]) {
-            append((double[]) lhs, (double[]) rhs);
-        } else if (lhs instanceof float[]) {
-            append((float[]) lhs, (float[]) rhs);
-        } else if (lhs instanceof boolean[]) {
-            append((boolean[]) lhs, (boolean[]) rhs);
         } else {
-            // Not an array of primitives
-            append((Object[]) lhs, (Object[]) rhs);
+        	// 'Switch' on type of array, to dispatch to the correct handler
+        	// This handles multi dimensional arrays of the same depth
+        	Class<?> clazz = lhs.getClass();
+        	if (clazz == long[].class)
+        		append((long[]) lhs, (long[]) rhs);
+        	else if (clazz == int[].class)
+        		append((int[]) lhs, (int[]) rhs);
+        	else if (clazz == short[].class)
+        		append((short[]) lhs, (short[]) rhs);
+        	else if (clazz == char[].class)
+        		append((char[]) lhs, (char[]) rhs);
+        	else if (clazz == byte[].class)
+        		append((byte[]) lhs, (byte[]) rhs);
+        	else if (clazz == double[].class)
+        		append((double[]) lhs, (double[]) rhs);
+        	else if (clazz == float[].class)
+        		append((float[]) lhs, (float[]) rhs);
+        	else if (clazz == boolean[].class)
+        		append((boolean[]) lhs, (boolean[]) rhs);
+        	else
+        		// Not an array of primitives
+        		append((Object[]) lhs, (Object[]) rhs);
         }
         return this;
     }

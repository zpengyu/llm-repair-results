    public EqualsBuilder append(Object lhs, Object rhs) {
        if (isEquals == false) {
            return this;
        }
        if (lhs == rhs) {
            return this;
        }
        if (lhs == null || rhs == null) {
            this.setEquals(false);
            return this;
        }
        Class lhsClass = lhs.getClass();
        if (!lhsClass.isArray()) {
                // The simple case, not an array, just test the element
                isEquals = lhs.equals(rhs);
        } else if (lhs.getClass() != rhs.getClass()) {
            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] 
            this.setEquals(false);
        } else {
        	// 'Switch' on type of array, to dispatch to the correct handler
        	// This handles multi dimensional arrays of the same depth
        	Class<?> clazz = lhs.getClass();
        	if (clazz == long[].class)
        		append((long[]) lhs, (long[]) rhs);
        	else if (clazz == int[].class)
        		append((int[]) lhs, (int[]) rhs);
        	else if (clazz == short[].class)
        		append((short[]) lhs, (short[]) rhs);
        	else if (clazz == char[].class)
        		append((char[]) lhs, (char[]) rhs);
        	else if (clazz == byte[].class)
        		append((byte[]) lhs, (byte[]) rhs);
        	else if (clazz == double[].class)
        		append((double[]) lhs, (double[]) rhs);
        	else if (clazz == float[].class)
        		append((float[]) lhs, (float[]) rhs);
        	else if (clazz == boolean[].class)
        		append((boolean[]) lhs, (boolean[]) rhs);
        	else
        		// Not an array of primitives
        		append((Object[]) lhs, (Object[]) rhs);
        }
        return this;
    }

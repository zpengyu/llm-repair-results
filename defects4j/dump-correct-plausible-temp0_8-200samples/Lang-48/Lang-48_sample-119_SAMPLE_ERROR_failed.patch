diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java
index 842f31c4..72bd7367 100644
--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java
+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java
@@ -379,31 +379,35 @@ public class EqualsBuilder {
         if (!lhsClass.isArray()) {
                 // The simple case, not an array, just test the element
                 isEquals = lhs.equals(rhs);
-        } else if (lhs.getClass() != rhs.getClass()) {
+        } 
+        else if (lhs.getClass() != rhs.getClass()) {
             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] 
             this.setEquals(false);
         }
-        // 'Switch' on type of array, to dispatch to the correct handler
-        // This handles multi dimensional arrays of the same depth
-        else if (lhs instanceof long[]) {
-            append((long[]) lhs, (long[]) rhs);
-        } else if (lhs instanceof int[]) {
-            append((int[]) lhs, (int[]) rhs);
-        } else if (lhs instanceof short[]) {
-            append((short[]) lhs, (short[]) rhs);
-        } else if (lhs instanceof char[]) {
-            append((char[]) lhs, (char[]) rhs);
-        } else if (lhs instanceof byte[]) {
-            append((byte[]) lhs, (byte[]) rhs);
-        } else if (lhs instanceof double[]) {
-            append((double[]) lhs, (double[]) rhs);
-        } else if (lhs instanceof float[]) {
-            append((float[]) lhs, (float[]) rhs);
-        } else if (lhs instanceof boolean[]) {
-            append((boolean[]) lhs, (boolean[]) rhs);
-        } else {
-            // Not an array of primitives
-            append((Object[]) lhs, (Object[]) rhs);
+        else {
+            // 'Switch' on type of array, to dispatch to the correct handler
+            // This handles multi dimensional arrays of the same depth
+            Class<?> clazz = lhs.getClass().getComponentType();
+            if(clazz.equals(long.class)) {
+                append((long[]) lhs, (long[]) rhs);
+            } else if(clazz.equals(int.class)) {
+                append((int[]) lhs, (int[]) rhs);
+            } else if(clazz.equals(short.class)) {
+                append((short[]) lhs, (short[]) rhs);
+            } else if(clazz.equals(char.class)) {
+                append((char[]) lhs, (char[]) rhs);
+            } else if(clazz.equals(byte.class)) {
+                append((byte[]) lhs, (byte[]) rhs);
+            } else if(clazz.equals(double.class)) {
+                append((double[]) lhs, (double[]) rhs);
+            } else if(clazz.equals(float.class)) {
+                append((float[]) lhs, (float[]) rhs);
+            } else if(clazz.equals(boolean.class)) {
+                append((boolean[]) lhs, (boolean[]) rhs);
+            } else {
+                // Not an array of primitives
+                append((Object[]) lhs, (Object[]) rhs);
+            }
         }
         return this;
     }

diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
index 01a819a9f..abc404260 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
@@ -201,10 +198,8 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>
             super(valueType);
             _kind = kind;
         }
-
         @Override
-        protected Object _deserialize(String value, DeserializationContext ctxt) throws IOException
-        {
+        protected Object _deserialize(String value, DeserializationContext ctxt) throws IOException {
             switch (_kind) {
             case STD_FILE:
                 return new File(value);
@@ -233,13 +228,13 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>
                         return new Locale(value);
                     }
                     String first = value.substring(0, ix);
-                    value = value.substring(ix+1);
+                    value = value.substring(ix + 1);
                     ix = value.indexOf('_');
                     if (ix < 0) { // two pieces
                         return new Locale(first, value);
                     }
                     String second = value.substring(0, ix);
-                    return new Locale(first, second, value.substring(ix+1));
+                    return new Locale(first, second, value.substring(ix + 1));
                 }
             case STD_CHARSET:
                 return Charset.forName(value);
@@ -265,7 +258,7 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>
                     int ix = value.indexOf(':');
                     if (ix >= 0 && value.indexOf(':', ix + 1) < 0) {
                         // host:port
-                        int port = Integer.parseInt(value.substring(ix+1));
+                        int port = Integer.parseInt(value.substring(ix + 1));
                         return new InetSocketAddress(value.substring(0, ix), port);
                     }
                     // host or unbracketed IPv6, without port number
@@ -287,7 +279,4 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>
             }
             return super._deserializeFromEmptyString();
         }
-
-
-    }
-}
+    }}

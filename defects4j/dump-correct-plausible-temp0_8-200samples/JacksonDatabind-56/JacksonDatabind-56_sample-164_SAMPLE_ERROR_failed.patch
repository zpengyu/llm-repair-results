diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
index 01a819a9f..c29b54459 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
@@ -287,7 +280,34 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>
             }
             return super._deserializeFromEmptyString();
         }
-
-
-    }
-}
+        @Override
+        protected String _parseValue(JsonParser p, DeserializationContext ctxt) throws IOException {
+            JsonToken t = p.getCurrentToken();
+            if (t == JsonToken.VALUE_STRING) {
+                String text = p.getText().trim();
+                if (text.length() == 0) {
+                    return null;
+                }
+                return text;
+            }
+            if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
+                p.nextToken();
+                final String parsed = _parseValue(p, ctxt);
+                t = p.nextToken();
+                if (t != JsonToken.END_ARRAY) {
+                    handleMissingEndArrayForSingle(p, ctxt);
+                }
+                return parsed;
+            }
+            if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
+                return _deserializeEmbedded(p, ctxt);
+            }
+            if (t == JsonToken.VALUE_NULL) {
+                return null;
+            }
+            // Otherwise, no can do:
+            ctxt.reportInputMismatch(handledType(),
+                    "Cannot deserialize from non-String value (token: %s)", t);
+            return null;
+        }
+    }}

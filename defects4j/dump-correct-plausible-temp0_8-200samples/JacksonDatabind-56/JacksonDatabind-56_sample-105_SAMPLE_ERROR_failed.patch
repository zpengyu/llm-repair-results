diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
index 01a819a9f..97bf5b352 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
@@ -178,10 +178,8 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>
      * 
      * @since 2.4
      */
-    public static class Std extends FromStringDeserializer<Object>
-    {
+public static class Std extends FromStringDeserializer<Object> {
         private static final long serialVersionUID = 1;
-
         public final static int STD_FILE = 1;
         public final static int STD_URL = 2;
         public final static int STD_URI = 3;
@@ -194,17 +192,15 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>
         public final static int STD_TIME_ZONE = 10;
         public final static int STD_INET_ADDRESS = 11;
         public final static int STD_INET_SOCKET_ADDRESS = 12;
-
+        public final static int STD_JSON_NODE = 13;
         protected final int _kind;
-        
         protected Std(Class<?> valueType, int kind) {
             super(valueType);
             _kind = kind;
         }
-
         @Override
-        protected Object _deserialize(String value, DeserializationContext ctxt) throws IOException
-        {
+        protected Object _deserialize(String value, DeserializationContext ctxt)
+                throws IOException {
             switch (_kind) {
             case STD_FILE:
                 return new File(value);
@@ -233,13 +229,13 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>
                         return new Locale(value);
                     }
                     String first = value.substring(0, ix);
-                    value = value.substring(ix+1);
+                    value = value.substring(ix + 1);
                     ix = value.indexOf('_');
                     if (ix < 0) { // two pieces
                         return new Locale(first, value);
                     }
                     String second = value.substring(0, ix);
-                    return new Locale(first, second, value.substring(ix+1));
+                    return new Locale(first, second, value.substring(ix + 1));
                 }
             case STD_CHARSET:
                 return Charset.forName(value);
@@ -248,9 +244,7 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>
             case STD_INET_ADDRESS:
                 return InetAddress.getByName(value);
             case STD_INET_SOCKET_ADDRESS:
-                if (value.startsWith("[")) {
-                    // bracketed IPv6 (with port number)
-
+                if (value.startsWith("[")) { // bracketed IPv6 (with port number)
                     int i = value.lastIndexOf(']');
                     if (i == -1) {
                         throw new InvalidFormatException(ctxt.getParser(),
@@ -263,14 +256,15 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>
                     return new InetSocketAddress(value.substring(0, i + 1), port);
                 } else {
                     int ix = value.indexOf(':');
-                    if (ix >= 0 && value.indexOf(':', ix + 1) < 0) {
-                        // host:port
-                        int port = Integer.parseInt(value.substring(ix+1));
+                    if (ix >= 0 && value.indexOf(':', ix + 1) < 0) { // host:port
+                        int port = Integer.parseInt(value.substring(ix + 1));
                         return new InetSocketAddress(value.substring(0, ix), port);
                     }
                     // host or unbracketed IPv6, without port number
                     return new InetSocketAddress(value, 0);
                 }
+            case STD_JSON_NODE:
+                return ctxt.getNodeFactory().textNode(value);
             }
             throw new IllegalArgumentException();
         }
@@ -285,9 +278,9 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>
             if (_kind == STD_LOCALE) {
                 return Locale.ROOT;
             }
+            if (_kind == STD_JSON_NODE) {
+                return ctxt.getNodeFactory().textNode("");
+            }
             return super._deserializeFromEmptyString();
         }
-
-
-    }
-}
+    }}

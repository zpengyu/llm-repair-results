diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
index 01a819a9f..8733730f7 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
@@ -178,79 +178,75 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>
      * 
      * @since 2.4
      */
-    public static class Std extends FromStringDeserializer<Object>
+public static class Std extends FromStringDeserializer<Object>
+{
+    private static final long serialVersionUID = 1;
+    public final static int STD_FILE = 1;
+    public final static int STD_URL = 2;
+    public final static int STD_URI = 3;
+    public final static int STD_CLASS = 4;
+    public final static int STD_JAVA_TYPE = 5;
+    public final static int STD_CURRENCY = 6;
+    public final static int STD_PATTERN = 7;
+    public final static int STD_LOCALE = 8;
+    public final static int STD_CHARSET = 9;
+    public final static int STD_TIME_ZONE = 10;
+    public final static int STD_INET_ADDRESS = 11;
+    public final static int STD_INET_SOCKET_ADDRESS = 12;
+    protected final int _kind;
+    protected Std(Class<?> valueType, int kind) {
+        super(valueType);
+        _kind = kind;
+    }
+    @Override
+    protected Object _deserialize(String value, DeserializationContext ctxt) throws IOException
     {
-        private static final long serialVersionUID = 1;
-
-        public final static int STD_FILE = 1;
-        public final static int STD_URL = 2;
-        public final static int STD_URI = 3;
-        public final static int STD_CLASS = 4;
-        public final static int STD_JAVA_TYPE = 5;
-        public final static int STD_CURRENCY = 6;
-        public final static int STD_PATTERN = 7;
-        public final static int STD_LOCALE = 8;
-        public final static int STD_CHARSET = 9;
-        public final static int STD_TIME_ZONE = 10;
-        public final static int STD_INET_ADDRESS = 11;
-        public final static int STD_INET_SOCKET_ADDRESS = 12;
-
-        protected final int _kind;
-        
-        protected Std(Class<?> valueType, int kind) {
-            super(valueType);
-            _kind = kind;
-        }
-
-        @Override
-        protected Object _deserialize(String value, DeserializationContext ctxt) throws IOException
-        {
-            switch (_kind) {
-            case STD_FILE:
-                return new File(value);
-            case STD_URL:
-                return new URL(value);
-            case STD_URI:
-                return URI.create(value);
-            case STD_CLASS:
-                try {
-                    return ctxt.findClass(value);
-                } catch (Exception e) {
-                    throw ctxt.instantiationException(_valueClass, ClassUtil.getRootCause(e));
+        switch (_kind) {
+        case STD_FILE:
+            return new File(value);
+        case STD_URL:
+            return new URL(value);
+        case STD_URI:
+            return URI.create(value);
+        case STD_CLASS:
+            try {
+                return ctxt.findClass(value);
+            } catch (Exception e) {
+                throw ctxt.instantiationException(_valueClass, ClassUtil.getRootCause(e));
+            }
+        case STD_JAVA_TYPE:
+            return ctxt.getTypeFactory().constructFromCanonical(value);
+        case STD_CURRENCY:
+            // will throw IAE if unknown:
+            return Currency.getInstance(value);
+        case STD_PATTERN:
+            // will throw IAE (or its subclass) if malformed
+            return Pattern.compile(value);
+        case STD_LOCALE:
+            {
+                int ix = value.indexOf('_');
+                if (ix < 0) { // single argument
+                    return new Locale(value);
                 }
-            case STD_JAVA_TYPE:
-                return ctxt.getTypeFactory().constructFromCanonical(value);
-            case STD_CURRENCY:
-                // will throw IAE if unknown:
-                return Currency.getInstance(value);
-            case STD_PATTERN:
-                // will throw IAE (or its subclass) if malformed
-                return Pattern.compile(value);
-            case STD_LOCALE:
-                {
-                    int ix = value.indexOf('_');
-                    if (ix < 0) { // single argument
-                        return new Locale(value);
-                    }
-                    String first = value.substring(0, ix);
-                    value = value.substring(ix+1);
-                    ix = value.indexOf('_');
-                    if (ix < 0) { // two pieces
-                        return new Locale(first, value);
-                    }
-                    String second = value.substring(0, ix);
-                    return new Locale(first, second, value.substring(ix+1));
+                String first = value.substring(0, ix);
+                value = value.substring(ix+1);
+                ix = value.indexOf('_');
+                if (ix < 0) { // two pieces
+                    return new Locale(first, value);
                 }
-            case STD_CHARSET:
-                return Charset.forName(value);
-            case STD_TIME_ZONE:
-                return TimeZone.getTimeZone(value);
-            case STD_INET_ADDRESS:
-                return InetAddress.getByName(value);
-            case STD_INET_SOCKET_ADDRESS:
+                String second = value.substring(0, ix);
+                return new Locale(first, second, value.substring(ix+1));
+            }
+        case STD_CHARSET:
+            return Charset.forName(value);
+        case STD_TIME_ZONE:
+            return TimeZone.getTimeZone(value);
+        case STD_INET_ADDRESS:
+            return InetAddress.getByName(value);
+        case STD_INET_SOCKET_ADDRESS:
+            try {
                 if (value.startsWith("[")) {
                     // bracketed IPv6 (with port number)
-
                     int i = value.lastIndexOf(']');
                     if (i == -1) {
                         throw new InvalidFormatException(ctxt.getParser(),
@@ -271,23 +266,22 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>
                     // host or unbracketed IPv6, without port number
                     return new InetSocketAddress(value, 0);
                 }
+            } catch (RuntimeException e) {
+                throw new InvalidFormatException(ctxt.getParser(), e.getMessage(), value, InetSocketAddress.class);
             }
-            throw new IllegalArgumentException();
         }
-
-        @Override
-        protected Object _deserializeFromEmptyString() throws IOException {
-            // As per [databind#398], URI requires special handling
-            if (_kind == STD_URI) {
-                return URI.create("");
-            }
-            // As per [databind#1123], Locale too
-            if (_kind == STD_LOCALE) {
-                return Locale.ROOT;
-            }
-            return super._deserializeFromEmptyString();
+        throw new IllegalArgumentException();
+    }
+    @Override
+    protected Object _deserializeFromEmptyString() throws IOException {
+        // As per [databind#398], URI requires special handling
+        if (_kind == STD_URI) {
+            return URI.create("");
         }
-
-
+        // As per [databind#1123], Locale too
+        if (_kind == STD_LOCALE) {
+            return Locale.ROOT;
+        }
+        return super._deserializeFromEmptyString();
     }
-}
+}}

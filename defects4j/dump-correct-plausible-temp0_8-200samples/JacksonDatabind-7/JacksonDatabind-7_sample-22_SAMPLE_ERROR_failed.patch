diff --git a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
index c700587c8..c6bb8fb86 100644
--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
@@ -400,16 +400,22 @@ public class TokenBuffer
      * 
      * @since 2.3
      */
-    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
+public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
     {
+        switch (jp.getCurrentToken()) {
+        case START_OBJECT:
             copyCurrentStructure(jp);
-        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
-         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
-         *    to assume one did exist.
-         */
-        return this;
+            return this;
+        case FIELD_NAME:
+            copyCurrentStructure(jp);
+            return this;
+        case END_OBJECT: // No END_OBJECT
+            // Can start with empty Object too...
+            return this;
+        default:
+            return (TokenBuffer) ctxt.handleUnexpectedToken(handledType(), jp);
+        }
     }
-
     @Override
     @SuppressWarnings("resource")
     public String toString()

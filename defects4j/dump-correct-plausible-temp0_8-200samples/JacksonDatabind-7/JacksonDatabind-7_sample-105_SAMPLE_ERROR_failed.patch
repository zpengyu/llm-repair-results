diff --git a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
index c700587c8..21a91f096 100644
--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
@@ -400,16 +400,22 @@ public class TokenBuffer
      * 
      * @since 2.3
      */
-    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
+public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
     {
+        if (jp.getCurrentToken() == JsonToken.START_OBJECT) {
             copyCurrentStructure(jp);
-        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
-         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
-         *    to assume one did exist.
-         */
+        } else {
+            // As per #592, need to support a special case of starting from
+            // FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
+            // to assume one did exist.
+            JsonToken t = jp.getCurrentToken();
+            if (t == JsonToken.FIELD_NAME) {
+                return this;
+            }
+            throw ctxt.mappingException("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", _valueToUpdate, t);
+        }
         return this;
     }
-
     @Override
     @SuppressWarnings("resource")
     public String toString()

diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java
index f68dfea6..8c4704ad 100644
--- a/src/com/google/javascript/rhino/jstype/FunctionType.java
+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java
@@ -859,38 +859,34 @@ public class FunctionType extends PrototypeObjectType {
   }
 
   @Override
-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
-    setResolvedTypeInternal(this);
-
-    call = (ArrowType) safeResolve(call, t, scope);
-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
-
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
-
-    boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
-    for (ObjectType iface : implementedInterfaces) {
-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
-      resolvedInterfaces.add(resolvedIface);
-      changed |= (resolvedIface != iface);
-    }
-    if (changed) {
-      implementedInterfaces = resolvedInterfaces.build();
-    }
-
-    if (subTypes != null) {
-      for (int i = 0; i < subTypes.size(); i++) {
-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+    JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
+      setResolvedTypeInternal(this);
+      call = (ArrowType) safeResolve(call, t, scope);
+      prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
+      // Warning about typeOfThis if it doesn't resolve to an ObjectType
+      // is handled further upstream.
+      // TODO(nicksantos): Handle this correctly if we have a UnionType.
+      if (typeOfThis != null) {
+        typeOfThis = (ObjectType) typeOfThis.resolve(t, scope);
+      }
+      boolean changed = false;
+      ImmutableList.Builder<ObjectType> resolvedInterfaces =
+          ImmutableList.builder();
+      for (ObjectType iface : implementedInterfaces) {
+        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+        resolvedInterfaces.add(resolvedIface);
+        changed |= (resolvedIface != iface);
       }
+      if (changed) {
+        implementedInterfaces = resolvedInterfaces.build();
+      }
+      if (subTypes != null) {
+        for (int i = 0; i < subTypes.size(); i++) {
+          subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+        }
+      }
+      return super.resolveInternal(t, scope);
     }
-
-    return super.resolveInternal(t, scope);
-  }
-
   @Override
   public String toDebugHashCodeString() {
     if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {

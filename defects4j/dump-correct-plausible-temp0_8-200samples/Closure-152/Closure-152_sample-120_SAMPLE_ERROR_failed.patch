diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java
index f68dfea6..27156379 100644
--- a/src/com/google/javascript/rhino/jstype/FunctionType.java
+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java
@@ -869,19 +867,22 @@ public class FunctionType extends PrototypeObjectType {
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
     typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
-
-    boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
-    for (ObjectType iface : implementedInterfaces) {
-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
-      resolvedInterfaces.add(resolvedIface);
-      changed |= (resolvedIface != iface);
-    }
-    if (changed) {
-      implementedInterfaces = resolvedInterfaces.build();
+    // TODO(nicksantos): If we have a UnionType, this will fail.
+    // We need to make sure that we can handle that.
+    // For now, we just don't resolve interfaces, to avoid crashing.
+    if (!(typeOfThis instanceof UnionType)) {
+      boolean changed = false;
+      ImmutableList.Builder<ObjectType> resolvedInterfaces =
+          ImmutableList.builder();
+      for (ObjectType iface : implementedInterfaces) {
+        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+        resolvedInterfaces.add(resolvedIface);
+        changed |= (resolvedIface != iface);
+      }
+      if (changed) {
+        implementedInterfaces = resolvedInterfaces.build();
+      }
     }
-
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));

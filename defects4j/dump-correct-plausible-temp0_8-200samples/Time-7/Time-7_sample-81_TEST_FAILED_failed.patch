diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java
index 8f9d3948..088a4736 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java
@@ -697,7 +697,7 @@ public class DateTimeFormatter {
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
-    public int parseInto(ReadWritableInstant instant, String text, int position) {
+public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
@@ -712,7 +710,6 @@ public class DateTimeFormatter {
         DateTimeParserBucket bucket = new DateTimeParserBucket(
             instantLocal, chrono, iLocale, iPivotYear, defaultYear);
         int newPos = parser.parseInto(bucket, text, position);
-        instant.setMillis(bucket.computeMillis(false, text));
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
             int parsedOffset = bucket.getOffsetInteger();
             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
@@ -724,9 +721,15 @@ public class DateTimeFormatter {
         if (iZone != null) {
             instant.setZone(iZone);
         }
+        long instantWithoutZone = bucket.computeMillis(false, text);
+        if (bucket.getOffsetInteger() == null) {
+            int offset = chrono.getZone().getOffset(instantWithoutZone);
+            instant.setMillis(instantWithoutZone + offset);
+        } else {
+            instant.setMillis(instantWithoutZone);
+        }
         return newPos;
     }
-
     /**
      * Parses a datetime from the given text, returning the number of
      * milliseconds since the epoch, 1970-01-01T00:00:00Z.

diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java
index 8f9d3948..d9a79431 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java
@@ -713,10 +711,18 @@ public class DateTimeFormatter {
             instantLocal, chrono, iLocale, iPivotYear, defaultYear);
         int newPos = parser.parseInto(bucket, text, position);
         instant.setMillis(bucket.computeMillis(false, text));
+        // The following check is to determine whether the given offset is different from
+        // the offset of the zone associated with the instant before parse
+        // (if the offset and zone cannot be parsed, this check is skipped)
+        boolean parsedOffsetDifferent = true;
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
             int parsedOffset = bucket.getOffsetInteger();
             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
             chrono = chrono.withZone(parsedZone);
+            // If the parsed offset is the same as the offset of the zone of the instant before
+            // parse, the parsed offset should not be applied
+            parsedOffsetDifferent = 
+                (parsedOffset != instant.getZone().getOffset(instantMillis));
         } else if (bucket.getZone() != null) {
             chrono = chrono.withZone(bucket.getZone());
         }
@@ -724,9 +730,12 @@ public class DateTimeFormatter {
         if (iZone != null) {
             instant.setZone(iZone);
         }
+        // Only apply the parsed offset if it is different from the instant before parse
+        if (parsedOffsetDifferent) {
+            instant.add(bucket.computeMillis(false, text));
+        }
         return newPos;
     }
-
     /**
      * Parses a datetime from the given text, returning the number of
      * milliseconds since the epoch, 1970-01-01T00:00:00Z.

diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index f7e3d277..ff3f118e 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -558,17 +558,17 @@ public abstract class DateTimeZone implements Serializable {
     private static synchronized String getConvertedId(String id) {
         Map<String, String> map = cZoneIdConversion;
         if (map == null) {
-            // Backwards compatibility with TimeZone.
             map = new HashMap<String, String>();
+            // JDK 1.1 compatible
             map.put("GMT", "UTC");
             map.put("MIT", "Pacific/Apia");
-            map.put("HST", "Pacific/Honolulu");  // JDK 1.1 compatible
+            map.put("HST", "Pacific/Honolulu");
             map.put("AST", "America/Anchorage");
             map.put("PST", "America/Los_Angeles");
-            map.put("MST", "America/Denver");  // JDK 1.1 compatible
+            map.put("MST", "America/Denver");
             map.put("PNT", "America/Phoenix");
             map.put("CST", "America/Chicago");
-            map.put("EST", "America/New_York");  // JDK 1.1 compatible
+            map.put("EST", "America/New_York");
             map.put("IET", "America/Indianapolis");
             map.put("PRT", "America/Puerto_Rico");
             map.put("CNT", "America/St_Johns");
@@ -592,6 +592,13 @@ public abstract class DateTimeZone implements Serializable {
             map.put("AET", "Australia/Sydney");
             map.put("SST", "Pacific/Guadalcanal");
             map.put("NST", "Pacific/Auckland");
+            // JDK 1.1 compatible
+            map.put("BST", "Asia/Kathmandu");
+            map.put("SST", "Asia/Kuala_Lumpur");
+            map.put("KST", "Asia/Seoul");
+            map.put("JST", "Asia/Tokyo");
+            map.put("CST", "Australia/Adelaide");
+            map.put("EST", "Australia/Sydney");
             cZoneIdConversion = map;
         }
         return map.get(id);

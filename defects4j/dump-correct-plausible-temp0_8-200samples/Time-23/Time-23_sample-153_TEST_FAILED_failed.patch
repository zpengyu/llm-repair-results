diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index f7e3d277..0ce7b5b2 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -555,48 +555,73 @@ public abstract class DateTimeZone implements Serializable {
      * @param id  the old style id
      * @return the new style id, null if not found
      */
-    private static synchronized String getConvertedId(String id) {
-        Map<String, String> map = cZoneIdConversion;
-        if (map == null) {
+private static synchronized String getConvertedId(String id) {
+    Map<String, String> map = cZoneIdConversion;
+    if (map == null) {
+        // Backwards compatibility with TimeZone.
+        map = new HashMap<String, String>();
+        map.put("GMT", "UTC");
+        map.put("MIT", "Pacific/Apia");
+        map.put("HST", "Pacific/Honolulu");  // JDK 1.1 compatible
+        map.put("AST", "America/Anchorage");
+        map.put("PST", "America/Los_Angeles");
+        map.put("MST", "America/Denver");  // JDK 1.1 compatible
+        map.put("PNT", "America/Phoenix");
+        map.put("CST", "America/Chicago");
+        map.put("EST", "America/New_York");  // JDK 1.1 compatible
+        map.put("IET", "America/Indianapolis");
+        map.put("PRT", "America/Puerto_Rico");
+        map.put("CNT", "America/St_Johns");
+        map.put("AGT", "America/Buenos_Aires");
+        map.put("BET", "America/Sao_Paulo");
+        map.put("WET", "Europe/London");
+        map.put("ECT", "Europe/Paris");
+        map.put("ART", "Africa/Cairo");
+        map.put("CAT", "Africa/Harare");
+        map.put("EET", "Europe/Bucharest");
+        map.put("EAT", "Africa/Addis_Ababa");
+        map.put("MET", "Asia/Tehran");
+        map.put("NET", "Asia/Yerevan");
+        map.put("PLT", "Asia/Karachi");
+        map.put("IST", "Asia/Calcutta");
+        map.put("BST", "Asia/Dhaka");
+        map.put("VST", "Asia/Saigon");
+        map.put("CTT", "Asia/Shanghai");
+        map.put("JST", "Asia/Tokyo");
+        map.put("ACT", "Australia/Darwin");
+        map.put("AET", "Australia/Sydney");
+        map.put("SST", "Pacific/Guadalcanal");
+        map.put("NST", "Pacific/Auckland");
+        cZoneIdConversion = map;
+    }
+    String name = map.get(id);
+    if (name == null) {
+        if (id != null) {
             // Backwards compatibility with TimeZone.
-            map = new HashMap<String, String>();
-            map.put("GMT", "UTC");
-            map.put("MIT", "Pacific/Apia");
-            map.put("HST", "Pacific/Honolulu");  // JDK 1.1 compatible
-            map.put("AST", "America/Anchorage");
-            map.put("PST", "America/Los_Angeles");
-            map.put("MST", "America/Denver");  // JDK 1.1 compatible
-            map.put("PNT", "America/Phoenix");
-            map.put("CST", "America/Chicago");
-            map.put("EST", "America/New_York");  // JDK 1.1 compatible
-            map.put("IET", "America/Indianapolis");
-            map.put("PRT", "America/Puerto_Rico");
-            map.put("CNT", "America/St_Johns");
-            map.put("AGT", "America/Buenos_Aires");
-            map.put("BET", "America/Sao_Paulo");
-            map.put("WET", "Europe/London");
-            map.put("ECT", "Europe/Paris");
-            map.put("ART", "Africa/Cairo");
-            map.put("CAT", "Africa/Harare");
-            map.put("EET", "Europe/Bucharest");
-            map.put("EAT", "Africa/Addis_Ababa");
-            map.put("MET", "Asia/Tehran");
-            map.put("NET", "Asia/Yerevan");
-            map.put("PLT", "Asia/Karachi");
-            map.put("IST", "Asia/Calcutta");
-            map.put("BST", "Asia/Dhaka");
-            map.put("VST", "Asia/Saigon");
-            map.put("CTT", "Asia/Shanghai");
-            map.put("JST", "Asia/Tokyo");
-            map.put("ACT", "Australia/Darwin");
-            map.put("AET", "Australia/Sydney");
-            map.put("SST", "Pacific/Guadalcanal");
-            map.put("NST", "Pacific/Auckland");
-            cZoneIdConversion = map;
+            if (id.length() == 3) {
+                if (id.equals("EST")) {
+                    name = "America/New_York";
+                } else if (id.equals("MST")) {
+                    name = "America/Denver";
+                } else if (id.equals("HST")) {
+                    name = "Pacific/Honolulu";
+                }
+            } else if (id.length() == 4) {
+                if (id.equals("EDT")) {
+                    name = "America/New_York";
+                } else if (id.equals("MDT")) {
+                    name = "America/Denver";
+                } else if (id.equals("HDT")) {
+                    name = "Pacific/Honolulu";
+                }
+            }
+        }
+        if (name == null) {
+            throw new IllegalArgumentException("Invalid time zone indicator '" + id + "'");
         }
-        return map.get(id);
     }
-
+    return name;
+}
     private static int parseOffset(String str) {
         // Can't use a real chronology if called during class
         // initialization. Offset parser doesn't need it anyhow.

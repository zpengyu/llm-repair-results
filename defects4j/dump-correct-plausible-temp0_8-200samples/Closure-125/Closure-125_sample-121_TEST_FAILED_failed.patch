diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 75a54ad5..f905b6bb 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1653,23 +1653,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
   /**
    * Visits a NEW node.
    */
-  private void visitNew(NodeTraversal t, Node n) {
-    Node constructor = n.getFirstChild();
-    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
-      FunctionType fnType = type.toMaybeFunctionType();
-      if (fnType != null) {
-        visitParameterList(t, n, fnType);
-        ensureTyped(t, n, fnType.getInstanceType());
-      } else {
-        ensureTyped(t, n);
-      }
-    } else {
-      report(t, n, NOT_A_CONSTRUCTOR);
-      ensureTyped(t, n);
+    private void visitNew(NodeTraversal t, Node n) {
+        Node constructor = n.getFirstChild();
+        JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
+        if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
+            FunctionType fnType = type.toMaybeFunctionType();
+            if (fnType != null) {
+                visitParameterList(t, n, fnType);
+                ensureTyped(t, n, fnType.getInstanceType());
+            } else {
+                ensureTyped(t, n);
+            }
+        } else if (type.isFunctionType()) {
+            visitParameterList(t, n, type.toMaybeFunctionType());
+            ensureTyped(t, n);
+        } else {
+            report(t, n, NOT_A_CONSTRUCTOR);
+            ensureTyped(t, n);
+        }
     }
-  }
-
   /**
    * Check whether there's any property conflict for for a particular super
    * interface

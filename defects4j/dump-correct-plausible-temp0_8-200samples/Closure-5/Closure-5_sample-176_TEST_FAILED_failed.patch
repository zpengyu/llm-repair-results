diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 2f5a8e10..ca8160ad 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -163,17 +162,12 @@ class InlineObjectLiterals implements CompilerPass {
         // Ignore most indirect references, like x.y (but not x.y(),
         // since the function referenced by y might reference 'this').
         //
-        if (parent.isGetProp()) {
+        if (parent.isGetProp()
+            && !gramps.isCall()
+            && !NodeUtil.isGetOrSetKey(gramps)) {
           Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target may be using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
-            return false;
-          }
-
           // Deleting a property has different semantics from deleting
           // a variable, so deleted properties should not be inlined.
-
           // NOTE(nicksantos): This pass's object-splitting algorithm has
           // a blind spot. It assumes that if a property isn't defined on an
           // object, then the value is undefined. This is not true, because

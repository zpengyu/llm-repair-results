diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 2f5a8e10..43ec5a29 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -155,6 +155,7 @@ class InlineObjectLiterals implements CompilerPass {
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
       Set<String> validProperties = Sets.newHashSet();
+      Set<String> invalidProperties = Sets.newHashSet();
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
@@ -183,11 +181,13 @@ class InlineObjectLiterals implements CompilerPass {
           // to a property that isn't defined on the object literal. This
           // isn't a perfect algorithm, but it should catch most cases.
           String propName = parent.getLastChild().getString();
-          if (!validProperties.contains(propName)) {
+          if (invalidProperties.contains(propName)) {
+            return false;
+          } else if (!validProperties.contains(propName)) {
             if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
               validProperties.add(propName);
             } else {
-              return false;
+              invalidProperties.add(propName);
             }
           }
           continue;

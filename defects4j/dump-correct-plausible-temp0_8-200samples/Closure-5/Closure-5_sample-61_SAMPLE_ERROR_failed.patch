diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 2f5a8e10..ef9371e9 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -154,7 +154,6 @@ class InlineObjectLiterals implements CompilerPass {
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
-      Set<String> validProperties = Sets.newHashSet();
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
@@ -182,13 +178,9 @@ class InlineObjectLiterals implements CompilerPass {
           // We short-circuit this problem by bailing out if we see a reference
           // to a property that isn't defined on the object literal. This
           // isn't a perfect algorithm, but it should catch most cases.
-          String propName = parent.getLastChild().getString();
-          if (!validProperties.contains(propName)) {
-            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
-              validProperties.add(propName);
-            } else {
-              return false;
-            }
+          if (NodeUtil.isLhsOfAssign(name)
+              && NodeUtil.getAssignedValue(name) == null) {
+            return false;
           }
           continue;
         }
@@ -224,9 +212,6 @@ class InlineObjectLiterals implements CompilerPass {
             // ES5 get/set not supported.
             return false;
           }
-
-          validProperties.add(child.getString());
-
           Node childVal = child.getFirstChild();
           // Check if childVal is the parent of any of the passed in
           // references, as that is how self-referential assignments

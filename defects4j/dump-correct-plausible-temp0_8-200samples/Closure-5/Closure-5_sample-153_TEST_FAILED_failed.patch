diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 2f5a8e10..b336b092 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -155,6 +155,7 @@ class InlineObjectLiterals implements CompilerPass {
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
       Set<String> validProperties = Sets.newHashSet();
+      Set<Node> assignNodes = Sets.newHashSet();
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
@@ -232,6 +224,10 @@ class InlineObjectLiterals implements CompilerPass {
           // references, as that is how self-referential assignments
           // will happen.
           for (Reference t : refs) {
+            if (assignNodes.contains(childVal)) {
+              // There's a self-referential assignment
+              return false;
+            }
             Node refNode = t.getParent();
             while (!NodeUtil.isStatementBlock(refNode)) {
               if (refNode == childVal) {
@@ -242,8 +238,7 @@ class InlineObjectLiterals implements CompilerPass {
             }
           }
         }
-
-
+        assignNodes.add(val);
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.

diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 2f5a8e10..a9331499 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -166,14 +165,11 @@ class InlineObjectLiterals implements CompilerPass {
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
           // A call target may be using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+          if (gramps.isCall() && gramps.getFirstChild() == parent) {
             return false;
           }
-
           // Deleting a property has different semantics from deleting
           // a variable, so deleted properties should not be inlined.
-
           // NOTE(nicksantos): This pass's object-splitting algorithm has
           // a blind spot. It assumes that if a property isn't defined on an
           // object, then the value is undefined. This is not true, because
@@ -192,12 +188,10 @@ class InlineObjectLiterals implements CompilerPass {
           }
           continue;
         }
-
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
-           return false;
+          return false;
         }
-
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
@@ -233,7 +223,7 @@ class InlineObjectLiterals implements CompilerPass {
           // will happen.
           for (Reference t : refs) {
             Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
+            while (refNode != null) {
               if (refNode == childVal) {
                 // There's a self-referential assignment
                 return false;

diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 93f078fa..0468fa96 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -317,35 +317,32 @@ public final class NodeUtil {
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
-  static boolean isValidDefineValue(Node val, Set<String> defines) {
-    switch (val.getType()) {
-      case Token.STRING:
-      case Token.NUMBER:
-      case Token.TRUE:
-      case Token.FALSE:
-        return true;
-
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
-
-      // Names are valid if and only if they are defines themselves.
-      case Token.NAME:
-      case Token.GETPROP:
-        if (val.isQualifiedName()) {
-          return defines.contains(val.getQualifiedName());
+    static boolean isValidDefineValue(Node val, Set<String> defines) {
+        switch (val.getType()) {
+            case Token.STRING:
+            case Token.NUMBER:
+            case Token.TRUE:
+            case Token.FALSE:
+                return true;
+            // Binary operators are only valid if both children are valid.
+            case Token.BITAND:
+            case Token.BITNOT:
+            case Token.BITOR:
+            case Token.BITXOR:
+            // Uniary operators are valid if the child is valid.
+            case Token.NOT:
+            case Token.NEG:
+                return isValidDefineValue(val.getFirstChild(), defines) &&
+                        isValidDefineValue(val.getSecondChild(), defines);
+            // Names are valid if and only if they are defines themselves.
+            case Token.NAME:
+            case Token.GETPROP:
+                if (val.isQualifiedName()) {
+                    return defines.contains(val.getQualifiedName());
+                }
         }
+        return false;
     }
-    return false;
-  }
-
   /**
    * Returns whether this a BLOCK node with no children.
    *

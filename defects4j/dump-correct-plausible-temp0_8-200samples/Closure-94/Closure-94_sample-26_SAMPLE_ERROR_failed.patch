diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 93f078fa..9f302d24 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -318,30 +318,23 @@ public final class NodeUtil {
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
-    switch (val.getType()) {
-      case Token.STRING:
-      case Token.NUMBER:
-      case Token.TRUE:
-      case Token.FALSE:
-        return true;
-
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
-
-      // Names are valid if and only if they are defines themselves.
-      case Token.NAME:
-      case Token.GETPROP:
-        if (val.isQualifiedName()) {
-          return defines.contains(val.getQualifiedName());
-        }
+    if (val.isString() || val.isNumber() || val.isBoolean() || val.isNull()) {
+      return true;
+    }
+    // Binary operators are only valid if both children are valid.
+    if (val.isBitOp() || val.isNot()) {
+      return isValidDefineValue(val.getFirstChild(), defines);
+    }
+    if (val.isNeg()) {
+      return isValidDefineValue(val.getFirstChild(), defines);
+    }
+    // Uniary operators are valid if the child is valid.
+    if (val.isUnaryOp()) {
+      return isValidDefineValue(val.getFirstChild(), defines);
+    }
+    // Names are valid if and only if they are defines themselves.
+    if (val.isName()) {
+      return defines.contains(val.getString());
     }
     return false;
   }

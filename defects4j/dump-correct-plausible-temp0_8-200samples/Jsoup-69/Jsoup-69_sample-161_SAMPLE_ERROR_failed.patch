diff --git a/src/main/java/org/jsoup/nodes/FormElement.java b/src/main/java/org/jsoup/nodes/FormElement.java
index baffcf1..1fd4fa1 100644
--- a/src/main/java/org/jsoup/nodes/FormElement.java
+++ b/src/main/java/org/jsoup/nodes/FormElement.java
@@ -45,8 +42,9 @@ public class FormElement extends Element {
         elements.add(element);
         return this;
     }
-
-
+    public Connection submit() {
+        return submit(null);
+    }
     /**
      * Prepare to submit this form. A Connection object is created with the request set up from the form values. You
      * can then set up other options (like user-agent, timeout, cookies), then execute it.
@@ -54,25 +52,27 @@ public class FormElement extends Element {
      * @throws IllegalArgumentException if the form's absolute action URL cannot be determined. Make sure you pass the
      * document's base URI when parsing.
      */
-    public Connection submit() {
+    public Connection submit(Node node) {
         String action = hasAttr("action") ? absUrl("action") : baseUri();
         Validate.notEmpty(action, "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
         Connection.Method method = attr("method").toUpperCase().equals("POST") ?
                 Connection.Method.POST : Connection.Method.GET;
-
-        return Jsoup.connect(action)
-                .data(formData())
-                .method(method);
+        Connection con = Jsoup.connect(action).data(formData()).method(method);
+        if (node != null) {
+            con.convertHtmlToAttachment(node);
+        }
+        return con;
+    }
+    public List<Connection.KeyVal> formData() {
+        return formData(null);
     }
-
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
-    public List<Connection.KeyVal> formData() {
+    public List<Connection.KeyVal> formData(String nodeName) {
         ArrayList<Connection.KeyVal> data = new ArrayList<>();
-
         // iterate the form control elements and accumulate their values
         for (Element el: elements) {
             if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
@@ -103,6 +102,9 @@ public class FormElement extends Element {
                 data.add(HttpConnection.KeyVal.create(name, el.val()));
             }
         }
+        if (nodeName != null) {
+            data.add(HttpConnection.KeyVal.create("nodeName", nodeName));
+        }
         return data;
     }
 }
\ No newline at end of file

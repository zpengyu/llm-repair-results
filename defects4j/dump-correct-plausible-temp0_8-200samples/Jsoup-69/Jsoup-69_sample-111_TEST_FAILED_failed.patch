diff --git a/src/main/java/org/jsoup/nodes/FormElement.java b/src/main/java/org/jsoup/nodes/FormElement.java
index baffcf1..c058bc8 100644
--- a/src/main/java/org/jsoup/nodes/FormElement.java
+++ b/src/main/java/org/jsoup/nodes/FormElement.java
@@ -16,44 +16,16 @@ import java.util.List;
  */
 public class FormElement extends Element {
     private final Elements elements = new Elements();
-
-    /**
-     * Create a new, standalone form element.
-     *
-     * @param tag        tag of this element
-     * @param baseUri    the base URI
-     * @param attributes initial attributes
-     */
     public FormElement(Tag tag, String baseUri, Attributes attributes) {
         super(tag, baseUri, attributes);
     }
-
-    /**
-     * Get the list of form control elements associated with this form.
-     * @return form controls associated with this element.
-     */
     public Elements elements() {
         return elements;
     }
-
-    /**
-     * Add a form control element to this form.
-     * @param element form control to add
-     * @return this form element, for chaining
-     */
     public FormElement addElement(Element element) {
         elements.add(element);
         return this;
     }
-
-
-    /**
-     * Prepare to submit this form. A Connection object is created with the request set up from the form values. You
-     * can then set up other options (like user-agent, timeout, cookies), then execute it.
-     * @return a connection prepared from the values of this form.
-     * @throws IllegalArgumentException if the form's absolute action URL cannot be determined. Make sure you pass the
-     * document's base URI when parsing.
-     */
     public Connection submit() {
         String action = hasAttr("action") ? absUrl("action") : baseUri();
         Validate.notEmpty(action, "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
@@ -64,17 +35,10 @@ public class FormElement extends Element {
                 .data(formData())
                 .method(method);
     }
-
-    /**
-     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
-     * list will not be reflected in the DOM.
-     * @return a list of key vals
-     */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<>();
-
         // iterate the form control elements and accumulate their values
-        for (Element el: elements) {
+        for (Element el : elements) {
             if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
             if (el.hasAttr("disabled")) continue; // skip disabled form inputs
             String name = el.attr("name");
@@ -84,7 +47,7 @@ public class FormElement extends Element {
             if ("select".equals(el.tagName())) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
-                for (Element option: options) {
+                for (Element option : options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
@@ -96,7 +59,7 @@ public class FormElement extends Element {
             } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                 // only add checkbox or radio if they have the checked attribute
                 if (el.hasAttr("checked")) {
-                    final String val = el.val().length() >  0 ? el.val() : "on";
+                    final String val = el.val().length() > 0 ? el.val() : "on";
                     data.add(HttpConnection.KeyVal.create(name, val));
                 }
             } else {

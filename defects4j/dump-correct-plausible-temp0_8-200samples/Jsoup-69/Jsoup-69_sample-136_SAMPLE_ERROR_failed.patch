diff --git a/src/main/java/org/jsoup/nodes/FormElement.java b/src/main/java/org/jsoup/nodes/FormElement.java
index baffcf1..c3d7e4c 100644
--- a/src/main/java/org/jsoup/nodes/FormElement.java
+++ b/src/main/java/org/jsoup/nodes/FormElement.java
@@ -16,7 +16,8 @@ import java.util.List;
  */
 public class FormElement extends Element {
     private final Elements elements = new Elements();
-
+    private final String action;
+    private final Connection.Method method;
     /**
      * Create a new, standalone form element.
      *
@@ -26,8 +27,10 @@ public class FormElement extends Element {
      */
     public FormElement(Tag tag, String baseUri, Attributes attributes) {
         super(tag, baseUri, attributes);
+        Attributes cleanedAttrs = Parser.filterAttributes(attributes, "action", "method");
+        action = cleanedAttrs.hasKey("action") ? cleanedAttrs.get("action") : "#";
+        method = cleanedAttrs.hasKey("method") ? Connection.Method.valueOf(cleanedAttrs.get("method").toUpperCase()) : Connection.Method.GET;
     }
-
     /**
      * Get the list of form control elements associated with this form.
      * @return form controls associated with this element.
@@ -55,16 +55,13 @@ public class FormElement extends Element {
      * document's base URI when parsing.
      */
     public Connection submit() {
-        String action = hasAttr("action") ? absUrl("action") : baseUri();
-        Validate.notEmpty(action, "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
-        Connection.Method method = attr("method").toUpperCase().equals("POST") ?
-                Connection.Method.POST : Connection.Method.GET;
-
-        return Jsoup.connect(action)
+        String absAction = absUrl(action);
+        Validate.notEmpty(absAction, "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
+        Connection con = Jsoup.connect(absAction)
                 .data(formData())
                 .method(method);
+        return con;
     }
-
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
@@ -79,26 +75,34 @@ public class FormElement extends Element {
             if (el.hasAttr("disabled")) continue; // skip disabled form inputs
             String name = el.attr("name");
             if (name.length() == 0) continue;
-            String type = el.attr("type");
-
-            if ("select".equals(el.tagName())) {
-                Elements options = el.select("option[selected]");
-                boolean set = false;
-                for (Element option: options) {
-                    data.add(HttpConnection.KeyVal.create(name, option.val()));
-                    set = true;
-                }
-                if (!set) {
-                    Element option = el.select("option").first();
+            if (el instanceof FormElement) {
+                data.add(HttpConnection.KeyVal.create(name, ((FormElement) el).formData()));
+            } else if (el instanceof SelectElement) {
+                SelectElement select = (SelectElement) el;
+                if (select.isMultiple()) {
+                    Elements selected = select.select("option[selected]");
+                    boolean set = false;
+                    for (Element option: selected) {
+                        data.add(HttpConnection.KeyVal.create(name, option.val()));
+                        set = true;
+                    }
+                    if (!set) {
+                        Element option = select.select("option").first();
+                        if (option != null)
+                            data.add(HttpConnection.KeyVal.create(name, option.val()));
+                    }
+                } else {
+                    Element option = select.select("option[selected]").first();
                     if (option != null)
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
+                    else {
+                        option = select.select("option").first();
+                        if (option != null)
+                            data.add(HttpConnection.KeyVal.create(name, option.val()));
+                    }
                 }
-            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
-                // only add checkbox or radio if they have the checked attribute
-                if (el.hasAttr("checked")) {
-                    final String val = el.val().length() >  0 ? el.val() : "on";
-                    data.add(HttpConnection.KeyVal.create(name, val));
-                }
+            } else if ("data".equals(el.attr("type"))) {
+                data.add(HttpConnection.KeyVal.create(name, el.data()));
             } else {
                 data.add(HttpConnection.KeyVal.create(name, el.val()));
             }

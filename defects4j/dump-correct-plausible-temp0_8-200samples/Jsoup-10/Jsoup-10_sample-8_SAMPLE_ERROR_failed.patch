diff --git a/src/main/java/org/jsoup/nodes/Node.java b/src/main/java/org/jsoup/nodes/Node.java
index 0d0f9d4..030943f 100644
--- a/src/main/java/org/jsoup/nodes/Node.java
+++ b/src/main/java/org/jsoup/nodes/Node.java
@@ -155,29 +155,30 @@ public abstract class Node implements Cloneable {
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
-
-        String relUrl = attr(attributeKey);
-        if (!hasAttr(attributeKey)) {
+        if (!hasAttr(attributeKey))
             return ""; // nothing to make absolute with
-        } else {
-            URL base;
-            try {
-                try {
-                    base = new URL(baseUri);
-                } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
-                    return abs.toExternalForm();
-                }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
-                return abs.toExternalForm();
-            } catch (MalformedURLException e) {
-                return "";
-            }
+        return absUrl(attr(attributeKey));
+    }
+    /**
+     * Make a URL absolute based on the baseUri.
+     * <p>
+     * E.g.: <code>String abs = URL.makeAbsolute( "/foo", "http://base.com/" );</code> with output <code>http://base.com/foo</code>
+     *
+     * @param url   potentially relative URL
+     * @param base  base URI
+     * @return
+     */
+    public String absUrl( String url ) {
+        Validate.notNull(url);
+        try {
+            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+            URI base = new URI(baseUri);
+            URI abs = base.resolve(url);
+            return abs.toASCIIString();
+        } catch (Exception e) {
+            return url;
         }
     }
-
     /**
      Get a child node by index
      @param index index of child node

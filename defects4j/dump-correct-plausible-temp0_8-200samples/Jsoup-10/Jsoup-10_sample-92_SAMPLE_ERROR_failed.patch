diff --git a/src/main/java/org/jsoup/nodes/Node.java b/src/main/java/org/jsoup/nodes/Node.java
index 0d0f9d4..6873a37 100644
--- a/src/main/java/org/jsoup/nodes/Node.java
+++ b/src/main/java/org/jsoup/nodes/Node.java
@@ -155,29 +155,57 @@ public abstract class Node implements Cloneable {
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
-
-        String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
         } else {
-            URL base;
-            try {
-                try {
-                    base = new URL(baseUri);
-                } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
-                    return abs.toExternalForm();
-                }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
-                return abs.toExternalForm();
-            } catch (MalformedURLException e) {
-                return "";
-            }
+            return absUrl(attr(attributeKey));
+        }
+    }
+    public String absUrl(String attributeKey, String base) {
+        Validate.notEmpty(attributeKey);
+        if (!hasAttr(attributeKey)) {
+            return ""; // nothing to make absolute with
+        } else {
+            return absUrl(attr(attributeKey), base);
+        }
+    }
+    /**
+     Get an absolute URL from an attribute that may be relative (i.e. an <a href=""> or <img src="">).
+     @param url The input URL
+     @return An absolute URL if possible, or the original relative URL input if not.
+     @see #attr(String)
+     @see java.net.URL#URL(java.net.URL, String)
+     */
+    public String absUrl(String url) {
+        Validate.notEmpty(url);
+        if (isAbsolute(url)) {
+            return url;
+        } else {
+            return absUrl(url, baseUri());
+        }
+    }
+    /**
+     Get an absolute URL from an attribute that may be relative (i.e. an <a href=""> or <img src="">).
+     @param url The input URL
+     @param base Base URL to qualify the input against
+     @return An absolute URL if possible, or the original relative URL input if not.
+     @see #attr(String)
+     @see java.net.URL#URL(java.net.URL, String)
+     */
+    public String absUrl(String url, String base) {
+        Validate.notEmpty(url);
+        Validate.notEmpty(base);
+        URL absUrl;
+        try {
+            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+            if (url.startsWith("?"))
+                url = base.replaceAll("\\?.*", "") + url;
+            absUrl = new URL(new URL(base), url);
+            return absUrl.toExternalForm();
+        } catch (MalformedURLException e) {
+            return "";
         }
     }
-
     /**
      Get a child node by index
      @param index index of child node

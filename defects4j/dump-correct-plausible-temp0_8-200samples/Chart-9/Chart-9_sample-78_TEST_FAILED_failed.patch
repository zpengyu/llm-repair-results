diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java
index 4067e3e..11e24b7 100644
--- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -915,46 +915,43 @@ public class TimeSeries extends Series implements Cloneable, Serializable {
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
-    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
-        throws CloneNotSupportedException {
-
-        if (start == null) {
-            throw new IllegalArgumentException("Null 'start' argument.");
-        }
-        if (end == null) {
-            throw new IllegalArgumentException("Null 'end' argument.");
-        }
-        if (start.compareTo(end) > 0) {
-            throw new IllegalArgumentException(
-                    "Requires start on or before end.");
-        }
-        boolean emptyRange = false;
-        int startIndex = getIndex(start);
-        if (startIndex < 0) {
-            startIndex = -(startIndex + 1);
-            if (startIndex == this.data.size()) {
-                emptyRange = true;  // start is after last data item
-            }
-        }
-        int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
-        }
-        if (endIndex < 0) {
-            emptyRange = true;
-        }
-        if (emptyRange) {
-            TimeSeries copy = (TimeSeries) super.clone();
-            copy.data = new java.util.ArrayList();
-            return copy;
-        }
-        else {
-            return createCopy(startIndex, endIndex);
+public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
+    throws CloneNotSupportedException {
+    if (start == null) {
+        throw new IllegalArgumentException("Null 'start' argument.");
+    }
+    if (end == null) {
+        throw new IllegalArgumentException("Null 'end' argument.");
+    }
+    if (start.compareTo(end) > 0) {
+        throw new IllegalArgumentException(
+                "Requires start on or before end.");
+    }
+    boolean emptyRange = false;
+    int startIndex = getIndex(start);
+    if (startIndex < 0) {
+        startIndex = -(startIndex + 1);
+        if (startIndex == this.data.size()) {
+            emptyRange = true;  // start is after last data item
         }
-
     }
-
+    int endIndex = getIndex(end);
+    if (endIndex < 0) {             // end period is not in original series
+        endIndex = -(endIndex + 1); // this is first item AFTER end period
+        endIndex = endIndex - 1;    // so this is last item BEFORE end
+    }
+    if (endIndex < 0) {
+        emptyRange = true;
+    }
+    if (emptyRange) {
+        TimeSeries copy = (TimeSeries) super.clone();
+        copy.data = new java.util.ArrayList();
+        return copy;
+    }
+    else {
+        return createCopy(startIndex, endIndex);
+    }
+}
     /**
      * Tests the series for equality with an arbitrary object.
      *

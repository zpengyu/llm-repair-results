diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java
index 4067e3e..d9a9dae 100644
--- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -928,33 +927,33 @@ public class TimeSeries extends Series implements Cloneable, Serializable {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
-        boolean emptyRange = false;
         int startIndex = getIndex(start);
-        if (startIndex < 0) {
-            startIndex = -(startIndex + 1);
-            if (startIndex == this.data.size()) {
-                emptyRange = true;  // start is after last data item
-            }
-        }
         int endIndex = getIndex(end);
         if (endIndex < 0) {             // end period is not in original series
             endIndex = -(endIndex + 1); // this is first item AFTER end period
             endIndex = endIndex - 1;    // so this is last item BEFORE end
         }
-        if (endIndex < 0) {
-            emptyRange = true;
+        if (startIndex < 0) {
+            // Special case: if start is before the start of the series, then
+            // we can't use the index lookup on the start to determine the
+            // 'beginning' of the required range (since the index will be -1
+            // ... which is not helpful).
+            startIndex = 0;
         }
-        if (emptyRange) {
-            TimeSeries copy = (TimeSeries) super.clone();
-            copy.data = new java.util.ArrayList();
-            return copy;
+        if (startIndex > endIndex) {
+            String msg = "Requires startIndex (" + startIndex + ") on or "
+                + "before endIndex (" + endIndex + ").";
+            throw new IllegalArgumentException(msg);
         }
-        else {
-            return createCopy(startIndex, endIndex);
+        TimeSeries copy = (TimeSeries) super.clone();
+        copy.data = new java.util.ArrayList();
+        if (this.data.size() > 0) {
+            for (int index = startIndex; index <= endIndex; index++) {
+                copy.data.add(this.data.get(index));
+            }
         }
-
+        return copy;
     }
-
     /**
      * Tests the series for equality with an arbitrary object.
      *

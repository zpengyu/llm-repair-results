diff --git a/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java b/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java
index 9eaf0837..5ce415b0 100644
--- a/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java
+++ b/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java
@@ -2089,22 +2089,14 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
     /**
      * A submap used for prefix views over the {@link Trie}.
      */
-    private class PrefixRangeMap extends RangeMap {
-
+private class PrefixRangeMap extends RangeMap {
         private final K prefix;
-
         private final int offsetInBits;
-
         private final int lengthInBits;
-
         private K fromKey = null;
-
         private K toKey = null;
-
         private transient int expectedModCount = 0;
-
         private int size = -1;
-
         /**
          * Creates a {@link PrefixRangeMap}.
          */
@@ -2217,17 +2189,15 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
          */
         @Override
         protected boolean inFromRange(final K key, final boolean forceInclusive) {
-            return getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, key);
+            return forceInclusive ? getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, key) : getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, key);
         }
-
         /**
          * Returns true if the provided Key is in the TO range of the {@link PrefixRangeMap}.
          */
         @Override
         protected boolean inToRange(final K key, final boolean forceInclusive) {
-            return getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, key);
+            return forceInclusive ? getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, key) : getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, key);
         }
-
         @Override
         protected Set<Map.Entry<K, V>> createEntrySet() {
             return new PrefixRangeEntrySet(this);

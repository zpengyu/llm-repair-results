diff --git a/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java b/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java
index 9eaf0837..fa4027cc 100644
--- a/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java
+++ b/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java
@@ -2258,9 +2223,64 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
                                                  final K toKey, final boolean toInclusive) {
             return new RangeEntryMap(fromKey, fromInclusive, toKey, toInclusive);
         }
-
+        private class PrefixRangeEntrySet extends EntrySet {
+            PrefixRangeEntrySet(final Trie<K, V> trie) {
+                super(trie);
+            }
+            @Override
+            public boolean add(final Entry<K, V> o) {
+                return super.add(o);
+            }
+            @Override
+            public boolean addAll(final Collection<? extends Entry<K, V>> c) {
+                return super.addAll(c);
+            }
+            @Override
+            public void clear() {
+                super.clear();
+            }
+            @Override
+            public boolean contains(final Object o) {
+                return super.contains(o);
+            }
+            @Override
+            public boolean containsAll(final Collection<?> c) {
+                return super.containsAll(c);
+            }
+            @Override
+            public boolean isEmpty() {
+                return super.isEmpty();
+            }
+            @Override
+            public Iterator<Entry<K, V>> iterator() {
+                return new PrefixRangeIterator(PrefixRangeMap.this, trie);
+            }
+            @Override
+            public boolean remove(final Object o) {
+                return super.remove(o);
+            }
+            @Override
+            public boolean removeAll(final Collection<?> c) {
+                return super.removeAll(c);
+            }
+            @Override
+            public boolean retainAll(final Collection<?> c) {
+                return super.retainAll(c);
+            }
+            @Override
+            public int size() {
+                return super.size();
+            }
+            @Override
+            public Object[] toArray() {
+                return super.toArray();
+            }
+            @Override
+            public <T> T[] toArray(final T[] a) {
+                return super.toArray(a);
+            }
+        }
     }
-
     /**
      * A prefix {@link RangeEntrySet} view of the {@link Trie}.
      */

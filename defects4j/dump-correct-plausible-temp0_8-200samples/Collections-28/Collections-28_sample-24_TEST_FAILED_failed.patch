diff --git a/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java b/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java
index 9eaf0837..d8e7dfee 100644
--- a/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java
+++ b/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java
@@ -2122,47 +2113,29 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
          */
         private int fixup() {
             // The trie has changed since we last found our toKey / fromKey
-            if (size == - 1 || AbstractPatriciaTrie.this.modCount != expectedModCount) {
+            if (size == -1 || AbstractPatriciaTrie.this.modCount != expectedModCount) {
                 final Iterator<Map.Entry<K, V>> it = super.entrySet().iterator();
                 size = 0;
-
                 Map.Entry<K, V> entry = null;
                 if (it.hasNext()) {
                     entry = it.next();
                     size = 1;
                 }
-
                 fromKey = entry == null ? null : entry.getKey();
-                if (fromKey != null) {
-                    final TrieEntry<K, V> prior = previousEntry((TrieEntry<K, V>)entry);
-                    fromKey = prior == null ? null : prior.getKey();
-                }
-
-                toKey = fromKey;
-
+                toKey = entry == null ? null : entry.getKey();
                 while (it.hasNext()) {
                     ++size;
                     entry = it.next();
                 }
-
                 toKey = entry == null ? null : entry.getKey();
-
-                if (toKey != null) {
-                    entry = nextEntry((TrieEntry<K, V>)entry);
-                    toKey = entry == null ? null : entry.getKey();
-                }
-
                 expectedModCount = AbstractPatriciaTrie.this.modCount;
             }
-
             return size;
         }
-
         @Override
         public K firstKey() {
             fixup();
-
-            Map.Entry<K,V> e = null;
+            Map.Entry<K, V> e = null;
             if (fromKey == null) {
                 e = firstEntry();
             } else {
@@ -2180,8 +2150,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
         @Override
         public K lastKey() {
             fixup();
-
-            Map.Entry<K,V> e = null;
+            Map.Entry<K, V> e = null;
             if (toKey == null) {
                 e = lastEntry();
             } else {

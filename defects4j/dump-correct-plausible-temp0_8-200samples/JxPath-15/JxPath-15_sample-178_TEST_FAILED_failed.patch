diff --git a/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java b/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java
index 0ea5b51..0a714c2 100644
--- a/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java
+++ b/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java
@@ -32,7 +32,7 @@ import org.apache.commons.jxpath.ri.model.NodePointer;
 public class UnionContext extends NodeSetContext {
     private EvalContext contexts[];
     private boolean prepared;
-
+    private int position;
     public UnionContext(EvalContext parentContext, EvalContext contexts[]) {
         super(parentContext, new BasicNodeSet());
         this.contexts = contexts;
@@ -41,25 +40,30 @@ public class UnionContext extends NodeSetContext {
     public int getDocumentOrder() {
         return contexts.length > 1 ? 1 : super.getDocumentOrder();
     }
-
     public boolean setPosition(int position) {
-        if (!prepared) {
-            prepared = true;
-            BasicNodeSet nodeSet = (BasicNodeSet) getNodeSet();
-            ArrayList pointers = new ArrayList();
-            for (int i = 0; i < contexts.length; i++) {
-                EvalContext ctx = (EvalContext) contexts[i];
-                while (ctx.nextSet()) {
-                    while (ctx.nextNode()) {
-                        NodePointer ptr = ctx.getCurrentNodePointer();
-                        if (!pointers.contains(ptr)) {
-                            nodeSet.add(ptr);
-                            pointers.add(ptr);
-                        }
+        this.position = position;
+        return prepared;
+    }
+    public boolean nextSet() {
+        if (prepared) {
+            return super.nextSet();
+        }
+        BasicNodeSet nodeSet = (BasicNodeSet) getNodeSet();
+        ArrayList pointers = new ArrayList();
+        for (int i = 0; i < contexts.length; i++) {
+            EvalContext ctx = (EvalContext) contexts[i];
+            while (ctx.nextSet()) {
+                ctx.setPosition(position);
+                while (ctx.nextNode()) {
+                    NodePointer ptr = ctx.getCurrentNodePointer();
+                    if (!pointers.contains(ptr)) {
+                        nodeSet.add(ptr);
+                        pointers.add(ptr);
                     }
                 }
             }
         }
-        return super.setPosition(position);
+        prepared = super.nextSet();
+        return prepared;
     }
 }
\ No newline at end of file

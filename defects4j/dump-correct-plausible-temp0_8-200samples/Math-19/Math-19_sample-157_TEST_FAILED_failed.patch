diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 140e9d4f9..07af60187 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -535,8 +533,16 @@ public class CMAESOptimizer
                 boundaries = new double[2][];
                 boundaries[0] = lB;
                 boundaries[1] = uB;
-
                 // Abort early if the normalization will overflow (cf. "encode" method).
+                for (int i = 0; i < init.length; i++) {
+                    if (Double.doubleToLongBits(init[i]) == Double.doubleToLongBits(boundaries[0][i])) {
+                        // We cannot use "==" because it would check for "infinity" too.
+                        if (Double.doubleToLongBits(init[i]) == Double.doubleToLongBits(boundaries[1][i])) {
+                            // Both values are the same, and it may be infinite (NaN does not work, because it would not be equal to itself).
+                            throw new OutOfRangeException(init[i], boundaries[0][i], boundaries[1][i]);
+                        }
+                    }
+                }
             }
         } else {
             // Convert API to internal handling of boundaries.

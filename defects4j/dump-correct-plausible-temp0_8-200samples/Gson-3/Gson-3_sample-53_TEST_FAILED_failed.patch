diff --git a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java b/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
index cd5c2f6c..2278f9f7 100644
--- a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
+++ b/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
@@ -125,78 +125,75 @@ public final class ConstructorConstructor {
    * subtypes.
    */
   @SuppressWarnings("unchecked") // use runtime checks to guarantee that 'T' is what it is
-  private <T> ObjectConstructor<T> newDefaultImplementationConstructor(
-      final Type type, Class<? super T> rawType) {
-    if (Collection.class.isAssignableFrom(rawType)) {
-      if (SortedSet.class.isAssignableFrom(rawType)) {
-        return new ObjectConstructor<T>() {
-          @Override public T construct() {
-            return (T) new TreeSet<Object>();
-          }
-        };
-      } else if (EnumSet.class.isAssignableFrom(rawType)) {
-        return new ObjectConstructor<T>() {
-          @SuppressWarnings("rawtypes")
-          @Override public T construct() {
-            if (type instanceof ParameterizedType) {
-              Type elementType = ((ParameterizedType) type).getActualTypeArguments()[0];
-              if (elementType instanceof Class) {
-                return (T) EnumSet.noneOf((Class)elementType);
-              } else {
-                throw new JsonIOException("Invalid EnumSet type: " + type.toString());
-              }
+private <T> ObjectConstructor<T> newDefaultImplementationConstructor(
+    final Type type, Class<? super T> rawType) {
+  if (Collection.class.isAssignableFrom(rawType)) {
+    if (SortedSet.class.isAssignableFrom(rawType)) {
+      return new ObjectConstructor<T>() {
+        @Override public T construct() {
+          return (T) new TreeSet<Object>();
+        }
+      };
+    } else if (EnumSet.class.isAssignableFrom(rawType)) {
+      return new ObjectConstructor<T>() {
+        @SuppressWarnings("rawtypes")
+        @Override public T construct() {
+          if (type instanceof ParameterizedType) {
+            Type elementType = ((ParameterizedType) type).getActualTypeArguments()[0];
+            if (elementType instanceof Class) {
+              return (T) EnumSet.noneOf((Class)elementType);
             } else {
               throw new JsonIOException("Invalid EnumSet type: " + type.toString());
             }
+          } else {
+            throw new JsonIOException("Invalid EnumSet type: " + type.toString());
           }
-        };
-      } else if (Set.class.isAssignableFrom(rawType)) {
-        return new ObjectConstructor<T>() {
-          @Override public T construct() {
-            return (T) new LinkedHashSet<Object>();
-          }
-        };
-      } else if (Queue.class.isAssignableFrom(rawType)) {
-        return new ObjectConstructor<T>() {
-          @Override public T construct() {
-            return (T) new LinkedList<Object>();
-          }
-        };
-      } else {
-        return new ObjectConstructor<T>() {
-          @Override public T construct() {
-            return (T) new ArrayList<Object>();
-          }
-        };
-      }
+        }
+      };
+    } else if (Set.class.isAssignableFrom(rawType)) {
+      return new ObjectConstructor<T>() {
+        @Override public T construct() {
+          return (T) new LinkedHashSet<Object>();
+        }
+      };
+    } else if (Queue.class.isAssignableFrom(rawType)) {
+      return new ObjectConstructor<T>() {
+        @Override public T construct() {
+          return (T) new LinkedList<Object>();
+        }
+      };
+    } else {
+      return new ObjectConstructor<T>() {
+        @Override public T construct() {
+          return (T) new ArrayList<Object>();
+        }
+      };
     }
-
-    if (Map.class.isAssignableFrom(rawType)) {
-      if (SortedMap.class.isAssignableFrom(rawType)) {
-        return new ObjectConstructor<T>() {
-          @Override public T construct() {
-            return (T) new TreeMap<Object, Object>();
-          }
-        };
-      } else if (type instanceof ParameterizedType && !(String.class.isAssignableFrom(
-          TypeToken.get(((ParameterizedType) type).getActualTypeArguments()[0]).getRawType()))) {
-        return new ObjectConstructor<T>() {
-          @Override public T construct() {
-            return (T) new LinkedHashMap<Object, Object>();
-          }
-        };
-      } else {
-        return new ObjectConstructor<T>() {
-          @Override public T construct() {
-            return (T) new LinkedTreeMap<String, Object>();
-          }
-        };
-      }
+  }
+  if (Map.class.isAssignableFrom(rawType)) {
+    if (SortedMap.class.isAssignableFrom(rawType)) {
+      return new ObjectConstructor<T>() {
+        @Override public T construct() {
+          return (T) new TreeMap<Object, Object>();
+        }
+      };
+    } else if (type instanceof ParameterizedType && !String.class.isAssignableFrom(
+        TypeToken.get(((ParameterizedType) type).getActualTypeArguments()[0]).getRawType())) {
+      return new ObjectConstructor<T>() {
+        @Override public T construct() {
+          return (T) new LinkedHashMap<Object, Object>();
+        }
+      };
+    } else {
+      return new ObjectConstructor<T>() {
+        @Override public T construct() {
+          return (T) new LinkedTreeMap<String, Object>();
+        }
+      };
     }
-
-    return null;
   }
-
+  return null;
+}
   private <T> ObjectConstructor<T> newUnsafeAllocator(
       final Type type, final Class<? super T> rawType) {
     return new ObjectConstructor<T>() {

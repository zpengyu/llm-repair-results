    public Period normalizedStandard(PeriodType type) {
        type = DateTimeUtils.getPeriodType(type);
        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
        int years = getYears();
        int months = getMonths();
        int days = getDays();
        if (years != 0 || months != 0) {
            int[] points = ISOChronology.getInstanceUTC().get(this, millis);
            millis -= points[5] * DateTimeConstants.MILLIS_PER_DAY;
            millis -= points[6] * DateTimeConstants.MILLIS_PER_WEEK;
            millis -= points[7] * DateTimeConstants.MILLIS_PER_WEEK;
            years = FieldUtils.safeAdd(years, months / 12);
            months = months % 12;
            if (years != 0) {
                millis = type.getFieldType(DurationFieldType.years()).set(millis, years);
            }
            if (months != 0) {
                millis = type.getFieldType(DurationFieldType.months()).set(millis, months);
            }
        }
        return new Period(millis, type, ISOChronology.getInstanceUTC());
    }



    public Period normalizedStandard(PeriodType type) {
        type = DateTimeUtils.getPeriodType(type);
        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
        int seconds = getSeconds();
        int minutes = getMinutes();
        int hours = getHours();
        int days = getDays();
        int weeks = getWeeks();
        if (seconds == 0 && minutes == 0 && hours == 0 && days == 0 && weeks == 0) {
            return new Period(millis, type, ISOChronology.getInstanceUTC());
        }
        if (seconds < 0 || seconds >= 60) {
            int max = seconds / 60;
            minutes = FieldUtils.safeAdd(minutes, max);
            seconds = FieldUtils.safeAdd(seconds, -max * 60);
        }
        if (minutes < 0 || minutes >= 60) {
            int max = minutes / 60;
            hours = FieldUtils.safeAdd(hours, max);
            minutes = FieldUtils.safeAdd(minutes, -max * 60);
        }
        if (hours < 0 || hours >= 24) {
            int max = hours / 24;
            days = FieldUtils.safeAdd(days, max);
            hours = FieldUtils.safeAdd(hours, -max * 24);
        }
        if (days < 0 || days >= 7) {
            int max = days / 7;
            weeks = FieldUtils.safeAdd(weeks, max);
            days = FieldUtils.safeAdd(days, -max * 7);
        }
        millis += (((((((weeks * 7L) + days) * 24L) + hours) * 60L) + minutes) * 60L) + seconds;
        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
        int years = getYears();
        int months = getMonths();
        if (years != 0 || months != 0) {
            years = FieldUtils.safeAdd(years, months / 12);
            months = months % 12;
            if (years != 0) {
                result = result.withYears(years);
            }
            if (months != 0) {
                result = result.withMonths(months);
            }
        }
        return result;
    }
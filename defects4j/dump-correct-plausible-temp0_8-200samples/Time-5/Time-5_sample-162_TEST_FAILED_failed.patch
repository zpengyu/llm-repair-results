diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java
index 8fce39c6..261e8d2b 100644
--- a/src/main/java/org/joda/time/Period.java
+++ b/src/main/java/org/joda/time/Period.java
@@ -1616,11 +1616,35 @@ public final class Period
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
         long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+        int seconds = getSeconds();
+        int minutes = getMinutes();
+        int hours = getHours();
+        int days = getDays();
+        int weeks = getWeeks();
+        if (seconds == 0 && minutes == 0 && hours == 0 && days == 0 && weeks == 0) {
+            return new Period(millis, type, ISOChronology.getInstanceUTC());
+        }
+        if (seconds < 0 || seconds >= 60) {
+            int max = seconds / 60;
+            minutes = FieldUtils.safeAdd(minutes, max);
+            seconds = FieldUtils.safeAdd(seconds, -max * 60);
+        }
+        if (minutes < 0 || minutes >= 60) {
+            int max = minutes / 60;
+            hours = FieldUtils.safeAdd(hours, max);
+            minutes = FieldUtils.safeAdd(minutes, -max * 60);
+        }
+        if (hours < 0 || hours >= 24) {
+            int max = hours / 24;
+            days = FieldUtils.safeAdd(days, max);
+            hours = FieldUtils.safeAdd(hours, -max * 24);
+        }
+        if (days < 0 || days >= 7) {
+            int max = days / 7;
+            weeks = FieldUtils.safeAdd(weeks, max);
+            days = FieldUtils.safeAdd(days, -max * 7);
+        }
+        millis += (((((((weeks * 7L) + days) * 24L) + hours) * 60L) + minutes) * 60L) + seconds;
         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
         int years = getYears();
         int months = getMonths();

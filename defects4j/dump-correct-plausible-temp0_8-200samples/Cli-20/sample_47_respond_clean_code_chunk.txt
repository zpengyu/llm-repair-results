public class PosixParser extends Parser {
    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;
        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();
        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();
            // handle long option --foo or --foo=bar
            if (token.startsWith("--"))
            {
                if (token.indexOf('=') != -1)
                {
                    tokens.add(token.substring(0, token.indexOf('=')));
                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
                }
                else
                {
                    tokens.add(token);
                }
            }
            // single hyphen
            else if ("-".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith("-"))
            {
                if (token.length() == 2)
                {
                    processOptionToken(token, stopAtNonOption);
                }
                else if (options.hasOption(token))
                {
                    tokens.add(token);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else if (stopAtNonOption)
            {
                process(token);
            }
            else
            {
                tokens.add(token);
            }
        }
        return (String[]) tokens.toArray(new String[tokens.size()]);
    }
    private void gobble(Iterator iter)
    {
        if (iter.hasNext())
        {
            String arg = (String) iter.next();
            // swallow quoted argument
            if (arg.startsWith("\"") || arg.startsWith("'"))
            {
                StringBuffer buffer = new StringBuffer(arg);
                while (iter.hasNext())
                {
                    String t = (String) iter.next();
                    buffer.append(" ");
                    buffer.append(t);
                    if (t.endsWith(arg.substring(0, 1)))
                    {
                        break;
                    }
                }
                tokens.add(buffer.toString().substring(1, buffer.toString().length() - 1));
            }
        }
    }
}
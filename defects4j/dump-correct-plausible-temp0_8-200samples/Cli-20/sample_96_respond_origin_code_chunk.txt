    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith("--"))
            {
                if (token.indexOf('=') != -1)
                {
                    tokens.add(token.substring(0, token.indexOf('=')));
                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
                }
                else
                {
                    tokens.add(token);
                }
            }

            // single hyphen
            else if ("-".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith("-"))
            {
                if (token.length() == 2)
                {
                    processOptionToken(token, stopAtNonOption);
                }
                else
                {
                    // process the -foo bar, --foo bar, -f bar, -f=bar and
                    // --foo=bar
                    // cases
                    if (options.hasOption(token))
                    {
                        tokens.add(token);
                    }
                    else
                    {
                        final String optName = token.substring(0, 2);
                        final Option option = options.getOption(optName);

                        if (option != null)
                        {
                            final String optValue = token.substring(2);

                            if (option.hasArg())
                            {
                                tokens.add(optName);
                                tokens.add(optValue);
                            }
                            else
                            {
                                // don't add the arg to the tokens list because
                                // the option doesn't take an arg.
                                // instead add the tokens from the "burst" of
                                // the option value (see
                                // burstToken(String, boolean))
                                burstToken(token, stopAtNonOption);
                            }
                        }
                        else
                        {
                            // requires bursting
                            burstToken(token, stopAtNonOption);
                        }
                    }
                }
            }
            else if (stopAtNonOption)
            {
                process(token);
            }
            else
            {
                tokens.add(token);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
    }


diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
index ddadb9ea8..ab6c8cda4 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
@@ -45,7 +38,7 @@ public abstract class JavaUtilCollectionsDeserializers
      *    which we essentially coerce into the other one
      */
     private final static Class<?> CLASS_UNMODIFIABLE_MAP;
-
+    private final static Class<?> CLASS_UNMODIFIABLE_MAP2;
     static {
         Set<?> set = Collections.singleton(Boolean.TRUE);
         CLASS_SINGLETON_SET = set.getClass();
@@ -59,8 +50,11 @@ public abstract class JavaUtilCollectionsDeserializers
         Map<?,?> map = Collections.singletonMap("a", "b");
         CLASS_SINGLETON_MAP = map.getClass();
         CLASS_UNMODIFIABLE_MAP = Collections.unmodifiableMap(map).getClass();
+        //for new version of library 
+        Set<?> set2 = new HashSet<>();
+        Collections.singleton(Boolean.TRUE);
+        CLASS_UNMODIFIABLE_MAP2 = Collections.unmodifiableSet(set2).getClass();
     }
-
     public static JsonDeserializer<?> findForCollection(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
@@ -75,7 +68,7 @@ public abstract class JavaUtilCollectionsDeserializers
         } else if (type.hasRawClass(CLASS_SINGLETON_SET)) {
             conv = converter(TYPE_SINGLETON_SET, type, Set.class);
         // [databind#2265]: we may have another impl type for unmodifiable Lists, check both
-        } else if (type.hasRawClass(CLASS_UNMODIFIABLE_LIST)) {
+        } else if (type.hasRawClass(CLASS_UNMODIFIABLE_LIST) || type.hasRawClass(CLASS_UNMODIFIABLE_MAP2)) {
             conv = converter(TYPE_UNMODIFIABLE_LIST, type, List.class);
         } else if (type.hasRawClass(CLASS_UNMODIFIABLE_SET)) {
             conv = converter(TYPE_UNMODIFIABLE_SET, type, Set.class);

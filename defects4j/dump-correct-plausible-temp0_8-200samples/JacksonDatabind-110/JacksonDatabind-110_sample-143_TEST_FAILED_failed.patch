diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
index ddadb9ea8..af8e4e3bf 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
@@ -75,7 +63,8 @@ public abstract class JavaUtilCollectionsDeserializers
         } else if (type.hasRawClass(CLASS_SINGLETON_SET)) {
             conv = converter(TYPE_SINGLETON_SET, type, Set.class);
         // [databind#2265]: we may have another impl type for unmodifiable Lists, check both
-        } else if (type.hasRawClass(CLASS_UNMODIFIABLE_LIST)) {
+        } else if (type.hasRawClass(CLASS_UNMODIFIABLE_LIST) ||
+            type.findSuperType(Collection.class).hasRawClass(CLASS_UNMODIFIABLE_LIST)) {
             conv = converter(TYPE_UNMODIFIABLE_LIST, type, List.class);
         } else if (type.hasRawClass(CLASS_UNMODIFIABLE_SET)) {
             conv = converter(TYPE_UNMODIFIABLE_SET, type, Set.class);
@@ -94,7 +81,8 @@ public abstract class JavaUtilCollectionsDeserializers
         // 10-Jan-2017, tatu: Some types from `java.util.Collections`/`java.util.Arrays` need bit of help...
         if (type.hasRawClass(CLASS_SINGLETON_MAP)) {
             conv = converter(TYPE_SINGLETON_MAP, type, Map.class);
-        } else if (type.hasRawClass(CLASS_UNMODIFIABLE_MAP)) {
+        } else if (type.hasRawClass(CLASS_UNMODIFIABLE_MAP) ||
+            type.findSuperType(Map.class).hasRawClass(CLASS_UNMODIFIABLE_MAP)) {
             conv = converter(TYPE_UNMODIFIABLE_MAP, type, Map.class);
         } else {
             return null;

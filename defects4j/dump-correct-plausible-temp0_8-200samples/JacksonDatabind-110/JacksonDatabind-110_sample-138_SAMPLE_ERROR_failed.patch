diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
index ddadb9ea8..75920b62b 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
@@ -18,8 +18,7 @@ import com.fasterxml.jackson.databind.util.Converter;
  *
  * @since 2.9.4
  */
-public abstract class JavaUtilCollectionsDeserializers
-{
+public abstract class JavaUtilCollectionsDeserializers {
     private final static int TYPE_SINGLETON_SET = 1;
     private final static int TYPE_SINGLETON_LIST = 2;
     private final static int TYPE_SINGLETON_MAP = 3;
@@ -55,18 +45,12 @@ public abstract class JavaUtilCollectionsDeserializers
         CLASS_SINGLETON_LIST = list.getClass();
         CLASS_UNMODIFIABLE_LIST = Collections.unmodifiableList(list).getClass();
         // for [databind#2265]
-
-        Map<?,?> map = Collections.singletonMap("a", "b");
-        CLASS_SINGLETON_MAP = map.getClass();
-        CLASS_UNMODIFIABLE_MAP = Collections.unmodifiableMap(map).getClass();
+        CLASS_UNMODIFIABLE_MAP = Collections.singletonMap(list, list).getClass();
     }
-
     public static JsonDeserializer<?> findForCollection(DeserializationContext ctxt,
-            JavaType type)
-        throws JsonMappingException
-    {
+                                                        JavaType type)
+            throws JsonMappingException {
         JavaUtilCollectionsConverter conv;
-
         // 10-Jan-2017, tatu: Some types from `java.util.Collections`/`java.util.Arrays` need bit of help...
         if (type.hasRawClass(CLASS_AS_ARRAYS_LIST)) {
             conv = converter(TYPE_AS_LIST, type, List.class);
@@ -74,7 +58,7 @@ public abstract class JavaUtilCollectionsDeserializers
             conv = converter(TYPE_SINGLETON_LIST, type, List.class);
         } else if (type.hasRawClass(CLASS_SINGLETON_SET)) {
             conv = converter(TYPE_SINGLETON_SET, type, Set.class);
-        // [databind#2265]: we may have another impl type for unmodifiable Lists, check both
+            // [databind#2265]: we may have another impl type for unmodifiable Lists, check both
         } else if (type.hasRawClass(CLASS_UNMODIFIABLE_LIST)) {
             conv = converter(TYPE_UNMODIFIABLE_LIST, type, List.class);
         } else if (type.hasRawClass(CLASS_UNMODIFIABLE_SET)) {
@@ -84,13 +68,10 @@ public abstract class JavaUtilCollectionsDeserializers
         }
         return new StdDelegatingDeserializer<Object>(conv);
     }
-
     public static JsonDeserializer<?> findForMap(DeserializationContext ctxt,
-            JavaType type)
-        throws JsonMappingException
-    {
+                                                 JavaType type)
+            throws JsonMappingException {
         JavaUtilCollectionsConverter conv;
-
         // 10-Jan-2017, tatu: Some types from `java.util.Collections`/`java.util.Arrays` need bit of help...
         if (type.hasRawClass(CLASS_SINGLETON_MAP)) {
             conv = converter(TYPE_SINGLETON_MAP, type, Map.class);
@@ -101,24 +82,18 @@ public abstract class JavaUtilCollectionsDeserializers
         }
         return new StdDelegatingDeserializer<Object>(conv);
     }
-    
     static JavaUtilCollectionsConverter converter(int kind,
-            JavaType concreteType, Class<?> rawSuper)
-    {
+                                                  JavaType concreteType, Class<?> rawSuper) {
         return new JavaUtilCollectionsConverter(kind, concreteType.findSuperType(rawSuper));
     }
-
     /**
      * Implementation used for converting from various generic container
      * types ({@link java.util.Set}, {@link java.util.List}, {@link java.util.Map})
      * into more specific implementations accessible via {@code java.util.Collections}.
      */
-    private static class JavaUtilCollectionsConverter implements Converter<Object,Object>
-    {
+    private static class JavaUtilCollectionsConverter implements Converter<Object, Object> {
         private final JavaType _inputType;
-
         private final int _kind;
-
         private JavaUtilCollectionsConverter(int kind, JavaType inputType) {
             _inputType = inputType;
             _kind = kind;
@@ -129,42 +103,35 @@ public abstract class JavaUtilCollectionsDeserializers
             if (value == null) { // is this legal to get?
                 return null;
             }
-            
             switch (_kind) {
-            case TYPE_SINGLETON_SET:
-                {
+                case TYPE_SINGLETON_SET: {
                     Set<?> set = (Set<?>) value;
                     _checkSingleton(set.size());
                     return Collections.singleton(set.iterator().next());
                 }
-            case TYPE_SINGLETON_LIST:
-                {
+                case TYPE_SINGLETON_LIST: {
                     List<?> list = (List<?>) value;
                     _checkSingleton(list.size());
                     return Collections.singletonList(list.get(0));
                 }
-            case TYPE_SINGLETON_MAP:
-                {
-                    Map<?,?> map = (Map<?,?>) value;
+                case TYPE_SINGLETON_MAP: {
+                    Map<?, ?> map = (Map<?, ?>) value;
                     _checkSingleton(map.size());
-                    Map.Entry<?,?> entry = map.entrySet().iterator().next();
+                    Map.Entry<?, ?> entry = map.entrySet().iterator().next();
                     return Collections.singletonMap(entry.getKey(), entry.getValue());
                 }
-
-            case TYPE_UNMODIFIABLE_SET:
-                return Collections.unmodifiableSet((Set<?>) value);
-            case TYPE_UNMODIFIABLE_LIST:
-                return Collections.unmodifiableList((List<?>) value);
-            case TYPE_UNMODIFIABLE_MAP:
-                return Collections.unmodifiableMap((Map<?,?>) value);
-
-            case TYPE_AS_LIST:
-            default:
-                // Here we do not actually care about impl type, just return List as-is:
-                return value;
+                case TYPE_UNMODIFIABLE_SET:
+                    return Collections.unmodifiableSet((Set<?>) value);
+                case TYPE_UNMODIFIABLE_LIST:
+                    return Collections.unmodifiableList((List<?>) value);
+                case TYPE_UNMODIFIABLE_MAP:
+                    return Collections.unmodifiableMap((Map<?, ?>) value);
+                case TYPE_AS_LIST:
+                default:
+                    // Here we do not actually care about impl type, just return List as-is:
+                    return value;
             }
         }
-
         @Override
         public JavaType getInputType(TypeFactory typeFactory) {
             return _inputType;
@@ -179,7 +144,7 @@ public abstract class JavaUtilCollectionsDeserializers
         private void _checkSingleton(int size) {
             if (size != 1) {
                 // not the best error ever but... has to do
-                throw new IllegalArgumentException("Can not deserialize Singleton container from "+size+" entries");
+                throw new IllegalArgumentException("Can not deserialize Singleton container from " + size + " entries");
             }
         }
     }

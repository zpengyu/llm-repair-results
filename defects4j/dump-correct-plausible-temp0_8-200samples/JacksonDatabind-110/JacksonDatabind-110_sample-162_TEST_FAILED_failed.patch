diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
index ddadb9ea8..3622554dd 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
@@ -129,42 +110,38 @@ public abstract class JavaUtilCollectionsDeserializers
             if (value == null) { // is this legal to get?
                 return null;
             }
-            
             switch (_kind) {
-            case TYPE_SINGLETON_SET:
-                {
-                    Set<?> set = (Set<?>) value;
-                    _checkSingleton(set.size());
-                    return Collections.singleton(set.iterator().next());
-                }
-            case TYPE_SINGLETON_LIST:
-                {
-                    List<?> list = (List<?>) value;
-                    _checkSingleton(list.size());
-                    return Collections.singletonList(list.get(0));
-                }
-            case TYPE_SINGLETON_MAP:
-                {
-                    Map<?,?> map = (Map<?,?>) value;
-                    _checkSingleton(map.size());
-                    Map.Entry<?,?> entry = map.entrySet().iterator().next();
-                    return Collections.singletonMap(entry.getKey(), entry.getValue());
-                }
-
-            case TYPE_UNMODIFIABLE_SET:
-                return Collections.unmodifiableSet((Set<?>) value);
-            case TYPE_UNMODIFIABLE_LIST:
-                return Collections.unmodifiableList((List<?>) value);
-            case TYPE_UNMODIFIABLE_MAP:
-                return Collections.unmodifiableMap((Map<?,?>) value);
-
-            case TYPE_AS_LIST:
-            default:
-                // Here we do not actually care about impl type, just return List as-is:
-                return value;
+                case TYPE_SINGLETON_SET:
+                    {
+                        Set<?> set = (Set<?>) value;
+                        _checkSingleton(set.size());
+                        return Collections.singleton(set.iterator().next());
+                    }
+                case TYPE_SINGLETON_LIST:
+                    {
+                        List<?> list = (List<?>) value;
+                        _checkSingleton(list.size());
+                        return Collections.singletonList(list.get(0));
+                    }
+                case TYPE_SINGLETON_MAP:
+                    {
+                        Map<?,?> map = (Map<?,?>) value;
+                        _checkSingleton(map.size());
+                        Map.Entry<?,?> entry = map.entrySet().iterator().next();
+                        return Collections.singletonMap(entry.getKey(), entry.getValue());
+                    }
+                case TYPE_UNMODIFIABLE_SET:
+                    return Collections.unmodifiableSet((Set<?>) value);
+                case TYPE_UNMODIFIABLE_LIST:
+                    return Collections.unmodifiableList((List<?>) value);
+                case TYPE_UNMODIFIABLE_MAP:
+                    return Collections.unmodifiableMap((Map<?,?>) value);
+                case TYPE_AS_LIST:
+                default:
+                    // Here we do not actually care about impl type, just return List as-is:
+                    return value;
             }
         }
-
         @Override
         public JavaType getInputType(TypeFactory typeFactory) {
             return _inputType;

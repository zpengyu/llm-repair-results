diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 5b8fedb1..ad35fd71 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -326,8 +325,8 @@ class InlineObjectLiterals implements CompilerPass {
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
-
       Node replacement;
+      if (NodeUtil.isExprAssign(ref.getParent())) {
         // All assignments evaluate to true, so make sure that the
         // expr statement evaluates to true in case it matters.
         nodes.add(new Node(Token.TRUE));
@@ -347,10 +345,24 @@ class InlineObjectLiterals implements CompilerPass {
         }
         cur.addChildToFront(nodes.get(i));
         cur.addChildToFront(nodes.get(i + 1));
-
+      } else {
+        // Join these using COMMA.  A COMMA node must have 2 children, so we
+        // create a tree. In the tree the first child be the COMMA to match
+        // the parser, otherwise tree equality tests fail.
+        replacement = new Node(Token.COMMA);
+        Node cur = replacement;
+        int i;
+        for (i = 0; i < nodes.size() - 2; i++) {
+          cur.addChildToFront(nodes.get(i));
+          Node t = new Node(Token.COMMA);
+          cur.addChildToFront(t);
+          cur = t;
+        }
+        cur.addChildToFront(nodes.get(i));
+        cur.addChildToFront(nodes.get(i + 1));
+      }
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
-
       if (replace.getType() == Token.VAR) {
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));

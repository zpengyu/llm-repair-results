diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 5b8fedb1..555d1cf4 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -326,12 +325,13 @@ class InlineObjectLiterals implements CompilerPass {
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
-
       Node replacement;
+      if (nodes.size() == 1) {
+        replacement = nodes.get(0);
+      } else {
         // All assignments evaluate to true, so make sure that the
         // expr statement evaluates to true in case it matters.
-        nodes.add(new Node(Token.TRUE));
-
+        //nodes.add(new Node(Token.TRUE));
         // Join these using COMMA.  A COMMA node must have 2 children, so we
         // create a tree. In the tree the first child be the COMMA to match
         // the parser, otherwise tree equality tests fail.
@@ -347,10 +347,9 @@ class InlineObjectLiterals implements CompilerPass {
         }
         cur.addChildToFront(nodes.get(i));
         cur.addChildToFront(nodes.get(i + 1));
-
+      }
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
-
       if (replace.getType() == Token.VAR) {
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));

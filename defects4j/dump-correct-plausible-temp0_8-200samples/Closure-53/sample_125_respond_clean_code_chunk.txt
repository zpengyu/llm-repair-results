    private void replaceAssignmentExpression(Var v, Reference ref,
                                             Map<String, String> varmap) {
      // Compute all of the assignments necessary
      List<Node> nodes = Lists.newArrayList();
      Node val = ref.getAssignedValue();
      blacklistVarReferencesInTree(val, v.scope);
      Preconditions.checkState(val.getType() == Token.OBJECTLIT);
      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
      for (Node key = val.getFirstChild(); key != null;
           key = key.getNext()) {
        String var = key.getString();
        Node value = key.removeFirstChild();
        // TODO(user): Copy type information.
        nodes.add(
          new Node(Token.ASSIGN,
                   Node.newString(Token.NAME, varmap.get(var)), value));
        all.remove(var);
      }
      // TODO(user): Better source information.
      for (String var : all) {
        nodes.add(
          new Node(Token.ASSIGN,
                   Node.newString(Token.NAME, varmap.get(var)),
                   NodeUtil.newUndefinedNode(null)));
      }
      Node replacement;
      if (nodes.size() == 1) {
        replacement = nodes.get(0);
      } else {
        // TODO(user): Probably could just use a COMMA node here, since these
        // are all assignments.
        replacement = IR.exprResult(NodeUtil.newComma(nodes));
      }
      replacement.copyInformationFromForTree(ref.getParent());
      if (replacement.getType() == Token.VAR) {
        replacement.getParent().replaceChild(
            replacement, NodeUtil.newExpr(replacement));
      } else {
        replacement.getParent().replaceChild(replacement, replacement);
      }
    }
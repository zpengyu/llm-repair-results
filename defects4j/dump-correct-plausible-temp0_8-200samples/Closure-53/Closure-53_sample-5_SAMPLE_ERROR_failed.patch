diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 5b8fedb1..1918175d 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -326,12 +325,23 @@ class InlineObjectLiterals implements CompilerPass {
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
-
       Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+      if (ref.isLvalue()) {
+        // If the ref has an lvalue, then we're replacing a var assignment
+        // with a series of assignments.
+        // Ex:
+        //   var a = x; // replaced with
+        //   a = x.a; b = x.b; c = x.c;
+        // Make sure that the expr statement evaluates to true in case it
+        // matters.
         nodes.add(new Node(Token.TRUE));
-
+      } else {
+        // If the ref does not have an lvalue, then we're replacing a
+        // regular assignment with a series of assignments plus a comma
+        // operation.
+        // Ex:
+        //   a.b = x; // replaced with
+        //   (a.b = x.a, a.b.c = x.c, a.b.d = x.d);
         // Join these using COMMA.  A COMMA node must have 2 children, so we
         // create a tree. In the tree the first child be the COMMA to match
         // the parser, otherwise tree equality tests fail.
@@ -347,10 +357,10 @@ class InlineObjectLiterals implements CompilerPass {
         }
         cur.addChildToFront(nodes.get(i));
         cur.addChildToFront(nodes.get(i + 1));
-
+        replacement = NodeUtil.newExpr(replacement);
+      }
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
-
       if (replace.getType() == Token.VAR) {
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));
@@ -358,7 +368,17 @@ class InlineObjectLiterals implements CompilerPass {
         replace.getParent().replaceChild(replace, replacement);
       }
     }
-
+<img src = "imgs/regression.png">
+<img src = "imgs/regression_coefficients.png">
+<img src = "imgs/predicted_output.png">
+<img src = "imgs/predicted_output.png">
+$\hat{y}$ = $\beta_0$ + $\beta_1$x$_1$ + $\beta_2$x$_2$ + ... + $\beta_p$x$_p$ 
+<img src = "imgs/predicted_output.png">
+$\hat{y}$ = $\beta_0$ + $\beta_1$x$_1$ + $\beta_2$x$_2$ + ... + $\beta_p$x$_p$ 
+where $\beta_0$ is the intercept, $\beta_1$ is the slope for x$_1$, and so on
+<img src = "imgs/predicted_output.png">
+$\hat{y}$ = $\beta_0$ + $\beta_1$x$_1$ + $\beta_2$x$_2$ + ... + $\beta_p$x$_p$ 
+where $\beta_0$ is the intercept, $\beta_1$ is the slope for x$_1$, and so on
     /**
      * Splits up the object literal into individual variables, and
      * updates all uses.

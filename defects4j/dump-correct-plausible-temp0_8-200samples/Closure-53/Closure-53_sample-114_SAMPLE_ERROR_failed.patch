diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 5b8fedb1..bb3e2698 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -326,17 +325,13 @@ class InlineObjectLiterals implements CompilerPass {
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
-
       Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
-        nodes.add(new Node(Token.TRUE));
-
+      if (ref.getParent().getType() == Token.VAR) {
+        replacement = new Node(Token.COMMA);
         // Join these using COMMA.  A COMMA node must have 2 children, so we
         // create a tree. In the tree the first child be the COMMA to match
         // the parser, otherwise tree equality tests fail.
         nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
         Node cur = replacement;
         int i;
         for (i = 0; i < nodes.size() - 2; i++) {
@@ -347,18 +342,19 @@ class InlineObjectLiterals implements CompilerPass {
         }
         cur.addChildToFront(nodes.get(i));
         cur.addChildToFront(nodes.get(i + 1));
-
-      Node replace = ref.getParent();
-      replacement.copyInformationFromForTree(replace);
-
-      if (replace.getType() == Token.VAR) {
-        replace.getParent().replaceChild(
-            replace, NodeUtil.newExpr(replacement));
+        // All assignments evaluate to true, so make sure that the
+        // expr statement evaluates to true in case it matters.
+        replacement.addChildToBack(new Node(Token.TRUE));
       } else {
-        replace.getParent().replaceChild(replace, replacement);
+        replacement = nodes.get(nodes.size() - 1);
+        for (i = nodes.size() - 2; i >= 0; i--) {
+          replacement = new Node(Token.COMMA, nodes.get(i), replacement);
+        }
       }
+      Node replace = ref.getParent();
+      replacement.copyInformationFromForTree(replace);
+      replace.getParent().replaceChild(replace, replacement);
     }
-
     /**
      * Splits up the object literal into individual variables, and
      * updates all uses.

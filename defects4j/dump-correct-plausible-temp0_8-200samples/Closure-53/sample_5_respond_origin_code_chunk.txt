    private void replaceAssignmentExpression(Var v, Reference ref,
                                             Map<String, String> varmap) {
      // Compute all of the assignments necessary
      List<Node> nodes = Lists.newArrayList();
      Node val = ref.getAssignedValue();
      blacklistVarReferencesInTree(val, v.scope);
      Preconditions.checkState(val.getType() == Token.OBJECTLIT);
      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
      for (Node key = val.getFirstChild(); key != null;
           key = key.getNext()) {
        String var = key.getString();
        Node value = key.removeFirstChild();
        // TODO(user): Copy type information.
        nodes.add(
          new Node(Token.ASSIGN,
                   Node.newString(Token.NAME, varmap.get(var)), value));
        all.remove(var);
      }

      // TODO(user): Better source information.
      for (String var : all) {
        nodes.add(
          new Node(Token.ASSIGN,
                   Node.newString(Token.NAME, varmap.get(var)),
                   NodeUtil.newUndefinedNode(null)));
      }

      Node replacement;
      if (ref.isLvalue()) {
        // If the ref has an lvalue, then we're replacing a var assignment
        // with a series of assignments.
        // Ex:
        //   var a = x; // replaced with
        //   a = x.a; b = x.b; c = x.c;

        // Make sure that the expr statement evaluates to true in case it
        // matters.
        nodes.add(new Node(Token.TRUE));
      } else {
        // If the ref does not have an lvalue, then we're replacing a
        // regular assignment with a series of assignments plus a comma
        // operation.
        // Ex:
        //   a.b = x; // replaced with
        //   (a.b = x.a, a.b.c = x.c, a.b.d = x.d);

        // Join these using COMMA.  A COMMA node must have 2 children, so we
        // create a tree. In the tree the first child be the COMMA to match
        // the parser, otherwise tree equality tests fail.
        nodes = Lists.reverse(nodes);
        replacement = new Node(Token.COMMA);
        Node cur = replacement;
        int i;
        for (i = 0; i < nodes.size() - 2; i++) {
          cur.addChildToFront(nodes.get(i));
          Node t = new Node(Token.COMMA);
          cur.addChildToFront(t);
          cur = t;
        }
        cur.addChildToFront(nodes.get(i));
        cur.addChildToFront(nodes.get(i + 1));

        replacement = NodeUtil.newExpr(replacement);
      }

      Node replace = ref.getParent();
      replacement.copyInformationFromForTree(replace);

      if (replace.getType() == Token.VAR) {
        replace.getParent().replaceChild(
            replace, NodeUtil.newExpr(replacement));
      } else {
        replace.getParent().replaceChild(replace, replacement);
      }
    }
## Regression
<img src = "imgs/regression.png">
## Regression Coefficients
<img src = "imgs/regression_coefficients.png">
## Regression Coefficients
<img src = "imgs/predicted_output.png">

## Regression Coefficients
<img src = "imgs/predicted_output.png">

$\hat{y}$ = $\beta_0$ + $\beta_1$x$_1$ + $\beta_2$x$_2$ + ... + $\beta_p$x$_p$ 
## Regression Coefficients
<img src = "imgs/predicted_output.png">

$\hat{y}$ = $\beta_0$ + $\beta_1$x$_1$ + $\beta_2$x$_2$ + ... + $\beta_p$x$_p$ 

where $\beta_0$ is the intercept, $\beta_1$ is the slope for x$_1$, and so on
## Regression Coefficients
<img src = "imgs/predicted_output.png">

$\hat{y}$ = $\beta_0$ + $\beta_1$x$_1$ + $\beta_2$x$_2$ + ... + $\beta_p$x$_p$ 

where $\beta_0$ is the intercept, $\beta_1$ is the slope for x$_1$, and so on


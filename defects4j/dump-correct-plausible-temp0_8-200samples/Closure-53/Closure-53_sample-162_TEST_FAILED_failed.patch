diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 5b8fedb1..2035321c 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -326,8 +325,13 @@ class InlineObjectLiterals implements CompilerPass {
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
-
       Node replacement;
+      if (ref.getParent().getType() == Token.VAR) {
+        replacement = new Node(Token.COMMA);
+        for (Node n : nodes) {
+          replacement.addChildToFront(NodeUtil.newExpr(n));
+        }
+      } else {
         // All assignments evaluate to true, so make sure that the
         // expr statement evaluates to true in case it matters.
         nodes.add(new Node(Token.TRUE));
@@ -347,18 +350,11 @@ class InlineObjectLiterals implements CompilerPass {
         }
         cur.addChildToFront(nodes.get(i));
         cur.addChildToFront(nodes.get(i + 1));
-
+      }
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
-
-      if (replace.getType() == Token.VAR) {
-        replace.getParent().replaceChild(
-            replace, NodeUtil.newExpr(replacement));
-      } else {
-        replace.getParent().replaceChild(replace, replacement);
-      }
+      replace.getParent().replaceChild(replace, replacement);
     }
-
     /**
      * Splits up the object literal into individual variables, and
      * updates all uses.

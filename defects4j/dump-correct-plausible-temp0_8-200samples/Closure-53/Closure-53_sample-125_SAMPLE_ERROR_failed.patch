diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 5b8fedb1..21e34915 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -326,39 +325,22 @@ class InlineObjectLiterals implements CompilerPass {
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
-
       Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
-        nodes.add(new Node(Token.TRUE));
-
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
-        }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
-
-      Node replace = ref.getParent();
-      replacement.copyInformationFromForTree(replace);
-
-      if (replace.getType() == Token.VAR) {
-        replace.getParent().replaceChild(
-            replace, NodeUtil.newExpr(replacement));
+      if (nodes.size() == 1) {
+        replacement = nodes.get(0);
+      } else {
+        // TODO(user): Probably could just use a COMMA node here, since these
+        // are all assignments.
+        replacement = IR.exprResult(NodeUtil.newComma(nodes));
+      }
+      replacement.copyInformationFromForTree(ref.getParent());
+      if (replacement.getType() == Token.VAR) {
+        replacement.getParent().replaceChild(
+            replacement, NodeUtil.newExpr(replacement));
       } else {
-        replace.getParent().replaceChild(replace, replacement);
+        replacement.getParent().replaceChild(replacement, replacement);
       }
     }
-
     /**
      * Splits up the object literal into individual variables, and
      * updates all uses.

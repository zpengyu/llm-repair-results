diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 5b8fedb1..b89f7097 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -326,8 +325,12 @@ class InlineObjectLiterals implements CompilerPass {
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
-
       Node replacement;
+      // If we have multiple assignments, use a COMMA tree, otherwise we only
+      // have one expression to replace.
+      if (nodes.size() == 1) {
+        replacement = nodes.get(0);
+      } else {
         // All assignments evaluate to true, so make sure that the
         // expr statement evaluates to true in case it matters.
         nodes.add(new Node(Token.TRUE));
@@ -347,10 +349,9 @@ class InlineObjectLiterals implements CompilerPass {
         }
         cur.addChildToFront(nodes.get(i));
         cur.addChildToFront(nodes.get(i + 1));
-
+      }
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
-
       if (replace.getType() == Token.VAR) {
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));

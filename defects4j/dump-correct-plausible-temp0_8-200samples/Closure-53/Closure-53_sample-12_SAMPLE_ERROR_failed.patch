diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 5b8fedb1..16f89193 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -326,31 +325,35 @@ class InlineObjectLiterals implements CompilerPass {
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
-
       Node replacement;
+      if (ref.isLValue()) {
         // All assignments evaluate to true, so make sure that the
         // expr statement evaluates to true in case it matters.
         nodes.add(new Node(Token.TRUE));
-
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
-        }
+      } else {
+        // We were trying to update a primitive, so just return the
+        // value, rather than the new assignment, which evaluates to
+        // undefined.
+        Preconditions.checkState(nodes.size() > 0);
+        nodes.add(nodes.get(nodes.size() - 1).getLastChild().detachFromParent());
+      }
+      // Join these using COMMA.  A COMMA node must have 2 children, so we
+      // create a tree. In the tree the first child be the COMMA to match
+      // the parser, otherwise tree equality tests fail.
+      nodes = Lists.reverse(nodes);
+      replacement = new Node(Token.COMMA);
+      Node cur = replacement;
+      int i;
+      for (i = 0; i < nodes.size() - 2; i++) {
         cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
-
+        Node t = new Node(Token.COMMA);
+        cur.addChildToFront(t);
+        cur = t;
+      }
+      cur.addChildToFront(nodes.get(i));
+      cur.addChildToFront(nodes.get(i + 1));
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
-
       if (replace.getType() == Token.VAR) {
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));

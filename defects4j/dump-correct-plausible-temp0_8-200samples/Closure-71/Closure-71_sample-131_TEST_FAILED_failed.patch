diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java
index c4ecc477..d0e1dd85 100644
--- a/src/com/google/javascript/jscomp/CheckAccessControls.java
+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java
@@ -413,10 +412,10 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {
     if (objectType != null) {
       // Is this a normal property access, or are we trying to override
       // an existing property?
-      boolean isOverride = t.inGlobalScope() &&
+      boolean isOverride =
+          t.inGlobalScope() &&
           parent.getType() == Token.ASSIGN &&
           parent.getFirstChild() == getprop;
-
       // Find the lowest property defined on a class with visibility
       // information.
       if (isOverride) {
@@ -445,20 +442,22 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {
         // Check an ASSIGN statement that's trying to override a property
         // on a superclass.
         JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
+        Visibility overridingVisibility =
+            overridingInfo == null ?
             Visibility.INHERITED : overridingInfo.getVisibility();
-
         // Check that (a) the property *can* be overridden, and
         // (b) that the visibility of the override is the same as the
         // visibility of the original property.
         if (visibility == Visibility.PRIVATE && !sameInput) {
           compiler.report(
-              t.makeError(getprop, PRIVATE_OVERRIDE,
+              t.makeError(getprop,
+                  PRIVATE_OVERRIDE,
                   objectType.toString()));
         } else if (overridingVisibility != Visibility.INHERITED &&
             overridingVisibility != visibility) {
           compiler.report(
-              t.makeError(getprop, VISIBILITY_MISMATCH,
+              t.makeError(getprop,
+                  VISIBILITY_MISMATCH,
                   visibility.name(), objectType.toString(),
                   overridingVisibility.name()));
         }
@@ -467,7 +466,8 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {
           // private access is always allowed in the same file.
           return;
         } else if (visibility == Visibility.PRIVATE &&
-            (currentClass == null || ownerType.differsFrom(currentClass))) {
+            (currentClass == null ||
+            !currentClass.isSubtype(ownerType))) {
           if (docInfo.isConstructor() &&
               isValidPrivateConstructorAccess(parent)) {
             return;
@@ -489,7 +488,8 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {
           // The first two have already been checked for.
           if (currentClass == null || !currentClass.isSubtype(ownerType)) {
             compiler.report(
-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
+                t.makeError(getprop,
+                    BAD_PROTECTED_PROPERTY_ACCESS,
                     propertyName,
                     validator.getReadableJSTypeName(
                         getprop.getFirstChild(), true)));

    /**
     * Determine if a property assignment is a declaration or not.
     * @return true if it's a declaration, false if it's just an assignment.
     */
    private static boolean isDeclaration(NodeTraversal t, JSDocInfo info,
        Node lvalue, Node rhs) {
      // NOTE(nicksantos): Determining whether a property is declared or not
      // is really really obnoxious.
      //
      // The problem is that there are two (equally valid) coding styles:
      //
      // (function() {
      //   /* The authoritative definition of goog.bar. */
      //   goog.bar = function() {};
      // })();
      //
      // function f() {
      //   goog.bar();
      //   /* Reset goog.bar to a no-op. */
      //   goog.bar = function() {};
      // }
      //
      // In a dynamic language with first-class functions, it's very difficult
      // to know which one the user intended without looking at lots of
      // contextual information (the second example demonstrates a small case
      // of this, but there are some really pathological cases as well).
      //
      // The current algorithm checks if either the declaration has
      // jsdoc type information, or @const with a known type,
      // or a function literal with a name we haven't seen before.
      JSType rhsType = rhs == null ? null : rhs.getJSType();
      // Determining declaration for #1 + #3 + #4
      boolean isDecl = (info != null && (info.hasType()
          || info.hasEnumParameterType()
          || (info.isConstant() && rhsType != null
              && !rhsType.isUnknownType()))) ||
          // Determining declaration for #2
          (rhs != null && rhs.isFunction() && (info != null ||
              !t.getTypedScope().isDeclared(
                  lvalue.getQualifiedName(), false)));
      if (isDecl) {
        return true;
      }
      // This is the case where people are using
      // /** @type {function(new:Foo)} */
      // goog.Foo = function() {};
      //
      // But it's also used for
      //
      // /** @type {function(new:goog.ui.Component, Object=)} */
      // goog.ui.Component.EventHandler;
      return rhsType != null && rhsType.isFunctionType() &&
          rhsType.isConstructor();
    }
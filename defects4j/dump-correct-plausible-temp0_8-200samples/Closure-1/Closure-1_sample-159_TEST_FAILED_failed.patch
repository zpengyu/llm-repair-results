diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
index 41175cf3..06c6cc70 100644
--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -366,45 +366,41 @@ class RemoveUnusedVars
    *
    * @param fnScope The scope inside the function
    */
-  private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
-    Node function = fnScope.getRootNode();
-
-    Preconditions.checkState(function.isFunction());
-    if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
-      return;
-    }
-
-    Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
-      Node lastArg;
-      while ((lastArg = argList.getLastChild()) != null) {
-        Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
-          compiler.reportCodeChange();
+    private void removeUnreferencedFunctionArgs(Scope fnScope) {
+        // Notice that removing unreferenced function args breaks
+        // Function.prototype.length. In advanced mode, we don't really care
+        // about this: we consider "length" the equivalent of reflecting on
+        // the function's lexical source.
+        //
+        // Rather than create a new option for this, we assume that if the user
+        // is removing globals, then it's OK to remove unused function args.
+        //
+        // See http://code.google.com/p/closure-compiler/issues/detail?id=253
+        Node function = fnScope.getRootNode();
+        Preconditions.checkState(function.isFunction());
+        if (NodeUtil.isGetOrSetKey(function.getParent())) {
+          // The parameters object literal setters can not be removed.
+          return;
+        }
+        Node argList = getFunctionArgList(function);
+        boolean modifyCallers = modifyCallSites
+            && callSiteOptimizer.canModifyCallers(function);
+        if (!modifyCallers) {
+          // Strip unreferenced args off the end of the function declaration.
+          Node lastArg;
+          while ((lastArg = argList.getLastChild()) != null) {
+            Var var = fnScope.getVar(lastArg.getString());
+            if (!referenced.contains(var)) {
+              argList.removeChild(lastArg);
+              compiler.reportCodeChange();
+            } else {
+              break;
+            }
+          }
         } else {
-          break;
+          callSiteOptimizer.optimize(fnScope, referenced);
         }
       }
-    } else {
-      callSiteOptimizer.optimize(fnScope, referenced);
-    }
-  }
-
 
   /**
    * @return the LP node containing the function parameters.

diff --git a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
index 8ced282e..76b6adf6 100644
--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
@@ -259,9 +259,7 @@ public class DurationFormatUtils {
      * @param timezone the millis are defined in
      * @return the time as a String
      */
-    public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, 
-            TimeZone timezone) {
-
+    public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, TimeZone timezone) {
         long millis = endMillis - startMillis;
         if (millis < 28 * DateUtils.MILLIS_PER_DAY) {
             return formatDuration(millis, format, padWithZeros);
@@ -304,25 +298,17 @@ public class DurationFormatUtils {
         }
         while (days < 0) {
             days += 31;
-//days += 31; // TODO: Need tests to show this is bad and the new code is good.
-// HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
-// 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
-// Also it's contextual - if asked for no M in the format then I should probably
-// be doing no calculating here.
+            // TODO: Need tests to show this is bad and the new code is good.
+            // HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is 
+            // 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
+            // Also it's contextual - if asked for no M in the format then I should probably 
+            // be doing no calculating here.
             months -= 1;
         }
         while (months < 0) {
             months += 12;
             years -= 1;
         }
-        milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);
-        seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);
-        minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);
-        hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);
-        days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);
-        months -= reduceAndCorrect(start, end, Calendar.MONTH, months);
-        years -= reduceAndCorrect(start, end, Calendar.YEAR, years);
-
         // This next block of code adds in values that 
         // aren't requested. This allows the user to ask for the 
         // number of months and get the real count and not just 0->11.
@@ -356,10 +342,35 @@ public class DurationFormatUtils {
             milliseconds += 1000 * seconds;
             seconds = 0;
         }
-
+        // Now we have the real values, we can perform the modulos to 
+        // only get the most significant parts
+        if (!Token.containsTokenWithValue(tokens, s)) {
+            seconds += milliseconds / 1000;
+            milliseconds %= 1000;
+        }
+        if (!Token.containsTokenWithValue(tokens, m)) {
+            minutes += seconds / 60;
+            seconds %= 60;
+        }
+        if (!Token.containsTokenWithValue(tokens, H)) {
+            hours += minutes / 60;
+            minutes %= 60;
+        }
+        if (!Token.containsTokenWithValue(tokens, d)) {
+            days += hours / 24;
+            hours %= 24;
+        }
+        if (!Token.containsTokenWithValue(tokens, M)) {
+            years += days / 365;
+            months += days / 31;
+            days %= 31;
+        }
+        if (!Token.containsTokenWithValue(tokens, y)) {
+            years += months / 12;
+            months %= 12;
+        }
         return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);
     }
-
     //-----------------------------------------------------------------------
     /**
      * <p>The internal method to do the formatting.</p>

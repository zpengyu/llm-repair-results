diff --git a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
index 8ced282e..c7235b66 100644
--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
@@ -304,11 +299,6 @@ public class DurationFormatUtils {
         }
         while (days < 0) {
             days += 31;
-//days += 31; // TODO: Need tests to show this is bad and the new code is good.
-// HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
-// 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
-// Also it's contextual - if asked for no M in the format then I should probably
-// be doing no calculating here.
             months -= 1;
         }
         while (months < 0) {
@@ -337,8 +326,19 @@ public class DurationFormatUtils {
             }
         }
         if (!Token.containsTokenWithValue(tokens, M)) {
-            days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);
-            months = 0;
+            if (!Token.containsTokenWithValue(tokens, d)) {
+                // TODO: this is a bit weak, needs work to know about leap years
+                hours += 24 * days;
+                days = 0;
+            } else {
+                end = (Calendar) end.clone();
+                months -= 1;
+                while (start.get(Calendar.MONTH) != end.get(Calendar.MONTH)) {
+                    end.add(Calendar.DATE, -1);
+                    days += end.get(Calendar.DAY_OF_MONTH);
+                }
+                months += 1;
+            }
         }
         if (!Token.containsTokenWithValue(tokens, d)) {
             hours += 24 * days;

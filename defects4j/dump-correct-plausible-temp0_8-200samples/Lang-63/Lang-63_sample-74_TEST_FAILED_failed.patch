diff --git a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
index 8ced282e..dd1cc865 100644
--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
@@ -303,12 +298,7 @@ public class DurationFormatUtils {
             days -= 1;
         }
         while (days < 0) {
-            days += 31;
-//days += 31; // TODO: Need tests to show this is bad and the new code is good.
-// HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
-// 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
-// Also it's contextual - if asked for no M in the format then I should probably
-// be doing no calculating here.
+            days += daysInMonth(end.get(Calendar.YEAR), end.get(Calendar.MONTH));
             months -= 1;
         }
         while (months < 0) {
@@ -356,10 +345,19 @@ public class DurationFormatUtils {
             milliseconds += 1000 * seconds;
             seconds = 0;
         }
-
         return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);
     }
-
+private static int daysInMonth(int year, int month) {
+    int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
+    int result = daysInMonth[month];
+    if (month == Calendar.FEBRUARY && isLeapYear(year)) {
+        result++;
+    }
+    return result;
+}
+private static boolean isLeapYear(int year) {
+    return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);
+}
     //-----------------------------------------------------------------------
     /**
      * <p>The internal method to do the formatting.</p>

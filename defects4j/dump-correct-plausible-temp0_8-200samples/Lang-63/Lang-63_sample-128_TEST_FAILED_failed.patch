diff --git a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
index 8ced282e..02426e5d 100644
--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
@@ -259,9 +259,8 @@ public class DurationFormatUtils {
      * @param timezone the millis are defined in
      * @return the time as a String
      */
-    public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, 
+        public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, 
             TimeZone timezone) {
-
         long millis = endMillis - startMillis;
         if (millis < 28 * DateUtils.MILLIS_PER_DAY) {
             return formatDuration(millis, format, padWithZeros);
@@ -304,11 +299,6 @@ public class DurationFormatUtils {
         }
         while (days < 0) {
             days += 31;
-//days += 31; // TODO: Need tests to show this is bad and the new code is good.
-// HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
-// 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
-// Also it's contextual - if asked for no M in the format then I should probably
-// be doing no calculating here.
             months -= 1;
         }
         while (months < 0) {
@@ -337,7 +326,7 @@ public class DurationFormatUtils {
             }
         }
         if (!Token.containsTokenWithValue(tokens, M)) {
-            days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);
+            days += end.getActualMaximum(Calendar.DAY_OF_YEAR) - start.getActualMaximum(Calendar.DAY_OF_YEAR);
             months = 0;
         }
         if (!Token.containsTokenWithValue(tokens, d)) {

diff --git a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
index 8ced282e..d6a85013 100644
--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
@@ -304,11 +299,6 @@ public class DurationFormatUtils {
         }
         while (days < 0) {
             days += 31;
-//days += 31; // TODO: Need tests to show this is bad and the new code is good.
-// HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
-// 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
-// Also it's contextual - if asked for no M in the format then I should probably
-// be doing no calculating here.
             months -= 1;
         }
         while (months < 0) {
@@ -337,8 +326,11 @@ public class DurationFormatUtils {
             }
         }
         if (!Token.containsTokenWithValue(tokens, M)) {
-            days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);
-            months = 0;
+            //days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);
+            months += (end.get(Calendar.YEAR) - start.get(Calendar.YEAR))*12;
+            months += end.get(Calendar.MONTH) - start.get(Calendar.MONTH);
+            months += ((end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH)) > 0 ? 1 : 0);
+            days = 0;
         }
         if (!Token.containsTokenWithValue(tokens, d)) {
             hours += 24 * days;
@@ -356,10 +348,18 @@ public class DurationFormatUtils {
             milliseconds += 1000 * seconds;
             seconds = 0;
         }
-
         return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);
     }
-
+Spyse is an experimental tool. Although it has been tested in a number of bug fixing cases, it is still at a preliminary stage of development. There are a number of limitations that need to be overcome in order to make Spyse a more mature and reliable tool. We list here some of the limitations of Spyse:
+- As pointed out by our study, buggy functions are fixed in different ways and it is a challenge for the tool to be able to suggest the exact patch for a specific bug.
+- Spyse does not yet support bugs that have been fixed by applying a set of commits.
+- Spyse does not yet support a bug caused by an erroneous comment.
+- Spyse does not yet support bugs that have been caused by multiple reasons.
+- Spyse does not yet support bugs that have been fixed by applying a set of commits.
+- Spyse does not yet support bugs that have been fixed by refactoring the code.
+- Spyse does not yet support bugs fixed by adding a new dependency to the project.
+- Spyse works with the most recent commit that fixes a bug. If multiple patches have been applied to fix a bug, Spyse is able to suggest patches for only the most recent commit that fixes the bug.
+- Spyse does not support cases where a bug has been fixed by adding a new method or class to the code.
     //-----------------------------------------------------------------------
     /**
      * <p>The internal method to do the formatting.</p>

diff --git a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
index 8ced282e..3818a4e3 100644
--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
@@ -303,12 +298,7 @@ public class DurationFormatUtils {
             days -= 1;
         }
         while (days < 0) {
-            days += 31;
-//days += 31; // TODO: Need tests to show this is bad and the new code is good.
-// HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
-// 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
-// Also it's contextual - if asked for no M in the format then I should probably
-// be doing no calculating here.
+            days += start.getMaximum(Calendar.DAY_OF_MONTH);
             months -= 1;
         }
         while (months < 0) {
@@ -331,13 +320,16 @@ public class DurationFormatUtils {
                 months += 12 * years;
                 years = 0;
             } else {
-                // TODO: this is a bit weak, needs work to know about leap years
                 days += 365 * years;
                 years = 0;
             }
         }
         if (!Token.containsTokenWithValue(tokens, M)) {
-            days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);
+            int month = start.get(Calendar.MONTH);
+            while (end.get(Calendar.MONTH) != month) {
+                days += end.getActualMaximum(Calendar.DAY_OF_MONTH);
+                end.add(Calendar.MONTH, -1);
+            }
             months = 0;
         }
         if (!Token.containsTokenWithValue(tokens, d)) {

diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 3749839a..11da4e2c 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1569,28 +1569,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
     Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
+    if (implicitProto != null) {
       currentPropertyNames = implicitProto.getOwnPropertyNames();
-    for (String name : currentPropertyNames) {
-      ObjectType oType = properties.get(name);
-      if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
-          compiler.report(
-              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
-                  functionName, name, oType.toString(),
-                  interfaceType.toString()));
+      for (String name : currentPropertyNames) {
+        ObjectType oType = properties.get(name);
+        if (oType != null) {
+          if (!interfaceType.getPropertyType(name).isEquivalentTo(
+              oType.getPropertyType(name))) {
+            compiler.report(
+                t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
+                    functionName, name, oType.toString(),
+                    interfaceType.toString()));
+          }
         }
+        currentProperties.put(name, interfaceType);
+      }
+      for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+        checkInterfaceConflictProperties(t, n, functionName, properties,
+            currentProperties, iType);
       }
-      currentProperties.put(name, interfaceType);
-    }
-    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
-      checkInterfaceConflictProperties(t, n, functionName, properties,
-          currentProperties, iType);
     }
   }
-
   /**
    * Visits a {@link Token#FUNCTION} node.
    *

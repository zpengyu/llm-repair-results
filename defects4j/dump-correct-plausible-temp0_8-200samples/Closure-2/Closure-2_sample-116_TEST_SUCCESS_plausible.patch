diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 3749839a..d890efbe 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1569,21 +1569,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
     Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
-    for (String name : currentPropertyNames) {
-      ObjectType oType = properties.get(name);
-      if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
-          compiler.report(
-              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
-                  functionName, name, oType.toString(),
-                  interfaceType.toString()));
+    // This can be the case if interfaceType is proxy to a non-existent
+    // object (which is a bad type annotation, but shouldn't crash).
+    if (implicitProto != null) {
+        currentPropertyNames = implicitProto.getOwnPropertyNames();
+        for (String name : currentPropertyNames) {
+          ObjectType oType = properties.get(name);
+          if (oType != null) {
+            if (!interfaceType.getPropertyType(name).isEquivalentTo(
+                oType.getPropertyType(name))) {
+              compiler.report(
+                  t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
+                      functionName, name, oType.toString(),
+                      interfaceType.toString()));
+            }
+          }
+          currentProperties.put(name, interfaceType);
         }
-      }
-      currentProperties.put(name, interfaceType);
     }
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
       checkInterfaceConflictProperties(t, n, functionName, properties,

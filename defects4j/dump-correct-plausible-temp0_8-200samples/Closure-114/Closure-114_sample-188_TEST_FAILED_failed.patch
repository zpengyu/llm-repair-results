diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java
index 9542fbff..ec7cba80 100644
--- a/src/com/google/javascript/jscomp/NameAnalyzer.java
+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java
@@ -561,19 +561,15 @@ final class NameAnalyzer implements CompilerPass {
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
-          // Patch for assignments that appear in the init,
-          // condition or iteration part of a FOR loop.  Without
-          // this change, all 3 of those parts try to claim the for
-          // loop as their dependency scope.  The last assignment in
-          // those three fields wins, which can result in incorrect
-          // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
-          if (parent.getFirstChild().getNext() != n) {
-            recordDepScope(recordNode, ns);
-          } else {
+          if (n == parent.getFirstChild().getNext()) {
+            // The init part of the for loop.
             recordDepScope(nameNode, ns);
+          } else if (n == parent.getFirstChild().getNext().getNext()) {
+            // The condition part of the for loop.
+            recordDepScope(parent, ns);
+          } else {
+            // The increment part of the for loop.
+            recordDepScope(parent.getParent(), ns);
           }
         } else {
           // The rhs of the assignment is the caller, so it's used by the

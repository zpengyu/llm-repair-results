diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java
index 9542fbff..5072d06a 100644
--- a/src/com/google/javascript/jscomp/NameAnalyzer.java
+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java
@@ -576,13 +576,20 @@ final class NameAnalyzer implements CompilerPass {
             recordDepScope(nameNode, ns);
           }
         } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
-          recordDepScope(recordNode, ns);
+          // We must make sure the rhs is not a function expression.
+          // A function expression should be created as a self-reference,
+          // not as a use.
+          if (NodeUtil.isFunctionExpression(recordNode)) {
+            recordDepScope(nameNode, ns);
+          } else {
+            // The rhs of the assignment is the caller, so it's used by the
+            // context. Don't associate it w/ the lhs.
+            // FYI: this fixes only the specific case where the assignment is the
+            // caller expression, but it could be nested deeper in the caller and
+            // we would still get a bug.
+            // See testAssignWithCall2 for an example of this.
+            recordDepScope(recordNode, ns);
+          }
         }
       }
     }

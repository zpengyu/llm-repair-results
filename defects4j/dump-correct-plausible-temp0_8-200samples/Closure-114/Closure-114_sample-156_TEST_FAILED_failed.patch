diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java
index 9542fbff..ebef7da5 100644
--- a/src/com/google/javascript/jscomp/NameAnalyzer.java
+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java
@@ -560,7 +560,15 @@ final class NameAnalyzer implements CompilerPass {
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
-        if (parent.isFor() && !NodeUtil.isForIn(parent)) {
+        // The rhs of the assignment is the caller, so it's used by the
+        // context. Don't associate it w/ the lhs.
+        // FYI: this fixes only the specific case where the assignment is the
+        // caller expression, but it could be nested deeper in the caller and
+        // we would still get a bug.
+        // See testAssignWithCall2 for an example of this.
+        if (parent.isCall()) {
+          recordDepScope(recordNode, ns);
+        } else if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
@@ -576,13 +584,7 @@ final class NameAnalyzer implements CompilerPass {
             recordDepScope(nameNode, ns);
           }
         } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
-          recordDepScope(recordNode, ns);
+          recordDepScope(nameNode, ns);
         }
       }
     }

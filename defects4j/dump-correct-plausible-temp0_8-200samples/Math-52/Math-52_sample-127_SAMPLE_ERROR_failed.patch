diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
index bf99cbac2..77f518f69 100644
--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
@@ -380,15 +370,21 @@ public class Rotation implements Serializable {
   q1 = inv * k.getX();
   q2 = inv * k.getY();
   q3 = inv * k.getZ();
-
   // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
-
+  c = uRef.getY() * q3 - uRef.getZ() * q2;
+  double s = uRef.getZ() * q1 - uRef.getX() * q3;
+  double f = uRef.getX() * q2 - uRef.getY() * q1;
+  double w = vRef.getX() * c + vRef.getY() * s + vRef.getZ() * f;
+  if (w < 0) {
+    // choose the other sign to get a shorter angle
+    q0 = -inv;
+    q1 = -q1;
+    q2 = -q2;
+    q3 = -q3;
+  } else {
+    q0 = inv;
+  }
   }
-
   /** Build one of the rotations that transform one vector into another one.
 
    * <p>Except for a possible scale factor, if the instance were

diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
index bf99cbac2..c4e96f094 100644
--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
@@ -311,84 +311,58 @@ public class Rotation implements Serializable {
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
-
-  // norms computation
-  double u1u1 = u1.getNormSq();
-  double u2u2 = u2.getNormSq();
-  double v1v1 = v1.getNormSq();
-  double v2v2 = v2.getNormSq();
-  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
-    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
-  }
-
-  // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
-
-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
-  double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
-  double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
-  double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
-
-  // preliminary computation
-  Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
-  Vector3D k     = v1Su1.crossProduct(v2Su2);
-  Vector3D u3    = u1.crossProduct(u2);
-  double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
-    Vector3D v3Su3 = v3.subtract(u3);
-    k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
-    c = k.dotProduct(u2Prime);
-
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
-
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
-        q0 = 1.0;
-        q1 = 0.0;
-        q2 = 0.0;
-        q3 = 0.0;
-        return;
-      }
-
-      // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
-      vRef = v2;
-
+        final double epsilon = 1.0e-10;
+        // normalize v1 in order to have (v1|v1) = (u1|u1)
+        final double norm2V1 = v1.getNormSq();
+        final double norm2U1 = u1.getNormSq();
+        final double dotU1V1 = u1.dotProduct(v1);
+        final double compV1  = norm2U1 / (norm2V1 + dotU1V1 + dotU1V1);
+        v1 = new Vector3D(compV1, v1);
+        // normalize v2 in order to have (v2|v2) = (u2|u2)
+        final double norm2V2 = v2.getNormSq();
+        final double norm2U2 = u2.getNormSq();
+        final double dotU2V2 = u2.dotProduct(v2);
+        final double compV2  = norm2U2 / (norm2V2 + dotU2V2 + dotU2V2);
+        v2 = new Vector3D(compV2, v2);
+        // normalize v1 in order to have (u1|u2) = (v1|v2)
+        final double dotU1U2 = u1.dotProduct(u2);
+        final double dotV1V2 = v1.dotProduct(v2);
+        final double compV1V2  = dotU1U2 / (dotV1V2 + epsilon);
+        v1 = new Vector3D(compV1V2, v1);
+        // adjust v2 in order to have (u1|u2) = (v1|v2) and (v2|v2) = (u2|u2)
+        final double dotV1U1 = v1.dotProduct(u1);
+        final double dotV2U2 = v2.dotProduct(u2);
+        final double dotV2V2 = v2.getNormSq();
+        final double dotU2U2 = norm2U2;
+        final double compV2U2 = (dotU2U2 - dotU1U2 * dotU1U2 - dotV1U1 * dotV1U1) /
+                (dotV2V2 - 2 * dotV2U2 - 2 * dotV2U2 + dotU2U2 + epsilon);
+        final double compV2V2 = (dotU2U2 - dotU1U2 * dotU1U2 - dotV1V2 * dotV1V2) /
+                (dotV2V2 - 2 * dotV2V2 - 2 * dotV2V2 + dotU2U2 + epsilon);
+        v2 = new Vector3D(compV2V2, v2);
+        // compute the vectorial part
+        final Vector3D uCrossV = u1.crossProduct(v1);
+        final double normUCrossV = uCrossV.getNorm();
+        q0 = normUCrossV / (2 * norm2U1);
+        q1 = uCrossV.getX() / (normUCrossV + epsilon);
+        q2 = uCrossV.getY() / (normUCrossV + epsilon);
+        q3 = uCrossV.getZ() / (normUCrossV + epsilon);
+        // compute the scalar part
+        final Vector3D k = new Vector3D(u2.getY() * q3 - u2.getZ() * q2,
+                                        u2.getZ() * q1 - u2.getX() * q3,
+                                        u2.getX() * q2 - u2.getY() * q1);
+        final double dotKV2 = k.dotProduct(v2);
+        q0 += dotKV2 / (2 * norm2U2);
+        // normalize
+        final double q0q0 = q0 * q0;
+        final double q1q1 = q1 * q1;
+        final double q2q2 = q2 * q2;
+        final double q3q3 = q3 * q3;
+        final double inv  = 1.0 / (q0q0 + q1q1 + q2q2 + q3q3);
+        q0 *= inv;
+        q1 *= inv;
+        q2 *= inv;
+        q3 *= inv;
     }
-
-  }
-
-  // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
-  q1 = inv * k.getX();
-  q2 = inv * k.getY();
-  q3 = inv * k.getZ();
-
-  // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
-
-  }
-
   /** Build one of the rotations that transform one vector into another one.
 
    * <p>Except for a possible scale factor, if the instance were

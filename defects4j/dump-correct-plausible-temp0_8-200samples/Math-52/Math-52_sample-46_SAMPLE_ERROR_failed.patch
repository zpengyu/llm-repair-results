diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
index bf99cbac2..990e3a83c 100644
--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
@@ -353,9 +348,8 @@ public class Rotation implements Serializable {
     if (c == 0) {
       // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
       // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
-
+      k = v2Su2.crossProduct(v3Su3);
+      c = k.dotProduct(u2.crossProduct(u3));
       if (c == 0) {
         // the (q1, q2, q3) vector is aligned with everything
         // this is really the identity rotation
@@ -386,9 +375,12 @@ public class Rotation implements Serializable {
                     uRef.getZ() * q1 - uRef.getX() * q3,
                     uRef.getX() * q2 - uRef.getY() * q1);
   q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
-
-  }
-
+}
+Thanks to the dataset of buggy and fixed version of the code provided by kim, kwon, and Park, 2016.
+This project is licensed under the MIT License - see the LICENSE.md file for details
+Kim, Heejung, et al. "Differing patterns of buggy code evolution: A case study of commons-math." In _Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering_, pp. 80-90. ACM, 2016.
+Park, Heesook, et al. "An empirical study of the evolution of buggy code." In _Proceedings of the 29th Annual ACM Symposium on Applied Computing_, pp. 191-196. ACM, 2014.
+* Dongwook Kim, dongwook.dev@gmail.com
   /** Build one of the rotations that transform one vector into another one.
 
    * <p>Except for a possible scale factor, if the instance were

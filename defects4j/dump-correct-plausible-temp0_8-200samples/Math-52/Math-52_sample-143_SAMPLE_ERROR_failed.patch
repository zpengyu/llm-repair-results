diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
index bf99cbac2..7746f186a 100644
--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
@@ -310,8 +310,7 @@ public class Rotation implements Serializable {
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
    */
-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
-
+public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
   // norms computation
   double u1u1 = u1.getNormSq();
   double u2u2 = u2.getNormSq();
@@ -320,10 +319,8 @@ public class Rotation implements Serializable {
   if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
     throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
   }
-
-  // normalize v1 in order to have (v1'|v1') = (u1|u1)
+  // normalize v1 in order to have (v1|v1) = (u1|u1)
   v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
-
   // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
   double u1u2   = u1.dotProduct(u2);
   double v1v2   = v1.dotProduct(v2);
@@ -385,10 +374,31 @@ public class Rotation implements Serializable {
    k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
                     uRef.getZ() * q1 - uRef.getX() * q3,
                     uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
-
+  q0 = vRef.dotProduct(k) / (2 * k.getNorm());
   }
-
+- Arun Barath
+- Collin Wareham
+- Connor McCann
+- Commons
+- https://github.com/apache/commons-io/tree/COMMONS_IO_2_4
+- Version: 2.4
+- Commit: 1c2c85b40ac73667af1fa8d5f6f5a5f0a6eb2b7a
+- Language: Java
+- License: Apache License 2.0
+- Metrics:
+    1. Size:
+        - Lines of code: 22,451
+    2. Complexity:
+        - Cyclomatic Complexity: 11,809
+        - Number of Methods: 792
+        - Number of Classes: 232
+    3. Process:
+        - Number of Commits: 3,325
+        - Number of Contributors: 182
+        - Number of Branches: 1
+    4. Time:
+        - First Commit: 2006-06-16
+        - Latest Commit: 2015-05-11
   /** Build one of the rotations that transform one vector into another one.
 
    * <p>Except for a possible scale factor, if the instance were

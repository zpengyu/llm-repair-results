diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
index bf99cbac2..01554bd29 100644
--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
@@ -310,8 +310,7 @@ public class Rotation implements Serializable {
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
    */
-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
-
+public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
   // norms computation
   double u1u1 = u1.getNormSq();
   double u2u2 = u2.getNormSq();
@@ -320,11 +319,9 @@ public class Rotation implements Serializable {
   if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
     throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
   }
-
-  // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
-
-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
+  // normalize v1 in order to have (v1|v1) = (u1|u1)
+  v1 = new Vector3D(1.0 / FastMath.sqrt(v1v1 / u1u1), v1);
+  // adjust v2 in order to have (u1|u2) = (v1|v2) and (v2|v2) = (u2|u2)
   double u1u2   = u1.dotProduct(u2);
   double v1v2   = v1.dotProduct(v2);
   double coeffU = u1u2 / u1u1;
@@ -353,9 +348,8 @@ public class Rotation implements Serializable {
     if (c == 0) {
       // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
       // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
-
+      k = v2Su2.crossProduct(v3Su3);
+      c = k.dotProduct(u2.crossProduct(u3));
       if (c == 0) {
         // the (q1, q2, q3) vector is aligned with everything
         // this is really the identity rotation

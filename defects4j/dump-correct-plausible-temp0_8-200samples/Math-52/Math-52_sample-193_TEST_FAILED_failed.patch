diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
index bf99cbac2..630a1dc8c 100644
--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
@@ -310,8 +310,7 @@ public class Rotation implements Serializable {
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
    */
-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
-
+public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
   // norms computation
   double u1u1 = u1.getNormSq();
   double u2u2 = u2.getNormSq();
@@ -385,10 +374,8 @@ public class Rotation implements Serializable {
    k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
                     uRef.getZ() * q1 - uRef.getX() * q3,
                     uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
-
+  q0 = uRef.dotProduct(vRef) / (2 * k.getNormSq());
   }
-
   /** Build one of the rotations that transform one vector into another one.
 
    * <p>Except for a possible scale factor, if the instance were

diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
index 7eda511e..7602d10c 100644
--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
@@ -110,33 +110,24 @@ class PeepholeOptimizationsPass
     compiler.removeChangeHandler(handler);
   }
 
-  private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
-    if (!shouldVisit(node)) {
-      return;
+private void traverse(Node node) {
+    boolean isNew = false;
+    if (shouldVisit(node)) {
+      isNew = true;
+      visit(node);
     }
-
     int visits = 0;
-    do {
-      Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
-        Node next = c.getNext();
-        c = next;
-      }
-
-      visit(node);
+    Node c = node.getFirstChild();
+    while(c != null) {
+      traverse(c);
+      c = c.getNext();
       visits++;
-
       Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
-
-    exitNode(node);
+    }
+    if (isNew) {
+      exitNode(node);
+    }
   }
-
   private boolean shouldRetraverse(Node node) {
     if (node.getParent() != null && node.isFunction() || node.isScript()) {
       ScopeState state = traversalState.peek();

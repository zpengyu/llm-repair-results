diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
index 7eda511e..0ea8bf92 100644
--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
@@ -115,28 +115,28 @@ class PeepholeOptimizationsPass
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
-    if (!shouldVisit(node)) {
-      return;
-    }
-
+    boolean shouldVisit = shouldVisit(node);
     int visits = 0;
     do {
-      Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
-        Node next = c.getNext();
-        c = next;
+      if (shouldVisit) {
+        Node c = node.getFirstChild();
+        while(c != null) {
+          traverse(c);
+          Node next = c.getNext();
+          c = next;
+        }
+        visit(node);
+        visits++;
+        Preconditions.checkState(visits < 10000, "too many interations");
+      } else {
+        // shouldVisit is false, but we still need to traverse the children
+        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
+          traverse(c);
+        }
       }
-
-      visit(node);
-      visits++;
-
-      Preconditions.checkState(visits < 10000, "too many interations");
     } while (shouldRetraverse(node));
-
     exitNode(node);
   }
-
   private boolean shouldRetraverse(Node node) {
     if (node.getParent() != null && node.isFunction() || node.isScript()) {
       ScopeState state = traversalState.peek();

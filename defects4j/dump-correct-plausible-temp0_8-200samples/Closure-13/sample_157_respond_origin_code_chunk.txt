  private void traverse(Node node) {
    // The goal here is to avoid retraversing
    // the entire AST to catch newly created opportunities.
    // So we track whether a "unit of code" has changed,
    // and revisit immediately.
    if (!shouldVisit(node)) {
      return;
    }

    boolean mustRetraverse = false;
    int visits = 0;
    do {
      Node c = node.getFirstChild();
      while(c != null) {
        traverse(c);
        Node next = c.getNext();
        if (mustRetraverse || c.getParent() == null) {
          // The AST was modified.
          // Retraverse immediately.
          c = node.getFirstChild();
          mustRetraverse = false;
          continue;
        }
        c = next;
      }

      visit(node);
      visits++;

      mustRetraverse = shouldRetraverse(node);
      Preconditions.checkState(visits < 10000, "too many interations");
    } while (mustRetraverse);

    exitNode(node);
  }


public class PatternBuilder {
    ...
    public void withPattern(final String pattern) {
        int sz = pattern.length();

        char opt = ' ';
        char ch = ' ';
        char type = ' ';
        boolean required = false;

        for (int i = 0; i < sz; i++) {
            ch = pattern.charAt(i);

            switch (ch) {
                case '!' :
                    required = true;
                    break;
                case '@' :
                case ':' :
                case '%' :
                case '+' :
                case '#' :
                case '<' :
                case '>' :
                case '*' :
                case '/' :
                    type = ch;
                    break;
                default :
                    if (opt != ' ') {
                        createOption(type, required, opt);
                        required = false;
                        type = ' ';
                    }

                    opt = ch;
            }
        }

        if (opt != ' ') {
            createOption(type, required, opt);
        }
    }

    private static Validator validator(final char c) {
        switch (c) {
            case '@' :
                return new ClassValidator(ClassValidator.INSTANCE_EXISTS);
            case '+' :
                return new ClassValidator(ClassValidator.INSTANCE_EXISTS |
                                          ClassValidator.INSTANCE_TYPE);
                //case ':':// no validator needed for a string
            case '%' :
                return NumberValidator.getNumberInstance();
            case '#' :
                return DateValidator.getDateInstance();
            case '<' :
                return new FileValidator(FileValidator.EXISTS |
                                         FileValidator.FILE);
            case '>' :
                return new FileValidator(FileValidator.FILE);
            case '*' :
                return new FileValidator();
            case '/' :
                return new UrlValidator();
            default :
                return null;
        }
    }
}


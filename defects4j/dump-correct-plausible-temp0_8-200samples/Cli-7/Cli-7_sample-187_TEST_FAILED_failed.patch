diff --git a/src/java/org/apache/commons/cli2/builder/PatternBuilder.java b/src/java/org/apache/commons/cli2/builder/PatternBuilder.java
index f02601e..bddd6e7 100644
--- a/src/java/org/apache/commons/cli2/builder/PatternBuilder.java
+++ b/src/java/org/apache/commons/cli2/builder/PatternBuilder.java
@@ -44,11 +42,10 @@ public class PatternBuilder {
      */
     public PatternBuilder() {
         this(
-            new GroupBuilder(),
-            new DefaultOptionBuilder(),
-            new ArgumentBuilder());
+                new GroupBuilder(),
+                new DefaultOptionBuilder(),
+                new ArgumentBuilder());
     }
-
     /**
      * Creates a new PatternBuilder
      * @param gbuilder the GroupBuilder to use
@@ -56,9 +53,9 @@ public class PatternBuilder {
      * @param abuilder the ArgumentBuilder to use
      */
     public PatternBuilder(
-        final GroupBuilder gbuilder,
-        final DefaultOptionBuilder obuilder,
-        final ArgumentBuilder abuilder) {
+            final GroupBuilder gbuilder,
+            final DefaultOptionBuilder obuilder,
+            final ArgumentBuilder abuilder) {
         this.gbuilder = gbuilder;
         this.obuilder = obuilder;
         this.abuilder = abuilder;
@@ -72,14 +67,12 @@ public class PatternBuilder {
      */
     public Option create() {
         final Option option;
-
         if (options.size() == 1) {
-            option = (Option)options.iterator().next();
-        }
-        else {
+            option = (Option) options.iterator().next();
+        } else {
             gbuilder.reset();
             for (final Iterator i = options.iterator(); i.hasNext();) {
-                gbuilder.withOption((Option)i.next());
+                gbuilder.withOption((Option) i.next());
             }
             option = gbuilder.create();
         }
@@ -96,11 +86,10 @@ public class PatternBuilder {
         options.clear();
         return this;
     }
-
     private void createOption(
-        final char type,
-        final boolean required,
-        final char opt) {
+            final char type,
+            final boolean required,
+            final char opt) {
         final Argument argument;
         if (type != ' ') {
             abuilder.reset();
@@ -112,11 +101,9 @@ public class PatternBuilder {
                 abuilder.withMaximum(1);
             }
             argument = abuilder.create();
-        }
-        else {
+        } else {
             argument = null;
         }
-
         obuilder.reset();
         obuilder.withArgument(argument);
         obuilder.withShortName(String.valueOf(opt));
@@ -179,6 +158,7 @@ public class PatternBuilder {
                 return classv;
             case '+' :
                 final ClassValidator instancev = new ClassValidator();
+                instancev.setInstance(true);
                 return instancev;
                 //case ':':// no validator needed for a string
             case '%' :

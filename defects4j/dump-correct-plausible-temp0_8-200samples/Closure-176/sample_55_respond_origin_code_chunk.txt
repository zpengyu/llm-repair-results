  private void updateScopeForTypeChange(
      FlowScope scope, Node left, JSType leftType, JSType resultType) {
    Preconditions.checkNotNull(resultType);
    switch (left.getType()) {
      case Token.NAME:
        String varName = left.getString();
        Var var = syntacticScope.getVar(varName);
        boolean isVarDeclaration = left.hasChildren();
        // TODO(nicksantos): If a declared var is assigned null or undefined,
        // and is later reassigned to an object literal, then the var's type
        // should be declared as {Object}, not {?Object}.
        //
        // Either that, or we need some kind of declaration to tell the type
        // checker that a var is allowed to be null/undefined.
        //
        // For example:
        // /** @type {Object} */ var a = null;
        // /** @param {Object} b */
        // function f(b) {
        //   a = b;
        //   return a.foo;
        // }
        //
        // is legal, even though a is null.
        //
        // This is an aspect of the type system, not a bug in type inference.

        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
            // Makes it easier to check for NPEs.

        // TODO(nicksantos): This might be a better check once we have
        // back-inference of object/array constraints.  It will probably
        // introduce more type warnings.  It uses the result type iff it's
        // strictly narrower than the declared var type.
        //
        //boolean isVarTypeBetter = isVarDeclaration &&
        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
        //     || !resultType.isSubtype(varType));


        if (isVarTypeBetter) {
          redeclareSimpleVar(scope, left, resultType);
        }
        left.setJSType(isVarDeclaration || leftType == null ?
            resultType : null);

        if (var != null && var.isTypeInferred()) {
          JSType oldType = var.getType();
          var.setType(oldType == null ?
              resultType : oldType.getLeastSupertype(resultType));
        }
        break;
      case Token.GETPROP:
        String qualifiedName = left.getQualifiedName();
        if (qualifiedName != null) {
          scope.inferQualifiedSlot(left, qualifiedName,
              leftType == null ? unknownType : leftType,
              resultType);
        }

        left.setJSType(resultType);
        ensurePropertyDefined(left, resultType);
        break;
    }
  }



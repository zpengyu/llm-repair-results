diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index 53e8cb48..a62bad35 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -520,70 +520,63 @@ class TypeInference
    * Updates the scope according to the result of a type change, like
    * an assignment or a type cast.
    */
-  private void updateScopeForTypeChange(
-      FlowScope scope, Node left, JSType leftType, JSType resultType) {
-    Preconditions.checkNotNull(resultType);
-    switch (left.getType()) {
-      case Token.NAME:
-        String varName = left.getString();
-        Var var = syntacticScope.getVar(varName);
-        boolean isVarDeclaration = left.hasChildren();
-
-        // When looking at VAR initializers for declared VARs, we tend
-        // to use the declared type over the type it's being
-        // initialized to in the global scope.
-        //
-        // For example,
-        // /** @param {number} */ var f = goog.abstractMethod;
-        // it's obvious that the programmer wants you to use
-        // the declared function signature, not the inferred signature.
-        //
-        // Or,
-        // /** @type {Object.<string>} */ var x = {};
-        // the one-time anonymous object on the right side
-        // is as narrow as it can possibly be, but we need to make
-        // sure we back-infer the <string> element constraint on
-        // the left hand side, so we use the left hand side.
-
-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
-            // Makes it easier to check for NPEs.
-
-        // TODO(nicksantos): This might be a better check once we have
-        // back-inference of object/array constraints.  It will probably
-        // introduce more type warnings.  It uses the result type iff it's
-        // strictly narrower than the declared var type.
-        //
-        //boolean isVarTypeBetter = isVarDeclaration &&
-        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
-        //     || !resultType.isSubtype(varType));
-
-
-        if (isVarTypeBetter) {
-          redeclareSimpleVar(scope, left, resultType);
-        }
-        left.setJSType(isVarDeclaration || leftType == null ?
-            resultType : null);
-
-        if (var != null && var.isTypeInferred()) {
-          JSType oldType = var.getType();
-          var.setType(oldType == null ?
-              resultType : oldType.getLeastSupertype(resultType));
-        }
-        break;
-      case Token.GETPROP:
-        String qualifiedName = left.getQualifiedName();
-        if (qualifiedName != null) {
-          scope.inferQualifiedSlot(left, qualifiedName,
-              leftType == null ? unknownType : leftType,
-              resultType);
-        }
-
-        left.setJSType(resultType);
-        ensurePropertyDefined(left, resultType);
-        break;
-    }
+private void updateScopeForTypeChange(
+    FlowScope scope, Node left, JSType leftType, JSType resultType) {
+  Preconditions.checkNotNull(resultType);
+  switch (left.getType()) {
+    case Token.NAME:
+      String varName = left.getString();
+      Var var = syntacticScope.getVar(varName);
+      boolean isVarDeclaration = left.hasChildren();
+      // When looking at VAR initializers for declared VARs, we tend
+      // to use the declared type over the type it's being
+      // initialized to in the global scope.
+      //
+      // For example,
+      // /** @param {number} */ var f = goog.abstractMethod;
+      // it's obvious that the programmer wants you to use
+      // the declared function signature, not the inferred signature.
+      //
+      // Or,
+      // /** @type {Object.<string>} */ var x = {};
+      // the one-time anonymous object on the right side
+      // is as narrow as it can possibly be, but we need to make
+      // sure we back-infer the <string> element constraint on
+      // the left hand side, so we use the left hand side.
+      boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
+          // Makes it easier to check for NPEs.
+      // TODO(nicksantos): This might be a better check once we have
+      // back-inference of object/array constraints.  It will probably
+      // introduce more type warnings.  It uses the result type iff it's
+      // strictly narrower than the declared var type.
+      //
+      //boolean isVarTypeBetter = isVarDeclaration &&
+      //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
+      //     || !resultType.isSubtype(varType));
+      if (isVarTypeBetter) {
+        redeclareSimpleVar(scope, left, resultType);
+      }
+      // TODO(lharker): I suspect the line below is incorrect, but we need to
+      // investigate.
+      // left.setJSType(isVarDeclaration || leftType == null ? resultType : null);
+      if (var != null && var.isTypeInferred()) {
+        JSType oldType = var.getType();
+        var.setType(oldType == null ?
+            resultType : oldType.getLeastSupertype(resultType));
+      }
+      break;
+    case Token.GETPROP:
+      String qualifiedName = left.getQualifiedName();
+      if (qualifiedName != null) {
+        scope.inferQualifiedSlot(left, qualifiedName,
+            leftType == null ? unknownType : leftType,
+            resultType);
+      }
+      left.setJSType(resultType);
+      ensurePropertyDefined(left, resultType);
+      break;
   }
-
+}
   /**
    * Defines a property if the property has not been defined yet.
    */

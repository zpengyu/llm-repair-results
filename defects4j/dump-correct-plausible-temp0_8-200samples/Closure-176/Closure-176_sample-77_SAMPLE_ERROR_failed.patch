diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index 53e8cb48..63bbbb7f 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -520,7 +520,7 @@ class TypeInference
    * Updates the scope according to the result of a type change, like
    * an assignment or a type cast.
    */
-  private void updateScopeForTypeChange(
+    private void updateScopeForTypeChange(
       FlowScope scope, Node left, JSType leftType, JSType resultType) {
     Preconditions.checkNotNull(resultType);
     switch (left.getType()) {
@@ -528,7 +528,7 @@ class TypeInference
         String varName = left.getString();
         Var var = syntacticScope.getVar(varName);
         boolean isVarDeclaration = left.hasChildren();
-
+        boolean isVarTypeBetter = false;
         // When looking at VAR initializers for declared VARs, we tend
         // to use the declared type over the type it's being
         // initialized to in the global scope.
@@ -544,20 +544,11 @@ class TypeInference
         // is as narrow as it can possibly be, but we need to make
         // sure we back-infer the <string> element constraint on
         // the left hand side, so we use the left hand side.
-
-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
-            // Makes it easier to check for NPEs.
-
-        // TODO(nicksantos): This might be a better check once we have
-        // back-inference of object/array constraints.  It will probably
-        // introduce more type warnings.  It uses the result type iff it's
-        // strictly narrower than the declared var type.
-        //
-        //boolean isVarTypeBetter = isVarDeclaration &&
-        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
-        //     || !resultType.isSubtype(varType));
-
-
+        if (var != null && !var.isTypeInferred()) {
+          JSType varType = getDeclaredTypeOfVar(var);
+          isVarTypeBetter = resultType.isSubtype(varType)
+              || !varType.isSubtype(resultType);
+        }
         if (isVarTypeBetter) {
           redeclareSimpleVar(scope, left, resultType);
         }

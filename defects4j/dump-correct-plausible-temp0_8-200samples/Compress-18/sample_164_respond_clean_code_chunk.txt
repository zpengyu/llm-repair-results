    void writePaxHeaders(String entryName,
                         Map<String, String> headers) throws IOException {
        String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
        TarArchiveEntry pex = new TarArchiveEntry(name,
                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);
        // The UTF-8 value of a character can have 1, 2 or 3 bytes.
        // The ASCII range is always 1 byte but since the name of the
        // file is 7-bit US-ASCII, this is always the case.
        // A header value can be any Unicode character so will be at
        // most 3 bytes.
        // The key and the equals sign are both 7-bit US-ASCII so are
        // always 1 byte.
        // The newline is also 7-bit US-ASCII so is always 1 byte.
        // The length field is 3 bytes.
        // The length of a line is at least 1+1+1+1+1 = 5 bytes and at
        // most 3+1+3+3+3+3 = 17 bytes.
        // The header can be at most 17 * the number of header entries =
        // 17 * 10 = 170 bytes.  The actual header will be less as the
        // maximum name and value lengths are less than 32.
        // So the header can be at most 170 bytes.
        StringBuffer buf = new StringBuffer(170);
        for (Map.Entry<String, String> h : headers.entrySet()) {
            String key = h.getKey();
            String value = h.getValue();
            int len = key.length() + value.length()
                + 3 /* blank, equals and newline */
                + 2 /* guess 9 < actual length < 100 */;
            String line = len + " " + key + "=" + value + "\n";
            int actualLength = line.getBytes(CharsetNames.UTF_8).length;
            while (len != actualLength) {
                // Adjust for cases where length < 10 or > 100
                // or where UTF-8 encoding isn't a single octet
                // per character.
                // Must be in loop as size may go from 99 to 100 in
                // first pass so we'd need a second.
                len = actualLength;
                line = len + " " + key + "=" + value + "\n";
                actualLength = line.getBytes(CharsetNames.UTF_8).length;
            }
            buf.append(line);
        }
        byte[] data = buf.toString().getBytes(CharsetNames.UTF_8);
        pex.setSize(data.length);
        putArchiveEntry(pex);
        write(data);
        closeArchiveEntry();
    }
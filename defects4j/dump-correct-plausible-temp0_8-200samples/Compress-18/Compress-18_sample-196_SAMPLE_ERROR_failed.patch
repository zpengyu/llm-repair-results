diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
index da6bbfde..442ef277 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
@@ -451,18 +451,12 @@ public class TarArchiveOutputStream extends ArchiveOutputStream {
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
-    void writePaxHeaders(String entryName,
-                         Map<String, String> headers) throws IOException {
-        String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
-        if (name.length() >= TarConstants.NAMELEN) {
-            name = name.substring(0, TarConstants.NAMELEN - 1);
-        }
-        TarArchiveEntry pex = new TarArchiveEntry(name,
-                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);
-
-        StringWriter w = new StringWriter();
+   void writePaxHeaders(String entryName,
+                     Map<String, String> headers) throws IOException {
+        // We need to explicitly handle the UTF-8 encoding of the header data
+        ByteArrayOutputStream out = new ByteArrayOutputStream();
+        Charset charSet = Charset.forName(CharsetNames.UTF_8);
+        CharsetEncoder enc = charSet.newEncoder();
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
@@ -481,9 +475,22 @@ public class TarArchiveOutputStream extends ArchiveOutputStream {
                 line = len + " " + key + "=" + value + "\n";
                 actualLength = line.getBytes(CharsetNames.UTF_8).length;
             }
-            w.write(line);
+            CharBuffer charBuffer = CharBuffer.wrap(line);
+            ByteBuffer byteBuffer = ByteBuffer.allocate(actualLength);
+            enc.encode(charBuffer, byteBuffer, true);
+            byte[] encodedLine = byteBuffer.array();
+            out.write(encodedLine);
         }
-        byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
+        byte[] data = out.toByteArray();
+        // The ././@PaxHeaders.X/ directory prefix ensure that this header
+        // is only extracted when using a PAX compatible program
+        String name = "././@PaxHeaders.X/" + stripTo7Bits(entryName);
+        if (name.length() >= TarConstants.NAMELEN) {
+            name = name.substring(0, TarConstants.NAMELEN - 1);
+        }
+        // Need to use lonyLinkFile as the entry name is too long
+        // on platforms with a shorter name length limit
+        TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC);
         pex.setSize(data.length);
         putArchiveEntry(pex);
         write(data);

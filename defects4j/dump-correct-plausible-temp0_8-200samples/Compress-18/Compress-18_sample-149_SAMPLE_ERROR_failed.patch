diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
index da6bbfde..dd91cf8b 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
@@ -451,45 +451,28 @@ public class TarArchiveOutputStream extends ArchiveOutputStream {
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
-    void writePaxHeaders(String entryName,
-                         Map<String, String> headers) throws IOException {
-        String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
-        if (name.length() >= TarConstants.NAMELEN) {
-            name = name.substring(0, TarConstants.NAMELEN - 1);
-        }
-        TarArchiveEntry pex = new TarArchiveEntry(name,
-                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);
-
-        StringWriter w = new StringWriter();
+public void writePaxHeaders(String entryName, Map<String, String> headers) throws IOException {
+    TarArchiveEntry pex = new TarArchiveEntry("./PaxHeaders.X/" + stripTo7Bits(entryName));
+    pex.setTypeFlag(TarConstants.LF_PAX_EXTENDED_HEADER_LC);
+    // create writer, ensuring we always close it
+    ByteArrayOutputStream bout = new ByteArrayOutputStream();
+    Writer out = new OutputStreamWriter(bout, CharsetNames.UTF_8);
+    try {
         for (Map.Entry<String, String> h : headers.entrySet()) {
-            String key = h.getKey();
-            String value = h.getValue();
-            int len = key.length() + value.length()
-                + 3 /* blank, equals and newline */
-                + 2 /* guess 9 < actual length < 100 */;
-            String line = len + " " + key + "=" + value + "\n";
-            int actualLength = line.getBytes(CharsetNames.UTF_8).length;
-            while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
-                len = actualLength;
-                line = len + " " + key + "=" + value + "\n";
-                actualLength = line.getBytes(CharsetNames.UTF_8).length;
-            }
-            w.write(line);
+            out.write(h.getKey());
+            out.write('=');
+            out.write(h.getValue());
+            out.write('\n');
         }
-        byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
-        pex.setSize(data.length);
+        out.flush();
+        pex.setSize(bout.size());
         putArchiveEntry(pex);
-        write(data);
+        write(bout.toByteArray());
         closeArchiveEntry();
+    } finally {
+        IOUtils.closeQuietly(out);
     }
-
+}
     private String stripTo7Bits(String name) {
         final int length = name.length();
         StringBuffer result = new StringBuffer(length);

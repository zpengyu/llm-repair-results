diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
index f66075ef7..22b3441ad 100644
--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
@@ -730,30 +730,31 @@ public class JacksonAnnotationIntrospector
     @Override
     public PropertyName findNameForSerialization(Annotated a)
     {
-        String name = null;
-
         JsonGetter jg = _findAnnotation(a, JsonGetter.class);
         if (jg != null) {
-            name = jg.value();
-        } else {
-            JsonProperty pann = _findAnnotation(a, JsonProperty.class);
-            if (pann != null) {
-                name = pann.value();
-                /* 22-Apr-2014, tatu: Should figure out a better way to do this, but
-                 *   it's actually bit tricky to do it more efficiently (meta-annotations
-                 *   add more lookups; AnnotationMap costs etc)
-                 */
-            } else if (_hasAnnotation(a, JsonSerialize.class)
-                    || _hasAnnotation(a, JsonView.class)
-                    || _hasAnnotation(a, JsonRawValue.class)) {
-                name = "";
-            } else {
-                return null;
+            // 26-Jul-2015, tatu: As per [databind#822], allow override with empty String
+            String s = jg.value();
+            if (s.isEmpty()) {
+                return PropertyName.USE_DEFAULT;
             }
+            return PropertyName.construct(s);
         }
-        return PropertyName.construct(name);
+        JsonProperty pann = _findAnnotation(a, JsonProperty.class);
+        if (pann != null) {
+            // 28-Apr-2016, tatu: As per [databind#1192], allow override with empty String
+            String s = pann.value();
+            if (s.isEmpty()) {
+                return PropertyName.USE_DEFAULT;
+            }
+            return PropertyName.construct(s);
+        }
+        if (_hasAnnotation(a, JsonSerialize.class)
+                || _hasAnnotation(a, JsonView.class)
+                || _hasAnnotation(a, JsonRawValue.class)) {
+            return PropertyName.USE_DEFAULT;
+        }
+        return null;
     }
-
     @Override
     public boolean hasAsValueAnnotation(AnnotatedMethod am) {
         JsonValue ann = _findAnnotation(am, JsonValue.class);

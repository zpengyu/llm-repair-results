    public PropertyName findNameForSerialization(Annotated a)
    {
        String name = null;

        JsonGetter jg = _findAnnotation(a, JsonGetter.class);
        if (jg != null) {
            name = jg.value();
        } else {
            JsonProperty pann = _findAnnotation(a, JsonProperty.class);
            if (pann != null) {
                name = pann.value();
            } else {
                JsonSerialize serAnn = _findAnnotation(a, JsonSerialize.class);
                if (serAnn != null) {
                    // empty String means 'default'; but be defensive, check null explicitly
                    name = serAnn.as().getValue();
                    if (name.length() == 0) {
                        name = null;
                    }
                } else if (_hasAnnotation(a, JsonView.class)
                        || _hasAnnotation(a, JsonRawValue.class)) {
                    name = "";
                } else {
                    return null;
                }
                /* 22-Apr-2014, tatu: Should figure out a better way to do this, but
                 *   it's actually bit tricky to do it more efficiently (meta-annotations
                 *   add more lookups; AnnotationMap costs etc)
                 */
            }
        }
        return PropertyName.construct(name);
    }
##Data Analysis

In order to analyze the code excerpts of fixed functions, you can use our code query language.
We have defined a set of code queries that can be used to collect interesting information from the code.
More information on the code queries are available in the CodeQuery.md file.


diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java
index e0dc0d38..d76873ef 100644
--- a/src/com/google/javascript/jscomp/Compiler.java
+++ b/src/com/google/javascript/jscomp/Compiler.java
@@ -1237,130 +1237,47 @@ public class Compiler extends AbstractCompiler {
    * @return A synthetic root node whose two children are the externs root
    *     and the main root
    */
-  Node parseInputs() {
-    boolean devMode = options.devMode != DevMode.OFF;
-
-    // If old roots exist (we are parsing a second time), detach each of the
-    // individual file parse trees.
-    if (externsRoot != null) {
-      externsRoot.detachChildren();
-    }
-    if (jsRoot != null) {
-      jsRoot.detachChildren();
-    }
-
-    // Parse main JS sources.
-    jsRoot = IR.block();
-    jsRoot.setIsSyntheticBlock(true);
-
-    externsRoot = IR.block();
-    externsRoot.setIsSyntheticBlock(true);
-
-    externAndJsRoot = IR.block(externsRoot, jsRoot);
-    externAndJsRoot.setIsSyntheticBlock(true);
-
-    if (options.tracer.isOn()) {
-      tracker = new PerformanceTracker(jsRoot, options.tracer);
-      addChangeHandler(tracker.getCodeChangeHandler());
-    }
-
-    Tracer tracer = newTracer("parseInputs");
-
+private static final class CssParserRunner implements Callable<Object> {
+  private final CssTree.StyleSheet.Codec cssCodec;
+  private final ErrorManager errorManager;
+  private final Map<String, CssTree.StyleSheet> styleSheetMap;
+  private final List<String> styleSheetSourcePaths;
+  private final SourceFile sourceFile;
+  private final MutableSupplier<String> sourceSupplier;
+  CssParserRunner(
+      CssTree.StyleSheet.Codec cssCodec,
+      ErrorManager errorManager,
+      Map<String, CssTree.StyleSheet> styleSheetMap,
+      List<String> styleSheetSourcePaths,
+      SourceFile sourceFile,
+      MutableSupplier<String> sourceSupplier) {
+    this.cssCodec = cssCodec;
+    this.errorManager = errorManager;
+    this.styleSheetMap = styleSheetMap;
+    this.styleSheetSourcePaths = styleSheetSourcePaths;
+    this.sourceFile = sourceFile;
+    this.sourceSupplier = sourceSupplier;
+  }
+  @Override
+  public Object call() throws Exception {
+    String sourcePath = sourceFile.getOriginalPath();
+    String contents = sourceSupplier.get();
     try {
-      // Parse externs sources.
-      for (CompilerInput input : externs) {
-        Node n = input.getAstRoot(this);
-        if (hasErrors()) {
-          return null;
-        }
-        externsRoot.addChildToBack(n);
-      }
-
-      // Modules inferred in ProcessCommonJS pass.
-      if (options.transformAMDToCJSModules || options.processCommonJSModules) {
-        processAMDAndCommonJSModules();
-      }
-
-      hoistExterns(externsRoot);
-
-      // Check if the sources need to be re-ordered.
-      boolean staleInputs = false;
-      if (options.dependencyOptions.needsManagement() && options.closurePass) {
-        for (CompilerInput input : inputs) {
-          // Forward-declare all the provided types, so that they
-          // are not flagged even if they are dropped from the process.
-          for (String provide : input.getProvides()) {
-            getTypeRegistry().forwardDeclareType(provide);
-          }
-        }
-
-        try {
-          inputs =
-              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
-              .manageDependencies(options.dependencyOptions, inputs);
-          staleInputs = true;
-        } catch (CircularDependencyException e) {
-          report(JSError.make(
-              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
-          if (hasErrors()) {
-            return null;
-          }
-        } catch (MissingProvideException e) {
-          report(JSError.make(
-              MISSING_ENTRY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
-          if (hasErrors()) {
-            return null;
-          }
-        }
-      }
-
-      hoistNoCompileFiles();
-
-      if (staleInputs) {
-        repartitionInputs();
-      }
-
-      // Build the AST.
-      for (CompilerInput input : inputs) {
-        Node n = input.getAstRoot(this);
-        if (n == null) {
-          continue;
-        }
-
-        if (devMode) {
-          runSanityCheck();
-          if (hasErrors()) {
-            return null;
-          }
-        }
-
-        if (options.sourceMapOutputPath != null ||
-            options.nameReferenceReportPath != null) {
-
-          // Annotate the nodes in the tree with information from the
-          // input file. This information is used to construct the SourceMap.
-          SourceInformationAnnotator sia =
-              new SourceInformationAnnotator(
-                  input.getName(), options.devMode != DevMode.OFF);
-          NodeTraversal.traverse(this, n, sia);
-        }
-
-        jsRoot.addChildToBack(n);
-      }
-
-      if (hasErrors()) {
-        return null;
-      }
-      return externAndJsRoot;
-    } finally {
-      stopTracer(tracer, "parseInputs");
+      styleSheetMap.put(sourcePath, cssCodec.parse(contents));
+      styleSheetSourcePaths.add(sourcePath);
+    } catch (CssParserRunnerException e) {
+      errorManager.report(CheckLevel.ERROR, e.getMessage());
+    } catch (Throwable t) {
+      errorManager.report(CheckLevel.ERROR, t.getMessage());
     }
+    return null;
   }
-
+  static class CssParserRunnerException extends Exception {
+    CssParserRunnerException(String message) {
+      super(message);
+    }
+  }
+}
   /**
    * Hoists inputs with the @externs annotation into the externs list.
    */

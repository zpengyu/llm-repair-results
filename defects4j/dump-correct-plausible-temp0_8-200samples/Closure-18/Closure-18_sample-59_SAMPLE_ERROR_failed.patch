diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java
index e0dc0d38..fdb1d912 100644
--- a/src/com/google/javascript/jscomp/Compiler.java
+++ b/src/com/google/javascript/jscomp/Compiler.java
@@ -1237,130 +1237,61 @@ public class Compiler extends AbstractCompiler {
    * @return A synthetic root node whose two children are the externs root
    *     and the main root
    */
-  Node parseInputs() {
-    boolean devMode = options.devMode != DevMode.OFF;
-
-    // If old roots exist (we are parsing a second time), detach each of the
-    // individual file parse trees.
-    if (externsRoot != null) {
-      externsRoot.detachChildren();
-    }
-    if (jsRoot != null) {
-      jsRoot.detachChildren();
-    }
-
-    // Parse main JS sources.
-    jsRoot = IR.block();
-    jsRoot.setIsSyntheticBlock(true);
-
-    externsRoot = IR.block();
-    externsRoot.setIsSyntheticBlock(true);
-
-    externAndJsRoot = IR.block(externsRoot, jsRoot);
-    externAndJsRoot.setIsSyntheticBlock(true);
-
-    if (options.tracer.isOn()) {
-      tracker = new PerformanceTracker(jsRoot, options.tracer);
-      addChangeHandler(tracker.getCodeChangeHandler());
+  private static boolean isUnavailableName(String name) {
+    return "alert".equals(name);
+  }
+  private static boolean isLazilyLoadedName(String name) {
+    return "eval".equals(name);
+  }
+  private boolean processProvide(Node n) {
+    Preconditions.checkArgument(n.getType() == Token.CALL);
+    Node callee = n.getFirstChild();
+    Preconditions.checkArgument(callee.getType() == Token.NAME);
+    String name = callee.getString();
+    if (!name.equals("goog.provide")) {
+      return false;
     }
-
-    Tracer tracer = newTracer("parseInputs");
-
-    try {
-      // Parse externs sources.
-      for (CompilerInput input : externs) {
-        Node n = input.getAstRoot(this);
-        if (hasErrors()) {
-          return null;
-        }
-        externsRoot.addChildToBack(n);
+    for (Node arg = callee.getNext(); arg != null; arg = arg.getNext()) {
+      if (arg.getType() != Token.STRING) {
+        errorReporter.error(
+            "Invalid argument to goog.provide(string)", arg.getSourceFileName(),
+            arg.getLineno(), arg.getCharno());
+        return false;
       }
-
-      // Modules inferred in ProcessCommonJS pass.
-      if (options.transformAMDToCJSModules || options.processCommonJSModules) {
-        processAMDAndCommonJSModules();
+      String inputName = arg.getString();
+      if (isUnavailableName(inputName)) {
+        errorReporter.error(
+            "goog.provide can not be used to declare '" + inputName + "'.",
+            arg.getSourceFileName(),
+            arg.getLineno(), arg.getCharno());
+        return false;
       }
-
-      hoistExterns(externsRoot);
-
-      // Check if the sources need to be re-ordered.
-      boolean staleInputs = false;
-      if (options.dependencyOptions.needsManagement() && options.closurePass) {
-        for (CompilerInput input : inputs) {
-          // Forward-declare all the provided types, so that they
-          // are not flagged even if they are dropped from the process.
-          for (String provide : input.getProvides()) {
-            getTypeRegistry().forwardDeclareType(provide);
-          }
-        }
-
-        try {
-          inputs =
-              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
-              .manageDependencies(options.dependencyOptions, inputs);
-          staleInputs = true;
-        } catch (CircularDependencyException e) {
-          report(JSError.make(
-              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
-          if (hasErrors()) {
-            return null;
-          }
-        } catch (MissingProvideException e) {
-          report(JSError.make(
-              MISSING_ENTRY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
-          if (hasErrors()) {
-            return null;
-          }
-        }
-      }
-
-      hoistNoCompileFiles();
-
-      if (staleInputs) {
-        repartitionInputs();
+      if (isLazilyLoadedName(inputName)) {
+        String msg = "goog.provide can not be used to declare '"
+            + inputName + "' because it is lazily loaded.";
+        // TODO(user) Replace with a warning when goog.require is called on
+        // lazily loaded names.
+        errorReporter.error(msg, arg.getSourceFileName(),
+            arg.getLineno(), arg.getCharno());
+        return false;
       }
-
-      // Build the AST.
-      for (CompilerInput input : inputs) {
-        Node n = input.getAstRoot(this);
-        if (n == null) {
-          continue;
-        }
-
-        if (devMode) {
-          runSanityCheck();
-          if (hasErrors()) {
-            return null;
-          }
-        }
-
-        if (options.sourceMapOutputPath != null ||
-            options.nameReferenceReportPath != null) {
-
-          // Annotate the nodes in the tree with information from the
-          // input file. This information is used to construct the SourceMap.
-          SourceInformationAnnotator sia =
-              new SourceInformationAnnotator(
-                  input.getName(), options.devMode != DevMode.OFF);
-          NodeTraversal.traverse(this, n, sia);
-        }
-
-        jsRoot.addChildToBack(n);
+      if (!options.closurePass && inputName.equals("goog")) {
+        String msg = "goog.provide can not be used to declare 'goog'";
+        errorReporter.error(msg, arg.getSourceFileName(),
+            arg.getLineno(), arg.getCharno());
+        return false;
       }
-
-      if (hasErrors()) {
-        return null;
+      if (providedNames.containsKey(inputName)) {
+        String msg = "\"" + inputName
+            + "\" cannot be both provided and required";
+        errorReporter.error(msg, arg.getSourceFileName(),
+            arg.getLineno(), arg.getCharno());
+        return false;
       }
-      return externAndJsRoot;
-    } finally {
-      stopTracer(tracer, "parseInputs");
+      providedNames.put(inputName, arg);
     }
+    return true;
   }
-
   /**
    * Hoists inputs with the @externs annotation into the externs list.
    */

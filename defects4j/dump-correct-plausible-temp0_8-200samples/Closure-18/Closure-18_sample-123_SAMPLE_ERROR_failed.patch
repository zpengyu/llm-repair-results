diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java
index e0dc0d38..e1615391 100644
--- a/src/com/google/javascript/jscomp/Compiler.java
+++ b/src/com/google/javascript/jscomp/Compiler.java
@@ -1237,130 +1237,51 @@ public class Compiler extends AbstractCompiler {
    * @return A synthetic root node whose two children are the externs root
    *     and the main root
    */
-  Node parseInputs() {
-    boolean devMode = options.devMode != DevMode.OFF;
-
-    // If old roots exist (we are parsing a second time), detach each of the
-    // individual file parse trees.
-    if (externsRoot != null) {
-      externsRoot.detachChildren();
-    }
-    if (jsRoot != null) {
-      jsRoot.detachChildren();
-    }
-
-    // Parse main JS sources.
-    jsRoot = IR.block();
-    jsRoot.setIsSyntheticBlock(true);
-
-    externsRoot = IR.block();
-    externsRoot.setIsSyntheticBlock(true);
-
-    externAndJsRoot = IR.block(externsRoot, jsRoot);
-    externAndJsRoot.setIsSyntheticBlock(true);
-
-    if (options.tracer.isOn()) {
-      tracker = new PerformanceTracker(jsRoot, options.tracer);
-      addChangeHandler(tracker.getCodeChangeHandler());
-    }
-
-    Tracer tracer = newTracer("parseInputs");
-
-    try {
-      // Parse externs sources.
-      for (CompilerInput input : externs) {
-        Node n = input.getAstRoot(this);
-        if (hasErrors()) {
-          return null;
-        }
-        externsRoot.addChildToBack(n);
-      }
-
-      // Modules inferred in ProcessCommonJS pass.
-      if (options.transformAMDToCJSModules || options.processCommonJSModules) {
-        processAMDAndCommonJSModules();
-      }
-
-      hoistExterns(externsRoot);
-
-      // Check if the sources need to be re-ordered.
-      boolean staleInputs = false;
-      if (options.dependencyOptions.needsManagement() && options.closurePass) {
-        for (CompilerInput input : inputs) {
-          // Forward-declare all the provided types, so that they
-          // are not flagged even if they are dropped from the process.
-          for (String provide : input.getProvides()) {
-            getTypeRegistry().forwardDeclareType(provide);
-          }
-        }
-
-        try {
-          inputs =
-              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
-              .manageDependencies(options.dependencyOptions, inputs);
-          staleInputs = true;
-        } catch (CircularDependencyException e) {
-          report(JSError.make(
-              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
-          if (hasErrors()) {
-            return null;
-          }
-        } catch (MissingProvideException e) {
-          report(JSError.make(
-              MISSING_ENTRY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
-          if (hasErrors()) {
-            return null;
-          }
-        }
+  private void hoistNoCompileFiles() {
+    List<CompilerInput> sortedInputs = new ArrayList<>(this.inputs);
+    if (options.dependencyOptions.needsManagement() && options.closurePass) {
+      // The dependency management code is sensitive to the order of inputs.
+      // The inputs are already sorted in the correct order.
+    } else {
+      // We need to sort the inputs because the group inputs are not
+      // guaranteed to be in topological order.
+      Comparator<CompilerInput> comparator = getCodingConvention().getStableInputOrder();
+      if (comparator != null) {
+        Collections.sort(sortedInputs, comparator);
       }
-
-      hoistNoCompileFiles();
-
-      if (staleInputs) {
-        repartitionInputs();
+    }
+    // Group the inputs by path.
+    Map<String, List<CompilerInput>> groupedInputs = new HashMap<>();
+    for (CompilerInput input : sortedInputs) {
+      String sourceName = input.getName();
+      List<CompilerInput> inputsForSource = groupedInputs.get(sourceName);
+      if (inputsForSource == null) {
+        inputsForSource = new ArrayList<>();
+        groupedInputs.put(sourceName, inputsForSource);
       }
-
-      // Build the AST.
-      for (CompilerInput input : inputs) {
-        Node n = input.getAstRoot(this);
-        if (n == null) {
-          continue;
-        }
-
-        if (devMode) {
-          runSanityCheck();
-          if (hasErrors()) {
-            return null;
-          }
-        }
-
-        if (options.sourceMapOutputPath != null ||
-            options.nameReferenceReportPath != null) {
-
-          // Annotate the nodes in the tree with information from the
-          // input file. This information is used to construct the SourceMap.
-          SourceInformationAnnotator sia =
-              new SourceInformationAnnotator(
-                  input.getName(), options.devMode != DevMode.OFF);
-          NodeTraversal.traverse(this, n, sia);
+      inputsForSource.add(input);
+    }
+    Set<String> alreadyMoved = new HashSet<>();
+    for (List<CompilerInput> inputsForSource : groupedInputs.values()) {
+      CompilerInput input = inputsForSource.get(0);
+      if (input.getCompiler() == this &&
+          options.shouldHoistDeclaration(input.getPathRelativeToClosureBase())) {
+        for (CompilerInput compilerInput : inputsForSource) {
+          compilerInput.getAstRoot(this);
+          compilerInput.setCompiler(this);
+          compilerInput.setIsExtern(true);
+          alreadyMoved.add(compilerInput.getName());
         }
-
-        jsRoot.addChildToBack(n);
+        externsRoot.addChildrenToBack(input.getAstRoot(this).removeChildren());
       }
-
-      if (hasErrors()) {
-        return null;
+    }
+    for (Iterator<CompilerInput> iterator = inputs.iterator(); iterator.hasNext();) {
+      CompilerInput input = iterator.next();
+      if (alreadyMoved.contains(input.getName())) {
+        iterator.remove();
       }
-      return externAndJsRoot;
-    } finally {
-      stopTracer(tracer, "parseInputs");
     }
   }
-
   /**
    * Hoists inputs with the @externs annotation into the externs list.
    */

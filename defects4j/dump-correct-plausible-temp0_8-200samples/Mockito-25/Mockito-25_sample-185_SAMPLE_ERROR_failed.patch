diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index 6fa773f53..b0fbad210 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -74,14 +65,11 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
      * @param returnTypeGenericMetadata The metadata to use to create the new mock.
      * @return The mock
      */
-
-
-
-
+    @SuppressWarnings("unchecked")
     private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {
         Class<?> clz = invocation.getMethod().getReturnType();
-        final Object mock = org.mockito.Mockito.mock(clz, this);
-
+        //final Object mock = org.mockito.Mockito.mock(clz, this);
+        final Object mock = doMock(clz, this, invocation);
         container.addAnswer(new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return mock;
@@ -95,4 +81,23 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
         CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();
         return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());
     }
+    private Object doMock(Class clz, Answer answer, InvocationOnMock invocationOnMock) {
+        if (clz.isInterface()) {
+            return org.mockito.Mockito.mock(clz, answer);
+        } else {
+            return org.mockito.Mockito.mock(clz, answer, getDefaultConstructor(clz), Mockito.RETURNS_DEFAULTS);
+        }
+    }
+    private Constructor getDefaultConstructor(Class clz) {
+        Constructor defaultConstructor = null;
+        try {
+            defaultConstructor = clz.getConstructor();
+        } catch (NoSuchMethodException e) {
+            Class superClz = clz.getSuperclass();
+            if (superClz != null) {
+                defaultConstructor = getDefaultConstructor(superClz);
+            }
+        }
+        return defaultConstructor;
+    }
 }
\ No newline at end of file

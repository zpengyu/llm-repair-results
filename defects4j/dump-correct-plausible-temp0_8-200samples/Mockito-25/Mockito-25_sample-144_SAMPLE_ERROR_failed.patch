diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index 6fa773f53..c8d975f02 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -49,10 +45,12 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
         if (!new MockCreationValidator().isTypeMockable(rawType)) {
             return delegate.returnValueFor(rawType);
         }
-
-        return getMock(invocation);
+        Object mock = getMock(invocation);
+        if (mock == null) {
+            mock = recordDeepStubMock(invocation);
+        }
+        return mock;
     }
-
     private Object getMock(InvocationOnMock invocation) throws Throwable {
     	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
     	InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();
@@ -63,25 +60,12 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
     			return stubbedInvocationMatcher.answer(invocation);
     		}
 		}
-
-        // deep stub
-        return recordDeepStubMock(invocation, container);
+        return null;
     }
-
-    /**
-     * Creates a mock using the Generics Metadata.
-     *
-     * @param returnTypeGenericMetadata The metadata to use to create the new mock.
-     * @return The mock
-     */
-
-
-
-
-    private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {
+    private Object recordDeepStubMock(InvocationOnMock invocation) {
         Class<?> clz = invocation.getMethod().getReturnType();
         final Object mock = org.mockito.Mockito.mock(clz, this);
-
+        // deep stub
         container.addAnswer(new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return mock;

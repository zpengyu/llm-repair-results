diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index 6fa773f53..603152da4 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -74,14 +65,31 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
      * @param returnTypeGenericMetadata The metadata to use to create the new mock.
      * @return The mock
      */
-
-
-
-
+    protected Object createDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {
+        Object mock = org.mockito.Mockito.mock(returnTypeGenericMetadata.rawType(), this);
+        for (GenericMetadataSupport genericMetadata : returnTypeGenericMetadata.typeParameters()) {
+            injectTypeForMock(genericMetadata, mock);
+        }
+        return mock;
+    }
+    private void injectTypeForMock(GenericMetadataSupport genericMetadata, Object mock) {
+        try {
+            Field field = mock.getClass().getField(genericMetadata.name());
+            field.setAccessible(true);
+            field.set(mock, createDeepStubMock(genericMetadata));
+        } catch (NoSuchFieldException e) {
+            throw new MockitoException("Can't inject type.\n" +
+                                       "The type you are trying to deep stub is most likely not available at runtime.\n" +
+                                       "Missing field: " + genericMetadata.name() + "\n" +
+                                       "Mock: " + mock, e);
+        } catch (IllegalAccessException e) {
+            throw new MockitoException("Can't inject type.\n" +
+                                       "Type: " + genericMetadata.name() + "\n" +
+                                       "Mock: " + mock, e);
+        }
+    }
     private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {
-        Class<?> clz = invocation.getMethod().getReturnType();
-        final Object mock = org.mockito.Mockito.mock(clz, this);
-
+        final Object mock = createDeepStubMock(actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()));
         container.addAnswer(new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return mock;

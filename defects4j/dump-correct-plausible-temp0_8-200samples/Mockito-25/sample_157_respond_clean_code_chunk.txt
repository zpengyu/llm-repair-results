public class ReturnsDeepStubs implements Answer<Object>, Serializable {
    private static final long serialVersionUID = -7105341425736035847L;
    private ReturnsEmptyValues delegate = new ReturnsEmptyValues();
    public Object answer(InvocationOnMock invocation) throws Throwable {
        GenericMetadataSupport returnTypeGenericMetadata =
                actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
        Class<?> rawType = returnTypeGenericMetadata.rawType();
        if (!new MockCreationValidator().isTypeMockable(rawType)) {
            return delegate.returnValueFor(rawType);
        }
        return getMock(invocation, returnTypeGenericMetadata);
    }
    private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
    	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
    	InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();
        // matches invocation for verification
        for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {
    		if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {
    			return stubbedInvocationMatcher.answer(invocation);
    		}
		}
        // deep stub
        return recordDeepStubMock(invocation, returnTypeGenericMetadata, container);
    }
    /**
     * Creates a mock using the Generics Metadata.
     *
     * @param returnTypeGenericMetadata The metadata to use to create the new mock.
     * @return The mock
     */
    @SuppressWarnings("unchecked")
    protected <T> T createMock(GenericMetadataSupport returnTypeGenericMetadata, Class<T> clz) {
        GenericMetadataSupport resolvedGenerics = returnTypeGenericMetadata.deepResolve();
        Type targetType = resolvedGenerics.rawType();
        final CreationSettings settings = new SettingsImpl(targetType)
                .defaultAnswer(this)
                .name(createNewMockName());
        if (clz != null) {
            settings.extraInterfaces((Class) clz);
        }
        final MockHandlerFactory<Object> handlerFactory = new MockHandlerFactory<Object>(settings);
        Object mock = new MockMaker().createMock(settings, handlerFactory);
        handlerFactory.getHandler().setAnswersForStubbing(this);
        return (T) mock;
    }
    private Object recordDeepStubMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata, InvocationContainerImpl container) {
        Class<?> clz = invocation.getMethod().getReturnType();
        final Object mock = createMock(returnTypeGenericMetadata, clz);
        container.addAnswer(new Answer<Object>() {
            public Object answer(InvocationOnMock invocation) throws Throwable {
                return mock;
            }
        }, false);
        return mock;
    }
    protected GenericMetadataSupport actualParameterizedType(Object mock) {
        CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();
        return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());
    }
}
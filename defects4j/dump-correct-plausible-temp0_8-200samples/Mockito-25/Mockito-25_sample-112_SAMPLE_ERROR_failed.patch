diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index 6fa773f53..0bca7b5ca 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -74,25 +65,31 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
      * @param returnTypeGenericMetadata The metadata to use to create the new mock.
      * @return The mock
      */
-
-
-
-
+    private Object createMockUsing(GenericMetadataSupport returnTypeGenericMetadata, InvocationOnMock invocation) {
+        CreationSettings settings = new CreationSettings();
+        settings.setMockName(returnTypeGenericMetadata.name());
+        settings.setTypeToMock(returnTypeGenericMetadata.rawType());
+        settings.setSerializableMode(invocation.getMethod().getReturnType().isInterface() ? SerializableMode.BASIC : SerializableMode.NONE);
+        settings.setExtraInterfaces(returnTypeGenericMetadata.interfacesToMock());
+        settings.setAnnotations(returnTypeGenericMetadata.annotations());
+        settings.setMethodInvocationControl(invocation.getMethod().isVarArgs());
+        // TODO: I'm not sure about this. (dk)
+        settings.setSpiedInstance(invocation.getMock());
+        return new MockMaker().createMock(settings, this);
+    }
+    protected GenericMetadataSupport actualParameterizedType(Object mock) {
+        CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();
+        return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());
+    }
     private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {
-        Class<?> clz = invocation.getMethod().getReturnType();
-        final Object mock = org.mockito.Mockito.mock(clz, this);
-
+        final Object mock = createMockUsing(
+                actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()),
+                invocation);
         container.addAnswer(new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return mock;
             }
         }, false);
-
         return mock;
     }
-
-    protected GenericMetadataSupport actualParameterizedType(Object mock) {
-        CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();
-        return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());
-    }
 }
\ No newline at end of file

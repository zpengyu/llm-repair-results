diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index 6fa773f53..b8e9743f7 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -74,14 +65,26 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
      * @param returnTypeGenericMetadata The metadata to use to create the new mock.
      * @return The mock
      */
-
-
-
-
+    protected Object createMock(GenericMetadataSupport returnTypeGenericMetadata, Answer<Object> answer) {
+        Type returnType = returnTypeGenericMetadata.type();
+        if (returnType instanceof WildcardType) {
+            returnType = ((WildcardType) returnType).getUpperBounds()[0];
+        }
+        Class<?> rawType = returnTypeGenericMetadata.rawType();
+        Object mock = Mockito.mock(rawType, answer);
+        new MockSettingsImpl<Object>()
+            .extraInterfaces(new Class[] {returnTypeGenericMetadata.rawType()})
+            .defaultAnswer(answer)
+            .configuredBy(new MockitoAnnotations())
+            .serializable(false)
+            .stubOnly()
+            .typeToMock(returnType)
+            .createMock();
+        return mock;
+    }
     private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {
         Class<?> clz = invocation.getMethod().getReturnType();
-        final Object mock = org.mockito.Mockito.mock(clz, this);
-
+        final Object mock = createMock(actualParameterizedType(invocation.getMock()), this);
         container.addAnswer(new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return mock;

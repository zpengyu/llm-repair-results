diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index 6fa773f53..bf2a35c48 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -74,10 +65,24 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
      * @param returnTypeGenericMetadata The metadata to use to create the new mock.
      * @return The mock
      */
-
-
-
-
+    private Object createMock(GenericMetadataSupport returnTypeGenericMetadata) {
+        if (returnTypeGenericMetadata.isRawType()) {
+            return org.mockito.Mockito.mock(returnTypeGenericMetadata.rawType(), this);
+        }
+        Type[] typeParameters = new Type[returnTypeGenericMetadata.typeParameters().length];
+        for (int i = 0; i < typeParameters.length; i++) {
+            typeParameters[i] = getMock(GenericMetadataSupport.inferFrom(returnTypeGenericMetadata.typeParameters()[i]));
+        }
+        // A new type is created that extends the raw type in the metadata.
+        // This is done instead of using the raw type directly because the class
+        // may not be public, so it cannot be mocked directly.
+        Class<?> newType = new MockMaker().createMockType(returnTypeGenericMetadata.rawType(), typeParameters);
+        MockHandler<?> mockHandler = new MockMaker().createMock(newType, this);
+        MockCreationSettings<?> settings = mockHandler.getMockSettings();
+        settings.setTypeToMock(returnTypeGenericMetadata.getType());
+        Object mock = mockHandler.getMock();
+        return mock;
+    }
     private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {
         Class<?> clz = invocation.getMethod().getReturnType();
         final Object mock = org.mockito.Mockito.mock(clz, this);

diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index 6fa773f53..4d4717c3a 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -49,39 +45,31 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
         if (!new MockCreationValidator().isTypeMockable(rawType)) {
             return delegate.returnValueFor(rawType);
         }
-
-        return getMock(invocation);
+        return getMock(invocation, rawType);
     }
-
-    private Object getMock(InvocationOnMock invocation) throws Throwable {
+    private Object getMock(InvocationOnMock invocation, Class<?> rawType) throws Throwable {
     	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
     	InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();
-
         // matches invocation for verification
         for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {
     		if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {
     			return stubbedInvocationMatcher.answer(invocation);
     		}
 		}
-
         // deep stub
-        return recordDeepStubMock(invocation, container);
+        return recordDeepStubMock(invocation, container, rawType);
     }
-
     /**
      * Creates a mock using the Generics Metadata.
      *
      * @param returnTypeGenericMetadata The metadata to use to create the new mock.
      * @return The mock
      */
-
-
-
-
-    private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {
-        Class<?> clz = invocation.getMethod().getReturnType();
-        final Object mock = org.mockito.Mockito.mock(clz, this);
-
+    protected Object createDeepMock(GenericMetadataSupport returnTypeGenericMetadata) {
+        return org.mockito.Mockito.mock(returnTypeGenericMetadata.rawType(), returnTypeGenericMetadata.extraInterfaces(), this);
+    }
+    private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container, Class<?> rawType) {
+        final Object mock = org.mockito.Mockito.mock(rawType, this);
         container.addAnswer(new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return mock;

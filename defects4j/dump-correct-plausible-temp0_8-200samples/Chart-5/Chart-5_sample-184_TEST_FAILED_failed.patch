diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java
index 0b37e6e..e539e53 100644
--- a/source/org/jfree/data/xy/XYSeries.java
+++ b/source/org/jfree/data/xy/XYSeries.java
@@ -541,40 +541,31 @@ public class XYSeries extends Series implements Cloneable, Serializable {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
-
-        // if we get to here, we know that duplicate X values are not permitted
-        XYDataItem overwritten = null;
-        int index = indexOf(x);
-        if (index >= 0 && !this.allowDuplicateXValues) {
-            XYDataItem existing = (XYDataItem) this.data.get(index);
-            try {
-                overwritten = (XYDataItem) existing.clone();
-            }
-            catch (CloneNotSupportedException e) {
-                throw new SeriesException("Couldn't clone XYDataItem!");
-            }
-            existing.setY(y);
-        }
-        else {
+        if (this.allowDuplicateXValues || indexOf(x) < 0) {
             // if the series is sorted, the negative index is a result from
             // Collections.binarySearch() and tells us where to insert the
             // new item...otherwise it will be just -1 and we should just
             // append the value to the list...
-            if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
+            XYDataItem item = new XYDataItem(x, y);
+            int index = Collections.binarySearch(this.data, item);
+            if (index < 0) {
+                this.data.add(-index - 1, item);
+                item = null;
             }
             else {
-                this.data.add(new XYDataItem(x, y));
+                XYDataItem overwritten = (XYDataItem) this.data.get(index);
+                overwritten.setY(y);
             }
             // check if this addition will exceed the maximum item count...
             if (getItemCount() > this.maximumItemCount) {
                 this.data.remove(0);
             }
+            fireSeriesChanged();
+            return item;
+        } else {
+            return null;
         }
-        fireSeriesChanged();
-        return overwritten;
     }
-
     /**
      * Returns the index of the item with the specified x-value, or a negative
      * index if the series does not contain an item with that x-value.  Be

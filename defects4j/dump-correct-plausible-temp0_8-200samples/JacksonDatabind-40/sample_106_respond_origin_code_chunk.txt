    protected abstract static class PrimitiveOrWrapperDeserializer<T>
        extends StdScalarDeserializer<T>
    {
        private static final long serialVersionUID = 1L;

        protected final T _nullValue;
        protected final boolean _primitive;

        protected PrimitiveOrWrapperDeserializer(Class<T> vc, T nvl) {
            super(vc);
            _nullValue = nvl;
            _primitive = vc.isPrimitive();
        }

        @Override
        public final T getNullValue(DeserializationContext ctxt) throws JsonMappingException
        {
            if (_primitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {
                throw ctxt.mappingException(
                        "Can not map JSON null into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)",
                        handledType().toString());
            }
            return _nullValue;
        }

        @Override
        @Deprecated // remove in 2.7
        public final T getNullValue() {
            return _nullValue;
        }

            // [databind#1095]: Should not allow coercion from into null from Empty String
            // either, if `null` not allowed
        @Override
        public T deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
            JsonToken t = jp.getCurrentToken();
            if (t == JsonToken.VALUE_STRING) {
                // [databind#836]: empty String should not give null if null not allowed
                String str = jp.getText().trim();
                if (str.length() == 0) {
                    if (_primitive || !ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
                        return (T) _valueClass.cast(_nullValue);
                    }
                }
            } else if (t == JsonToken.VALUE_NULL) {
                // Also: ignore float/double values (for now?)
                return (T) _valueClass.cast(_nullValue);
            }
            return deserialize(_valueClass, jp, ctxt);
        }
        protected abstract T deserialize(Class<?> vc, JsonParser jp, DeserializationContext ctxt) throws IOException;
    }
 

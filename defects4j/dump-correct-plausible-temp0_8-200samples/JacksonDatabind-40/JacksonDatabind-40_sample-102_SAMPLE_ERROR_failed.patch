diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
index a76403c86..72bd67a2e 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
@@ -144,11 +140,32 @@ public class NumberDeserializers
         public final T getNullValue() {
             return _nullValue;
         }
-
-            // [databind#1095]: Should not allow coercion from into null from Empty String
-            // either, if `null` not allowed
+        @Override
+        public final T deserialize(JsonParser jp, DeserializationContext ctxt)
+            throws IOException
+        {
+            JsonToken t = jp.getCurrentToken();
+            if (t == JsonToken.VALUE_NULL) {
+                if (!_primitive || !ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {
+                    return _nullValue;
+                }
+                throw ctxt.mappingException("Can not map JSON null into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)",
+                        handledType().toString());
+            }
+            if (t == JsonToken.VALUE_STRING) { // let's do implicit re-parse
+                String text = jp.getText().trim();
+                if (text.length() == 0) {
+                    return _nullValue;
+                }
+                try {
+                    return _parseString(text, ctxt);
+                } catch (IllegalArgumentException e) {
+                    return (T) _deserializeFromEmptyString(ctxt);
+                }
+            }
+            return _parse(jp, ctxt);
+        }
     }
-
     /*
     /**********************************************************
     /* Then primitive/wrapper types

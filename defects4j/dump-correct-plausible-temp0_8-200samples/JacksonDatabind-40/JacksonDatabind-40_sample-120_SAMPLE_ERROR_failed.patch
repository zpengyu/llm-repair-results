diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
index a76403c86..430793ffc 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
@@ -118,16 +118,15 @@ public class NumberDeserializers
         extends StdScalarDeserializer<T>
     {
         private static final long serialVersionUID = 1L;
-
         protected final T _nullValue;
         protected final boolean _primitive;
-
-        protected PrimitiveOrWrapperDeserializer(Class<T> vc, T nvl) {
+        protected final boolean _acceptsEmptyStringAsNullValue;
+        protected PrimitiveOrWrapperDeserializer(Class<T> vc, T nvl, boolean acceptsEmptyStringAsNullValue) {
             super(vc);
             _nullValue = nvl;
             _primitive = vc.isPrimitive();
+            _acceptsEmptyStringAsNullValue = acceptsEmptyStringAsNullValue;
         }
-
         @Override
         public final T getNullValue(DeserializationContext ctxt) throws JsonMappingException
         {
@@ -144,11 +142,16 @@ public class NumberDeserializers
         public final T getNullValue() {
             return _nullValue;
         }
-
             // [databind#1095]: Should not allow coercion from into null from Empty String
             // either, if `null` not allowed
+            @Override
+            public boolean isEmptyValue(DeserializationContext ctxt, JsonToken t) throws JsonMappingException
+            {
+                return (t == JsonToken.VALUE_STRING)
+                        && !_acceptsEmptyStringAsNullValue
+                        && super.isEmptyValue(ctxt, t);
+            }
     }
-
     /*
     /**********************************************************
     /* Then primitive/wrapper types

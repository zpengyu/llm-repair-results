diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
index a76403c86..421d7f5e0 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
@@ -144,11 +140,35 @@ public class NumberDeserializers
         public final T getNullValue() {
             return _nullValue;
         }
-
-            // [databind#1095]: Should not allow coercion from into null from Empty String
-            // either, if `null` not allowed
+        /**
+         * Method used to determine if some String value being deserialized from JSON
+         * counts as "empty", and can be directly turned into null value to use (as
+         * per <code>DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT</code>).
+         * This can be called iff <code>_primitive</code> is false; otherwise standard
+         * handling applies.
+         *<p>
+         * Default implementation checks for empty String; can be overridden to
+         * change this (for example, check for <code>NullNode</code> or Pattern
+         * of empty values).
+         */
+        protected boolean _isEmptyOrTextualNull(String value) {
+            return value.isEmpty();
+        }
+        @Override
+        public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
+        {
+            if (p.hasToken(JsonToken.VALUE_STRING)) {
+                String text = p.getText().trim();
+                if (_primitive || !_isEmptyOrTextualNull(text)) {
+                    return _deserializeFromEmptyString(p, ctxt);
+                }
+                return _nullValue;
+            }
+            return _deserializeNonNull(p, ctxt);
+        }
+        // [databind#1095]: Should not allow coercion from into null from Empty String
+        // either, if `null` not allowed
     }
-
     /*
     /**********************************************************
     /* Then primitive/wrapper types

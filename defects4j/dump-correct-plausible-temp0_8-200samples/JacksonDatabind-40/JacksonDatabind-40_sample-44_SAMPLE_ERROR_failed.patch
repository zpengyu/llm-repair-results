diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
index a76403c86..bd2bd350a 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
@@ -144,11 +140,36 @@ public class NumberDeserializers
         public final T getNullValue() {
             return _nullValue;
         }
-
             // [databind#1095]: Should not allow coercion from into null from Empty String
             // either, if `null` not allowed
+            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)
+                    && !prov.isPrimitive()
+                    && (t == JsonToken.VALUE_STRING || t == JsonToken.VALUE_EMBEDDED_OBJECT)) {
+                String str = getText();
+                if (str.length() == 0) {
+                    return getNullValue(ctxt);
+                }
+            }
+        }
+    }
+    private static final JsonDeserializer<?> deser = new JsonDeserializer<Object>() {
+        @Override
+        public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
+        {
+            JsonToken t = jp.getCurrentToken();
+            // [databind#1095]: Should not allow coercion from into null from Empty String
+            // either, if `null` not allowed
+            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)
+                    && !prov.isPrimitive()
+                    && (t == JsonToken.VALUE_STRING || t == JsonToken.VALUE_EMBEDDED_OBJECT)) {
+                String str = getText();
+                if (str.length() == 0) {
+                    return getNullValue(ctxt);
+                }
+            }
+            return getNullValue(ctxt);
+        }
     }
-
     /*
     /**********************************************************
     /* Then primitive/wrapper types

    protected void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));
            if (options.hasOption(ch))
            {
                tokens.add("-" + ch);
                currentOption = options.getOption(ch);
                if (currentOption.hasArg() && (i == token.length() - 1))
                {
                    handleOptionToken(currentOption, null);
                }
                else if (currentOption.hasArg() && (i != token.length() - 1))
                {
                    handleOptionToken(currentOption, token.substring(i + 1));
                    break;
                }
                else if (!currentOption.hasArg())
                {
                    handleOptionToken(currentOption, null);
                }
                else
                {
                    tokens.add(token);
                    break;
                }
            }
            else if (stopAtNonOption)
            {
                process(token.substring(i));
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }
    private void handleOptionToken(Option opt, String optToken)
    {
        if (opt.hasArg())
        {
            if (optToken != null)
            {
                tokens.add(optToken);
            }
            else if (opt.getValues() == null || opt.getValues().length == 0)
            {
                tokens.add("");
            }
        }
    }
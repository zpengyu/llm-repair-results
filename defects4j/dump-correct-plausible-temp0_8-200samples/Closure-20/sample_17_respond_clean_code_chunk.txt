  private Node tryFoldSimpleFunctionCall(Node n) {
    Preconditions.checkState(n.isCall());
    Node callTarget = n.getFirstChild();
    if (callTarget != null && callTarget.isName() &&
          callTarget.getString().equals("String")) {
      // Fold String(a) to '' + (a) on immutable literals,
      // which allows further optimizations
      //
      // We can't do this in the general case, because String(a) has
      // slightly different semantics than '' + (a). See
      // http://code.google.com/p/closure-compiler/issues/detail?id=759
      Node value = callTarget.getNext();
      if (value != null && isImmutableValue(value)) {
        Node addition = IR.add(
            IR.string("").srcref(callTarget),
            value.detachFromParent());
        n.getParent().replaceChild(n, addition);
        reportCodeChange();
        return addition;
      }
    }
    return n;
  }
  private static boolean isImmutableValue(Node n) {
    // If we have a number or a string literal, or a function that only
    // has immutable arguments, then we can perform the optimization
    // because there is no way that this will have side effects.
    switch (n.getType()) {
      case Token.NUMBER:
      case Token.STRING:
        return true;
      case Token.FUNCTION:
        for (Node a : n.getSecondChild().children()) {
          if (!isImmutableValue(a)) {
            return false;
          }
        }
        return true;
      default:
        return false;
    }
  }
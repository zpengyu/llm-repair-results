diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index dee765a1..501ac2df 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -209,22 +209,17 @@ class PeepholeSubstituteAlternateSyntax
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
+          callTarget.getString().equals("String")
+        && (callTarget.getNext() == null)) {
+      // Fold String() to '', which allows further optimizations
       //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
+      // We can't do this in the general case, because String() has
+      // slightly different semantics than ''. See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
-        Node addition = IR.add(
-            IR.string("").srcref(callTarget),
-            value.detachFromParent());
-        n.getParent().replaceChild(n, addition);
-        reportCodeChange();
-        return addition;
-      }
+      Node addition = IR.string("").srcref(callTarget);
+      n.getParent().replaceChild(n, addition);
+      reportCodeChange();
+      return addition;
     }
     return n;
   }

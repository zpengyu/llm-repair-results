diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java
index 96c66201..f47287cf 100644
--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java
+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java
@@ -488,15 +488,20 @@ class DisambiguateProperties<T> implements CompilerPass {
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
+      // We should never see a mix of numbers and strings.
+      boolean hasStringKeys = false;
+      boolean hasNumberKeys = false;
       for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
-        // Maybe STRING, GET, SET
-
-        // We should never see a mix of numbers and strings.
+           child != null;
+           child = child.getNext()) {
+        // Maybe STRING, GET, SET.
+        if (child.isString()) {
+          hasStringKeys = true;
+        } else {
+          hasNumberKeys = true;
+        }
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
-
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
@@ -510,8 +515,10 @@ class DisambiguateProperties<T> implements CompilerPass {
           }
         }
       }
+      if (hasStringKeys && hasNumberKeys) {
+        compiler.report(JSError.make(n, MIXED_OBJECTLIT_PREFIX_WARNING));
+      }
     }
-
     private void printErrorLocations(List<String> errors, JSType t) {
       if (!t.isObject() || t.isAllType()) {
         return;

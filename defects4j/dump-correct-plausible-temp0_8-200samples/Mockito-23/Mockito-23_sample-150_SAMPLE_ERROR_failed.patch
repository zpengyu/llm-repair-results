diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index c4384f7fc..208b366cf 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -61,18 +53,9 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
     private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
     	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
     	InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();
-
-        // matches invocation for verification
-        for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {
-    		if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {
-    			return stubbedInvocationMatcher.answer(invocation);
-    		}
-		}
-
         // deep stub
-        return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);
+        return recordDeepStubMock(createNewDeepStubMock(invocation, returnTypeGenericMetadata), container);
     }
-
     /**
      * Creates a mock using the Generics Metadata.
      *
@@ -83,34 +66,39 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
      * @param returnTypeGenericMetadata The metadata to use to create the new mock.
      * @return The mock
      */
-    private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {
+    private Object createNewDeepStubMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) {
         return mockitoCore.mock(
                 returnTypeGenericMetadata.rawType(),
-                withSettingsUsing(returnTypeGenericMetadata)
+                withSettingsUsing(invocation, returnTypeGenericMetadata)
         );
     }
-
-    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {
+    private MockSettings withSettingsUsing(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) {
         MockSettings mockSettings =
                 returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ?
                 withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())
                 : withSettings();
-
         return mockSettings
-                .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
+                .defaultAnswer(returnsDeepStubsAnswerUsing(invocation, returnTypeGenericMetadata));
     }
-
-    private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {
+    private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final InvocationOnMock invocation, final GenericMetadataSupport returnTypeGenericMetadata) {
         return new ReturnsDeepStubs() {
             @Override
             protected GenericMetadataSupport actualParameterizedType(Object mock) {
                 return returnTypeGenericMetadata;
             }
+            @Override
+            public Object answer(InvocationOnMock invocation) throws Throwable {
+                // matches invocation for verification
+                for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {
+            		if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {
+            			return stubbedInvocationMatcher.answer(invocation);
+            		}
+            	}
+            	return super.answer(invocation);
+            }
         };
     }
-
     private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {
-
         container.addAnswer(new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return mock;

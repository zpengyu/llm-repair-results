diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index c4384f7fc..e454447e9 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -52,16 +48,11 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
         if (!mockitoCore.isTypeMockable(rawType)) {
             return delegate.returnValueFor(rawType);
         }
-
         return getMock(invocation, returnTypeGenericMetadata);
     }
-
-
-
     private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
-    	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
+		InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
     	InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();
-
         // matches invocation for verification
         for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {
     		if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {
@@ -108,21 +94,16 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
             }
         };
     }
-
     private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {
-
-        container.addAnswer(new Answer<Object>() {
-            public Object answer(InvocationOnMock invocation) throws Throwable {
-                return mock;
-            }
-        }, false);
-
+		for (StubbedInvocationMatcher stubbed : container.getStubbedInvocations()) {
+			container.addAnswer(new Answer<Object>() {
+            	public Object answer(InvocationOnMock invocation) throws Throwable {
+                	return mock;
+            	}
+        	}, false);
+		}
         return mock;
     }
-	
-		
-	
-
     protected GenericMetadataSupport actualParameterizedType(Object mock) {
         CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();
         return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());

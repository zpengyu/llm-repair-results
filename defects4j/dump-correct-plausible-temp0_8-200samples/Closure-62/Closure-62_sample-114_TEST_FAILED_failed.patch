diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java
index 54758d68..09fb6e2a 100644
--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java
+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java
@@ -63,53 +63,48 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {
     return format(warning, true);
   }
 
-  private String format(JSError error, boolean warning) {
-    // extract source excerpt
-    SourceExcerptProvider source = getSource();
-    String sourceExcerpt = source == null ? null :
-        excerpt.get(
-            source, error.sourceName, error.lineNumber, excerptFormatter);
-
-    // formatting the message
-    StringBuilder b = new StringBuilder();
-    if (error.sourceName != null) {
-      b.append(error.sourceName);
-      if (error.lineNumber > 0) {
-        b.append(':');
-        b.append(error.lineNumber);
-      }
-      b.append(": ");
-    }
-
-    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));
-    b.append(" - ");
-
-    b.append(error.description);
-    b.append('\n');
-    if (sourceExcerpt != null) {
-      b.append(sourceExcerpt);
-      b.append('\n');
-      int charno = error.getCharno();
-
-      // padding equal to the excerpt and arrow at the end
-      // charno == sourceExpert.length() means something is missing
-      // at the end of the line
-      if (excerpt.equals(LINE)
-          && 0 <= charno && charno < sourceExcerpt.length()) {
-        for (int i = 0; i < charno; i++) {
-          char c = sourceExcerpt.charAt(i);
-          if (Character.isWhitespace(c)) {
-            b.append(c);
-          } else {
-            b.append(' ');
-          }
+    private String format(JSError error, boolean warning) {
+        // extract source excerpt
+        SourceExcerptProvider source = getSource();
+        String sourceExcerpt = source == null ? null :
+            excerpt.get(
+                source, error.sourceName, error.lineNumber, excerptFormatter);
+        // formatting the message
+        StringBuilder b = new StringBuilder();
+        if (error.sourceName != null) {
+            b.append(error.sourceName);
+            if (error.lineNumber > 0) {
+                b.append(':');
+                b.append(error.lineNumber);
+            }
+            b.append(": ");
         }
-        b.append("^\n");
-      }
+        b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));
+        b.append(" - ");
+        b.append(error.description);
+        b.append('\n');
+        if (sourceExcerpt != null) {
+            b.append(sourceExcerpt);
+            b.append('\n');
+            int charno = error.getCharno();
+            // padding equal to the excerpt and arrow at the end
+            // charno == sourceExpert.length() means something is missing
+            // at the end of the line
+            if (excerpt.equals(LINE)
+                    && 0 <= charno && charno < sourceExcerpt.length()) {
+                for (int i = 0; i < charno; i++) {
+                    char c = sourceExcerpt.charAt(i);
+                    if (Character.isWhitespace(c)) {
+                        b.append(c);
+                    } else {
+                        b.append(' ');
+                    }
+                }
+                b.append("^\n");
+            }
+        }
+        return b.toString();
     }
-    return b.toString();
-  }
-
   /**
    * Formats a region by appending line numbers in front, e.g.
    * <pre>   9| if (foo) {

diff --git a/src/main/java/org/jsoup/nodes/Entities.java b/src/main/java/org/jsoup/nodes/Entities.java
index 5a2b368..6edb58e 100644
--- a/src/main/java/org/jsoup/nodes/Entities.java
+++ b/src/main/java/org/jsoup/nodes/Entities.java
@@ -76,9 +76,9 @@ public class Entities {
     }
 
     // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations
-    static void escape(StringBuilder accum, String string, Document.OutputSettings out,
+static void escape(StringBuilder accum, String string, Document.OutputSettings out,
                        boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {
-
+        final int length = string.length();
         boolean lastWasWhite = false;
         boolean reachedNonWhite = false;
         final EscapeMode escapeMode = out.escapeMode();
@@ -86,13 +86,11 @@ public class Entities {
         final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
         final Map<Character, String> map = escapeMode.getMap();
         final int length = string.length();
-
-        int codePoint;
-        for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {
-            codePoint = string.codePointAt(offset);
-
+        for (int offset = 0; offset < length; ) {
+            final int codepoint = string.codePointAt(offset);
+            offset += Character.charCount(codepoint);
             if (normaliseWhite) {
-                if (StringUtil.isWhitespace(codePoint)) {
+                if (StringUtil.isWhitespace(codepoint)) {
                     if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)
                         continue;
                     accum.append(' ');
@@ -104,52 +102,34 @@ public class Entities {
                 }
             }
             // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
-            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
-                final char c = (char) codePoint;
+            if (codepoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
+                final char c = (char) codepoint;
                 // html specific and required escapes:
-                switch (c) {
-                    case '&':
-                        accum.append("&amp;");
-                        break;
-                    case 0xA0:
-                        if (escapeMode != EscapeMode.xhtml)
-                            accum.append("&nbsp;");
-                        else
-                            accum.append("&#xa0;");
-                        break;
-                    case '<':
-                        // escape when in character data or when in a xml attribue val; not needed in html attr val
-                        if (!inAttribute)
-                            accum.append("&lt;");
-                        else
-                            accum.append(c);
-                        break;
-                    case '>':
-                        if (!inAttribute)
-                            accum.append("&gt;");
-                        else
-                            accum.append(c);
-                        break;
-                    case '"':
-                        if (inAttribute)
-                            accum.append("&quot;");
-                        else
-                            accum.append(c);
-                        break;
-                    default:
-                        if (canEncode(coreCharset, c, encoder))
-                            accum.append(c);
-                        else if (map.containsKey(c))
-                            accum.append('&').append(map.get(c)).append(';');
-                        else
-                            accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
+                if (escapeMode == EscapeMode.extended) {
+                    // add extra escapes for extended mode (as used in XHTML)
+                    switch (c) {
+                        case '\'':
+                            accum.append("&#x27;");
+                            break;
+                        default:
+                            if (canEncode(coreCharset, c, encoder))
+                                accum.append(c);
+                            else
+                                accum.append("&#x").append(Integer.toHexString(codepoint)).append(';');
+                    }
+                } else {
+                    // no extra escapes for base escape mode (as used in HTML)
+                    if (canEncode(coreCharset, c, encoder))
+                        accum.append(c);
+                    else
+                        accum.append("&#x").append(Integer.toHexString(codepoint)).append(';');
                 }
             } else {
-                final String c = new String(Character.toChars(codePoint));
+                final String c = new String(Character.toChars(codepoint));
                 if (encoder.canEncode(c)) // uses fallback encoder for simplicity
                     accum.append(c);
                 else
-                    accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
+                    accum.append("&#x").append(Integer.toHexString(codepoint)).append(';');
             }
         }
     }

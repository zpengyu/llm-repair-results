    static void escape(StringBuilder accum, String string, Document.OutputSettings out,
                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {
        boolean lastWasWhite = false;
        boolean reachedNonWhite = false;
        final EscapeMode escapeMode = out.escapeMode();
        final CharsetEncoder encoder = out.encoder();
        final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
        final Map<Character, String> map = escapeMode.getMap();
        final int length = string.length();
        // never encode script and style tags if we are outputting as html
        // we will not encode '<' outside of script and style tags, it may be
        // in a data url
        boolean inScriptOrStyle = false;
        for (int offset = 0; offset < length; ) {
            final int c = string.codePointAt(offset);
            if (c == '<') {
                if (string.regionMatches(true, offset, "<script", 0, 7))
                    inScriptOrStyle = true;
                else if (string.regionMatches(true, offset, "</script", 0, 8))
                    inScriptOrStyle = false;
                else if (string.regionMatches(true, offset, "<style", 0, 6))
                    inScriptOrStyle = true;
                else if (string.regionMatches(true, offset, "</style", 0, 7))
                    inScriptOrStyle = false;
            }
            if (normaliseWhite) {
                if (StringUtil.isWhitespace(c)) {
                    if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite) {
                        offset += Character.charCount(c);
                        continue;
                    }
                    accum.append(' ');
                    lastWasWhite = true;
                    offset += Character.charCount(c);
                    continue;
                } else {
                    lastWasWhite = false;
                    reachedNonWhite = true;
                }
            }
            // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
            if (c < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
                final char c1 = (char) c;
                // html specific and required escapes:
                switch (c1) {
                    case '&':
                        accum.append("&amp;");
                        break;
                    case 0xA0:
                        if (escapeMode != EscapeMode.xhtml)
                            accum.append("&nbsp;");
                        else
                            accum.append("&#xa0;");
                        break;
                    case '<':
                        // escape when in character data or when in a xml attribue val; not needed in html attr val
                        if (!inAttribute && (!inScriptOrStyle || escapeMode != EscapeMode.html))
                            accum.append("&lt;");
                        else
                            accum.append(c1);
                        break;
                    case '>':
                        if (!inAttribute && (!inScriptOrStyle || escapeMode != EscapeMode.html))
                            accum.append("&gt;");
                        else
                            accum.append(c1);
                        break;
                    case '"':
                        if (inAttribute)
                            accum.append("&quot;");
                        else
                            accum.append(c1);
                        break;
                    default:
                        if (canEncode(coreCharset, c1, encoder))
                            accum.append(c1);
                        else if (map.containsKey(c1))
                            accum.append('&').append(map.get(c1)).append(';');
                        else
                            accum.append("&#x").append(Integer.toHexString(c)).append(';');
                }
            } else {
                final String c1 = new String(Character.toChars(c));
                if (encoder.canEncode(c1)) // uses fallback encoder for simplicity
                    accum.append(c1);
                else
                    accum.append("&#x").append(Integer.toHexString(c)).append(';');
            }
            offset += Character.charCount(c);
        }
    }
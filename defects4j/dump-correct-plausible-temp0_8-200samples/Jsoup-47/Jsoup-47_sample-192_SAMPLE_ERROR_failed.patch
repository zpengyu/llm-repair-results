diff --git a/src/main/java/org/jsoup/nodes/Entities.java b/src/main/java/org/jsoup/nodes/Entities.java
index 5a2b368..6464156 100644
--- a/src/main/java/org/jsoup/nodes/Entities.java
+++ b/src/main/java/org/jsoup/nodes/Entities.java
@@ -83,10 +82,8 @@ public class Entities {
         boolean reachedNonWhite = false;
         final EscapeMode escapeMode = out.escapeMode();
         final CharsetEncoder encoder = out.encoder();
-        final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
         final Map<Character, String> map = escapeMode.getMap();
         final int length = string.length();
-
         int codePoint;
         for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {
             codePoint = string.codePointAt(offset);
@@ -103,53 +99,56 @@ public class Entities {
                     reachedNonWhite = true;
                 }
             }
-            // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
-            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
-                final char c = (char) codePoint;
-                // html specific and required escapes:
-                switch (c) {
-                    case '&':
-                        accum.append("&amp;");
-                        break;
-                    case 0xA0:
-                        if (escapeMode != EscapeMode.xhtml)
-                            accum.append("&nbsp;");
-                        else
-                            accum.append("&#xa0;");
-                        break;
-                    case '<':
-                        // escape when in character data or when in a xml attribue val; not needed in html attr val
-                        if (!inAttribute)
-                            accum.append("&lt;");
-                        else
-                            accum.append(c);
-                        break;
-                    case '>':
-                        if (!inAttribute)
-                            accum.append("&gt;");
-                        else
-                            accum.append(c);
-                        break;
-                    case '"':
-                        if (inAttribute)
-                            accum.append("&quot;");
-                        else
-                            accum.append(c);
-                        break;
-                    default:
-                        if (canEncode(coreCharset, c, encoder))
-                            accum.append(c);
-                        else if (map.containsKey(c))
-                            accum.append('&').append(map.get(c)).append(';');
-                        else
-                            accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
-                }
+            String toAppend = StringEscapeUtil.escape(escapeMode, map, encoder, codePoint);
+            if (toAppend != null) {
+                accum.append(toAppend);
             } else {
-                final String c = new String(Character.toChars(codePoint));
-                if (encoder.canEncode(c)) // uses fallback encoder for simplicity
-                    accum.append(c);
-                else
-                    accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
+                // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
+                if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
+                    final char c = (char) codePoint;
+                    // html specific and required escapes:
+                    switch (c) {
+                        case '&':
+                            accum.append("&amp;");
+                            break;
+                        case 0xA0:
+                            if (escapeMode != EscapeMode.xhtml)
+                                accum.append("&nbsp;");
+                            else
+                                accum.append("&#xa0;");
+                            break;
+                        case '<':
+                            // escape when in character data or when in a xml attribue val; not needed in html attr val
+                            if (!inAttribute)
+                                accum.append("&lt;");
+                            else
+                                accum.append(c);
+                            break;
+                        case '>':
+                            if (!inAttribute)
+                                accum.append("&gt;");
+                            else
+                                accum.append(c);
+                            break;
+                        case '"':
+                            if (inAttribute)
+                                accum.append("&quot;");
+                            else
+                                accum.append(c);
+                            break;
+                        default:
+                            if (map.containsKey(c))
+                                accum.append('&').append(map.get(c)).append(';');
+                            else
+                                accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
+                    }
+                } else {
+                    final String c = new String(Character.toChars(codePoint));
+                    if (encoder.canEncode(c)) // uses fallback encoder for simplicity
+                        accum.append(c);
+                    else
+                        accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
+                }
             }
         }
     }

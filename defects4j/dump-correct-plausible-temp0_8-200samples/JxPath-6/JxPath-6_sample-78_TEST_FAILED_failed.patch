diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
index cc45a8f..17b78b8 100644
--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
@@ -42,46 +42,36 @@ public abstract class CoreOperationCompare extends CoreOperation {
     /**
      * Compares two values
      */
-    protected boolean equal(
-        EvalContext context,
-        Expression left,
-        Expression right) 
-    {
-        Object l = left.compute(context);
-        Object r = right.compute(context);
-
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
-        if (l instanceof InitialContext || l instanceof SelfContext) {
-            l = ((EvalContext) l).getSingleNodePointer();
-        }
-
-        if (r instanceof InitialContext || r instanceof SelfContext) {
-            r = ((EvalContext) r).getSingleNodePointer();
-        }
-
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
-        }
-
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
-        }
-
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
-        }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
-        }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
-        }
-        return equal(l, r);
+protected boolean equal(
+    EvalContext context,
+    Expression left,
+    Expression right) 
+{
+    Object l = left.compute(context);
+    Object r = right.compute(context);
+    if (l instanceof InitialContext || l instanceof SelfContext) {
+        l = ((EvalContext) l).getSingleNodePointer();
     }
-
+    if (r instanceof InitialContext || r instanceof SelfContext) {
+        r = ((EvalContext) r).getSingleNodePointer();
+    }
+    if (l instanceof Collection) {
+        l = ((Collection) l).iterator();
+    }
+    if (r instanceof Collection) {
+        r = ((Collection) r).iterator();
+    }
+    if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+        return contains((Iterator) l, r);
+    }
+    if (!(l instanceof Iterator) && (r instanceof Iterator)) {
+        return contains((Iterator) r, l);
+    }
+    if (l instanceof Iterator && r instanceof Iterator) {
+        return findMatch((Iterator) l, (Iterator) r);
+    }
+    return equal(l, r);
+}
     protected boolean contains(Iterator it, Object value) {
         while (it.hasNext()) {
             Object element = it.next();

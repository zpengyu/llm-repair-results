public class EqualPredicate extends Predicate {
    protected boolean equal(
        EvalContext context,
        Expression left,
        Expression right) 
    {
        Object l = left.compute(context);
        Object r = right.compute(context);

        if (l instanceof InitialContext || l instanceof SelfContext) {
            l = ((EvalContext) l).getSingleNodePointer();
        }

        if (r instanceof InitialContext || r instanceof SelfContext) {
            r = ((EvalContext) r).getSingleNodePointer();
        }

        if (l instanceof Collection) {
            l = ((Collection) l).iterator();
        }

        if (r instanceof Collection) {
            r = ((Collection) r).iterator();
        }

        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
            return contains((Iterator) l, r);
        }
        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
            return contains((Iterator) r, l);
        }
        if (l instanceof Iterator && r instanceof Iterator) {
            return findMatch((Iterator) l, (Iterator) r);
        }
        return equal(l, r);
    }
    private boolean equal(Object l, Object r) {
        if (l == r) {
            return true;
        }
        if ((l == null) || (r == null)) {
            return false;
        }
        return l.equals(r);
    }

    private boolean contains(Iterator it, Object o) {
        while (it.hasNext()) {
            if (equal(it.next(), o)) {
                return true;
            }
        }
        return false;
    }

    private boolean findMatch(Iterator left, Iterator right) {
        while (left.hasNext()) {
            Object lo = left.next();
            while (right.hasNext()) {
                Object ro = right.next();
                if (equal(lo, ro)) {
                    return true;
                }
            }
            right = ((Collection) right).iterator();
        }
        return false;
    }
}


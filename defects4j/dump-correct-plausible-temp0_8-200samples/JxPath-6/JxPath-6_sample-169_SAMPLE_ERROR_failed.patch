diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
index cc45a8f..3a1e4b4 100644
--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
@@ -49,11 +49,10 @@ public abstract class CoreOperationCompare extends CoreOperation {
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
-
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+        if (l == r)
+            return true;
+        if (l == null || r == null)
+            return false;
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
@@ -81,7 +76,46 @@ public abstract class CoreOperationCompare extends CoreOperation {
         }
         return equal(l, r);
     }
-
+    private boolean equal(Object l, Object r) {
+        if (l instanceof String && r instanceof String) {
+            return ((String) l).equals(r);
+        }
+        if (l instanceof Number && r instanceof Number) {
+            Number ln = (Number) l;
+            Number rn = (Number) r;
+            if (ln instanceof Double || ln instanceof Float
+                || rn instanceof Double || rn instanceof Float) {
+                double ld = ln.doubleValue();
+                double rd = rn.doubleValue();
+                return (ld == rd) || (Double.isNaN(ld) && Double.isNaN(rd));
+            } else {
+                long ll = ln.longValue();
+                long rl = rn.longValue();
+                return ll == rl;
+            }
+        }
+        if (l instanceof Boolean && r instanceof Boolean) {
+            return ((Boolean) l).booleanValue()
+                == ((Boolean) r).booleanValue();
+        }
+        return l == r;
+    }
+    protected boolean findMatch(Iterator l, Iterator r) {
+        while (l.hasNext()) {
+            if (contains(r, l.next())) {
+                return true;
+            }
+        }
+        return false;
+    }
+    protected boolean contains(Iterator iter, Object value) {
+        while (iter.hasNext()) {
+            if (equal(iter.next(), value)) {
+                return true;
+            }
+        }
+        return false;
+    }
     protected boolean contains(Iterator it, Object value) {
         while (it.hasNext()) {
             Object element = it.next();

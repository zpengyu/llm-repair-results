    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
            Class<?> mixInCls, AnnotatedMethodMap mixIns)
    {
        List<Class<?>> parents = new ArrayList<Class<?>>();
        parents.add(mixInCls);
        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
        for (Class<?> mixin : parents) {
            for (Method m : mixin.getDeclaredMethods()) {
                if (!_isIncludableMemberMethod(m)) {
                    continue;
                }
                AnnotatedMethod am = methods.find(m);
                if (am != null) {
                    _addMixUnders(m, am);
                } else {
                    AnnotatedMethod newOne = _constructMethod(m);
                    AnnotatedMethod prev = mixIns.put(newOne.getAnnotated(), newOne);
                    if (prev != null) {
                        // 19-Aug-2014, tatu: Actually, should just replace with more specific one
                        mixIns.put(newOne.getAnnotated(), prev.withMethod(newOne));
                    }
                }
            }
        }
    }

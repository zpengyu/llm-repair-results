    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
            Class<?> mixInCls, AnnotatedMethodMap mixIns)
    {
        List<Class<?>> parents = new ArrayList<Class<?>>();
        parents.add(mixInCls);
        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
        for (Class<?> mixin : parents) {
            for (Method m : mixin.getDeclaredMethods()) {
                if (!_isIncludableMemberMethod(m)) {
                    continue;
                }
                AnnotatedMethod am = methods.find(m);
                /* Do we already have a method to augment (from sub-class
                 * that will mask this mixIn)? If so, add if visible
                 * without masking (no such annotation)
                 */
                if (am != null) {
                    _addMixUnders(m, am);
                    /* Otherwise will have precedence, but must wait
                     * until we find the real method (mixIn methods are
                     * just placeholder, can't be called)
                     */
                } else {
                    // Well, or, as per [Issue#515], multi-level merge within mixins...
                    AnnotatedMethod prev = mixIns.find(m);
                    if (prev == null) {
                        mixIns.add(_constructMethod(m));
                    } else {
                        // [Issue#515]: override with more specific one
                        AnnotatedMethod curr = _constructMethod(m);
                        if (curr.getDeclaringClass().isAssignableFrom(prev.getDeclaringClass())) {
                            mixIns.add(curr);
                        } else {
                            mixIns.add(prev);
                        }
                    }
                }
            }
        }
    }
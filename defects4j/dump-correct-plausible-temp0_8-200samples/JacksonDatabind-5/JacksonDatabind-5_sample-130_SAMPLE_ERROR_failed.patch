diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java
index 929076729..2ba149e6e 100644
--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java
+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java
@@ -642,20 +642,31 @@ public final class AnnotatedClass
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
-                AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
-                if (am != null) {
+                AnnotatedMethod old = methods.find(m);
+                if (old == null) {
+                    AnnotatedMethod am = _constructMethod(m);
+                    methods.add(am);
+                    // Also: may need to add mix-in annotations
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
                 } else {
                     // Well, or, as per [Issue#515], multi-level merge within mixins...
-                        mixIns.add(_constructMethod(m));
+                    AnnotatedMethod am = old;
+                    // either just make sure annotations are visible...
+                    _addMixUnders(m, am);
+                    // ... or add new annotation, if one with same name not yet added
+                    Annotation[] anns = m.getDeclaredAnnotations();
+                    for (Annotation ann : anns) {
+                        String name = ann.annotationType().getName();
+                        if (!am.isAnnotationPresent(name)) {
+                            try {
+                                am.addIfNotPresent(ann);
+                            } catch (IllegalArgumentException e) {
+                                // 23-Sep-2015, tatu: Probably not a good idea; but for
+                                //   now, let's support it
+                                am.addOrOverride(ann);
+                            }
+                        }
+                    }
                 }
             }
         }

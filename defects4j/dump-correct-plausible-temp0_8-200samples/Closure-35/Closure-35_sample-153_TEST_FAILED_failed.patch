diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index ab353933..2015259b 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -1115,21 +1115,22 @@ class TypeInference
     if (type == null || constraint == null) {
       return;
     }
-
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
-        for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
-          if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+    if (constraintObj != null) {
+      if (constraintObj.isRecordType()) {
+        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+        if (objType != null) {
+          for (String prop : constraintObj.getOwnPropertyNames()) {
+            JSType propType = constraintObj.getPropertyType(prop);
+            if (!objType.isPropertyTypeDeclared(prop)) {
+              JSType typeToInfer = propType;
+              if (!objType.hasProperty(prop)) {
+                typeToInfer =
+                    getNativeType(VOID_TYPE).getLeastSupertype(propType);
+              }
+              objType.defineInferredProperty(prop, typeToInfer, null);
             }
-            objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }

  private void inferPropertyTypesToMatchConstraint(
      JSType type, JSType constraint) {
    if (type == null || constraint == null) {
      return;
    }

    ObjectType constraintObj =
        ObjectType.cast(constraint.restrictByNotNullOrUndefined());
    if (constraintObj != null && constraintObj.isRecordType()) {
      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
      if (objType != null) {
        for (String prop : constraintObj.getOwnPropertyNames()) {
          JSType propType = constraintObj.getPropertyType(prop);
          if (!objType.isPropertyTypeDeclared(prop)) {
            JSType typeToInfer = propType;
            if (!objType.hasProperty(prop)) {
              typeToInfer =
                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
            }
            objType.defineInferredProperty(prop, typeToInfer, null);
          }
        }
      }
    }
    if (type.isRecordType() && constraint.isRecordType()) {
        type.toMaybeRecordType().
        getPropertyMap().forEach((key, value) -> {
            constraint.toMaybeRecordType().
            getPropertyMap().forEach((key1, value1) -> {
                if(key.equals(key1) && value.getType().isEquivalentTo(value1.getType()) == false) {
                    type.toMaybeRecordType().getPropertyMap().put(key, value1);
                }
            });
        });
    }
  }
 

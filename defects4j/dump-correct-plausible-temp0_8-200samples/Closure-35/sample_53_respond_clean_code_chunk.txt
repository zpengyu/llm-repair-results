  private void inferPropertyTypesToMatchConstraint(
      JSType type, JSType constraint) {
    if (type == null || constraint == null) {
      return;
    }
    ObjectType constraintObj =
        ObjectType.cast(constraint.restrictByNotNullOrUndefined());
    if (constraintObj != null) {
      // If the constraint is a record type, use its properties directly.
      if (constraintObj.isRecordType()) {
        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
        if (objType != null) {
          for (String prop : constraintObj.getOwnPropertyNames()) {
            JSType propType = constraintObj.getPropertyType(prop);
            if (!objType.isPropertyTypeDeclared(prop)) {
              JSType typeToInfer = propType;
              if (!objType.hasProperty(prop)) {
                typeToInfer =
                    getNativeType(VOID_TYPE).getLeastSupertype(propType);
              }
              objType.defineInferredProperty(prop, typeToInfer, null);
            }
          }
        }
      } else {
        // If the constraint is not a record type, then it must be an object type.
        // We use the interfaces of the constraint instead, because we don't want to
        // lose its declared properties.
        for (ObjectType interfaceType : constraintObj.getCtorImplementedInterfaces()) {
          inferPropertyTypesToMatchConstraint(type, interfaceType);
        }
      }
    }
  }
diff --git a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java
index 1cfcfa1b..99c7759d 100644
--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java
+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java
@@ -1945,50 +1945,46 @@ public class ReaderBasedJsonParser // final in 2.3, earlier
         return JsonToken.VALUE_STRING;
     }
 
-    private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
-    {
-        _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
-        char[] outBuf = _textBuffer.getCurrentSegment();
-        int outPtr = _textBuffer.getCurrentSegmentSize();
-        final int maxCode = codes.length;
-
-        while (true) {
-            if (_inputPtr >= _inputEnd) {
-                if (!_loadMore()) { // acceptable for now (will error out later)
-                    break;
-                }
+private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
+{
+    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
+    char[] outBuf = _textBuffer.getCurrentSegment();
+    int outPtr = _textBuffer.getCurrentSegmentSize();
+    final int maxCode = codes.length;
+    while (true) {
+        if (_inputPtr >= _inputEnd) {
+            if (!_loadMore()) { // acceptable for now (will error out later)
+                _reportInvalidEOF(": was expecting closing '"+(char)code+"' for name");
             }
-            char c = _inputBuffer[_inputPtr];
-            int i = (int) c;
-            if (i <= maxCode) {
-                if (codes[i] != 0) {
-                    break;
-                }
-            } else if (!Character.isJavaIdentifierPart(c)) {
+        }
+        char c = _inputBuffer[_inputPtr];
+        int i = (int) c;
+        if (i <= maxCode) {
+            if (codes[i] != 0) {
                 break;
             }
-            ++_inputPtr;
-            hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
-            // Ok, let's add char to output:
-            outBuf[outPtr++] = c;
-
-            // Need more room?
-            if (outPtr >= outBuf.length) {
-                outBuf = _textBuffer.finishCurrentSegment();
-                outPtr = 0;
-            }
+        } else if (!Character.isJavaIdentifierPart(c)) {
+            break;
         }
-        _textBuffer.setCurrentLength(outPtr);
-        {
-            TextBuffer tb = _textBuffer;
-            char[] buf = tb.getTextBuffer();
-            int start = tb.getTextOffset();
-            int len = tb.size();
-
-            return _symbols.findSymbol(buf, start, len, hash);
+        ++_inputPtr;
+        hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
+        // Ok, let's add char to output:
+        outBuf[outPtr++] = c;
+        // Need more room?
+        if (outPtr >= outBuf.length) {
+            outBuf = _textBuffer.finishCurrentSegment();
+            outPtr = 0;
         }
     }
-
+    _textBuffer.setCurrentLength(outPtr);
+    {
+        TextBuffer tb = _textBuffer;
+        char[] buf = tb.getTextBuffer();
+        int start = tb.getTextOffset();
+        int len = tb.size();
+        return _symbols.findSymbol(buf, start, len, hash);
+    }
+}
     @Override
     protected final void _finishString() throws IOException
     {

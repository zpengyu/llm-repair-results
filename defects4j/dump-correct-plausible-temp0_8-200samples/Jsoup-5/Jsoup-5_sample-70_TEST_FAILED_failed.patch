diff --git a/src/main/java/org/jsoup/parser/Parser.java b/src/main/java/org/jsoup/parser/Parser.java
index 5f71aaf..c325952 100644
--- a/src/main/java/org/jsoup/parser/Parser.java
+++ b/src/main/java/org/jsoup/parser/Parser.java
@@ -181,34 +181,27 @@ public class Parser {
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
-        String value = "";
         tq.consumeWhitespace();
+        boolean empty = tq.matchesAny(SQ, DQ);
         if (tq.matchChomp("=")) {
             tq.consumeWhitespace();
-
-            if (tq.matchChomp(SQ)) {
-                value = tq.chompTo(SQ);
-            } else if (tq.matchChomp(DQ)) {
-                value = tq.chompTo(DQ);
+            if (empty) {
+                if (tq.matchChomp(SQ)) {
+                    tq.consumeTo(SQ);
+                } else {
+                    tq.consumeTo(DQ);
+                }
             } else {
                 StringBuilder valueAccum = new StringBuilder();
                 // no ' or " to look for, so scan to end tag or space (or end of stream)
                 while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                     valueAccum.append(tq.consume());
                 }
-                value = valueAccum.toString();
             }
-            tq.consumeWhitespace();
-        }
-        if (key.length() != 0)
-            return Attribute.createFromEncoded(key, value);
-        else {
-            tq.consume();
-
-            return null;
         }
+        tq.consumeWhitespace();
+        return Attribute.createFromEncoded(key, "");
     }
-
     private void parseTextNode() {
         TextNode textNode;
         // special case: handle string like "hello < there". first char will be "<", because of matchStartTag

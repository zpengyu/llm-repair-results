diff --git a/src/main/java/org/jsoup/parser/Parser.java b/src/main/java/org/jsoup/parser/Parser.java
index 5f71aaf..8549ab0 100644
--- a/src/main/java/org/jsoup/parser/Parser.java
+++ b/src/main/java/org/jsoup/parser/Parser.java
@@ -178,37 +178,33 @@ public class Parser {
         }
     }
 
-    private Attribute parseAttribute() {
-        tq.consumeWhitespace();
-        String key = tq.consumeAttributeKey();
-        String value = "";
-        tq.consumeWhitespace();
-        if (tq.matchChomp("=")) {
+     private Attribute parseAttribute() {
             tq.consumeWhitespace();
-
-            if (tq.matchChomp(SQ)) {
-                value = tq.chompTo(SQ);
-            } else if (tq.matchChomp(DQ)) {
-                value = tq.chompTo(DQ);
-            } else {
-                StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
-                    valueAccum.append(tq.consume());
+            String key = tq.consumeAttributeKey();
+            String value = "";
+            tq.consumeWhitespace();
+            if (tq.matchChomp("=")) {
+                tq.consumeWhitespace();
+                if (tq.matchChomp(SQ)) {
+                    value = tq.chompTo(SQ);
+                } else if (tq.matchChomp(DQ)) {
+                    value = tq.chompTo(DQ);
+                } else {
+                    StringBuilder valueAccum = new StringBuilder();
+                    // no ' or " to look for, so scan to end tag or space (or end of stream)
+                    while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+                        valueAccum.append(tq.consume());
+                    }
+                    value = valueAccum.toString();
                 }
-                value = valueAccum.toString();
+                tq.consumeWhitespace();
+            }
+            if (key.length() != 0)
+                return Attribute.createFromEncoded(key, value);
+            else {
+                return null;
             }
-            tq.consumeWhitespace();
-        }
-        if (key.length() != 0)
-            return Attribute.createFromEncoded(key, value);
-        else {
-            tq.consume();
-
-            return null;
         }
-    }
-
     private void parseTextNode() {
         TextNode textNode;
         // special case: handle string like "hello < there". first char will be "<", because of matchStartTag

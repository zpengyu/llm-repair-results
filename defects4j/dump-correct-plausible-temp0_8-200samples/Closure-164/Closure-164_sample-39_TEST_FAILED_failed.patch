diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java
index 0c0ef637..46d2d4d6 100644
--- a/src/com/google/javascript/rhino/jstype/ArrowType.java
+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java
@@ -122,17 +118,18 @@ final class ArrowType extends JSType {
           return false;
         }
       }
-
       boolean thisIsVarArgs = thisParam.isVarArgs();
       boolean thatIsVarArgs = thatParam.isVarArgs();
-
       // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
+      if (thatParamType == null &&
+          (thisParamType != null || thisIsVarArgs)) {
+        return false;
+      }
+      // NOTE(nicksantos): In our type system, we use {function(...?)} and
+      // {function(...NoType)} to to indicate that arity should not be
+      // checked. Strictly speaking, this is not a correct formulation,
+      // because now a sub-function can required arguments that are var_args
+      // in the super-function. So we special-case this.
       // don't advance if we have variable arguments
       if (!thisIsVarArgs) {
         thisParam = thisParam.getNext();
@@ -147,12 +143,26 @@ final class ArrowType extends JSType {
         thatParam = null;
       }
     }
-
     // "that" can't be a supertype, because it's missing a required arguement.
-
+    // NOTE(nicksantos): This used to be a soundness bug, because we would
+    // pretend that {function(...?)} subtyped any other function.
+    //
+    // We still make the "that" function pretend that it has optional arguments.
+    // But this is safe, because we're always using
+    // getMostSpecificFunctionType() which makes sure that "this" is the
+    // subtype.
+    while (thisParam != null) {
+      if (thisParam.getJSType() != null) {
+        return false;
+      }
+      if (!thisParam.isVarArgs()) {
+        thisParam = thisParam.getNext();
+      } else {
+        thisParam = null;
+      }
+    }
     return true;
   }
-
   /**
    * @return True if our parameter spec is equal to {@code that}'s parameter
    *     spec.

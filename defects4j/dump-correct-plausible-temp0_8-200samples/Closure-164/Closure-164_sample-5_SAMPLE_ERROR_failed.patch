diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java
index 0c0ef637..522fbc26 100644
--- a/src/com/google/javascript/rhino/jstype/ArrowType.java
+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java
@@ -111,6 +107,9 @@ final class ArrowType extends JSType {
     // to create a new no-op function for every possible type signature.
     //
     // So, in this case, g < f, but f !< g
+    // TODO(user): This function is, in fact, broken.
+    // If a function has a type of {function(...NoType)}, then it should
+    // be a subtype of every other function, regardless of its parameter types.
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
     while (thisParam != null && thatParam != null) {
@@ -122,17 +121,19 @@ final class ArrowType extends JSType {
           return false;
         }
       }
-
       boolean thisIsVarArgs = thisParam.isVarArgs();
       boolean thatIsVarArgs = thatParam.isVarArgs();
-
       // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
+      if (!thatIsVarArgs && !thatParam.isOptionalArg() &&
+          !thatParam.isDefaultValue()) {
+        return false;
+      }
+      // "that" can't be a supertype, because it requires an argument that
+      // "this" doesn't have.
+      if (thatIsVarArgs && thatParam.isOptionalArg() &&
+          !thatParam.isDefaultValue()) {
+        return false;
+      }
       // don't advance if we have variable arguments
       if (!thisIsVarArgs) {
         thisParam = thisParam.getNext();
@@ -147,12 +147,19 @@ final class ArrowType extends JSType {
         thatParam = null;
       }
     }
-
     // "that" can't be a supertype, because it's missing a required arguement.
-
+    if (thisParam != null) {
+      if (!thisParam.isOptionalArg() && !thisParam.isDefaultValue()) {
+        return false;
+      }
+      // If the subtype has a var_args parameter, it's ok to have fewer
+      // parameters.
+      if (!thisParam.isVarArgs()) {
+        return false;
+      }
+    }
     return true;
   }
-
   /**
    * @return True if our parameter spec is equal to {@code that}'s parameter
    *     spec.

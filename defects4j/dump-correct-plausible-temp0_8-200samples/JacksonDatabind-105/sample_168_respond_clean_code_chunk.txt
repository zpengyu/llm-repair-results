public class JdkDeserializers
{
    private final static HashSet<String> _classNames = new HashSet<String>();
    static {
        // note: can skip primitive types; other ways to check them:
        Class<?>[] types = new Class<?>[] {
                UUID.class,
                AtomicBoolean.class,
                StackTraceElement.class,
                ByteBuffer.class
        };
        for (Class<?> cls : types) { _classNames.add(cls.getName()); }
        for (Class<?> cls : FromStringDeserializer.types()) { _classNames.add(cls.getName()); }
    }
    public static JsonDeserializer<?> find(Class<?> rawType, String clsName)
    {
        if (_classNames.contains(clsName)) {
            JsonDeserializer<?> d = FromStringDeserializer.findDeserializer(rawType);
            if (d != null) {
                return d;
            }
            if (rawType == UUID.class) {
                return new UUIDDeserializer();
            }
            if (rawType == StackTraceElement.class) {
                return new StackTraceElementDeserializer();
            }
            if (rawType == AtomicBoolean.class) {
                // (note: AtomicInteger/Long work due to single-arg constructor. For now?
                return new AtomicBooleanDeserializer();
            }
            if (rawType == ByteBuffer.class) {
                return new ByteBufferDeserializer();
            }
            if (rawType == File.class) {
                return new FileDeserializer();
            }
            if (rawType == InetAddress.class) {
                return new InetAddressDeserializer();
            }
            if (rawType == InetSocketAddress.class) {
                return new InetSocketAddressDeserializer();
            }
            if (rawType == URI.class) {
                return new URIDeserializer();
            }
            if (rawType == URL.class) {
                return new URLDeserializer();
            }
            if (rawType == Pattern.class) {
                return PatternDeserializer.instance;
            }
            if (rawType == Locale.class) {
                return new LocaleDeserializer();
            }
            if (rawType == Charset.class) {
                return new CharsetDeserializer();
            }
            if (rawType == Currency.class) {
                return new CurrencyDeserializer();
            }
            if (rawType == Class.class) {
                return new ClassDeserializer();
            }
            if (rawType == AtomicReference.class) {
                return new AtomicReferenceDeserializer();
            }
            if (rawType.isEnum()) {
                return new EnumDeserializer(rawType);
            }
        }
        return null;
    }
}
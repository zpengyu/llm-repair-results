public class JdkDeserializers
{
    private final static HashSet<String> _classNames = new HashSet<String>();
    static {
        // note: can skip primitive types; other ways to check them:
        Class<?>[] types = new Class<?>[] {
                UUID.class,
                AtomicBoolean.class,
                StackTraceElement.class,
                ByteBuffer.class
        };
        for (Class<?> cls : types) { _classNames.add(cls.getName()); }
        for (Class<?> cls : FromStringDeserializer.types()) { _classNames.add(cls.getName()); }
    }
    public static JsonDeserializer<?> find(Class<?> rawType, String clsName)
    {
        if (rawType == UUID.class && "java.util.UUID".equals(clsName)) {
            return new UUIDDeserializer();
        }
        if (rawType == StackTraceElement.class && "java.lang.StackTraceElement".equals(clsName)) {
            return new StackTraceElementDeserializer();
        }
        if (rawType == AtomicBoolean.class && "java.util.concurrent.atomic.AtomicBoolean".equals(clsName)) {
            // (note: AtomicInteger/Long work due to single-arg constructor. For now?
            return new AtomicBooleanDeserializer();
        }
        if (rawType == ByteBuffer.class && "java.nio.ByteBuffer".equals(clsName)) {
            return new ByteBufferDeserializer();
        }
        if (_classNames.contains(clsName)) {
            JsonDeserializer<?> d = FromStringDeserializer.findDeserializer(rawType);
            if (d != null) {
                return d;
            }
        }
        return null;
    }
}
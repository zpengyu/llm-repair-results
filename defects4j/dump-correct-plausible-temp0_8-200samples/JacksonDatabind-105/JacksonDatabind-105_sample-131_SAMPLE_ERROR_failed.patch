diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java
index 2b7efe9c9..5a4c87c15 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java
@@ -16,22 +16,21 @@ public class JdkDeserializers
     static {
         // note: can skip primitive types; other ways to check them:
         Class<?>[] types = new Class<?>[] {
-                UUID.class,
-                AtomicBoolean.class,
-                StackTraceElement.class,
-                ByteBuffer.class
+            UUID.class,
+            AtomicBoolean.class,
+            StackTraceElement.class,
+            ByteBuffer.class
         };
         for (Class<?> cls : types) { _classNames.add(cls.getName()); }
+        // Not clear at this point which of these we want to support any more...
         for (Class<?> cls : FromStringDeserializer.types()) { _classNames.add(cls.getName()); }
     }
-
-    public static JsonDeserializer<?> find(Class<?> rawType, String clsName)
+    public static JsonDeserializer<?> find(JavaType type, DeserializationConfig config,
+            BeanDescription beanDesc)
     {
+        Class<?> rawType = type.getRawClass();
+        String clsName = rawType.getName();
         if (_classNames.contains(clsName)) {
-            JsonDeserializer<?> d = FromStringDeserializer.findDeserializer(rawType);
-            if (d != null) {
-                return d;
-            }
             if (rawType == UUID.class) {
                 return new UUIDDeserializer();
             }
@@ -46,6 +45,13 @@ public class JdkDeserializers
                 return new ByteBufferDeserializer();
             }
         }
-        return null;
+        // 14-Oct-2014, tatu: For now this is mostly used to support JDK enum types
+        //   (as they are bit special); but one day will also use this
+        JsonDeserializer<?> deser = findDeserializerFromAnnotation(config, beanDesc);
+        if (deser != null) {
+            return deser;
+        }
+        // 14-Oct-2014, tatu: Also, possibly support "from-String" deserializers for values
+        return FromStringDeserializer.findDeserializer(type);
     }
 }
\ No newline at end of file

	public int getOffsetFromLocal(long instantLocal) {
		// get the offset at instantLocal (first estimate)
		int offsetLocal = getOffset(instantLocal);
		// adjust instantLocal using the estimate and recalc the offset
		long instantAdjusted = instantLocal - offsetLocal;
		int offsetAdjusted = getOffset(instantAdjusted);
		// if the offsets differ, we must be near a DST boundary
		if (offsetLocal != offsetAdjusted) {
			// we need to ensure that time is always after the DST gap
			// this happens naturally for positive offsets, but not for negative
			if ((offsetLocal - offsetAdjusted) < 0) {
				// if we just return offsetAdjusted then the time is pushed
				// back before the transition, whereas it should be
				// on or after the transition
				long nextLocal = nextTransition(instantAdjusted);
				long nextAdjusted = nextTransition(instantLocal
						- offsetAdjusted);
				if (nextLocal != nextAdjusted) {
					return offsetLocal;
				}
			}
			// otherwise, calculate the next transition time and use the
			// larger offset
			// this way, the time is always in a non-overlapping period
			// this is a bit hokey, but shouldn't be a big deal in practice
			long nextTransition = nextTransition(instantLocal - offsetLocal);
			if (nextTransition == (instantLocal - offsetLocal)) {
				nextTransition = Long.MAX_VALUE;
			}
			long nextTransitionAdjusted = nextTransition(instantLocal
					- offsetAdjusted);
			if (nextTransitionAdjusted == (instantLocal - offsetAdjusted)) {
				nextTransitionAdjusted = Long.MAX_VALUE;
			}
			if (nextTransition != nextTransitionAdjusted) {
				if (nextTransition < nextTransitionAdjusted) {
					return offsetLocal;
				}
				return offsetAdjusted;
			}
		}
		// otherwise, just return the adjusted offset
		return offsetAdjusted;
	}
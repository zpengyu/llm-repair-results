diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index 17672725..16f00aee 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -879,10 +879,10 @@ public abstract class DateTimeZone implements Serializable {
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
-        final int offsetLocal = getOffset(instantLocal);
+        int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
-        final long instantAdjusted = instantLocal - offsetLocal;
-        final int offsetAdjusted = getOffset(instantAdjusted);
+        long instantAdjusted = instantLocal - offsetLocal;
+        int offsetAdjusted = getOffset(instantAdjusted);
         // if the offsets differ, we must be near a DST boundary
         if (offsetLocal != offsetAdjusted) {
             // we need to ensure that time is always after the DST gap
@@ -897,12 +897,13 @@ public abstract class DateTimeZone implements Serializable {
                     return offsetLocal;
                 }
             }
-        } else if (offsetLocal > 0) {
-            long prev = previousTransition(instantAdjusted);
-            if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
-                if (instantAdjusted - prev <= diff) {
+        } else {
+            long prevLocal = previousTransition(instantAdjusted);
+            if (prevLocal < instantAdjusted) {
+                // transition within the given period
+                int offsetPrev = getOffset(prevLocal);
+                int diff = offsetLocal - offsetPrev;
+                if (instantAdjusted - prevLocal <= diff) {
                     return offsetPrev;
                 }
             }

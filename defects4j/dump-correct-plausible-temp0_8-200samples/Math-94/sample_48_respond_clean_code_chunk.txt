    public static int gcd(int u, int v) {
        // fix negative input
        if (u < 0) {
            u = -u;
        }
        if (v < 0) {
            v = -v;
        }
        if (u == 0 || v == 0) {
            return u | v;
        }
        // keep u and v even
        while ((u & 1) == 0) {
            u >>>= 1;
        }
        while ((v & 1) == 0) {
            v >>>= 1;
        }
        // from here on, u is always odd
        do {
            // remove all factors of 2 in v -- they are not common
            // note: v is not zero, so while will terminate
            while ((v & 1) == 0) {
                v >>>= 1;
            }
            // now u and v are both odd. Swap if necessary so u <= v,
            // then set v = v - u (which is even). For bignums, the
            // swapping is just pointer movement, and the subtraction
            // can be done in-place.
            if (u > v) {
                int t = v;
                v = u;
                u = t;
            }
            v -= u; // Here v >= u.
        } while (v != 0);
        return u;
    }
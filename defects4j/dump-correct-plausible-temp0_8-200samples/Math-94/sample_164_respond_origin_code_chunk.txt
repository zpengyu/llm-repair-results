/**
 * Computes the greatest common divisor (GCD) of the absolute value of two
 * numbers, using a modified binary GCD algorithm. See Knuth 4.5.2 algorithm
 * B. This algorithm avoids overflow and attempts to find the GCD in O(log(max(a,
 * b))) operations. Special cases:
 * <ul>
 * <li>The result of {@code gcd(a,b)} is the same as the result of
 * {@code gcd(|a|,|b|)}.
 * <li>If either {@code a} or {@code b} is 0, then the result is the non-zero
 * argument.
 * <li>If the result is 1, it means that both arguments are coprime.
 * </ul>
 *
 * @param a
 *            the first number to compute the greatest common divisor.
 * @param b
 *            the second number to compute the greatest common divisor.
 * @return the greatest common divisor, never negative.
 * @throws MathArithmeticException
 *             if the result cannot be represented as a non-negative {@code int}
 *             value.
 */
public static int gcd(int a, int b) throws MathArithmeticException {
    MathUtils.checkNonNegative(a, "a");
    MathUtils.checkNonNegative(b, "b");
    if (a == 0) {
        return b;
    } else if (b == 0) {
        return a;
    }
    final int al = a <= 0 ? Integer.numberOfLeadingZeros(-a) + 1 : Integer.numberOfLeadingZeros(a);
    final int bl = b <= 0 ? Integer.numberOfLeadingZeros(-b) + 1 : Integer.numberOfLeadingZeros(b);
    final int t = Math.min(al, bl);
    int u = a << al - t;
    int v = b << bl - t;
    do {
        if ((u & 1) == 0) {
            while ((v & 1) == 0) {
                v >>>= 1;
            }
            if (u >= v) {
                u -= v;
            } else {
                int tmp = u;
                u = v - u;
                v = tmp;
            }
            u >>>= 1;
        } else if ((v & 1) == 0) {
            v >>>= 1;
        } else {
            if (u >= v) {
                u -= v;
            } else {
                int tmp = u;
                u = v - u;
                v = tmp;
            }
        }
        v >>>= 1;
    } while (u != 0);
    return v << t;
}

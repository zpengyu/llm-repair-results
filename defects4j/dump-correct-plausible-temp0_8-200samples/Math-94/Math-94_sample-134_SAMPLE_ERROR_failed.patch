diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java
index 6ee916469..7c6748ad9 100644
--- a/src/java/org/apache/commons/math/util/MathUtils.java
+++ b/src/java/org/apache/commons/math/util/MathUtils.java
@@ -424,35 +424,33 @@ public final class MathUtils {
             v = -v;
         } // make v negative
         // B1. [Find power of 2]
-        int k = 0;
-        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
-                                                            // both even...
-            u /= 2;
-            v /= 2;
-            k++; // cast out twos.
+        int k;
+        for (k = 0; ((u | v) & 1) == 0; ++k) {
+            u >>= 1;
+            v >>= 1;
         }
         if (k == 31) {
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
         // B2. Initialize: u and v have been divided by 2^k and at least
         // one is odd.
-        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
-        // t negative: u was odd, v may be even (t replaces v)
+        int t = ((u & 1) == 1) ? -v : u; // t negative: u was odd, v may be
+                                        // even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
         do {
             /* assert u<0 && v<0; */
             // B4/B3: cast out twos from t.
             while ((t & 1) == 0) { // while t is even..
-                t /= 2; // cast out twos
+                t >>= 1; // cast out twos
             }
             // B5 [reset max(u,v)]
             if (t > 0) {
-                u = -t;
+                u = t;
             } else {
-                v = t;
+                v = -t;
             }
             // B6/B3. at this point both u and v should be odd.
-            t = (v - u) / 2;
+            t = (v - u) >> 1;
             // |u| larger: t positive (replace u)
             // |v| larger: t negative (replace v)
         } while (t != 0);

diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
index fc9944c36..d3eba71a0 100644
--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
@@ -1379,46 +1379,39 @@ public class DSCompiler {
      * be the input array)
      * @param resultOffset offset of the result in its array
      */
-    public void atan2(final double[] y, final int yOffset,
-                      final double[] x, final int xOffset,
-                      final double[] result, final int resultOffset) {
-
-        // compute r = sqrt(x^2+y^2)
-        double[] tmp1 = new double[getSize()];
-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
-        double[] tmp2 = new double[getSize()];
-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
-
-        if (x[xOffset] >= 0) {
-
-            // compute atan2(y, x) = 2 atan(y / (r + x))
-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
-            for (int i = 0; i < tmp2.length; ++i) {
-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
-            }
-
-        } else {
-
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
-            result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
-            for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+        public void atan2(final double[] y, final int yOffset,
+                          final double[] x, final int xOffset,
+                          final double[] result, final int resultOffset) {
+            // compute r = sqrt(x^2+y^2)
+            double[] tmp1 = new double[getSize()];
+            multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
+            double[] tmp2 = new double[getSize()];
+            multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
+            add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
+            rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
+            if (x[xOffset] >= 0) {
+                // compute atan2(y, x) = 2 atan(y / (r + x))
+                add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
+                divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
+                atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
+                for (int i = 0; i < tmp2.length; ++i) {
+                    result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
+                }
+            } else {
+                // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
+                subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
+                divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
+                atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
+                for (int i = 0; i < tmp2.length; ++i) {
+                    if (tmp2[i] <= 0) {
+                        result[resultOffset + i] = -FastMath.PI - 2 * tmp2[i];
+                    } else {
+                        result[resultOffset + i] = FastMath.PI - 2 * tmp2[i];
+                    }
+                }
             }
-
+            // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
         }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
-    }
-
     /** Compute hyperbolic cosine of a derivative structure.
      * @param operand array holding the operand
      * @param operandOffset offset of the operand in its array

diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
index fc9944c36..624b7c956 100644
--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
@@ -1412,13 +1407,35 @@ public class DSCompiler {
             for (int i = 1; i < tmp2.length; ++i) {
                 result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
             }
-
         }
-
         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
+        for (int i = 0; i < result.length; ++i) {
+            double xA = x[xOffset + i];
+            double yA = y[yOffset + i];
+            double rA = result[resultOffset + i];
+            if ((yA == 0) && (xA == 0)) {
+                result[resultOffset + i] = rA + 0.0;
+            } else if ((yA == 0) && (xA < 0)) {
+                result[resultOffset + i] = rA - FastMath.PI;
+            } else if ((xA == 0) && (yA > 0)) {
+                result[resultOffset + i] = FastMath.PI / 2.0;
+            } else if ((yA == 0) && (xA > 0)) {
+                result[resultOffset + i] = 0.0;
+            } else if ((yA < 0) && (xA < 0)) {
+                result[resultOffset + i] = rA - FastMath.PI;
+            } else if ((yA < 0) && (xA == 0)) {
+                result[resultOffset + i] = -FastMath.PI / 2.0;
+            } else if ((yA < 0) && (xA > 0)) {
+                result[resultOffset + i] = rA + 0.0;
+            } else if ((yA > 0) && (xA < 0)) {
+                result[resultOffset + i] = rA + FastMath.PI;
+            } else if ((yA > 0) && (xA == 0)) {
+                result[resultOffset + i] = FastMath.PI / 2.0;
+            } else if ((yA > 0) && (xA > 0)) {
+                result[resultOffset + i] = rA + 0.0;
+            }
+        }
     }
-
     /** Compute hyperbolic cosine of a derivative structure.
      * @param operand array holding the operand
      * @param operandOffset offset of the operand in its array

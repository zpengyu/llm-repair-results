diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
index fc9944c36..277730ff1 100644
--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
@@ -1412,13 +1407,38 @@ public class DSCompiler {
             for (int i = 1; i < tmp2.length; ++i) {
                 result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
             }
-
         }
-
         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
+		if (y[yOffset] > 0) {
+			if (x[xOffset] == 0) {
+				result[resultOffset] = FastMath.PI / 2;
+			} else if (Double.isNaN(result[resultOffset])) {
+				result[resultOffset] = FastMath.PI / 2;
+			}
+		} else if (y[yOffset] < 0) {
+			if (x[xOffset] == 0) {
+				result[resultOffset] = -FastMath.PI / 2;
+			} else if (Double.isNaN(result[resultOffset])) {
+				result[resultOffset] = -FastMath.PI / 2;
+			}
+		} else if (y[yOffset] == 0) {
+			if (x[xOffset] > 0) {
+				if (Double.isNaN(result[resultOffset])) {
+					result[resultOffset] = 0.0;
+				}
+			} else if (x[xOffset] < 0) {
+				if (Double.isNaN(result[resultOffset])) {
+					result[resultOffset] = -FastMath.PI;
+				} else {
+					result[resultOffset] = result[resultOffset] - FastMath.PI;
+				}
+			} else {
+				if (Double.isNaN(result[resultOffset])) {
+					result[resultOffset] = Double.NaN;
+				}
+			}
+		}
     }
-
     /** Compute hyperbolic cosine of a derivative structure.
      * @param operand array holding the operand
      * @param operandOffset offset of the operand in its array

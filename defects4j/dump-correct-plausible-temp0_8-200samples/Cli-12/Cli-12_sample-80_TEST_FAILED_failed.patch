diff --git a/src/java/org/apache/commons/cli/GnuParser.java b/src/java/org/apache/commons/cli/GnuParser.java
index 14a9cc0..1cd2103 100644
--- a/src/java/org/apache/commons/cli/GnuParser.java
+++ b/src/java/org/apache/commons/cli/GnuParser.java
@@ -49,63 +49,45 @@ public class GnuParser extends Parser {
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
-        List tokens = new ArrayList();
-
+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
+        List<String> tokens = new ArrayList<String>();
         boolean eatTheRest = false;
-
-        for (int i = 0; i < arguments.length; i++)
-        {
+        for (int i = 0; i < arguments.length; i++) {
             String arg = arguments[i];
-
-            if ("--".equals(arg))
-            {
+            if ("--".equals(arg)) {
                 eatTheRest = true;
                 tokens.add("--");
-            }
-            else if ("-".equals(arg))
-            {
+            } else if ("-".equals(arg)) {
                 tokens.add("-");
-            }
-            else if (arg.startsWith("-"))
-            {
+            } else if (arg.startsWith("-")) {
                 String opt = Util.stripLeadingHyphens(arg);
-
-                if (options.hasOption(opt))
-                {
-                    tokens.add(arg);
-                }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
+                if (opt.indexOf('=') == -1) {
+                    // the format is -Dkey=value
+                    // the format is a special properties option (-Dproperty=value)
+                    if (opt.startsWith("D")) {
                         tokens.add(arg.substring(0, 2)); // -D
                         tokens.add(arg.substring(2)); // property=value
+                    } else {
+                        if (options.hasOption(opt)) {
+                            tokens.add(arg);
+                        } else {
+                            eatTheRest = stopAtNonOption;
+                            tokens.add(arg);
+                        }
                     }
-                    else
-                    {
-                        eatTheRest = stopAtNonOption;
-                        tokens.add(arg);
-                    }
+                } else {
+                    // the format is -Dkey=value or -key=value
+                    tokens.add(arg.substring(0, 2)); // -D or -k
+                    tokens.add(arg.substring(2)); // key=value
                 }
-            }
-            else
-            {
+            } else {
                 tokens.add(arg);
             }
-
-            if (eatTheRest)
-            {
-                for (i++; i < arguments.length; i++)
-                {
+            if (eatTheRest) {
+                for (i++; i < arguments.length; i++) {
                     tokens.add(arguments[i]);
                 }
             }
         }
-
-        return (String[]) tokens.toArray(new String[tokens.size()]);
-    }
-}
+        return tokens.toArray(new String[tokens.size()]);
+    }}

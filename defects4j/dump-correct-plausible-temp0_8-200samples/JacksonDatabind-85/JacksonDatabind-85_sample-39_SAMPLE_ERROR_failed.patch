diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
index ae5fd6538..2429ac80f 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
@@ -61,39 +61,51 @@ public abstract class DateTimeSerializerBase<T>
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
-
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
-                        tz = serializers.getTimeZone();
-                    }
+        if (format.hasPattern()) {
+            DateFormat df;
+            String pattern = format.getPattern();
+            // 08-Jun-2017, tatu: Unfortunately there's no generally usable
+            //    mechanism for changing `DateFormat` instances (or even clone()ing)
+            //    So: require it be `SimpleDateFormat`; can't config other types
+            if (!(getDateFormat() instanceof SimpleDateFormat)) {
+                serializers.reportBadDefinition(handledType(), String.format(
+                        "Configured `DateFormat` (%s) not usable: must be `SimpleDateFormat`",
+                        ClassUtil.classNameOf(getDateFormat())));
+            }
+            Locale loc = format.hasLocale()
+                    ? format.getLocale()
+                    : serializers.getLocale();
+            df = new SimpleDateFormat(pattern, loc);
+            TimeZone tz = format.getTimeZone();
+            if (tz == null) {
+                tz = serializers.getTimeZone();
+            }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
-
         // Otherwise, need one of these changes:
-
-
         // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
+        if (getDateFormat() instanceof StdDateFormat) {
             // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+            StdDateFormat std = (StdDateFormat) getDateFormat();
+            StdDateFormat std2 = new StdDateFormat();
+            std2.setTimeZone(std.getTimeZone());
+            if (format.hasLocale()) {
+                std2.overrideFormatLocale(format.getLocale());
+            } else {
+                std2.overrideFormatLocale(serializers.getLocale());
+            }
+            return withFormat(Boolean.FALSE, std2);
+        }
+        // Otherwise we could try to figure out if there are changes
+        // to make; but for now, let's just say this is a "no-go"
+        serializers.reportBadDefinition(handledType(), String.format(
+                "Configured `DateFormat` (%s) not compatible with `JsonFormat.Shape.STRING`",
+                ClassUtil.classNameOf(getDateFormat())));
         return this;
     }
-
     /*
     /**********************************************************
     /* Accessors

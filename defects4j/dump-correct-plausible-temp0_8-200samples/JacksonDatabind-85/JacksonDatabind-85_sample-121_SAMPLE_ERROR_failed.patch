diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
index ae5fd6538..e4b602bbf 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
@@ -80,20 +79,33 @@ public abstract class DateTimeSerializerBase<T>
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
-
         // Otherwise, need one of these changes:
-
-
         // Jackson's own `StdDateFormat` is quite easy to deal with...
-
+        if (_format instanceof StdDateFormat) {
+            StdDateFormat std = ((StdDateFormat) _format).withShape(shape);
+            return withFormat(Boolean.FALSE, std);
+        }
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
+        if (!(_format instanceof SimpleDateFormat)) {
+            throw new JsonMappingException(String.format(
+                    "Cannot change shape of a `java.util.Date` (of type %s) "
+                    +"using format annotation (\"%s\"): DateFormat cannot be changed",
+                    _format.getClass().getName(), shape));
+        }
+        // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        SimpleDateFormat df = (SimpleDateFormat) _format;
+        // Ugh: need to clone (ugh!), but can't do that for `SimpleDateFormat`...
+        // so have to re-create
+        SimpleDateFormat df2 = new SimpleDateFormat(df.toPattern(), df.getDecimalFormatSymbols());
+        if (df.getNumberFormat() instanceof DecimalFormat) {
+            DecimalFormatSymbols dfs = ((DecimalFormat) df.getNumberFormat()).getDecimalFormatSymbols();
+            df2.setDecimalFormatSymbols(dfs);
+        }
+        df2.setTimeZone(df.getTimeZone());
+        return withFormat(Boolean.FALSE, df2);
     }
-
     /*
     /**********************************************************
     /* Accessors

diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
index ae5fd6538..faf741168 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
@@ -61,39 +61,48 @@ public abstract class DateTimeSerializerBase<T>
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
-
+        final TimeZone tz = format.getTimeZone();
+        final Locale loc = format.getLocale();
+        if (loc == null) {
+            serializers.reportBadDefinition(handledType(),
+                String.format("Locale can not be null"));
+        }
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
-                        tz = serializers.getTimeZone();
-                    }
+        if (format.hasPattern()) {
+            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
+            if (tz == null) {
+                tz = serializers.getTimeZone();
+            }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
+        String pattern = null;
+        switch (shape) {
+        case STRING:
+            break;
+        case NUMBER:
+            pattern = StdDateFormat.DATE_FORMAT_STR_NUM_INPUT;
+            break;
+        case ARRAY:
+            pattern = StdDateFormat.DATE_FORMAT_STR_ARRAY_INPUT;
+            break;
+        case OBJECT:
+            pattern = StdDateFormat.DATE_FORMAT_STR_OBJECT_INPUT;
+            break;
+        default:
+            serializers.reportBadDefinition(handledType(),
+                String.format("Unexpected shape (%s) for DateFormat", shape));
+            break;
+        }
+        // Finally: need a new instance
+        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+        if (tz == null) {
+            tz = serializers.getTimeZone();
+        }
+        df.setTimeZone(tz);
+        return withFormat(Boolean.FALSE, df);
     }
-
     /*
     /**********************************************************
     /* Accessors

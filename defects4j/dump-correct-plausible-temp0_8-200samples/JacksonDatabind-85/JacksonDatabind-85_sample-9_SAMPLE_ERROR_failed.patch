diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
index ae5fd6538..1f163fb2d 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
@@ -61,39 +61,39 @@ public abstract class DateTimeSerializerBase<T>
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
-
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
-                        tz = serializers.getTimeZone();
-                    }
-            df.setTimeZone(tz);
-            return withFormat(Boolean.FALSE, df);
+        if (shape == JsonFormat.Shape.STRING) {
+            if (format.hasPattern()) {
+                return withFormat(Boolean.FALSE,
+                        _cloneFormat(format.getPattern(), serializers));
+            }
         }
-
         // Otherwise, need one of these changes:
-
-
+            TimeZone tz = format.getTimeZone();
+        Locale loc = format.getLocale();
         // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
+        if (loc == null) {
+            loc = serializers.getLocale();
+        }
+        if (tz == null) {
+            tz = serializers.getTimeZone();
+        }
+        if (tz != null || loc != null) {
+            DateFormat df = serializers.getConfig().getDateFormat();
+            if (df instanceof StdDateFormat) {
+                DateFormat df2 = ((StdDateFormat) df).withTimeZone(tz)
+                        .withLocale(loc);
+                return withFormat(Boolean.FALSE, df2);
+            }
+        }
             // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+            serializers.reportBadDefinition(handledType(), String.format(
+                    "Cannot change configuration of `%s`: incompatible with Java DateFormat",
+                    StdDateFormat.class.getName()));
+        }
         return this;
-    }
-
+}
     /*
     /**********************************************************
     /* Accessors

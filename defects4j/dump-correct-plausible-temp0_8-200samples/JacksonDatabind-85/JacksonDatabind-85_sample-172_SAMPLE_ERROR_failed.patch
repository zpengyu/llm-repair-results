diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
index ae5fd6538..033cbd067 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
@@ -80,20 +79,31 @@ public abstract class DateTimeSerializerBase<T>
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
-
         // Otherwise, need one of these changes:
-
-
         // Jackson's own `StdDateFormat` is quite easy to deal with...
-
+        if (_dateFormat instanceof StdDateFormat) {
+            return withFormat(Boolean.FALSE, ((StdDateFormat) _dateFormat).withShape(shape));
+        }
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
+        if (!(shape == JsonFormat.Shape.STRING) || !(shape == JsonFormat.Shape.NUMBER)
+                || !(shape == JsonFormat.Shape.NUMBER_INT) || !(shape == JsonFormat.Shape.NUMBER_FLOAT)) {
+            serializers.reportBadDefinition(handledType(), String.format(
+                    "Cannot change shape of type `%s` (not supported by default DateSerializer); use custom serializer",
+                    handledType().getName()));
+        }
+        // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        SimpleDateFormat df = (SimpleDateFormat) _dateFormat.clone();
+        if (shape == JsonFormat.Shape.STRING) {
+            df.applyLocalizedPattern(format.hasPattern() ? format.getPattern()
+                    : StdDateFormat.DATE_FORMAT_STR_ISO8601);
+        } else {
+            df.applyPattern(format.hasPattern() ? format.getPattern()
+                    : StdDateFormat.DATE_FORMAT_STR_ISO8601);
+        }
+        return withFormat(Boolean.FALSE, df);
     }
-
     /*
     /**********************************************************
     /* Accessors

    public JsonSerializer<?> createContextual(SerializerProvider serializers,
            BeanProperty property) throws JsonMappingException
    {
        if (property == null) {
            return this;
        }
        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
        if (format == null) {
            return this;
        }
        // Simple case first: serialize as numeric timestamp?
        JsonFormat.Shape shape = format.getShape();
        if (shape.isNumeric()) {
            return withFormat(Boolean.TRUE, null);
        }

        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
        // First: custom pattern will override things
        if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {
            // [databind#1651]: some (de)serializers prefer `DateFormat` instance to pattern
            if ((shape == JsonFormat.Shape.STRING) && _useTimestamp) {
                TimeZone tz = format.getTimeZone();
                String pattern = format.hasPattern()
                    ? format.getPattern()
                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
                Locale loc = format.hasLocale()
                    ? format.getLocale()
                    : serializers.getLocale();
                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
                if (tz == null) {
                    tz = serializers.getTimeZone();
                }
                df.setTimeZone(tz);
                return withFormat(Boolean.FALSE, df);
            }
            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
            SimpleDateFormat df = (SimpleDateFormat) _format.clone();
            if (format.hasPattern()) {
                df.applyPattern(format.getPattern());
            }
            if (format.hasLocale()) {
                df.setDateFormatSymbols(new DateFormatSymbols(format.getLocale()));
            }
            if (format.hasTimeZone()) {
                df.setTimeZone(format.getTimeZone());
            }
            return withFormat(Boolean.FALSE, df);
        }

        // Otherwise, need one of these changes:

        // Jackson's own `StdDateFormat` is quite easy to deal with...
        StdDateFormat df = _useTimestamp ? null : _format.withLocale(serializers.getLocale());
        if (shape == JsonFormat.Shape.STRING || shape == JsonFormat.Shape.NUMBER_INT) {
            df = _useTimestamp ? StdDateFormat.getISO8601Format(serializers.getTimeZone()) : _format;
        } else if (shape == JsonFormat.Shape.NUMBER) {
            df = _useTimestamp ? StdDateFormat.getISO8601Format(serializers.getTimeZone()) : _format;
        } else if (shape == JsonFormat.Shape.NUMBER_FLOAT) {
            return withFormat(Boolean.TRUE, null);
        }
        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
        //    mechanism for changing `DateFormat` instances (or even clone()ing)
        //    So: require it be `SimpleDateFormat`; can't config other types
//            serializers.reportBadDefinition(handledType(), String.format(
        if (df == null) {
            df = _format;
        }
        return withFormat(Boolean.FALSE, df);
    }


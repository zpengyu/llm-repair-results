    public JsonSerializer<?> createContextual(SerializerProvider serializers,
            BeanProperty property) throws JsonMappingException
    {
        if (property == null) {
            return this;
        }
        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
        if (format == null) {
            return this;
        }
        // Simple case first: serialize as numeric timestamp?
        JsonFormat.Shape shape = format.getShape();
        if (shape.isNumeric()) {
            return withFormat(Boolean.TRUE, null);
        }

        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
        // First: custom pattern will override things
        if (format.hasPattern()) {
            TimeZone tz = format.getTimeZone();
            final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();
            final String pattern = format.getPattern();
            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
            if (tz == null) {
                tz = serializers.getTimeZone();
            }
            df.setTimeZone(tz);
            return withFormat(Boolean.FALSE, df);
        }

        // Otherwise, need one of these changes:

        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
        //    mechanism for changing `DateFormat` instances (or even clone()ing)
        //    So: require it be `SimpleDateFormat`; can't config other types
        serializers.reportBadDefinition(handledType(), String.format(
                "Can not change configuration of `%s` (of type %s): can not instantiate "
                        + "subtype with `@JsonFormat` (pattern defined)",
                handledType().getName(),
                getClass().getName()
        ));
        // Ugh. No way to change `Locale`, create copy; must re-crete completely:
        return this;
    }

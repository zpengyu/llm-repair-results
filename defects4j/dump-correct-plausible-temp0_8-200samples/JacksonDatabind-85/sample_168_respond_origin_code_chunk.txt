    public JsonSerializer<?> createContextual(SerializerProvider serializers,
            BeanProperty property) throws JsonMappingException
    {
        if (property == null) {
            return this;
        }
        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
        if (format == null) {
            return this;
        }
        // Simple case first: serialize as numeric timestamp?
        JsonFormat.Shape shape = format.getShape();
        if (shape.isNumeric()) {
            return withFormat(Boolean.TRUE, null);
        }

        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
        // First: custom pattern will override things
        if (format.hasPattern()) {
            return withFormat(Boolean.FALSE,
                    StdDateFormat.getStdDateFormat().withTimeZone(format.getTimeZone())
                        .withLocale(format.getLocale())
                        .withPattern(format.getPattern()));
        }
        if (format.hasLocale() || format.hasTimeZone()) {
            TimeZone tz = format.getTimeZone();
            final String pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
            final Locale loc = format.hasLocale()
                    ? format.getLocale()
                    : serializers.getLocale();
            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
            if (tz == null) {
                tz = serializers.getTimeZone();
            }
            df.setTimeZone(tz);
            return withFormat(Boolean.FALSE, df);
        }

        // Otherwise, need one of these changes:

        // 02-Jun-2017, tatu: And unfortunately, it's not possible to alter
        //    `Locale` of `DateFormat` instances, nor is it possible to clone
        //    them. So we must create a new instance.
//            if (format.hasLocale()) {
//                return withFormat(Boolean.FALSE,
//                        (DateFormat) _format.clone()).withFormat(Boolean.FALSE, df);
//            }
        // Jackson's own `StdDateFormat` is quite easy to deal with...
        if (_format instanceof StdDateFormat) {
            StdDateFormat f2 = ((StdDateFormat) _format).withTimeZone(format.getTimeZone());
            if (format.hasLocale()) {
                f2 = f2.withLocale(format.getLocale());
            }
            return withFormat(Boolean.FALSE, f2);
        }
        // Otherwise, need to create a new instance for different TimeZone
        if (format.hasTimeZone()) {
            return withFormat(Boolean.FALSE,
                    StdDateFormat.getStdDateFormat().withTimeZone(format.getTimeZone()));
        }
        // Ugh. No way to change `Locale`, create copy; must re-crete completely:
        return this;
    }
 

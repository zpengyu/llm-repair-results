    public JsonSerializer<?> createContextual(SerializerProvider serializers,
            BeanProperty property) throws JsonMappingException
    {
        if (property == null) {
            return this;
        }
        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
        if (format == null) {
            return this;
        }
        // Simple case first: serialize as numeric timestamp?
        JsonFormat.Shape shape = format.getShape();
        if (shape.isNumeric()) {
            return withFormat(Boolean.TRUE, null);
        }

        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
        // First: custom pattern will override things
        if (shape == JsonFormat.Shape.STRING || format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {
            TimeZone tz = format.getTimeZone();
            final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;
            final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();
            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
            if (tz == null) {
                tz = serializers.getTimeZone();
            }
            df.setTimeZone(tz);
            return withFormat(Boolean.FALSE, df);
        }

        // Otherwise, need one of these changes:
        DateFormat df = serializers.getConfig().getDateFormat();

        // Jackson's own `StdDateFormat` is quite easy to deal with...
        if (df instanceof StdDateFormat) {
            StdDateFormat sdf = (StdDateFormat) df;
            // need clone because `DateFormat` has no way to change Locale, TimeZone
            df = (DateFormat) sdf.clone();
            if (!format.hasLocale()) {
                // Let's actually require explicit Locale for now
                serializers.reportBadDefinition(handledType(),
                        String.format(
                                "Locale-override locale (%s) not supported for `%s`; must use `java.text.SimpleDateFormat`",
                                serializers.getLocale(), handledType().getName()));
            } else {
                // Ugh. No way to change `Locale`, create copy; must re-crete completely:
                Locale loc = format.getLocale();
                df = StdDateFormat.getISO8601Format(loc);
            }
        } else if (df instanceof SimpleDateFormat) {
            // otherwise can just change `Locale`
            SimpleDateFormat sdf = (SimpleDateFormat) df;
            Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();
            df = (DateFormat) sdf.clone();
            df.setTimeZone(serializers.getTimeZone());
            df.setTimeZone(serializers.getTimeZone());
            df.setLenient(serializers.isEnabled(MapperFeature.AUTO_DETECT_CREATORS));
        } else {
            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
            serializers.reportBadDefinition(handledType(),
                    String.format("Configured `java.text.DateFormat` (%s) not supported for `%s`; must use `java.text.SimpleDateFormat`",
                            handledType().getName()));
        }
        return withFormat(Boolean.FALSE, df);
    }


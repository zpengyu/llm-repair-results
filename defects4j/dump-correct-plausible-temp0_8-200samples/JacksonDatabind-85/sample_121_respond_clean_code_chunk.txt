    public JsonSerializer<?> createContextual(SerializerProvider serializers,
            BeanProperty property) throws JsonMappingException
    {
        if (property == null) {
            return this;
        }
        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
        if (format == null) {
            return this;
        }
        // Simple case first: serialize as numeric timestamp?
        JsonFormat.Shape shape = format.getShape();
        if (shape.isNumeric()) {
            return withFormat(Boolean.TRUE, null);
        }
        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
        // First: custom pattern will override things
                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                                || format.hasLocale() || format.hasTimeZone()) {
                    TimeZone tz = format.getTimeZone();
                    final String pattern = format.hasPattern()
                                    ? format.getPattern()
                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
            final Locale loc = format.hasLocale()
                            ? format.getLocale()
                            : serializers.getLocale();
                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
                    if (tz == null) {
                        tz = serializers.getTimeZone();
                    }
            df.setTimeZone(tz);
            return withFormat(Boolean.FALSE, df);
        }
        // Otherwise, need one of these changes:
        // Jackson's own `StdDateFormat` is quite easy to deal with...
        if (_format instanceof StdDateFormat) {
            StdDateFormat std = ((StdDateFormat) _format).withShape(shape);
            return withFormat(Boolean.FALSE, std);
        }
        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
        //    mechanism for changing `DateFormat` instances (or even clone()ing)
        //    So: require it be `SimpleDateFormat`; can't config other types
        if (!(_format instanceof SimpleDateFormat)) {
            throw new JsonMappingException(String.format(
                    "Cannot change shape of a `java.util.Date` (of type %s) "
                    +"using format annotation (\"%s\"): DateFormat cannot be changed",
                    _format.getClass().getName(), shape));
        }
        // Ugh. No way to change `Locale`, create copy; must re-crete completely:
        SimpleDateFormat df = (SimpleDateFormat) _format;
        // Ugh: need to clone (ugh!), but can't do that for `SimpleDateFormat`...
        // so have to re-create
        SimpleDateFormat df2 = new SimpleDateFormat(df.toPattern(), df.getDecimalFormatSymbols());
        if (df.getNumberFormat() instanceof DecimalFormat) {
            DecimalFormatSymbols dfs = ((DecimalFormat) df.getNumberFormat()).getDecimalFormatSymbols();
            df2.setDecimalFormatSymbols(dfs);
        }
        df2.setTimeZone(df.getTimeZone());
        return withFormat(Boolean.FALSE, df2);
    }
diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
index ae5fd6538..2a8a343a5 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
@@ -80,20 +79,30 @@ public abstract class DateTimeSerializerBase<T>
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
-
         // Otherwise, need one of these changes:
-
-
         // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
+        if (DEFAULT_FORMAT instanceof StdDateFormat) {
+            // 08-Jun-2017, tatu: Unfortunately there's no generally usable
+            //    mechanism for changing `DateFormat` instances (or even clone()ing)
+            //    So: require it be `SimpleDateFormat`; can't config other types
 //            serializers.reportBadDefinition(handledType(), String.format(
             // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+            StdDateFormat std = (StdDateFormat) DEFAULT_FORMAT;
+            if (format.hasLocale()) {
+                std = std.withLocale(format.getLocale());
+            }
+            if (format.hasTimeZone()) {
+                std = std.withTimeZone(format.getTimeZone());
+            }
+            return withFormat(Boolean.FALSE, std);
+        }
+        // Otherwise all we can do is change time zone (for example)
+        if (format.hasTimeZone()) {
+            return withFormat(Boolean.FALSE, _cloneFormat(DEFAULT_FORMAT, format.getTimeZone()));
+        }
+        // Otherwise, nothing to change
         return this;
     }
-
     /*
     /**********************************************************
     /* Accessors

    public JsonSerializer<?> createContextual(SerializerProvider serializers,
            BeanProperty property) throws JsonMappingException
    {
        if (property == null) {
            return this;
        }
        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
        if (format == null) {
            return this;
        }
        // Simple case first: serialize as numeric timestamp?
        JsonFormat.Shape shape = format.getShape();
        if (shape.isNumeric()) {
            return withFormat(Boolean.TRUE, null);
        }

        // Otherwise, need one of these changes:


        // Jackson's own `StdDateFormat` is quite easy to deal with...

        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
        //    mechanism for changing `DateFormat` instances (or even clone()ing)
        //    So: require it be `SimpleDateFormat`; can't config other types
        SimpleDateFormat df = (SimpleDateFormat) _defaultFormat;

        // Ugh. No way to change `Locale`, create copy; must re-crete completely:
        if (format.hasLocale()) {
            df = new SimpleDateFormat(df.toPattern(), format.getLocale());
        }
        TimeZone tz = format.getTimeZone();
        if (tz != null) {
            df.setTimeZone(tz);
        }

        // Finally, custom pattern may override things
        if (format.hasPattern()) {
            df.applyPattern(format.getPattern());
        }
        return withFormat(Boolean.FALSE, df);
    }
 

    public JsonSerializer<?> createContextual(SerializerProvider serializers,
                                              BeanProperty property) throws JsonMappingException
    {
        if (property == null) {
            return this;
        }
        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
        if (format == null) {
            return this;
        }
        // Simple case first: serialize as numeric timestamp?
        JsonFormat.Shape shape = format.getShape();
        if (shape.isNumeric()) {
            return withFormat(Boolean.TRUE, null);
        }
        // Otherwise, need one of these changes:

        // Jackson's own `StdDateFormat` is quite easy to deal with...

        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
        //    mechanism for changing `DateFormat` instances (or even clone()ing)
        //    So: require it be `SimpleDateFormat`; can't config other types
//            serializers.reportBadDefinition(handledType(), String.format(

        // Ugh. No way to change `Locale`, create copy; must re-crete completely:
        DateFormat df = (DateFormat) _format.clone();
        if (format.hasPattern()) {
            df = cloneFormat(df, format.getPattern(), serializers.getLocale());
        }
        if (format.hasLocale()) {
            df = cloneFormat(df, serializers.getLocale());
        }
        if (format.hasTimeZone()) {
            TimeZone tz = format.getTimeZone();
            df.setTimeZone(tz);
        }
        return withFormat(Boolean.FALSE, df);
    }
 

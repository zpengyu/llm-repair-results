diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
index ae5fd6538..b24432baf 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
@@ -80,20 +79,28 @@ public abstract class DateTimeSerializerBase<T>
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
-
         // Otherwise, need one of these changes:
-
-
         // Jackson's own `StdDateFormat` is quite easy to deal with...
-
+        if (StdDateFormat.class.isAssignableFrom(_format.getClass())) {
+            StdDateFormat f = (StdDateFormat) _format.clone();
+            if (!serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {
+                f = f.withShape(JsonFormat.Shape.STRING);
+            }
+            return withFormat(Boolean.FALSE, f);
+        }
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
+        if (!(format instanceof SimpleDateFormat)) {
+            serializers.reportBadDefinition(handledType(), String.format(
+                    "Can not create contextual %s (of type %s) with non-standard DateFormat (of type %s): only %s or StdDateFormat supported",
+                    handledType().getName(), handledType().getName(), format.getClass().getName(),
+                    SimpleDateFormat.class.getName()));
+        }
+        // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        SimpleDateFormat df = (SimpleDateFormat) format.clone();
+        return withFormat(Boolean.FALSE, df);
     }
-
     /*
     /**********************************************************
     /* Accessors

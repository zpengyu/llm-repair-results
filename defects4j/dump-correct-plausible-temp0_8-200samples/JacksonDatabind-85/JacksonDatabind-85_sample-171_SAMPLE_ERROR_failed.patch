diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
index ae5fd6538..f7c010b7a 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
@@ -80,20 +79,27 @@ public abstract class DateTimeSerializerBase<T>
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
-
         // Otherwise, need one of these changes:
-
-
         // Jackson's own `StdDateFormat` is quite easy to deal with...
-
+        if (DEFAULT_FORMAT instanceof StdDateFormat) {
+            return withFormat(Boolean.FALSE,
+                    ((StdDateFormat) DEFAULT_FORMAT)
+                            .withShape(shape)
+                            .withLocale(format.getLocale())
+                            .withTimeZone(format.getTimeZone()));
+        }
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
+        if (!(DEFAULT_FORMAT instanceof SimpleDateFormat)) {
+            serializers.reportBadDefinition(handledType(), String.format(
+                    "Can not change format of non-SimpleDateFormat instance: %s",
+                    DEFAULT_FORMAT.getClass().getName()));
+        }
+        // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        return withFormat(Boolean.FALSE,
+                (SimpleDateFormat) ((SimpleDateFormat) DEFAULT_FORMAT).clone());
     }
-
     /*
     /**********************************************************
     /* Accessors

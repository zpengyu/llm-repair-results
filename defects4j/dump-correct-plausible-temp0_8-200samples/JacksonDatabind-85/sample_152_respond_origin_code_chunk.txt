 public JsonSerializer<?> createContextual(SerializerProvider serializers,
            BeanProperty property) throws JsonMappingException
    {
        if (property == null) {
            return this;
        }
        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
        if (format == null) {
            return this;
        }
        // Simple case first: serialize as numeric timestamp?
        JsonFormat.Shape shape = format.getShape();
        if (shape.isNumeric()) {
            return withFormat(Boolean.TRUE, null);
        }

        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
        // First: custom pattern will override things
                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                                || format.hasLocale() || format.hasTimeZone()) {
                    TimeZone tz = format.getTimeZone();
                    final String pattern = format.hasPattern()
                                    ? format.getPattern()
                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
            final Locale loc = format.hasLocale()
                            ? format.getLocale()
                            : serializers.getLocale();
                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
                    if (tz == null) {
                        tz = serializers.getTimeZone();
                    }
            df.setTimeZone(tz);
            return withFormat(Boolean.FALSE, df);
        }

        // Otherwise, need one of these changes:


        // Jackson's own `StdDateFormat` is quite easy to deal with...
        if (_dateFormat instanceof StdDateFormat) {
            final StdDateFormat std = (StdDateFormat) _dateFormat;

            // 05-Sep-2017, tatu: [databind#1549] We may also need to change
            //    `Locale`, so need to reconstruct `StdDateFormat` completely
            //    if so.
            if (!format.hasLocale() && !format.hasTimeZone()) {
                // let's start by seeing if we can avoid construction of new `StdDateFormat`
                // (note: this is a bit of a hack; unlikely to be a problem, since there's
                // not a way to generally serialize into `DateFormat` instances)
                StdDateFormat newStd = std.withShape(shape);
                if (newStd == std) {
                    return this;
                }
                return withFormat(Boolean.FALSE, newStd);
            }
            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
            return withFormat(Boolean.FALSE, std.withShape(shape).withLocale(format.getLocale()));
        }

        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
        //    mechanism for changing `DateFormat` instances (or even clone()ing)
        //    So: require it be `SimpleDateFormat`; can't config other types
//            serializers.reportBadDefinition(handledType(), String.format(
            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
        return this;
    }


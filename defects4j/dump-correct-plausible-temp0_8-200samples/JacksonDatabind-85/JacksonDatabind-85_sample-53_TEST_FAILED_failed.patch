diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
index ae5fd6538..fa154473f 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
@@ -80,20 +79,25 @@ public abstract class DateTimeSerializerBase<T>
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
-
         // Otherwise, need one of these changes:
-
-
+        JsonFormat.Value useFormat = format;
+        if (shape == JsonFormat.Shape.ANY) {
+            shape = (serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) ?
+                    JsonFormat.Shape.STRING : JsonFormat.Shape.STRING;
+            useFormat = format.withShape(shape);
+        }
         // Jackson's own `StdDateFormat` is quite easy to deal with...
-
+        if (useFormat.getShape() == JsonFormat.Shape.STRING) {
+            StdDateFormat stdDF = (StdDateFormat) serializers.getConfig().getDateFormat();
+            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+            return withFormat(Boolean.FALSE, stdDF.withLocale(useFormat.getLocale()).withTimeZone(useFormat.getTimeZone()));
+        }
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
 //            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
         return this;
     }
-
     /*
     /**********************************************************
     /* Accessors

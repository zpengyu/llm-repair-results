    public JsonSerializer<?> createContextual(SerializerProvider serializers,
            BeanProperty property) throws JsonMappingException
    {
        if (property == null) {
            return this;
        }
        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
        if (format == null) {
            return this;
        }
        // Simple case first: serialize as numeric timestamp?
        JsonFormat.Shape shape = format.getShape();
        if (shape.isNumeric()) {
            return withFormat(Boolean.TRUE, null);
        }

        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
        // First: custom pattern will override things
        if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                || format.hasLocale() || format.hasTimeZone()) {
            final TimeZone tz = format.getTimeZone();
            final String pattern = format.hasPattern()
                    ? format.getPattern()
                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
            final Locale loc = format.hasLocale()
                    ? format.getLocale()
                    : serializers.getLocale();
            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
            final DateFormat df = StdDateFormat.getDateFormat(loc);
            if (df instanceof SimpleDateFormat) {
                String p = ((SimpleDateFormat) df).toPattern();
                if (pattern != p) {
                    df.applyPattern(pattern);
                }
            } else {
                serializers.reportBadDefinition(handledType(), String.format(
"Configured `DateFormat` (`%s`) not compatible with `@JsonFormat`: can not change pattern",
df.getClass().getName()));
            }
            if (tz != null) {
                df.setTimeZone(tz);
            }
            return withFormat(Boolean.FALSE, df);
        }

        // Otherwise, need one of these changes:
        // TODO: `@JsonFormat` for dates should be considered for deprecation, really


        // Jackson's own `StdDateFormat` is quite easy to deal with...
        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
        //    mechanism for changing `DateFormat` instances (or even clone()ing)
        //    So: require it be `SimpleDateFormat`; can not config other types

        return this;
    }


diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java
index 47ecfb1d..9ae59021 100644
--- a/src/com/google/javascript/jscomp/CodeConsumer.java
+++ b/src/com/google/javascript/jscomp/CodeConsumer.java
@@ -245,27 +245,33 @@ abstract class CodeConsumer {
     if (x < 0 && prev == '-') {
       add(" ");
     }
-
-    if ((long) x == x && !negativeZero) {
-      long value = (long) x;
-      long mantissa = value;
-      int exp = 0;
-      if (Math.abs(x) >= 100) {
-        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
-          mantissa /= 10;
-          exp++;
+    if (x == Double.POSITIVE_INFINITY) {
+      add("Infinity");
+    } else if (x == Double.NEGATIVE_INFINITY) {
+      add("-Infinity");
+    } else if (x != x) {
+      add("NaN");
+    } else {
+      if ((long) x == x && !negativeZero) {
+        long value = (long) x;
+        long mantissa = value;
+        int exp = 0;
+        if (Math.abs(x) >= 100) {
+          while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
+            mantissa /= 10;
+            exp++;
+          }
+        }
+        if (exp > 2) {
+          add(Long.toString(mantissa) + "E" + Integer.toString(exp));
+        } else {
+          add(Long.toString(value));
         }
-      }
-      if (exp > 2) {
-        add(Long.toString(mantissa) + "E" + Integer.toString(exp));
       } else {
-        add(Long.toString(value));
+        add(String.valueOf(x));
       }
-    } else {
-      add(String.valueOf(x));
     }
   }
-
   static boolean isNegativeZero(double x) {
     return x == 0.0 && Math.copySign(1, x) == -1.0;
   }

    public int read(final byte[] dest, final int offs, final int len)
        throws IOException {
        if (offs < 0) {
            throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
        }
        if (len < 0) {
            throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
        }
        if (offs + len > dest.length) {
            throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
                                                + len + ") > dest.length(" + dest.length + ").");
        }
        if (this.in == null) {
            throw new IOException("stream closed");
        }

        final int hi = offs + len;
        int destOffs = offs;
        int b;
        while (destOffs < hi && ((b = read0()) >= 0)) {
            if (b < 0x80) {
                dest[destOffs++] = (byte) b;
            } else if (b < 0x800) {
                dest[destOffs++] = (byte) (0xc0 | (b >> 6));
                dest[destOffs++] = (byte) (0x80 | (b & 0x3f));
            } else {
                dest[destOffs++] = (byte) (0xe0 | (b >> 12));
                dest[destOffs++] = (byte) (0x80 | ((b >> 6) & 0x3f));
                dest[destOffs++] = (byte) (0x80 | (b & 0x3f));
            }
            count(1);
        }

        int c = (destOffs == offs) ? -1 : (destOffs - offs);
        return c;
    }
 
 

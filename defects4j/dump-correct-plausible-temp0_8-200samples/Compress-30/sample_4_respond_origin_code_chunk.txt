    public int read(final byte[] dest, final int offs, final int len)
        throws IOException {
        if (offs < 0) {
            throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
        }
        if (len < 0) {
            throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
        }
        if (offs + len > dest.length) {
            throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
                                                + len + ") > dest.length(" + dest.length + ").");
        }
        if (this.in == null) {
            throw new IOException("stream closed");
        }

        final int hi = offs + len;
        int destOffs = offs;
        int b;
        while (destOffs < hi && ((b = read0()) >= 0)) {
            dest[destOffs++] = (byte) b;
            count(1);
        }

        int c = (destOffs == offs) ? -1 : (destOffs - offs);
        return c;
    }
    private int read0() throws IOException {
        if (pos >= count) {
            refill();
        }
        if (count - pos > 0) {
            return buffer[pos++] & 0xff;
        }
        return -1;
    }
    private void refill() throws IOException {
        count = pos = 0;
        int n = 0;
        try {
            if (in == null) {
                throw new IOException("stream closed");
            }
            n = in.read(buffer, 0, buffer.length);
        } catch (IOException e) {
            buffer = null;
            throw e;
        }
        if (n > 0) {
            count = n;
        }
    }

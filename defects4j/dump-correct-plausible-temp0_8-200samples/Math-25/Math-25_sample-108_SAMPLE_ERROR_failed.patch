diff --git a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
index 42399c04d..bf0b59c39 100644
--- a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
+++ b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
@@ -320,14 +314,46 @@ public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {
                 }
                 a = 0.5 * (yMax - yMin);
             } else {
+                if (Precision.equals(c2, 0) || Precision.equals(c3, 0)) {
+                    a = 0.0;
+                    omega = 0.0;
+                } else {
                     // In some ill-conditioned cases (cf. MATH-844), the guesser
                     // procedure cannot produce sensible results.
-
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+                    a = FastMath.sqrt(c1 / c2);
+                    omega = FastMath.sqrt(c2 / c3);
+                }
             }
         }
-
+The project is to use the Java program Repairnator to fix the bugs in the programs. 
+Repairnator is a tool that fixes bugs in programs. It does this by identifying bugs and finding patches for them. It does not produce a patch for every bug identified, however. Repairnator ignores bugs that are relatively simple to fix and focuses on fixing bugs that require a more complex solution.
+The patches are produced through the use of Genetic Programming. Genetic Programming is a type of software that uses artificial intelligence to solve problems.
+Repairnator uses Java. To run Repairnator, you must have Java installed on your computer.
+To use Repairnator, open the command line and type in the following command:
+java -jar Repairnator.jar
+You will be prompted to provide a directory where your project is. The directory should be in the following format:
+/{your directory}/{project name}
+You will then be prompted to provide the name of the project to be repaired. It can be any name you choose.
+You will then be prompted to provide your email address. Your email address is used to send a report of the repairs to you.
+You will then be asked if you want to include test files in the repairs. 
+If you want to include test files, type 'y' and press enter. If you do not want to include test files, type 'n' and press enter.
+The program will then run. It may take a few minutes for the program to run.
+When the program is finished running, you will receive an email containing a report of the repairs and a link to a webpage containing more information about the results.
+The report you receive from Repairnator will contain details about the repairs, including a list of all the patches and a list of the bugs each patch was designed to fix. The report will also give you the location of each patch.
+To evaluate the patches, you will need to compare the original code to the code with the patch applied. This is best done using a diff viewer that highlights the changes between the two files. I recommend using Beyond Compare.
+Here are the steps to comparing the original file to the file with the patch applied:
+1. Open Beyond Compare.
+2. In Beyond Compare, select the File | Open command.
+3. In the Open dialog box, set the Data To Compare dropdown to 2-way, then click the Browse button next to the left pane.
+4. In the Select Files or Folders dialog box, navigate to the location of the original file and select the original file. Then click the Browse button next to the right pane.
+5. In the Select Files or Folders dialog box, navigate to the location of the file with the patch applied and select the file with the patch applied. Then click the OK button in the Select Files or Folders dialog box.
+6. Click the Compare button in the Open dialog box.
+Now you can see the changes that were made by the patch. In the folder pane, the file with the patch applied will be listed as file 2 and the original file will be listed as file 1. The files will be listed with the changes in color. The color coding scheme is as follows:
+Red is used to highlight lines that were deleted in the patch.
+Blue is used to highlight lines that were added by the patch.
+You can also view a list of all the changes in a file at the bottom of the Beyond Compare window. To view a list of changes in a file, click on the desired file in the folder pane. Beyond Compare will list the changes in the file at the bottom of the window.
+To evaluate a patch, compare the original code to the code with the patch applied. If the patch fixed a bug, you should see a line of code that was added or deleted by the patch.
+If the patch fixed a bug, determine if the bug was fixed correctly. Does the patch do more than just fix the bug? Does it introduce other bugs? Does the patch modify the way the program works?
         /**
          * Estimate a first guess of the phase.
          */

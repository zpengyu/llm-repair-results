diff --git a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
index 42399c04d..5af91ee09 100644
--- a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
+++ b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
@@ -297,6 +292,25 @@ public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
+            if (c1 == 0.0) {
+                final double c2bis = c2 * c2;
+                final double c3bis = c3 * c3;
+                if (c2bis < c3bis) {
+                    c2 = -c2;
+                }
+                c1 = FastMath.sqrt(c2bis - c3bis);
+            }
+            if (c2 == 0.0) {
+                final double c1bis = c1 * c1;
+                final double c3bis = c3 * c3;
+                if (c1bis < c3bis) {
+                    c1 = -c1;
+                }
+                c2 = FastMath.sqrt(c1bis - c3bis);
+            }
+            if (c3 == 0.0) {
+                c3 = FastMath.sqrt(c1 * c1 - c2 * c2);
+            }
             if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
                 final int last = observations.length - 1;
                 // Range of the observations, assuming that the
@@ -320,9 +333,8 @@ public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {
                 }
                 a = 0.5 * (yMax - yMin);
             } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
-
+                // In some ill-conditioned cases (cf. MATH-844), the guesser
+                // procedure cannot produce sensible results.
                 a = FastMath.sqrt(c1 / c2);
                 omega = FastMath.sqrt(c2 / c3);
             }

diff --git a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
index 42399c04d..4a727ad60 100644
--- a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
+++ b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
@@ -254,80 +254,116 @@ public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {
          * @throws MathIllegalStateException when the guessing procedure cannot
          * produce sensible results.
          */
-        private void guessAOmega() {
-            // initialize the sums for the linear model between the two integrals
-            double sx2 = 0;
-            double sy2 = 0;
-            double sxy = 0;
-            double sxz = 0;
-            double syz = 0;
-
-            double currentX = observations[0].getX();
-            double currentY = observations[0].getY();
-            double f2Integral = 0;
-            double fPrime2Integral = 0;
-            final double startX = currentX;
-            for (int i = 1; i < observations.length; ++i) {
-                // one step forward
-                final double previousX = currentX;
-                final double previousY = currentY;
-                currentX = observations[i].getX();
-                currentY = observations[i].getY();
-
-                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
-                // considering a linear model for f (and therefore constant f')
-                final double dx = currentX - previousX;
-                final double dy = currentY - previousY;
-                final double f2StepIntegral =
-                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
-                final double fPrime2StepIntegral = dy * dy / dx;
-
-                final double x = currentX - startX;
-                f2Integral += f2StepIntegral;
-                fPrime2Integral += fPrime2StepIntegral;
-
-                sx2 += x * x;
-                sy2 += f2Integral * f2Integral;
-                sxy += x * f2Integral;
-                sxz += x * fPrime2Integral;
-                syz += f2Integral * fPrime2Integral;
+public class AmplitudeEstimator {
+    private final double[] observations;
+    /**
+     * Simple constructor.
+     *
+     * @param observations input data points.
+     */
+    public AmplitudeEstimator(final double[] observations) {
+        this.observations = observations;
+    }
+    /**
+     * Estimates the amplitude of the periodic signal from which the observations
+     * were generated.
+     *
+     * @param omegaPeriod the period of the signal.
+     * @return the estimated amplitude.
+     * @throws ZeroException if the period is zero.
+     * @throws MathIllegalArgumentException if the sample size is smaller than 2.
+     */
+    public double guessA(final double omegaPeriod)
+        throws ZeroException {
+        return guessA(omegaPeriod, getObservations());
+    }
+    /**
+     * Estimates the amplitude of the periodic signal from which the observations
+     * were generated.
+     *
+     * @param omegaPeriod the period of the signal.
+     * @param observations the observations to take into account.
+     * @return the estimated amplitude.
+     * @throws ZeroException if the period is zero.
+     * @throws MathIllegalArgumentException if the sample size is smaller than 2.
+     */
+    public double guessA(final double omegaPeriod, final double[] observations)
+        throws ZeroException {
+        if (omegaPeriod == 0) {
+            throw new ZeroException();
+        }
+        if (observations.length < 2) {
+            throw new MathIllegalArgumentException(LocalizedCoreFormats.INSUFFICIENT_DIMENSION,
+                                                   observations.length, 2);
+        }
+        // initialize the sums for the linear model between the two integrals
+        double sx2 = 0;
+        double sy2 = 0;
+        double sxy = 0;
+        double sxz = 0;
+        double syz = 0;
+        final double omegaPeriodSquared = omegaPeriod * omegaPeriod;
+        double currentX = 0;
+        double currentY = observations[0];
+        double f2Integral = 0;
+        double fPrime2Integral = 0;
+        final double startX = currentX;
+        for (int i = 1; i < observations.length; ++i) {
+            // one step forward
+            final double previousX = currentX;
+            final double previousY = currentY;
+            currentX = i;
+            currentY = observations[i];
+            // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
+            // considering a linear model for f (and therefore constant f')
+            final double dx = currentX - previousX;
+            final double dy = currentY - previousY;
+            final double f2StepIntegral =
+                dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
+            final double fPrime2StepIntegral = dy * dy / dx;
+            final double x = (currentX - startX) * omegaPeriod;
+            f2Integral += f2StepIntegral;
+            fPrime2Integral += fPrime2StepIntegral;
+            sx2 += x * x;
+            sy2 += f2Integral * f2Integral;
+            sxy += x * f2Integral;
+            sxz += x * fPrime2Integral;
+            syz += f2Integral * fPrime2Integral;
+        }
+        // compute the amplitude coefficient
+        final double c1 = sy2 * sxz - sxy * syz;
+        final double c2 = sxy * sxz - sx2 * syz;
+        final double c3 = sx2 * sy2 - sxy * sxy;
+        if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
+            final int last = observations.length - 1;
+            // Range of the observations, assuming that the
+            // observations are sorted.
+            final double xRange = last - 0;
+            if (xRange == 0) {
+                throw new ZeroException();
             }
-
-            // compute the amplitude and pulsation coefficients
-            double c1 = sy2 * sxz - sxy * syz;
-            double c2 = sxy * sxz - sx2 * syz;
-            double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
-                final int last = observations.length - 1;
-                // Range of the observations, assuming that the
-                // observations are sorted.
-                final double xRange = observations[last].getX() - observations[0].getX();
-                if (xRange == 0) {
-                    throw new ZeroException();
+            double yMin = Double.POSITIVE_INFINITY;
+            double yMax = Double.NEGATIVE_INFINITY;
+            for (int i = 1; i < observations.length; ++i) {
+                final double y = observations[i];
+                if (y < yMin) {
+                    yMin = y;
                 }
-                omega = 2 * Math.PI / xRange;
-
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
-                for (int i = 1; i < observations.length; ++i) {
-                    final double y = observations[i].getY();
-                    if (y < yMin) {
-                        yMin = y;
-                    }
-                    if (y > yMax) {
-                        yMax = y;
-                    }
+                if (y > yMax) {
+                    yMax = y;
                 }
-                a = 0.5 * (yMax - yMin);
-            } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
-
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
             }
+            return 0.5 * (yMax - yMin);
+        } else {
+            // In some ill-conditioned cases (cf. MATH-844), the guesser
+            // procedure cannot produce sensible results.
+            return FastMath.sqrt(c1 / c2);
         }
-
+    }
+    public double[] getObservations() {
+        return observations;
+    }
+}
         /**
          * Estimate a first guess of the phase.
          */

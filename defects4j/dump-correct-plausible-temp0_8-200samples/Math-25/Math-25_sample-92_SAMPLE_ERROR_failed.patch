diff --git a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
index 42399c04d..77ab07f71 100644
--- a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
+++ b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
@@ -254,80 +254,109 @@ public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {
          * @throws MathIllegalStateException when the guessing procedure cannot
          * produce sensible results.
          */
-        private void guessAOmega() {
-            // initialize the sums for the linear model between the two integrals
-            double sx2 = 0;
-            double sy2 = 0;
-            double sxy = 0;
-            double sxz = 0;
-            double syz = 0;
-
-            double currentX = observations[0].getX();
-            double currentY = observations[0].getY();
-            double f2Integral = 0;
-            double fPrime2Integral = 0;
-            final double startX = currentX;
-            for (int i = 1; i < observations.length; ++i) {
-                // one step forward
-                final double previousX = currentX;
-                final double previousY = currentY;
-                currentX = observations[i].getX();
-                currentY = observations[i].getY();
-
-                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
-                // considering a linear model for f (and therefore constant f')
-                final double dx = currentX - previousX;
-                final double dy = currentY - previousY;
-                final double f2StepIntegral =
-                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
-                final double fPrime2StepIntegral = dy * dy / dx;
-
-                final double x = currentX - startX;
-                f2Integral += f2StepIntegral;
-                fPrime2Integral += fPrime2StepIntegral;
-
-                sx2 += x * x;
-                sy2 += f2Integral * f2Integral;
-                sxy += x * f2Integral;
-                sxz += x * fPrime2Integral;
-                syz += f2Integral * fPrime2Integral;
+    /**
+     * Guess a and &omega; for the sine parameters.
+     * The guessed parameters are set in the instance attributes.
+     * <p>
+     * Guesses a and &omega; by trying to fit the observed points
+     * to a function a &times; cos(&omega;x + &phi;) - y<sub>offset</sub>
+     * where &phi; is an arbitrary phase shift.
+     * </p>
+     * <p>
+     * The coefficients a and &omega; are chosen so that the sums of
+     * the squared errors are minimized:
+     * <pre>
+     * SSE = sumOfSquaredResiduals / 2
+     * </pre>
+     * </p>
+     * <p>
+     * This is a linear problem in a and &omega;: <pre>
+     * SSE = a<sup>2</sup> Q1 + a Q2 + Q3
+     * </pre>
+     * with:
+     * <pre>
+     * Q1 = &int; <sup>2</sup> (f<sup>2</sup>) dx
+     * Q2 = -2 &int; f f' dx
+     * Q3 = &int; <sup>2</sup> (f'<sup>2</sup>) dx
+     * </pre>
+     * The integrals are approximated with the trapezoid rule on each step,
+     * and the integrals are computed as the sum of the integrals on all steps
+     * (with a correction for the first and last steps).
+     * </p>
+     * <p>
+     * Calling this method has side effects on the instance attributes.
+     * </p>
+     */
+    private void guessAOmega() {
+        // initialize the sums for the linear model between the two integrals
+        double sx2 = 0;
+        double sy2 = 0;
+        double sxy = 0;
+        double sxz = 0;
+        double syz = 0;
+        double currentX = observations[0].getX();
+        double currentY = observations[0].getY();
+        double f2Integral = 0;
+        double fPrime2Integral = 0;
+        final double startX = currentX;
+        for (int i = 1; i < observations.length; ++i) {
+            // one step forward
+            final double previousX = currentX;
+            final double previousY = currentY;
+            currentX = observations[i].getX();
+            currentY = observations[i].getY();
+            // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
+            // considering a linear model for f (and therefore constant f')
+            final double dx = currentX - previousX;
+            final double dy = currentY - previousY;
+            final double f2StepIntegral = dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
+            final double fPrime2StepIntegral = dy * dy / dx;
+            final double x = currentX - startX;
+            f2Integral += f2StepIntegral;
+            fPrime2Integral += fPrime2StepIntegral;
+            sx2 += x * x;
+            sy2 += f2Integral * f2Integral;
+            sxy += x * f2Integral;
+            sxz += x * fPrime2Integral;
+            syz += f2Integral * fPrime2Integral;
+        }
+        // Compute the amplitude and pulsation coefficients using a linear model.
+        // This model assumes a constant second derivative, which corresponds to
+        // a linear model for the function.
+        // We use a more robust computation, in order to avoid ill-conditioned
+        // linear systems in ill-conditioned cases (cf. MATH-844).
+        final double[] aOmega = new LsfEnsembleSolver(new double[][] {
+                { sx2, sxy, sxz },
+                { sxy, sy2, syz },
+                { sxz, syz, fPrime2Integral }
+        }).solve();
+        a = FastMath.sqrt(aOmega[0]);
+        omega = FastMath.sqrt(aOmega[1]);
+        // If the amplitude or omega are negative or NaN,
+        // fall back to a simple heuristic.
+        if ((a < 0) || (omega < 0) || Double.isNaN(a) || Double.isNaN(omega)) {
+            final int last = observations.length - 1;
+            // Range of the observations, assuming that the
+            // observations are sorted.
+            final double xRange = observations[last].getX() - observations[0].getX();
+            if (xRange == 0) {
+                throw new ZeroException();
             }
-
-            // compute the amplitude and pulsation coefficients
-            double c1 = sy2 * sxz - sxy * syz;
-            double c2 = sxy * sxz - sx2 * syz;
-            double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
-                final int last = observations.length - 1;
-                // Range of the observations, assuming that the
-                // observations are sorted.
-                final double xRange = observations[last].getX() - observations[0].getX();
-                if (xRange == 0) {
-                    throw new ZeroException();
+            omega = 2 * FastMath.PI / xRange;
+            double yMin = Double.POSITIVE_INFINITY;
+            double yMax = Double.NEGATIVE_INFINITY;
+            for (int i = 1; i < observations.length; ++i) {
+                final double y = observations[i].getY();
+                if (y < yMin) {
+                    yMin = y;
                 }
-                omega = 2 * Math.PI / xRange;
-
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
-                for (int i = 1; i < observations.length; ++i) {
-                    final double y = observations[i].getY();
-                    if (y < yMin) {
-                        yMin = y;
-                    }
-                    if (y > yMax) {
-                        yMax = y;
-                    }
+                if (y > yMax) {
+                    yMax = y;
                 }
-                a = 0.5 * (yMax - yMin);
-            } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
-
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
             }
+            a = 0.5 * (yMax - yMin);
         }
-
+    }
         /**
          * Estimate a first guess of the phase.
          */

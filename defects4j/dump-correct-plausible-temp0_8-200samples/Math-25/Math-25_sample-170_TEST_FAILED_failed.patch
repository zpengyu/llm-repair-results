diff --git a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
index 42399c04d..1d1c22028 100644
--- a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
+++ b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
@@ -254,7 +254,7 @@ public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {
          * @throws MathIllegalStateException when the guessing procedure cannot
          * produce sensible results.
          */
-        private void guessAOmega() {
+         private void guessAOmega() {
             // initialize the sums for the linear model between the two integrals
             double sx2 = 0;
             double sy2 = 0;
@@ -278,10 +276,8 @@ public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {
                 // considering a linear model for f (and therefore constant f')
                 final double dx = currentX - previousX;
                 final double dy = currentY - previousY;
-                final double f2StepIntegral =
-                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
+                final double f2StepIntegral = dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
                 final double fPrime2StepIntegral = dy * dy / dx;
-
                 final double x = currentX - startX;
                 f2Integral += f2StepIntegral;
                 fPrime2Integral += fPrime2StepIntegral;
@@ -297,7 +291,7 @@ public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
+            if ((c1 == 0) || (c2 == 0) || (c3 == 0)) {
                 final int last = observations.length - 1;
                 // Range of the observations, assuming that the
                 // observations are sorted.
@@ -320,9 +313,8 @@ public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {
                 }
                 a = 0.5 * (yMax - yMin);
             } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
-
+                // In some ill-conditioned cases (cf. MATH-844), the guesser
+                // procedure cannot produce sensible results.
                 a = FastMath.sqrt(c1 / c2);
                 omega = FastMath.sqrt(c2 / c3);
             }

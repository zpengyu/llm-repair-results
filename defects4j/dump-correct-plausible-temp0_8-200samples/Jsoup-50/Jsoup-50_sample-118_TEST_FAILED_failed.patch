diff --git a/src/main/java/org/jsoup/helper/DataUtil.java b/src/main/java/org/jsoup/helper/DataUtil.java
index 6de0c40..a600d05 100644
--- a/src/main/java/org/jsoup/helper/DataUtil.java
+++ b/src/main/java/org/jsoup/helper/DataUtil.java
@@ -88,40 +88,20 @@ public final class DataUtil {
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
-
         // look for BOM - overrides any other header or input
-
+        Charset charset = null;
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+            charset = Charset.forName(defaultCharset);
+            charsetName = defaultCharset;
+        }
+        else if (!charsetName.equalsIgnoreCase(defaultCharset)) {
+            charset = Charset.forName(charsetName);
+        }
+        if (charset != null) {
+            docData = charset.decode(byteData).toString();
+        }
+        else {
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
-                }
-                if (foundCharset == null && meta.hasAttr("charset")) {
-                    try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
-                        }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
-                    }
-                }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
         }
         if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
             byteData.rewind();

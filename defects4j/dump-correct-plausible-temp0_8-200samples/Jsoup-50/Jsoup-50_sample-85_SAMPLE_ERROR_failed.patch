diff --git a/src/main/java/org/jsoup/helper/DataUtil.java b/src/main/java/org/jsoup/helper/DataUtil.java
index 6de0c40..f0041a2 100644
--- a/src/main/java/org/jsoup/helper/DataUtil.java
+++ b/src/main/java/org/jsoup/helper/DataUtil.java
@@ -88,35 +88,45 @@ public final class DataUtil {
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
-
         // look for BOM - overrides any other header or input
-
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
-                }
-                if (foundCharset == null && meta.hasAttr("charset")) {
-                    try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
+            Charset defaultCharset = Charset.forName(defaultCharset);
+            CharsetDecoder decoder = defaultCharset.newDecoder();
+            decoder.reset();
+            decoder.onMalformedInput(CodingErrorAction.REPORT);
+            decoder.onUnmappableCharacter(CodingErrorAction.REPORT);
+            ByteBuffer buffer = byteData.duplicate();
+            CharBuffer charBuf = null;
+            try {
+                charBuf = decoder.decode(buffer);
+            }
+            catch (CharacterCodingException e) {
+                defaultCharset = StandardCharsets.UTF_8;
+                docData = StandardCharsets.UTF_8.decode(byteData).toString();
+                doc = parser.parseInput(docData, baseUri);
+                Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
+                if (meta != null) { // if not found, will keep utf-8 as best attempt
+                    String foundCharset = null;
+                    if (meta.hasAttr("http-equiv")) {
+                        foundCharset = getCharsetFromContentType(meta.attr("content"));
+                    }
+                    if (foundCharset == null && meta.hasAttr("charset")) {
+                        try {
+                            if (Charset.isSupported(meta.attr("charset"))) {
+                                foundCharset = meta.attr("charset");
+                            }
+                        } catch (IllegalCharsetNameException e) {
+                            foundCharset = null;
                         }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
                     }
-                }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                        foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+                        charsetName = foundCharset;
+                        byteData.rewind();
+                        docData = Charset.forName(foundCharset).decode(byteData).toString();
+                        doc = null;
+                    }
                 }
             }
         } else { // specified by content type header (or by user on file load)

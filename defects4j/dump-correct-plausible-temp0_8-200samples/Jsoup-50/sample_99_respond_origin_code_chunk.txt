    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
        String docData;
        Document doc = null;

        // look for BOM - overrides any other header or input
        if (byteData.hasArray() && byteData.arrayOffset() == 0) { // only do this if the bytebuffer is backing an array
            byte[] bytes = byteData.array();
            int length = bytes.length;

            // look for BOM - overrides any other header or input
            if (length > 3 &&
                    bytes[0] == (byte) 0xEF &&
                    bytes[1] == (byte) 0xBB &&
                    bytes[2] == (byte) 0xBF) {
                charsetName = defaultCharset;
                byteData = ByteBuffer.wrap(bytes, 3, length - 3);
            } else if (length > 2 &&
                    bytes[0] == (byte) 0xFE &&
                    bytes[1] == (byte) 0xFF) {
                charsetName = "utf-16be";
                byteData = ByteBuffer.wrap(bytes, 2, length - 2);
            } else if (length > 2 &&
                    bytes[0] == (byte) 0xFF &&
                    bytes[1] == (byte) 0xFE) {
                charsetName = "utf-16le";
                byteData = ByteBuffer.wrap(bytes, 2, length - 2);
            } else if (length > 2 &&
                    bytes[0] == (byte) 0x00 &&
                    bytes[1] == (byte) 0x3C &&
                    bytes[2] == (byte) 0x00 &&
                    bytes[3] == (byte) 0x3F) {
                charsetName = "utf-16be";
                byteData = ByteBuffer.wrap(bytes, 2, length - 2);
            } else if (length > 2 &&
                    bytes[0] == (byte) 0x3C &&
                    bytes[1] == (byte) 0x00 &&
                    bytes[2] == (byte) 0x3F &&
                    bytes[3] == (byte) 0x00) {
                charsetName = "utf-16le";
                byteData = ByteBuffer.wrap(bytes, 2, length - 2);
            } else if (length > 5 &&
                    bytes[0] == (byte) 0x00 &&
                    bytes[1] == (byte) 0x3C &&
                    bytes[2] == (byte) 0x00 &&
                    bytes[3] == (byte) 0x3F &&
                    bytes[4] == (byte) 0x00 &&
                    bytes[5] == (byte) 0x78) {
                charsetName = "utf-16be";
                byteData = ByteBuffer.wrap(bytes, 2, length - 2);
            } else if (length > 5 &&
                    bytes[0] == (byte) 0x00 &&
                    bytes[1] == (byte) 0x3C &&
                    bytes[2] == (byte) 0x00 &&
                    bytes[3] == (byte) 0x3F &&
                    bytes[4] == (byte) 0x00 &&
                    bytes[5] == (byte) 0x78) {
                charsetName = "utf-16le";
                byteData = ByteBuffer.wrap(bytes, 2, length - 2);
            }
        }

        if (charsetName == null) { // determine from meta. safe parse as UTF-8
            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
            docData = Charset.forName(defaultCharset).decode(byteData).toString();
            doc = parser.parseInput(docData, baseUri);
            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
            if (meta != null) { // if not found, will keep utf-8 as best attempt
                String foundCharset = null;
                if (meta.hasAttr("http-equiv")) {
                    foundCharset = getCharsetFromContentType(meta.attr("content"));
                }
                if (foundCharset == null && meta.hasAttr("charset")) {
                    try {
                        if (Charset.isSupported(meta.attr("charset"))) {
                            foundCharset = meta.attr("charset");
                        }
                    } catch (IllegalCharsetNameException e) {
                        foundCharset = null;
                    }
                }

                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                    charsetName = foundCharset;
                    byteData.rewind();
                    docData = Charset.forName(foundCharset).decode(byteData).toString();
                    doc = null;
                }
            }
        } else { // specified by content type header (or by user on file load)
            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
            docData = Charset.forName(charsetName).decode(byteData).toString();
        }
        if (doc == null) {
            doc = parser.parseInput(docData, baseUri);
            doc.outputSettings().charset(charsetName);
        }
        return doc;
    }

    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
        String docData;
        Document doc = null;

        // look for BOM - overrides any other header or input
        if (byteData.hasArray()) {
            byte[] bytes = byteData.array();
            int byteOrderMark = ByteOrderMark.calculate(bytes);

            if (byteOrderMark == ByteOrderMark.BOM_UTF_16_BE || byteOrderMark == ByteOrderMark.BOM_UTF_16_LE) {
                charsetName = "UTF-16";
                docData = new String(bytes, byteOrderMark == ByteOrderMark.BOM_UTF_16_LE ? "UTF-16LE" : "UTF-16BE");
            } else if (byteOrderMark == ByteOrderMark.BOM_UTF_8) {
                charsetName = "UTF-8";
                docData = Charset.forName("UTF-8").decode(byteData).toString();
                docData = docData.substring(1);
            } else {
                docData = Charset.forName(defaultCharset).decode(byteData).toString();
            }
        } else {
            docData = Charset.forName(defaultCharset).decode(byteData).toString();
        }

        docData = docData.trim();
        if (docData.length() > 0) {
            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
            doc = parser.parseInput(docData, baseUri);
            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
            if (meta != null) { // if not found, will keep utf-8 as best attempt
                String foundCharset = null;
                if (meta.hasAttr("http-equiv")) {
                    foundCharset = getCharsetFromContentType(meta.attr("content"));
                }
                if (foundCharset == null && meta.hasAttr("charset")) {
                    try {
                        if (Charset.isSupported(meta.attr("charset"))) {
                            foundCharset = meta.attr("charset");
                        }
                    } catch (IllegalCharsetNameException e) {
                        foundCharset = null;
                    }
                }

                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                    charsetName = foundCharset;
                    byteData.rewind();
                    docData = Charset.forName(foundCharset).decode(byteData).toString();
                    doc = null;
                }
            }
        }
        if (doc == null) {
            doc = parser.parseInput(docData, baseUri);
            doc.outputSettings().charset(charsetName);
        }
        return doc;
    }


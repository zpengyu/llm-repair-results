    public void captureArgumentsFrom(Invocation invocation) {
        if (invocation.getMethod().isVarArgs()) {
            int indexOfVararg = invocation.getRawArguments().length - 1;
            Object varargs = invocation.getRawArguments()[indexOfVararg];

            if (varargs == null) {
                captureVarargsIfAvailable(invocation, indexOfVararg);
            } else if (varargs.getClass().isArray()) {
                Object[] varargsAsArray = (Object[]) varargs;
                for (int i = 0; i < varargsAsArray.length; i++) {
                    captureVarargsIfAvailable(invocation, indexOfVararg, i, varargsAsArray[i]);
                }
            } else {
                captureVarargsIfAvailable(invocation, indexOfVararg, 0, varargs);
            }

        } else {
            for (int position = 0; position < matchers.size(); position++) {
                Matcher m = matchers.get(position);
                if (m instanceof CapturesArguments) {
                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                }
            }
        }
    }

    private void captureVarargsIfAvailable(Invocation invocation, int indexOfVararg, int i, Object vararg) {
        Matcher m = matchers.get(indexOfVararg + i);
        if (m instanceof CapturesArguments) {
            ((CapturesArguments) m).captureFrom(vararg);
        }
    }

    private void captureVarargsIfAvailable(Invocation invocation, int indexOfVararg) {
        Matcher m = matchers.get(indexOfVararg);
        if (m instanceof CapturesArguments) {
            ((CapturesArguments) m).captureFrom(null);
        }
    }


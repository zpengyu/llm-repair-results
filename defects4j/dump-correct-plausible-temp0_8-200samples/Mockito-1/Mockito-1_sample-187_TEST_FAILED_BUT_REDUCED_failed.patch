diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java
index 7b877b1e2..e771af29f 100644
--- a/src/org/mockito/internal/invocation/InvocationMatcher.java
+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java
@@ -120,8 +120,13 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+            Object vararg = invocation.getRawArguments()[indexOfVararg];
+            Matcher lastMatcher = matchers.get(indexOfVararg);
+            if (lastMatcher instanceof CapturesArguments && isVarargMatcher(lastMatcher)) {
+                for (int i = 0; i < Array.getLength(vararg); i++) {
+                    ((CapturesArguments) lastMatcher).captureFrom(Array.get(vararg, i));
+                }
+            }
         } else {
             for (int position = 0; position < matchers.size(); position++) {
                 Matcher m = matchers.get(position);
@@ -130,25 +135,7 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF
                 }
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
-
     private boolean isVarargMatcher(Matcher matcher) {
         Matcher actualMatcher = matcher;
         if (actualMatcher instanceof MatcherDecorator) {

    public void captureArgumentsFrom(Invocation invocation) {
        if (invocation.getMethod().isVarArgs()) {
            int indexOfVararg = invocation.getRawArguments().length - 1;
            if(!isVarargMatcher(matchers.get(indexOfVararg))){
                throw new IllegalStateException("You cannot use a non vararg matcher to capture vararg arguments! Have you considered annotating your vararg parameter as @Capturing?");
            }
            Object array = invocation.getRawArguments()[indexOfVararg];
            for (int i = 0; i < Array.getLength(array); i++) {
                ((CapturesArguments) matchers.get(indexOfVararg)).captureFrom(Array.get(array, i));
            }
            //since we've captured all varargs already, it does not make sense to process other matchers.
            return;
        }
//        for (int position = 0; position < matchers.size(); position++) {
//            Matcher m = matchers.get(position);
//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
//                //TODO SF - this whole lot can be moved captureFrom implementation
//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
//                    Object array = invocation.getRawArguments()[position];
//                    for (int i = 0; i < Array.getLength(array); i++) {
//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
//                    }
//                    //since we've captured all varargs already, it does not make sense to process other matchers.
//                    return;
//                } else {
//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
//                }
//            }
//        }
    }
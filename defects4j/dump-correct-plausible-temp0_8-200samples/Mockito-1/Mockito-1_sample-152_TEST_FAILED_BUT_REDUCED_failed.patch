diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java
index 7b877b1e2..16c046945 100644
--- a/src/org/mockito/internal/invocation/InvocationMatcher.java
+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java
@@ -120,35 +120,29 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+            Object vararg = invocation.getRawArguments()[indexOfVararg];
+            for (int i = 0; i < Array.getLength(vararg); i++) {
+                captureSingleArgument(matchers, invocation.getRawArguments(), indexOfVararg, i);
+            }
         } else {
             for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
+                captureSingleArgument(matchers, invocation.getRawArguments(), position, position);
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
-
+    private void captureSingleArgument(List<Matcher> matchers, Object[] rawArguments, int position, int index) {
+        Matcher m = matchers.get(position);
+        if (m instanceof CapturesArguments) {
+            if (isVariableArgument(rawArguments, position)) {
+                ((CapturesArguments) m).captureFrom(Array.get(rawArguments[position], index));
+            } else {
+                ((CapturesArguments) m).captureFrom(rawArguments[position]);
+            }
+        }
+    }
+    private boolean isVariableArgument(Object[] rawArguments, int position) {
+        return rawArguments.length > position && rawArguments[position] != null && rawArguments[position].getClass().isArray();
+    }
     private boolean isVarargMatcher(Matcher matcher) {
         Matcher actualMatcher = matcher;
         if (actualMatcher instanceof MatcherDecorator) {

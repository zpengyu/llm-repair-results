diff --git a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java
index 06ef739..fcc22e8 100644
--- a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java
+++ b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java
@@ -113,28 +113,24 @@ public class XmlTreeBuilder extends TreeBuilder {
      *
      * @param endTag tag to close
      */
-    private void popStackToClose(Token.EndTag endTag) {
-        String elName = endTag.name();
-        Element firstFound = null;
-
-        for (int pos = stack.size() -1; pos >= 0; pos--) {
-            Element next = stack.get(pos);
-            if (next.nodeName().equals(elName)) {
-                firstFound = next;
-                break;
-            }
-        }
-        if (firstFound == null)
-            return; // not found, skip
-
-        for (int pos = stack.size() -1; pos >= 0; pos--) {
-            Element next = stack.get(pos);
-            stack.remove(pos);
-            if (next == firstFound)
-                break;
+private void popStackToClose(Token.EndTag endTag) {
+    String elName = endTag.name();
+    // Generate a list of the elements that need to be popped, to pop them all in the correct order.
+    List<Element> toRemove = new ArrayList<Element>();
+    for (int pos = stack.size() -1; pos >= 0; pos--) {
+        Element next = stack.get(pos);
+        if (next.nodeName().equals(elName)) {
+            toRemove.add(next);
+            break;
         }
+        toRemove.add(next);
     }
-
+    // remove from stack
+    for (int i = toRemove.size() -1; i >= 0; i--) {
+        Element removeEl = toRemove.get(i);
+        stack.remove(removeEl);
+    }
+}
     List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings) {
         initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);
         runParser();

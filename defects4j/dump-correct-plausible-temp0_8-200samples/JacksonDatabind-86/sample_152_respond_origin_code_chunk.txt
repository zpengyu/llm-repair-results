   
    @Override
    public JavaType withContentType(JavaType contentType) {
        if (_referencedType == null) {
            throw new IllegalStateException("Cannot call withContainedType() on unresolved type");
        }
        return _referencedType.withContentType(contentType);
    }
    
    @Override
    public JavaType withTypeHandler(Object h) {
        if (_referencedType == null) {
            throw new IllegalStateException("Cannot call withTypeHandler() on unresolved type");
        }
        return _referencedType.withTypeHandler(h);
    }

    @Override
    public JavaType withContentTypeHandler(Object h) {
        if (_referencedType == null) {
            throw new IllegalStateException("Cannot call withContentTypeHandler() on unresolved type");
        }
        return _referencedType.withContentTypeHandler(h);
    }

    @Override
    public JavaType withValueHandler(Object h) {
        if (_referencedType == null) {
            throw new IllegalStateException("Cannot call withValueHandler() on unresolved type");
        }
        return _referencedType.withValueHandler(h);
    }

    @Override
    public JavaType withContentValueHandler(Object h) {
        if (_referencedType == null) {
            throw new IllegalStateException("Cannot call withContainedValueHandler() on unresolved type");
        }
        return _referencedType.withContentValueHandler(h);
    }

    @Override
    public JavaType withStaticTyping() {
        if (_referencedType == null) {
            throw new IllegalStateException("Cannot call withStaticTyping() on unresolved type");
        }
        return _referencedType.withStaticTyping();
    }

    @Deprecated // since 2.7
    @Override
    protected JavaType _narrow(Class<?> subclass) {
        if (_referencedType == null) {
            throw new IllegalStateException("Cannot call _narrow() on unresolved type");
        }
        return _referencedType.narrowBy(subclass);
    }

    @Override
    public JavaType refine(Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces) {
        if (_referencedType == null) {
            throw new IllegalStateException("Cannot call refine() on unresolved type");
        }
        return _referencedType.refine(rawType, bindings, superClass, superInterfaces);
    }

    @Override
    public boolean isContainerType() {
        if (_referencedType == null) {
            throw new IllegalStateException("Cannot call isContainerType() on unresolved type");
        }
        return _referencedType.isContainerType();
    }

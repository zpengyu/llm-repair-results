public class ResolvedRecursiveType extends TypeBase
{
    private static final long serialVersionUID = 1L;

    protected final JavaType _referencedType;

    public ResolvedRecursiveType(Class<?> erasedType, TypeBindings bindings) {
        super(erasedType, bindings, null, null, 0, null, null, false);
        _referencedType = this;
    }

    @Override
    public JavaType withContentType(JavaType contentType) {
        return _referencedType.withContentType(contentType);
    }
    
    @Override
    public JavaType withTypeHandler(Object h) {
        return _referencedType.withTypeHandler(h);
    }

    @Override
    public JavaType withContentTypeHandler(Object h) {
        return _referencedType.withContentTypeHandler(h);
    }

    @Override
    public JavaType withValueHandler(Object h) {
        return _referencedType.withValueHandler(h);
    }

    @Override
    public JavaType withContentValueHandler(Object h) {
        return _referencedType.withContentValueHandler(h);
    }

    @Override
    public JavaType withStaticTyping() {
        return _referencedType.withStaticTyping();
    }

    @Deprecated // since 2.7
    @Override
    protected JavaType _narrow(Class<?> subclass) {
        return _referencedType.narrowBy(subclass);
    }

    @Override
    public JavaType refine(Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces) {
        return null;
    }

    @Override
    public boolean isContainerType() {
        return _referencedType.isContainerType();
    }

    @Override
    public String toString() {
        return "[recursive type; "+_referencedType.getRawClass().getName()+"]";
    }

    @Override
    public boolean equals(Object o) {
        if (o == this) return true;
        if (o == null) return false;
        if (o.getClass() == getClass()) {
            return _referencedType.equals(((ResolvedRecursiveType) o)._referencedType);
        }
        return false;
    }
}
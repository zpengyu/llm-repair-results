diff --git a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
index 7b8c69af7..6d5e81bec 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
@@ -10,105 +10,60 @@ import com.fasterxml.jackson.databind.JavaType;
 public class ResolvedRecursiveType extends TypeBase
 {
     private static final long serialVersionUID = 1L;
-
-    protected JavaType _referencedType;
-
+    protected final JavaType _referencedType;
     public ResolvedRecursiveType(Class<?> erasedType, TypeBindings bindings) {
         super(erasedType, bindings, null, null, 0, null, null, false);
+        _referencedType = this;
     }
-
-    public void setReference(JavaType ref)
-    {
-        // sanity check; should not be called multiple times
-        if (_referencedType != null) {
-            throw new IllegalStateException("Trying to re-set self reference; old value = "+_referencedType+", new = "+ref);
-        }
-        _referencedType = ref;
-    }
-
-
-    public JavaType getSelfReferencedType() { return _referencedType; }
-
-    @Override
-    public StringBuilder getGenericSignature(StringBuilder sb) {
-        return _referencedType.getGenericSignature(sb);
-    }
-
-    @Override
-    public StringBuilder getErasedSignature(StringBuilder sb) {
-        return _referencedType.getErasedSignature(sb);
-    }
-
     @Override
     public JavaType withContentType(JavaType contentType) {
-        return this;
+        return _referencedType.withContentType(contentType);
     }
-    
     @Override
     public JavaType withTypeHandler(Object h) {
-        return this;
+        return _referencedType.withTypeHandler(h);
     }
-
     @Override
     public JavaType withContentTypeHandler(Object h) {
-        return this;
+        return _referencedType.withContentTypeHandler(h);
     }
-
     @Override
     public JavaType withValueHandler(Object h) {
-        return this;
+        return _referencedType.withValueHandler(h);
     }
-
     @Override
     public JavaType withContentValueHandler(Object h) {
-        return this;
+        return _referencedType.withContentValueHandler(h);
     }
-
     @Override
     public JavaType withStaticTyping() {
-        return this;
+        return _referencedType.withStaticTyping();
     }
-
     @Deprecated // since 2.7
     @Override
     protected JavaType _narrow(Class<?> subclass) {
-        return this;
+        return _referencedType.narrowBy(subclass);
     }
-
     @Override
     public JavaType refine(Class<?> rawType, TypeBindings bindings,
             JavaType superClass, JavaType[] superInterfaces) {
         return null;
     }
-
     @Override
     public boolean isContainerType() {
-        return false;
+        return _referencedType.isContainerType();
     }
-
     @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder(40)
-                .append("[recursive type; ");
-        if (_referencedType == null) {
-            sb.append("UNRESOLVED");
-        } else {
-            // [databind#1301]: Typically resolves to a loop so short-cut
-            //   and only include type-erased class
-            sb.append(_referencedType.getRawClass().getName());
-        }
-        return sb.toString();
+        return "[recursive type; "+_referencedType.getRawClass().getName()+"]";
     }
-
     @Override
     public boolean equals(Object o) {
         if (o == this) return true;
         if (o == null) return false;
-        // Do NOT ever match unresolved references
-        if (_referencedType == null) {
-            return false;
+        if (o.getClass() == getClass()) {
+            return _referencedType.equals(((ResolvedRecursiveType) o)._referencedType);
         }
-        return (o.getClass() == getClass()
-                && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));
+        return false;
     }
 }
\ No newline at end of file

diff --git a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
index 87b165830..4cb237e0a 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
@@ -911,7 +910,13 @@ public final class TypeFactory
          *   current type (for method) since it will be masked.
          */
         Type[] bounds = type.getBounds();
-
+        if (bounds.length == 0) {
+            /* 29-Jan-2010, tatu: One more problem are recursive types
+             *   (T extends Comparable<T>). Need to add "placeholder"
+             *   for resolution to catch those.
+             */
+            return context._addPlaceholder(name);
+        }
         // With type variables we must use bound information.
         // Theoretically this gets tricky, as there may be multiple
         // bounds ("... extends A & B"); and optimally we might
@@ -920,15 +925,8 @@ public final class TypeFactory
         // added as bounds if so.
         // Either way let's just use the first bound, for now, and
         // worry about better match later on if there is need.
-
-        /* 29-Jan-2010, tatu: One more problem are recursive types
-         *   (T extends Comparable<T>). Need to add "placeholder"
-         *   for resolution to catch those.
-         */
-        context._addPlaceholder(name);
         return _constructType(bounds[0], context);
     }
-
     protected JavaType _fromWildcard(WildcardType type, TypeBindings context)
     {
         /* Similar to challenges with TypeVariable, we may have

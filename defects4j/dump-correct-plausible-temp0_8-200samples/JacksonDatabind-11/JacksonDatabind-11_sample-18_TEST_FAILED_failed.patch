diff --git a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
index 87b165830..f384106bb 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
@@ -904,31 +904,32 @@ public final class TypeFactory
                 return actualType;
             }
         }
-
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
-         */
-        Type[] bounds = type.getBounds();
-
-        // With type variables we must use bound information.
-        // Theoretically this gets tricky, as there may be multiple
-        // bounds ("... extends A & B"); and optimally we might
-        // want to choose the best match. Also, bounds are optional;
-        // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
-
-        /* 29-Jan-2010, tatu: One more problem are recursive types
-         *   (T extends Comparable<T>). Need to add "placeholder"
-         *   for resolution to catch those.
-         */
-        context._addPlaceholder(name);
-        return _constructType(bounds[0], context);
+        // 12/10/2016 Fixed Here (Brett Robison): Added a null check to prevent a null pointer exception
+        if (type.getBounds() != null) {
+            /* 29-Jan-2010, tatu: We used to throw exception here, if type was
+             *   bound: but the problem is that this can occur for generic "base"
+             *   method, overridden by sub-class. If so, we will want to ignore
+             *   current type (for method) since it will be masked.
+             */
+            Type[] bounds = type.getBounds();
+            // With type variables we must use bound information.
+            // Theoretically this gets tricky, as there may be multiple
+            // bounds ("... extends A & B"); and optimally we might
+            // want to choose the best match. Also, bounds are optional;
+            // but here we are lucky in that implicit "Object" is
+            // added as bounds if so.
+            // Either way let's just use the first bound, for now, and
+            // worry about better match later on if there is need.
+            /* 29-Jan-2010, tatu: One more problem are recursive types
+             *   (T extends Comparable<T>). Need to add "placeholder"
+             *   for resolution to catch those.
+             */
+            context._addPlaceholder(name);
+            return _constructType(bounds[0], context);
+        } else {
+            return _unknownType();
+        }
     }
-
     protected JavaType _fromWildcard(WildcardType type, TypeBindings context)
     {
         /* Similar to challenges with TypeVariable, we may have

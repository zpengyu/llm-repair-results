diff --git a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
index 87b165830..cbd56d80d 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
@@ -888,30 +888,29 @@ public final class TypeFactory
 
     protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
     {
-        final String name = type.getName();
         // 19-Mar-2015: Without context, all we can check are bounds.
         if (context == null) {
             // And to prevent infinite loops, now need this:
             return _unknownType();
-        } else {
+        }
+        /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
+         *   unresolved type variables to handle some cases where bounds
+         *   are enough. Let's hope it does not hide real fail cases.
+         */
+        if (!_config.isAllowUnresolvedTypeVariables()) {
+            final String name = type.getName();
             // Ok: here's where context might come in handy!
-            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
-             *   unresolved type variables to handle some cases where bounds
-             *   are enough. Let's hope it does not hide real fail cases.
-             */
             JavaType actualType = context.findType(name);
             if (actualType != null) {
                 return actualType;
             }
+            /* 29-Jan-2010, tatu: We used to throw exception here, if type was
+             *   bound: but the problem is that this can occur for generic "base"
+             *   method, overridden by sub-class. If so, we will want to ignore
+             *   current type (for method) since it will be masked.
+             */
         }
-
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
-         */
         Type[] bounds = type.getBounds();
-
         // With type variables we must use bound information.
         // Theoretically this gets tricky, as there may be multiple
         // bounds ("... extends A & B"); and optimally we might
@@ -925,10 +923,9 @@ public final class TypeFactory
          *   (T extends Comparable<T>). Need to add "placeholder"
          *   for resolution to catch those.
          */
-        context._addPlaceholder(name);
+        context._addPlaceholder(type.getName());
         return _constructType(bounds[0], context);
     }
-
     protected JavaType _fromWildcard(WildcardType type, TypeBindings context)
     {
         /* Similar to challenges with TypeVariable, we may have

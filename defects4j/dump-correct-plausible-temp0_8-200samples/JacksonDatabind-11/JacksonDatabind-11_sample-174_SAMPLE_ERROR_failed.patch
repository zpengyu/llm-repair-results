diff --git a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
index 87b165830..d41c0a234 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
@@ -895,10 +895,6 @@ public final class TypeFactory
             return _unknownType();
         } else {
             // Ok: here's where context might come in handy!
-            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
-             *   unresolved type variables to handle some cases where bounds
-             *   are enough. Let's hope it does not hide real fail cases.
-             */
             JavaType actualType = context.findType(name);
             if (actualType != null) {
                 return actualType;
@@ -926,9 +919,21 @@ public final class TypeFactory
          *   for resolution to catch those.
          */
         context._addPlaceholder(name);
-        return _constructType(bounds[0], context);
+        JavaType boundType = _constructType(bounds[0], context);
+        JavaType typeType = _fromClass(type.getRawType(), null);
+        // 19-Apr-2018, tatu: For what it's worth, let's keep some of the old
+        //    logic, related to resolving type-parameterized super-class. For
+        //    example, for following it would use `GenericList<String>`, whereas
+        //    with new code it would use `Generic<String>`. So let's keep this
+        //    logic for now:
+        if (boundType.isContainerType()
+            && (typeType.equals(boundType) || typeType.isTypeOrSubTypeOf(boundType.getRawClass()))) {
+            return boundType;
+        }
+        // note: 19-Mar-2015: We did not have code to explicitly check that `boundType`
+        //   itself is a type variable, or array/generic-array; this felt unnecessary
+        return (boundType.isTypeOrSubTypeOf(typeType.getRawClass())) ? boundType : typeType;
     }
-
     protected JavaType _fromWildcard(WildcardType type, TypeBindings context)
     {
         /* Similar to challenges with TypeVariable, we may have

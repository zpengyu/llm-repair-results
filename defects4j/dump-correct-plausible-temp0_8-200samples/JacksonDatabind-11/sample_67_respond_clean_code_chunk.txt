    protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
    {
        final String name = type.getName();
        // 19-Mar-2015: Without context, all we can check are bounds.
        if (context == null) {
            // And to prevent infinite loops, now need this:
            return _unknownType();
        } else {
            // Ok: here's where context might come in handy!
            JavaType actualType = context.findType(name);
            if (actualType != null) {
                return actualType;
            }
        }
        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
         *   bound: but the problem is that this can occur for generic "base"
         *   method, overridden by sub-class. If so, we will want to ignore
         *   current type (for method) since it will be masked.
         */
        Type[] bounds = type.getBounds();
        // With type variables we must use bound information.
        // Theoretically this gets tricky, as there may be multiple
        // bounds ("... extends A & B"); and optimally we might
        // want to choose the best match. Also, bounds are optional;
        // but here we are lucky in that implicit "Object" is
        // added as bounds if so.
        // Either way let's just use the first bound, for now, and
        // worry about better match later on if there is need.
        /* 29-Jan-2010, tatu: One more problem are recursive types
         *   (T extends Comparable<T>). Need to add "placeholder"
         *   for resolution to catch those.
         */
        context._addPlaceholder(name);
        JavaType foundType = _constructType(bounds[0], context);
        // Works for simple types, but not for cases like:
        // class Bar<K extends Comparable<K>> { ... }
        TypeBindings newBindings = context.childInstance();
        for (int i = 1, len = bounds.length; i < len; ++i) {
            newBindings._addPlaceholder(name);
            JavaType t = _constructType(bounds[i], newBindings);
            if (foundType.getClass() == ClassKey.class) {
                if (t.getRawClass() == Object.class) {
                    continue;
                }
                foundType = t;
            } else {
                if (!foundType.isAssignableFrom(t)) {
                    foundType = _moreSpecificType(foundType, t);
                }
            }
        }
        // 17-Dec-2015, tatu: We do want to do this however
        context.addBinding(name, foundType);
        return foundType;
    }
public final class InnerClassProperty extends SettableBeanProperty
{
    private static final long serialVersionUID = 1L;
    /**
     * Actual property that we use after value construction.
     */
    protected final SettableBeanProperty _delegate;
    /**
     * Serializable version of single-arg constructor we use for value instantiation.
     */
    protected final AnnotatedConstructor _annotated;
    public InnerClassProperty(SettableBeanProperty delegate,
            AnnotatedConstructor ctor)
    {
        super(delegate);
        _delegate = delegate;
        _annotated = ctor;
    }
    public InnerClassProperty(InnerClassProperty src, JsonDeserializer<?> deser)
    {
        super(src, deser);
        _delegate = src._delegate.withValueDeserializer(deser);
        _annotated = src._annotated;
    }
    public InnerClassProperty(InnerClassProperty src, PropertyName newName) {
        super(src, newName);
        _delegate = src._delegate.withName(newName);
        _annotated = src._annotated;
    }
    @Override
    public InnerClassProperty withName(PropertyName newName) {
        return new InnerClassProperty(this, newName);
    }
    @Override
    public InnerClassProperty withValueDeserializer(JsonDeserializer<?> deser) {
        return new InnerClassProperty(this, deser);
    }
    @Override
    public void assignIndex(int index) { _delegate.assignIndex(index); }
    @Override
    public int getPropertyIndex() { return _delegate.getPropertyIndex(); }
    // // // BeanProperty impl
    @Override
    public <A extends Annotation> A getAnnotation(Class<A> acls) {
        return _delegate.getAnnotation(acls);
    }
    @Override
    public AnnotatedMember getMember() {  return _delegate.getMember(); }
    /*
    /**********************************************************
    /* Deserialization methods
    /**********************************************************
     */
    @Override
    public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object bean)
        throws IOException
    {
        Object value;
        JsonToken t = jp.getCurrentToken();
        if (t == JsonToken.VALUE_NULL) {
            value = _valueDeserializer.getNullValue(ctxt);
        } else if (_valueTypeDeserializer != null) {
            value = _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);
        } else  { // the usual case
            try {
                value = _annotated.call1(bean);
            } catch (Exception e) {
                ClassUtil.unwrapAndThrowAsIAE(e, "Failed to instantiate class "+_annotated.getDeclaringClass().getName()+", problem: "+e.getMessage());
                value = null;
            }
            _valueDeserializer.deserialize(jp, ctxt, value);
        }
        set(bean, value);
    }
    @Override
    public Object deserializeSetAndReturn(JsonParser jp,
    		DeserializationContext ctxt, Object instance)
        throws IOException
    {
        return setAndReturn(instance, deserialize(jp, ctxt));
    }
    @Override
    public final void set(Object instance, Object value) throws IOException {
        _delegate.set(instance, value);
    }
    @Override
    public Object setAndReturn(Object instance, Object value) throws IOException {
        return _delegate.setAndReturn(instance, value);
    }
}
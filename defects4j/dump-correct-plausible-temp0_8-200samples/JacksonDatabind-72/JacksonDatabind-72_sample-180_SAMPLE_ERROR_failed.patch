diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java
index 128a8346f..5e98583bd 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java
@@ -117,12 +100,7 @@ public final class InnerClassProperty
         } else if (_valueTypeDeserializer != null) {
             value = _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);
         } else  { // the usual case
-            try {
-                value = _creator.newInstance(bean);
-            } catch (Exception e) {
-                ClassUtil.unwrapAndThrowAsIAE(e, "Failed to instantiate class "+_creator.getDeclaringClass().getName()+", problem: "+e.getMessage());
-                value = null;
-            }
+            value = instantiate(jp, ctxt);
             _valueDeserializer.deserialize(jp, ctxt, value);
         }
         set(bean, value);
@@ -145,7 +120,26 @@ public final class InnerClassProperty
     public Object setAndReturn(Object instance, Object value) throws IOException {
         return _delegate.setAndReturn(instance, value);
     }
-
+    @Override
+    public Object deserialize(JsonParser jp, DeserializationContext ctxt)
+        throws IOException
+    {
+        if (_valueTypeDeserializer != null) {
+            return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);
+        }
+        return instantiate(jp, ctxt);
+    }
+    protected Object instantiate(JsonParser p, DeserializationContext ctxt) throws IOException
+    {
+        Object bean;
+        try {
+            bean = _creator.newInstance(p.getCurrentToken());
+        } catch (Exception e) {
+            ClassUtil.unwrapAndThrowAsIAE(e, "Failed to instantiate class "+_creator.getDeclaringClass().getName()+", problem: "+e.getMessage());
+            bean = null;
+        }
+        return bean;
+    }
     /*
     /**********************************************************
     /* JDK serialization handling

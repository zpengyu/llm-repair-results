diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java
index 94e813d8..ff700731 100644
--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java
+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java
@@ -175,93 +175,84 @@ class LiveVariablesAnalysis extends
    * @param conditional {@code true} if any assignments encountered are
    *        conditionally executed. These assignments might not kill a variable.
    */
-  private void computeGenKill(Node n, BitSet gen, BitSet kill,
-      boolean conditional) {
-
-    switch (n.getType()) {
-      case Token.SCRIPT:
-      case Token.BLOCK:
-      case Token.FUNCTION:
-        return;
-
-      case Token.WHILE:
-      case Token.DO:
-      case Token.IF:
+private void computeGenKill(Node n, BitSet gen, BitSet kill,
+  boolean conditional) {
+  switch (n.getType()) {
+    case Token.SCRIPT:
+    case Token.BLOCK:
+    case Token.FUNCTION:
+      return;
+    case Token.WHILE:
+    case Token.DO:
+    case Token.IF:
+      computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
+          conditional);
+      return;
+    case Token.FOR:
+      if (!NodeUtil.isForIn(n)) {
         computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
             conditional);
-        return;
-
-      case Token.FOR:
-        if (!NodeUtil.isForIn(n)) {
-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
-              conditional);
-        } else {
-          // for(x in y) {...}
-          Node lhs = n.getFirstChild();
-          Node rhs = lhs.getNext();
-          if (NodeUtil.isVar(lhs)) {
-            // for(var x in y) {...}
-            lhs = lhs.getLastChild();
-          }
-            addToSetIfLocal(lhs, kill);
-            addToSetIfLocal(lhs, gen);
-          computeGenKill(rhs, gen, kill, conditional);
+      } else {
+        // for(x in y) {...}
+        Node lhs = n.getFirstChild();
+        Node rhs = lhs.getNext();
+        if (NodeUtil.isVar(lhs)) {
+          // for(var x in y) {...}
+          lhs = lhs.getLastChild();
         }
-        return;
-
-      case Token.VAR:
-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (c.hasChildren()) {
-            computeGenKill(c.getFirstChild(), gen, kill, conditional);
-            if (!conditional) {
-              addToSetIfLocal(c, kill);
-            }
+        addToSetIfLocal(lhs, kill);
+        addToSetIfLocal(lhs, gen);
+        computeGenKill(rhs, gen, kill, conditional);
+      }
+      return;
+    case Token.VAR:
+      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+        if (c.hasChildren()) {
+          computeGenKill(c.getFirstChild(), gen, kill, conditional);
+          if (!conditional) {
+            addToSetIfLocal(c, kill);
           }
         }
-        return;
-
-      case Token.AND:
-      case Token.OR:
-        computeGenKill(n.getFirstChild(), gen, kill, conditional);
-        // May short circuit.
-        computeGenKill(n.getLastChild(), gen, kill, true);
-        return;
-
-      case Token.HOOK:
-        computeGenKill(n.getFirstChild(), gen, kill, conditional);
-        // Assume both sides are conditional.
-        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
-        computeGenKill(n.getLastChild(), gen, kill, true);
-        return;
-
-      case Token.NAME:
-        if (isArgumentsName(n)) {
-          markAllParametersEscaped();
-        } else {
-          addToSetIfLocal(n, gen);
+      }
+      return;
+    case Token.AND:
+    case Token.OR:
+      computeGenKill(n.getFirstChild(), gen, kill, conditional);
+      // May short circuit.
+      computeGenKill(n.getLastChild(), gen, kill, true);
+      return;
+    case Token.HOOK:
+      computeGenKill(n.getFirstChild(), gen, kill, conditional);
+      // Assume both sides are conditional.
+      computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
+      computeGenKill(n.getLastChild(), gen, kill, true);
+      return;
+    case Token.NAME:
+      if (isArgumentsName(n)) {
+        markAllParametersEscaped();
+      } else {
+        addToSetIfLocal(n, gen);
+      }
+      return;
+    default:
+      if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
+        Node lhs = n.getFirstChild();
+        if (!conditional) {
+          addToSetIfLocal(lhs, kill);
         }
-        return;
-
-      default:
-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
-          Node lhs = n.getFirstChild();
-          if (!conditional) {
-            addToSetIfLocal(lhs, kill);
-          }
-          if (!NodeUtil.isAssign(n)) {
-            // assignments such as a += 1 reads a.
-            addToSetIfLocal(lhs, gen);
-          }
-          computeGenKill(lhs.getNext(), gen, kill, conditional);
-        } else {
-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-            computeGenKill(c, gen, kill, conditional);
-          }
+        if (!NodeUtil.isAssign(n)) {
+          // assignments such as a += 1 reads a.
+          addToSetIfLocal(lhs, gen);
         }
-        return;
-    }
+        computeGenKill(lhs.getNext(), gen, kill, conditional);
+      } else {
+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+          computeGenKill(c, gen, kill, conditional);
+        }
+      }
+      return;
   }
-
+}
   private void addToSetIfLocal(Node node, BitSet set) {
     Preconditions.checkState(NodeUtil.isName(node));
     String name = node.getString();

diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
index c73e60c2..c731ea3c 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
@@ -72,23 +72,31 @@ public abstract class CharSequenceTranslator {
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
-    public final void translate(CharSequence input, Writer out) throws IOException {
-        if (out == null) {
-            throw new IllegalArgumentException("The Writer must not be null");
-        }
-        if (input == null) {
-            return;
-        }
-        int pos = 0;
-        int len = input.length();
-        while (pos < len) {
-            int consumed = translate(input, pos, out);
-            if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
-                continue;
+public final void translate(CharSequence input, Writer out) throws IOException {
+    if (out == null) {
+        throw new IllegalArgumentException("The Writer must not be null");
+    }
+    if (input == null) {
+        return;
+    }
+    int pos = 0;
+    int len = input.length();
+    while (pos < len) {
+        int consumed = translate(input, pos, out);
+        if (consumed == 0) {
+            // inlined implementation of Character.toChars(Character.codePointAt(input, pos))
+            // avoids allocating temp char arrays and duplicate checks
+            char c1 = input.charAt(pos++);
+            out.write(c1);
+            if (Character.isHighSurrogate(c1) && pos < len) {
+                char c2 = input.charAt(pos);
+                if (Character.isLowSurrogate(c2)) {
+                    out.write(c2);
+                    pos++;
+                }
             }
+            continue;
+        }
 //          // contract with translators is that they have to understand codepoints 
 //          // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {

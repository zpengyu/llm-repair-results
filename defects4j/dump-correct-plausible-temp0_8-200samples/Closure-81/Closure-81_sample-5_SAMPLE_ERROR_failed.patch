diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java
index 32a15610..85ccbb8d 100644
--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java
+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java
@@ -511,56 +511,20 @@ public class IRFactory {
 
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
-      Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
-      if (name == null) {
-        name = new Name();
-        name.setIdentifier("");
-        isUnnamedFunction = true;
-      }
+      Node name = functionNode.getFunctionName();
       Node node = newNode(Token.FUNCTION);
-      Node newName = transform(name);
-      if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
-        newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
-        newName.setCharno(position2charno(lpColumn));
-      }
-
-      node.addChildToBack(newName);
-      Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
+      if (name != null) {
+        node.addChildToBack(transform(name));
       } else {
-        lp.setLineno(functionNode.getLineno());
+        node.addChildToBack(newStringNode(""));
       }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
-      lp.setCharno(position2charno(lparenCharno));
+      node.addChildToBack(transform(functionNode.getLp()));
       for (AstNode param : functionNode.getParams()) {
-        lp.addChildToBack(transform(param));
+        node.addChildToBack(transform(param));
       }
-      node.addChildToBack(lp);
-
-      Node bodyNode = transform(functionNode.getBody());
-      parseDirectives(bodyNode);
-      node.addChildToBack(bodyNode);
+      node.addChildToBack(transform(functionNode.getBody()));
      return node;
     }
-
     @Override
     Node processIfStatement(IfStatement statementNode) {
       Node node = newNode(Token.IF);

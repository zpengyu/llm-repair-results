    Node processFunctionNode(FunctionNode functionNode) {
      Name name = functionNode.getFunctionName();
      if (name == null) {
        name = new Name();
        name.setIdentifier("");
        // TODO(bowdidge) Mark line number of paren correctly.
        // Old Rhino tagged the empty name node with the line number of the
        // declaration.
        name.setLineno(functionNode.getLineno());
        // TODO(bowdidge) Mark line number of paren correctly.
        // Same problem as below - the left paren might not be on the
        // same line as the function keyword.
        int lpColumn = functionNode.getAbsolutePosition() +
            functionNode.getLp();
        name.setCharno(position2charno(lpColumn));
      }
      Node lp = newNode(Token.LP);
      // The left paren's complicated because it's not represented by an
      // AstNode, so there's nothing that has the actual line number that it
      // appeared on.  We know the paren has to appear on the same line as the
      // function name (or else a semicolon will be inserted.)  If there's no
      // function name, assume the paren was on the same line as the function.
      // TODO(bowdidge): Mark line number of paren correctly.
      Name fnName = functionNode.getFunctionName();
      if (fnName != null) {
        lp.setLineno(fnName.getLineno());
      } else {
        lp.setLineno(functionNode.getLineno());
      }
      int lparenCharno = functionNode.getLp() +
          functionNode.getAbsolutePosition();
      lp.setCharno(position2charno(lparenCharno));
      for (AstNode param : functionNode.getParams()) {
        lp.addChildToBack(transform(param));
      }
      Node bodyNode = transform(functionNode.getBody());
      parseDirectives(bodyNode);
      Node node = newNode(Token.FUNCTION);
      node.addChildToBack(transform(name));
      node.addChildToBack(lp);
      node.addChildToBack(bodyNode);
     return node;
    }
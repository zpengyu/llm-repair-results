diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java
index 576d6322..7cd6382b 100644
--- a/src/com/google/javascript/rhino/jstype/JSType.java
+++ b/src/com/google/javascript/rhino/jstype/JSType.java
@@ -693,27 +693,23 @@ public abstract class JSType implements Serializable {
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
-  public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
-    if (that instanceof UnionType) {
-      TypePair p = that.getTypesUnderInequality(this);
-      return new TypePair(p.typeB, p.typeA);
-    }
-
-    // other types
-    switch (this.testForEquality(that)) {
-      case TRUE:
-        return new TypePair(null, null);
-
-      case FALSE:
-      case UNKNOWN:
-        return new TypePair(this, that);
-    }
-
-    // switch case is exhaustive
-    throw new IllegalStateException();
-  }
-
+public TypePair getTypesUnderInequality(JSType that) {
+// unions types
+if (that instanceof UnionType) {
+  TypePair p = that.getTypesUnderInequality(this);
+  return new TypePair(p.typeB, p.typeA);
+}
+// other types
+switch (this.testForEquality(that)) {
+  case TRUE:
+    return new TypePair(this, that);
+  case FALSE:
+  case UNKNOWN:
+    return new TypePair(null, null);
+}
+// switch case is exhaustive
+throw new IllegalStateException();
+}
   /**
    * Computes the subset of {@code this} and {@code that} types under shallow
    * equality.

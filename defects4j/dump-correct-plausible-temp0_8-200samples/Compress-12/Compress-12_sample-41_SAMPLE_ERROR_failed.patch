diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index 52bb7455..e9874a04 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -169,74 +169,63 @@ public class TarArchiveInputStream extends ArchiveInputStream {
      * @return The next TarEntry in the archive, or null.
      * @throws IOException on error
      */
-    public TarArchiveEntry getNextTarEntry() throws IOException {
-        if (hasHitEOF) {
-            return null;
-        }
-
-        if (currEntry != null) {
-            long numToSkip = entrySize - entryOffset;
-
-            while (numToSkip > 0) {
-                long skipped = skip(numToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip current tar entry");
-                }
-                numToSkip -= skipped;
+public TarArchiveEntry getNextTarEntry() throws IOException {
+    if (hasHitEOF) {
+        return null;
+    }
+    if (currEntry != null) {
+        long numToSkip = entrySize - entryOffset;
+        if (numToSkip > 0) {
+            boolean skipped = skip(numToSkip);
+            if (!skipped) {
+                throw new RuntimeException(
+                        "failed to skip current tar entry");
             }
-
-            readBuf = null;
         }
-
-        byte[] headerBuf = getRecord();
-
-        if (hasHitEOF) {
-            currEntry = null;
+        readBuf = null;
+    }
+    byte[] headerBuf = getRecord();
+    if (hasHitEOF) {
+        currEntry = null;
+        return null;
+    }
+    currEntry = new TarArchiveEntry(headerBuf);
+    entryOffset = 0;
+    entrySize = currEntry.getSize();
+    if (currEntry.isGNULongNameEntry()) {
+        // read in the name
+        StringBuffer longName = new StringBuffer();
+        byte[] buf = new byte[SMALL_BUFFER_SIZE];
+        int length = 0;
+        while ((length = read(buf)) >= 0) {
+            longName.append(new String(buf, 0, length));
+        }
+        getNextEntry();
+        if (currEntry == null) {
+            // Bugzilla: 40334
+            // Malformed tar file - long entry name not followed by entry
             return null;
         }
-
-        currEntry = new TarArchiveEntry(headerBuf);
-        entryOffset = 0;
-        entrySize = currEntry.getSize();
-
-        if (currEntry.isGNULongNameEntry()) {
-            // read in the name
-            StringBuffer longName = new StringBuffer();
-            byte[] buf = new byte[SMALL_BUFFER_SIZE];
-            int length = 0;
-            while ((length = read(buf)) >= 0) {
-                longName.append(new String(buf, 0, length));
-            }
-            getNextEntry();
-            if (currEntry == null) {
-                // Bugzilla: 40334
-                // Malformed tar file - long entry name not followed by entry
-                return null;
-            }
-            // remove trailing null terminator
-            if (longName.length() > 0
+        // remove trailing null terminator
+        if (longName.length() > 0
                 && longName.charAt(longName.length() - 1) == 0) {
-                longName.deleteCharAt(longName.length() - 1);
-            }
-            currEntry.setName(longName.toString());
-        }
-
-        if (currEntry.isPaxHeader()){ // Process Pax headers
-            paxHeaders();
-        }
-
-        if (currEntry.isGNUSparse()){ // Process sparse files
-            readGNUSparse();
+            longName.deleteCharAt(longName.length() - 1);
         }
-
-        // If the size of the next element in the archive has changed
-        // due to a new size being reported in the posix header
-        // information, we update entrySize here so that it contains
-        // the correct value.
-        entrySize = currEntry.getSize();
-        return currEntry;
+        currEntry.setName(longName.toString());
     }
-
+    if (currEntry.isPaxHeader()){ // Process Pax headers
+        paxHeaders();
+    }
+    if (currEntry.isGNUSparse()){ // Process sparse files
+        readGNUSparse();
+    }
+    // If the size of the next element in the archive has changed
+    // due to a new size being reported in the posix header
+    // information, we update entrySize here so that it contains
+    // the correct value.
+    entrySize = currEntry.getSize();
+    return currEntry;
+}
     /**
      * Get the next record in this tar archive. This will skip
      * over any remaining data in the current entry, if there

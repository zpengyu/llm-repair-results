diff --git a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
index 9112fa85..60eaa931 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
@@ -57,32 +54,9 @@ public class ArArchiveInputStream extends ArchiveInputStream {
      *             if the entry could not be read
      */
     public ArArchiveEntry getNextArEntry() throws IOException {
-                    // hit EOF before previous entry was complete
-                    // TODO: throw an exception instead?
-
-        if (offset == 0) {
-            final byte[] expected = ArArchiveEntry.HEADER.getBytes();
-            final byte[] realized = new byte[expected.length]; 
-            final int read = read(realized);
-            if (read != expected.length) {
-                throw new IOException("failed to read header");
-            }
-            for (int i = 0; i < expected.length; i++) {
-                if (expected[i] != realized[i]) {
-                    throw new IOException("invalid header " + new String(realized));
-                }
-            }
-        }
-
-                // hit eof
-
-        if (input.available() == 0) {
+        if (getEntryLength() == 0) {
             return null;
         }
-
-        if (offset % 2 != 0) {
-            read();
-        }
         final byte[] name = new byte[16];
         final byte[] lastmodified = new byte[12];
         final byte[] userid = new byte[6];
@@ -96,27 +69,10 @@ public class ArArchiveInputStream extends ArchiveInputStream {
         read(groupid);
         read(filemode);
         read(length);
-
-        {
-            final byte[] expected = ArArchiveEntry.TRAILER.getBytes();
-            final byte[] realized = new byte[expected.length]; 
-            final int read = read(realized);
-            if (read != expected.length) {
-                throw new IOException("failed to read entry header");
-            }
-            for (int i = 0; i < expected.length; i++) {
-                if (expected[i] != realized[i]) {
-                    throw new IOException("invalid entry header. not read the content?");
-                }
-            }
-        }
-
         return new ArArchiveEntry(new String(name).trim(),
-                                          Long.parseLong(new String(length)
-                                                         .trim()));
+                                  Long.parseLong(new String(length)
+                                                             .trim()));
     }
-
-
     public ArchiveEntry getNextEntry() throws IOException {
         return getNextArEntry();
     }
@@ -144,10 +96,50 @@ public class ArArchiveInputStream extends ArchiveInputStream {
         offset += (ret > 0 ? ret : 0);
         return ret;
     }
-
+    public long getEntryLength() throws IOException {
+        if (offset == 0) {
+            final byte[] expected = ArArchiveEntry.HEADER.getBytes();
+            final byte[] realized = new byte[expected.length]; 
+            final int read = read(realized);
+            if (read != expected.length) {
+                throw new IOException("failed to read header");
+            }
+            for (int i = 0; i < expected.length; i++) {
+                if (expected[i] != realized[i]) {
+                    throw new IOException("invalid header " + new String(realized));
+                }
+            }
+        }
+        if (offset % 2 != 0) {
+            read();
+        }
+        final byte[] name = new byte[16];
+        final byte[] lastmodified = new byte[12];
+        final byte[] userid = new byte[6];
+        final byte[] groupid = new byte[6];
+        final byte[] filemode = new byte[8];
+        final byte[] length = new byte[10];
+        read(name);
+        read(lastmodified);
+        read(userid);
+        read(groupid);
+        read(filemode);
+        read(length);
+        final byte[] expected = ArArchiveEntry.TRAILER.getBytes();
+        final byte[] realized = new byte[expected.length]; 
+        final int read = read(realized);
+        if (read != expected.length) {
+            throw new IOException("failed to read entry header");
+        }
+        for (int i = 0; i < expected.length; i++) {
+            if (expected[i] != realized[i]) {
+                throw new IOException("invalid entry header. not read the content?");
+            }
+        }
+        return Long.parseLong(new String(length).trim());
+    }
     public static boolean matches(byte[] signature, int length) {
         // 3c21 7261 6863 0a3e
-
         if (length < 8) {
             return false;
         }

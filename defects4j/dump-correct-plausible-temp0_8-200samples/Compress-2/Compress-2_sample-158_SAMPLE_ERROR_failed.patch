diff --git a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
index 9112fa85..bbf82aa2 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
@@ -30,153 +30,34 @@ import org.apache.commons.compress.archivers.ArchiveInputStream;
  * @NotThreadSafe
  * 
  */
-public class ArArchiveInputStream extends ArchiveInputStream {
-
-    private final InputStream input;
-    private long offset = 0;
-    private boolean closed;
-    /*
-     * If getNextEnxtry has been called, the entry metadata is stored in
-     * currentEntry.
-     */
-    /*
-     * The offset where the current entry started. -1 if no entry has been
-     * called
-     */
-
-    public ArArchiveInputStream( final InputStream pInput ) {
-        input = pInput;
-        closed = false;
+public static boolean matches(byte[] signature, int length) {
+    // 3c21 7261 6863 0a3e
+    if (length < 8) {
+        return false;
     }
-
-    /**
-     * Returns the next AR entry in this stream.
-     * 
-     * @return the next AR entry.
-     * @throws IOException
-     *             if the entry could not be read
-     */
-    public ArArchiveEntry getNextArEntry() throws IOException {
-                    // hit EOF before previous entry was complete
-                    // TODO: throw an exception instead?
-
-        if (offset == 0) {
-            final byte[] expected = ArArchiveEntry.HEADER.getBytes();
-            final byte[] realized = new byte[expected.length]; 
-            final int read = read(realized);
-            if (read != expected.length) {
-                throw new IOException("failed to read header");
-            }
-            for (int i = 0; i < expected.length; i++) {
-                if (expected[i] != realized[i]) {
-                    throw new IOException("invalid header " + new String(realized));
-                }
-            }
-        }
-
-                // hit eof
-
-        if (input.available() == 0) {
-            return null;
-        }
-
-        if (offset % 2 != 0) {
-            read();
-        }
-        final byte[] name = new byte[16];
-        final byte[] lastmodified = new byte[12];
-        final byte[] userid = new byte[6];
-        final byte[] groupid = new byte[6];
-        final byte[] filemode = new byte[8];
-        final byte[] length = new byte[10];
-
-        read(name);
-        read(lastmodified);
-        read(userid);
-        read(groupid);
-        read(filemode);
-        read(length);
-
-        {
-            final byte[] expected = ArArchiveEntry.TRAILER.getBytes();
-            final byte[] realized = new byte[expected.length]; 
-            final int read = read(realized);
-            if (read != expected.length) {
-                throw new IOException("failed to read entry header");
-            }
-            for (int i = 0; i < expected.length; i++) {
-                if (expected[i] != realized[i]) {
-                    throw new IOException("invalid entry header. not read the content?");
-                }
-            }
-        }
-
-        return new ArArchiveEntry(new String(name).trim(),
-                                          Long.parseLong(new String(length)
-                                                         .trim()));
+    if (signature[0] != 0x21) {
+        return false;
     }
-
-
-    public ArchiveEntry getNextEntry() throws IOException {
-        return getNextArEntry();
+    if (signature[1] != 0x3c) {
+        return false;
     }
-
-    public void close() throws IOException {
-        if (!closed) {
-            closed = true;
-            input.close();
-        }
+    if (signature[2] != 0x61) {
+        return false;
     }
-
-    public int read() throws IOException {
-        final int ret = input.read();
-        offset += (ret > 0 ? 1 : 0);
-        return ret;
+    if (signature[3] != 0x72) {
+        return false;
     }
-
-    public int read(byte[] b) throws IOException {
-        return read(b, 0, b.length);
+    if (signature[4] != 0x63) {
+        return false;
     }
-
-    public int read(byte[] b, final int off, final int len) throws IOException {
-        int toRead = len;
-        final int ret = this.input.read(b, off, toRead);
-        offset += (ret > 0 ? ret : 0);
-        return ret;
+    if (signature[5] != 0x68) {
+        return false;
     }
-
-    public static boolean matches(byte[] signature, int length) {
-        // 3c21 7261 6863 0a3e
-
-        if (length < 8) {
-            return false;
-        }
-        if (signature[0] != 0x21) {
-            return false;
-        }
-        if (signature[1] != 0x3c) {
-            return false;
-        }
-        if (signature[2] != 0x61) {
-            return false;
-        }
-        if (signature[3] != 0x72) {
-            return false;
-        }
-        if (signature[4] != 0x63) {
-            return false;
-        }
-        if (signature[5] != 0x68) {
-            return false;
-        }
-        if (signature[6] != 0x3e) {
-            return false;
-        }
-        if (signature[7] != 0x0a) {
-            return false;
-        }
-
-        return true;
+    if (signature[6] != 0x3e) {
+        return false;
     }
-
+    if (signature[7] != 0x0a) {
+        return false;
+    }
+    return true;
 }
\ No newline at end of file

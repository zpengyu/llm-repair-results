diff --git a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
index 9112fa85..e8aee778 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
@@ -57,66 +54,58 @@ public class ArArchiveInputStream extends ArchiveInputStream {
      *             if the entry could not be read
      */
     public ArArchiveEntry getNextArEntry() throws IOException {
-                    // hit EOF before previous entry was complete
-                    // TODO: throw an exception instead?
-
-        if (offset == 0) {
-            final byte[] expected = ArArchiveEntry.HEADER.getBytes();
-            final byte[] realized = new byte[expected.length]; 
-            final int read = read(realized);
-            if (read != expected.length) {
-                throw new IOException("failed to read header");
+        if (offset > 0) {
+            // hit EOF before previous entry was complete
+            // TODO: throw an exception instead?
+            if (offset % 2 != 0) {
+                read();
             }
-            for (int i = 0; i < expected.length; i++) {
-                if (expected[i] != realized[i]) {
-                    throw new IOException("invalid header " + new String(realized));
+            final byte[] name = new byte[16];
+            final byte[] lastmodified = new byte[12];
+            final byte[] userid = new byte[6];
+            final byte[] groupid = new byte[6];
+            final byte[] filemode = new byte[8];
+            final byte[] length = new byte[10];
+            read(name);
+            read(lastmodified);
+            read(userid);
+            read(groupid);
+            read(filemode);
+            read(length);
+            {
+                final byte[] expected = ArArchiveEntry.TRAILER.getBytes();
+                final byte[] realized = new byte[expected.length]; 
+                final int read = read(realized);
+                if (read != expected.length) {
+                    throw new IOException("failed to read entry header");
+                }
+                for (int i = 0; i < expected.length; i++) {
+                    if (expected[i] != realized[i]) {
+                        throw new IOException("invalid entry header. not read the content?");
+                    }
                 }
             }
+            return new ArArchiveEntry(new String(name).trim(),
+                                      Long.parseLong(new String(length)
+                                                                   .trim()));
         }
-
-                // hit eof
-
+        // hit eof
         if (input.available() == 0) {
             return null;
         }
-
-        if (offset % 2 != 0) {
-            read();
+        final byte[] expected = ArArchiveEntry.HEADER.getBytes();
+        final byte[] realized = new byte[expected.length]; 
+        final int read = read(realized);
+        if (read != expected.length) {
+            throw new IOException("failed to read header");
         }
-        final byte[] name = new byte[16];
-        final byte[] lastmodified = new byte[12];
-        final byte[] userid = new byte[6];
-        final byte[] groupid = new byte[6];
-        final byte[] filemode = new byte[8];
-        final byte[] length = new byte[10];
-
-        read(name);
-        read(lastmodified);
-        read(userid);
-        read(groupid);
-        read(filemode);
-        read(length);
-
-        {
-            final byte[] expected = ArArchiveEntry.TRAILER.getBytes();
-            final byte[] realized = new byte[expected.length]; 
-            final int read = read(realized);
-            if (read != expected.length) {
-                throw new IOException("failed to read entry header");
-            }
-            for (int i = 0; i < expected.length; i++) {
-                if (expected[i] != realized[i]) {
-                    throw new IOException("invalid entry header. not read the content?");
-                }
+        for (int i = 0; i < expected.length; i++) {
+            if (expected[i] != realized[i]) {
+                throw new IOException("invalid header " + new String(realized));
             }
         }
-
-        return new ArArchiveEntry(new String(name).trim(),
-                                          Long.parseLong(new String(length)
-                                                         .trim()));
+        return getNextArEntry();
     }
-
-
     public ArchiveEntry getNextEntry() throws IOException {
         return getNextArEntry();
     }

    public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                char[] chars, Random random) {
        if (count == 0) {
            return "";
        } else if (count < 0) {
            throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
        }
        if (chars != null && chars.length == 0) {
            throw new IllegalArgumentException("The chars array must not be empty");
        }
        if (start == 0 && end == 0) {
            if (chars != null) {
                end = chars.length;
            } else {
                if (!letters && !numbers) {
                    end = Integer.MAX_VALUE;
                } else {
                    end = 'z' + 1;
                    start = ' ';
                }
            }
        }
        char[] buffer = new char[count];
        int gap = end - start;
        while (count-- != 0) {
            char ch;
            if (chars == null) {
                ch = (char) (random.nextInt(gap) + start);
            } else {
                ch = chars[random.nextInt(gap) + start];
            }
            if (letters && Character.isLetter(ch)
                    || numbers && Character.isDigit(ch)
                    || !letters && !numbers) {
                if(ch >= 56320 && ch <= 57343) {
                    if(count == 0) {
                        count++;
                    } else {
                        // low surrogate, insert high surrogate after putting it in
                        buffer[count] = ch;
                        count--;
                        buffer[count] = (char) (55296 + random.nextInt(128));
                    }
                } else if(ch >= 55296 && ch <= 56191) {
                    if(count == 0) {
                        count++;
                    } else {
                        // high surrogate, insert low surrogate before putting it in
                        buffer[count] = (char) (56320 + random.nextInt(128));
                        count--;
                        buffer[count] = ch;
                    }
                } else if(ch >= 56192 && ch <= 56319) {
                    // private high surrogate, no effing clue, so skip it
                    count++;
                } else {
                    buffer[count] = ch;
                }
            } else {
                count++;
            }
        }
        return new String(buffer);
    }
1. Can you give a example of a fix provided by z3? 
```
class FibonacciExample {
    public static void main(String args[]) {
        int n1 = 0, n2 = 1, n3, i, count = 10;
        System.out.print(n1 + " " + n2);
        for (i = 2; i < count; ++i) {
            n3 = n1 - n2;
            System.out.print(" " + n3);
            n1 = n2;
            n2 = n3;
        }
    }
}
```
```
class FibonacciExample {
    public static void main(String args[]) {
        int n1 = 0, n2 = 1, n3, i, count = 10;
        System.out.print(n1 + " " + n2);
        for (i = 2; i < count; ++i) {
            n3 = n1 + n2;
            System.out.print(" " + n3);
            n1 = n2;
            n2 = n3;
        }
    }
}
```
2. How many type of bugs have you found on the buggy classes?
```
Buggy Function: in total 23
Syntax Error: 14
Type Error: 6
Fixed Function: in total 27
Syntax Error: 0
Type Error: 0
```
3. How many possible fixes are provided by z3?
```
Buggy Function: in total 538
Syntax Error: 538
Type Error: 0
Fixed Function: in total 1696
Syntax Error: 0
Type Error: 0
```
4. How many fixes are correct?
```
Buggy Function: in total 1
Syntax Error: 1
Type Error: 0
Fixed Function: in total 0
Syntax Error: 0
Type Error: 0
```
5. Explain what are the problems in the buggy functions.
```
1. If a function is not defined in a class, it could not be used.
2. The type of a variable should be correct.
3. The right symbol should be used on the right place.
4. If there is a "else" clause, there should be a "if" clause.
5. Variable's name should be started with a letter.
```
6. Explain what are the problems in the fixed functions.
```
1. The type of a variable should be correct.
2. The right symbol should be used on the right place.
3. Variable's name should be started with a letter.
4. If there is a "else" clause, there should be a "if" clause.
5. If a function is not defined in a class, it could not be used.
6. The statement should be ended with ";".
7. The function should be ended with "{}".
8. The method should be ended with ")".
9. If a function is supposed to return some value, there should be a "return" statement.
10. Parentheses should be consistent.
```
7. Explain the limitation of your tool.
```
1. Since we are focusing on Java, the tool could only be used to find syntax errors and type errors in Java.
2. The tool could only be used to find the errors in small programs. The bugs would be covered by the error I/O.
```
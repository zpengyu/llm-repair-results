diff --git a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
index f516e584..0b85eb42 100644
--- a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
+++ b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
@@ -121,11 +121,13 @@ public class ProcessCommonJSModules implements CompilerPass {
   /**
    * Visits require, every "script" and special module.exports assignments.
    */
-  private class ProcessCommonJsModulesCallback extends
+private static class ProcessCommonJsModulesCallback extends
       AbstractPostOrderCallback {
-
+    private final ProcessCommonJsModules compilerPass;
     private int scriptNodeCount = 0;
-
+    ProcessCommonJsModulesCallback(ProcessCommonJsModules compilerPass) {
+      this.compilerPass = compilerPass;
+    }
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isCall() && n.getChildCount() == 2 &&
@@ -155,7 +154,7 @@ public class ProcessCommonJSModules implements CompilerPass {
       Node moduleRef = IR.name(moduleName).srcref(require);
       parent.replaceChild(require, moduleRef);
       Node script = getCurrentScriptNode(parent);
-      if (reportDependencies) {
+      if (compilerPass.reportDependencies) {
         t.getInput().addRequire(moduleName);
       }
       // Rewrite require("name").
@@ -177,12 +175,12 @@ public class ProcessCommonJSModules implements CompilerPass {
           .getSourceFileName()));
       script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())
           .copyInformationFromForTree(script));
-      if (reportDependencies) {
+      if (compilerPass.reportDependencies) {
         CompilerInput ci = t.getInput();
         ci.addProvide(moduleName);
         JSModule m = new JSModule(moduleName);
         m.addAndOverrideModule(ci);
-        module = m;
+        compilerPass.module = m;
       }
       script.addChildToFront(IR.exprResult(
           IR.call(IR.getprop(IR.name("goog"), IR.string("provide")),

diff --git a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
index f516e584..b84cc6e6 100644
--- a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
+++ b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
@@ -121,125 +121,129 @@ public class ProcessCommonJSModules implements CompilerPass {
   /**
    * Visits require, every "script" and special module.exports assignments.
    */
-  private class ProcessCommonJsModulesCallback extends
-      AbstractPostOrderCallback {
-
-    private int scriptNodeCount = 0;
-
-    @Override
-    public void visit(NodeTraversal t, Node n, Node parent) {
-      if (n.isCall() && n.getChildCount() == 2 &&
-          "require".equals(n.getFirstChild().getQualifiedName()) &&
-          n.getChildAtIndex(1).isString()) {
-        visitRequireCall(t, n, parent);
-      }
-
-      if (n.isScript()) {
-        scriptNodeCount++;
-        visitScript(t, n);
-      }
-
-      if (n.isGetProp() &&
-          "module.exports".equals(n.getQualifiedName())) {
-        visitModuleExports(n);
-      }
+private class ProcessCommonJsModulesCallback extends
+    AbstractPostOrderCallback {
+  /**
+   * Mapping from input names to script node counts.
+   */
+  private Map<String, Integer> inputToScriptNodeCount = Maps.newHashMap();
+  @Override
+  public void visit(NodeTraversal t, Node n, Node parent) {
+    if (n.isCall() && n.getChildCount() == 2 &&
+        "require".equals(n.getFirstChild().getQualifiedName()) &&
+        n.getChildAtIndex(1).isString()) {
+      visitRequireCall(t, n, parent);
     }
-
-    /**
-     * Visit require calls. Emit corresponding goog.require and rewrite require
-     * to be a direct reference to name of require module.
-     */
-    private void visitRequireCall(NodeTraversal t, Node require, Node parent) {
-      String moduleName = toModuleName(require.getChildAtIndex(1).getString(),
-          normalizeSourceName(t.getSourceName()));
-      Node moduleRef = IR.name(moduleName).srcref(require);
-      parent.replaceChild(require, moduleRef);
-      Node script = getCurrentScriptNode(parent);
-      if (reportDependencies) {
-        t.getInput().addRequire(moduleName);
-      }
-      // Rewrite require("name").
-      script.addChildToFront(IR.exprResult(
-          IR.call(IR.getprop(IR.name("goog"), IR.string("require")),
-              IR.string(moduleName))).copyInformationFromForTree(require));
-      compiler.reportCodeChange();
+    if (n.isScript()) {
+      scriptNodeCount++;
+      visitScript(t, n);
     }
-
-    /**
-     * Emit goog.provide and add suffix to all global vars to avoid conflicts
-     * with other modules.
-     */
-    private void visitScript(NodeTraversal t, Node script) {
-      Preconditions.checkArgument(scriptNodeCount == 1,
-          "ProcessCommonJSModules supports only one invocation per " +
-          "CompilerInput / script node");
-      String moduleName = guessCJSModuleName(normalizeSourceName(script
-          .getSourceFileName()));
-      script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())
-          .copyInformationFromForTree(script));
-      if (reportDependencies) {
-        CompilerInput ci = t.getInput();
-        ci.addProvide(moduleName);
-        JSModule m = new JSModule(moduleName);
-        m.addAndOverrideModule(ci);
-        module = m;
-      }
-      script.addChildToFront(IR.exprResult(
-          IR.call(IR.getprop(IR.name("goog"), IR.string("provide")),
-              IR.string(moduleName))).copyInformationFromForTree(script));
-
-      emitOptionalModuleExportsOverride(script, moduleName);
-
-      // Rename vars to not conflict in global scope.
-      NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(
-          moduleName));
-
-      compiler.reportCodeChange();
+    if (n.isGetProp() &&
+        "module.exports".equals(n.getQualifiedName())) {
+      visitModuleExports(n);
     }
-
-    /**
-     * Emit <code>if (moduleName.module$exports) {
-     *    moduleName = moduleName.module$export;
-     * }</code> at end of file.
-     */
-    private void emitOptionalModuleExportsOverride(Node script,
-        String moduleName) {
-
-      Node moduleExportsProp = IR.getprop(IR.name(moduleName),
-          IR.string("module$exports"));
-      script.addChildToBack(IR.ifNode(
-          moduleExportsProp,
-          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),
-              moduleExportsProp.cloneTree())))).copyInformationFromForTree(
-          script));
+  }
+  /**
+   * Visit require calls. Emit corresponding goog.require and rewrite require
+   * to be a direct reference to name of require module.
+   */
+  private void visitRequireCall(NodeTraversal t, Node require, Node parent) {
+    String moduleName = toModuleName(require.getChildAtIndex(1).getString(),
+        normalizeSourceName(t.getSourceName()));
+    Node moduleRef = IR.name(moduleName).srcref(require);
+    parent.replaceChild(require, moduleRef);
+    Node script = getCurrentScriptNode(parent);
+    if (reportDependencies) {
+      t.getInput().addRequire(moduleName);
     }
-
-    /**
-     * Rewrite module.exports to moduleName.module$exports.
-     */
-    private void visitModuleExports(Node prop) {
-      String moduleName = guessCJSModuleName(prop.getSourceFileName());
-      Node module = prop.getChildAtIndex(0);
-      module.putProp(Node.ORIGINALNAME_PROP, "module");
-      module.setString(moduleName);
-      Node exports = prop.getChildAtIndex(1);
-      exports.putProp(Node.ORIGINALNAME_PROP, "exports");
-      exports.setString("module$exports");
+    // Rewrite require("name").
+    script.addChildToFront(IR.exprResult(
+        IR.call(IR.getprop(IR.name("goog"), IR.string("require")),
+            IR.string(moduleName))).copyInformationFromForTree(require));
+    compiler.reportCodeChange();
+  }
+  /**
+   * Emit goog.provide and add suffix to all global vars to avoid conflicts
+   * with other modules.
+   */
+  private void visitScript(NodeTraversal t, Node script) {
+    String sourceName = script.getSourceFileName();
+    Preconditions.checkNotNull(sourceName,
+        "ProcessCommonJSModules supports only named input files.");
+    int scriptNodeCount = incrementScriptNodeCount(sourceName);
+    Preconditions.checkArgument(scriptNodeCount == 1,
+        "ProcessCommonJSModules supports only one invocation per " +
+        "CompilerInput / script node");
+    String moduleName = guessCJSModuleName(normalizeSourceName(sourceName));
+    script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())
+        .copyInformationFromForTree(script));
+    if (reportDependencies) {
+      CompilerInput ci = t.getInput();
+      ci.addProvide(moduleName);
+      JSModule m = new JSModule(moduleName);
+      m.addAndOverrideModule(ci);
+      module = m;
     }
-
-    /**
-     * Returns next script node in parents.
-     */
-    private Node getCurrentScriptNode(Node n) {
-      while (true) {
-        if (n.isScript()) {
-          return n;
-        }
-        n = n.getParent();
+    script.addChildToFront(IR.exprResult(
+        IR.call(IR.getprop(IR.name("goog"), IR.string("provide")),
+            IR.string(moduleName))).copyInformationFromForTree(script));
+    emitOptionalModuleExportsOverride(script, moduleName);
+    // Rename vars to not conflict in global scope.
+    NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(
+        moduleName));
+    compiler.reportCodeChange();
+  }
+  /**
+   * Emit <code>if (moduleName.module$exports) {
+   *    moduleName = moduleName.module$export;
+   * }</code> at end of file.
+   */
+  private void emitOptionalModuleExportsOverride(Node script,
+      String moduleName) {
+    Node moduleExportsProp = IR.getprop(IR.name(moduleName),
+        IR.string("module$exports"));
+    script.addChildToBack(IR.ifNode(
+        moduleExportsProp,
+        IR.block(IR.exprResult(IR.assign(IR.name(moduleName),
+            moduleExportsProp.cloneTree())))).copyInformationFromForTree(
+        script));
+  }
+  /**
+   * Rewrite module.exports to moduleName.module$exports.
+   */
+  private void visitModuleExports(Node prop) {
+    String moduleName = guessCJSModuleName(prop.getSourceFileName());
+    Node module = prop.getChildAtIndex(0);
+    module.putProp(Node.ORIGINALNAME_PROP, "module");
+    module.setString(moduleName);
+    Node exports = prop.getChildAtIndex(1);
+    exports.putProp(Node.ORIGINALNAME_PROP, "exports");
+    exports.setString("module$exports");
+  }
+  /**
+   * Returns next script node in parents.
+   */
+  private Node getCurrentScriptNode(Node n) {
+    while (true) {
+      if (n.isScript()) {
+        return n;
       }
+      n = n.getParent();
     }
   }
-
+  /**
+   * Returns the current script node count for the given filename.
+   */
+  private int incrementScriptNodeCount(String sourceName) {
+    Integer scriptNodeCount = inputToScriptNodeCount.get(sourceName);
+    if (scriptNodeCount == null) {
+      scriptNodeCount = 0;
+    }
+    scriptNodeCount++;
+    inputToScriptNodeCount.put(sourceName, scriptNodeCount);
+    return scriptNodeCount;
+  }
+}
   /**
    * Traverses a node tree and appends a suffix to all global variable names.
    */

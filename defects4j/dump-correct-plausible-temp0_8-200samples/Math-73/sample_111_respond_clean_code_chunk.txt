    public double solve(final UnivariateRealFunction f,
                        final double min, final double max, final double initial)
        throws MaxIterationsExceededException, FunctionEvaluationException {
        clearResult();
        verifySequence(min, initial, max);
        // return the initial guess if it is good enough
        double yInitial = f.value(initial);
        if (Math.abs(yInitial) <= functionValueAccuracy) {
            setResult(initial, 0);
            return result;
        }
        // return the first endpoint if it is good enough
        double yMin = f.value(min);
        if (Math.abs(yMin) <= functionValueAccuracy) {
            setResult(yMin, 0);
            return result;
        }
        // reduce interval if min and initial bracket the root
        if (yInitial * yMin < 0) {
            return solve(f, min, yMin, initial, yInitial, min, yMin);
        }
        // return the second endpoint if it is good enough
        double yMax = f.value(max);
        if (Math.abs(yMax) <= functionValueAccuracy) {
            setResult(yMax, 0);
            return result;
        }
        // reduce interval if initial and max bracket the root
        if (yInitial * yMax < 0) {
            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
        }
        // full Brent algorithm starting with provided initial guess
        double xMin = min;
        double xMax = max;
        double oldxMin = Double.POSITIVE_INFINITY;
        double oldxMax = Double.POSITIVE_INFINITY;
        int i = 0;
        while (i < maximalIterationCount) {
            double x = 0.5 * (xMin + xMax);
            if ((x > oldxMin) && (x < oldxMax)) {
                // Tighten the bracketing interval.
                double y = f.value(x);
                double yMin = f.value(xMin);
                double yMax = f.value(xMax);
                if ((yMin >= yMax) || (yMin <= y) || (y <= yMax)) {
                    oldxMin = xMin;
                    oldxMax = xMax;
                    xMin = x;
                    xMax = x;
                } else {
                    if (yMin * y > 0) {
                        xMin = xMin;
                        xMax = x;
                    } else {
                        xMin = x;
                        xMax = xMax;
                    }
                    oldxMin = xMin;
                    oldxMax = xMax;
                }
            } else {
                // We have been unable to tighten the bracketing interval.
                xMin = x;
                xMax = x;
            }
            i++;
        }
        return xMin;
    }
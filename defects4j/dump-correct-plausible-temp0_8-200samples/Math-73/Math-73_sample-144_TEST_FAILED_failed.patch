diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
index 07c667408..964a40aca 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -95,13 +95,11 @@ public class BrentSolver extends UnivariateRealSolverImpl {
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
-    public double solve(final UnivariateRealFunction f,
+   public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-
         clearResult();
         verifySequence(min, initial, max);
-
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
@@ -132,13 +126,14 @@ public class BrentSolver extends UnivariateRealSolverImpl {
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
-
-
+        // return the midpoint if the product of the function values at the endpoints is positive
+        if (yMin * yMax > 0) {
+            setResult((min + max) / 2.0, 0);
+            return result;
+        }
         // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
-
     }
-
     /**
      * Find a zero in the given interval.
      * <p>

diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
index 07c667408..abdb2ef83 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -132,13 +126,35 @@ public class BrentSolver extends UnivariateRealSolverImpl {
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
-
-
+        // check for bracketing (endpoints must be distinct)
+        if (yMin * yMax > 0) {
+            // if initial is between endpoints, use it
+            if (initial > min && initial < max) {
+                if (yInitial * yMin > 0) {
+                    min = initial;
+                    yMin = yInitial;
+                } else {
+                    max = initial;
+                    yMax = yInitial;
+                }
+            } else {
+                // otherwise, use the midpoint
+                double avg = 0.5 * (min + max);
+                yMin = f.value(min = avg);
+                if (Math.abs(yMin) <= functionValueAccuracy) {
+                    setResult(min, 0);
+                    return result;
+                }
+                yMax = f.value(max = avg);
+                if (Math.abs(yMax) <= functionValueAccuracy) {
+                    setResult(max, 0);
+                    return result;
+                }
+            }
+        }
         // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
-
     }
-
     /**
      * Find a zero in the given interval.
      * <p>

    public double solve(final UnivariateRealFunction f,
                        final double min, final double max, final double initial)
        throws MaxIterationsExceededException, FunctionEvaluationException {
        clearResult();
        verifySequence(min, initial, max);
        // return the initial guess if it is good enough
        double yInitial = f.value(initial);
        if (Math.abs(yInitial) <= functionValueAccuracy) {
            setResult(initial, 0);
            return result;
        }
        // return the first endpoint if it is good enough
        double yMin = f.value(min);
        if (Math.abs(yMin) <= functionValueAccuracy) {
            setResult(yMin, 0);
            return result;
        }
        // reduce interval if min and initial bracket the root
        if (yInitial * yMin < 0) {
            return solve(f, min, yMin, initial, yInitial, min, yMin);
        }
        // return the second endpoint if it is good enough
        double yMax = f.value(max);
        if (Math.abs(yMax) <= functionValueAccuracy) {
            setResult(yMax, 0);
            return result;
        }
        // reduce interval if initial and max bracket the root
        if (yInitial * yMax < 0) {
            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
        }
        // check for bracketing (endpoints must be distinct)
        if (yMin * yMax > 0) {
            // if initial is between endpoints, use it
            if (initial > min && initial < max) {
                if (yInitial * yMin > 0) {
                    min = initial;
                    yMin = yInitial;
                } else {
                    max = initial;
                    yMax = yInitial;
                }
            } else {
                // otherwise, use the midpoint
                double avg = 0.5 * (min + max);
                yMin = f.value(min = avg);
                if (Math.abs(yMin) <= functionValueAccuracy) {
                    setResult(min, 0);
                    return result;
                }
                yMax = f.value(max = avg);
                if (Math.abs(yMax) <= functionValueAccuracy) {
                    setResult(max, 0);
                    return result;
                }
            }
        }
        // full Brent algorithm starting with provided initial guess
        return solve(f, min, yMin, max, yMax, initial, yInitial);
    }
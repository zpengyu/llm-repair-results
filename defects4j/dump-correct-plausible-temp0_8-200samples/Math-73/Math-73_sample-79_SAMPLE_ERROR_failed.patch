diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
index 07c667408..486f75f12 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -115,30 +112,30 @@ public class BrentSolver extends UnivariateRealSolverImpl {
             setResult(yMin, 0);
             return result;
         }
-
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
         }
-
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+        // verify bracketing of initial guess
+        if (yInitial * yMin >= 0) {
+            if (yInitial * yMax >= 0) {
+                throw new IllegalArgumentException(
+                    "Function values at endpoints do not have different signs." +
+                    "  Endpoints: [" + min + "," + max + "]" +
+                    "  Values: [" + yMin + "," + yInitial + "," + yMax + "]");
+            }
+            double tmp = yInitial;
+            yInitial = yMax;
+            yMax = tmp;
+            tmp = initial;
+            initial = max;
+            max = tmp;
         }
-
-
         // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
-
     }
-
     /**
      * Find a zero in the given interval.
      * <p>

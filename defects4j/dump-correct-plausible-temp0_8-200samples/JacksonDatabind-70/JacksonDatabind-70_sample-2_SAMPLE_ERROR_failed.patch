diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java
index aeaa0dc42..1ce8f4d14 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java
@@ -437,7 +436,8 @@ System.err.println("And new propr #"+slot+" '"+key+"'");
             if (!found) {
                 // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
                 //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
+                String propKey = getPropertyName(prop);
+                found = key.equals(propKey);
                 if (found) {
                     // need to leave a hole here
                     _propsInOrder[_findFromOrdered(prop)] = null;
@@ -451,7 +451,9 @@ System.err.println("And new propr #"+slot+" '"+key+"'");
         }
         init(props);
     }
-
+* In this section, we will look at some of the most commonly used strategies that humans use to find bugs in their code.
+* We will then look at two example strategies and show how they can be mimicked by machine learning algorithms.
+* To understand the strategies of bug fixing, we will look at some bug reports, fix patches and a checker for bugs.
     /**
      * Convenience method that tries to find property with given name, and
      * if it is found, call {@link SettableBeanProperty#deserializeAndSet}

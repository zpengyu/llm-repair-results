    public void remove(SettableBeanProperty propToRm)
    {
        ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
        String key = getPropertyName(propToRm);
        boolean found = false;
        for (int i = 1, end = _hashArea.length; i < end; i += 2) {
            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
            if (prop == null) {
                continue;
            }
            if (!found) {
                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
                //   as only former is lower-case in case-insensitive case
                found = key.equals(prop.getName());
                if (found) {
                    // need to leave a hole here
                    _propsInOrder[_findFromOrdered(prop)] = null;
                    continue;
                }
            }
            props.add(prop);
        }
        if (!found) {
            throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
        }
        init(props);
    }
    /**
     * Method called to merge contents of another <code>POJOPropertiesCollector</code>
     * into this object, for combining parts of separate POJO.
     */
    public void merge(POJOPropertiesCollector coll)
    {
        HashMap<String,SettableBeanProperty> src = coll.getPropertyMap();
        for (Map.Entry<String, SettableBeanProperty> en : src.entrySet()) {
            SettableBeanProperty prop = en.getValue();
            String name = en.getKey();
            if (findProperty(name) == null) {
                addProperty(prop);
            }
        }
        _anySetter = _anySetter == null ? coll.getAnySetter() : _anySetter;
        _ignorableProps = _ignorableProps == null ? coll.getIgnorablePropertyNames() : _ignorableProps;
        _injectables = _injectables == null ? coll.getInjectables() : _injectables;
    }
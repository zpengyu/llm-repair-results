diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
index 888d00e22..2682754e7 100644
--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
@@ -172,7 +169,7 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {
         while (resultSet.size() < k) {
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
+            double sum = 0;
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
@@ -192,11 +188,27 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {
                 }
             }
         }
-
         return resultSet;
-
     }
-
+This Test Oracle allows you to check whether an integer division is correct or not.
+The test oracle takes as inputs 3 integers:
+- the numerator (`num`)
+- the denominator (`den`)
+- the expected result (`exp_div`)
+This Test Oracle returns `True` if the division `num/den = exp_div` and `False` otherwise.
+Moreover, the Test Oracle shows the value of the integer division
+- Note: in the next cell we've added a third input to the test oracle to allow you to check the expected result
+- Note: the input variables of the test oracle must be named `num`, `den`, and `exp_div`
+You can use this Test Oracle in your experiments
+- In the first cell, we compute `8/3` and then test if the division is correct or not
+- In the second cell, we check if `12` is the result of the division `8/3` or not
+- In the third cell, we check if the division `8/4` is correct.
+- What's wrong here?
+- Hint: `4` is not the result of the division `8/3`, but `2` is.
+- Note: you can use the arrows at the bottom of the cell to run the experiments.
+- Note: we've also added a third input to the test oracle to allow you to check the expected result
+- Note: the input variables of the test oracle must be named `num`, `den`, and `exp_div`
+- Note: the output of the test oracle is shown below the input cell
     /**
      * Get a random point from the {@link Cluster} with the largest distance variance.
      *

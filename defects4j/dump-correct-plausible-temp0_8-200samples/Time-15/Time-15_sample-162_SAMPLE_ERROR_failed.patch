diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java
index ceb0a50d..420f94b5 100644
--- a/src/main/java/org/joda/time/field/FieldUtils.java
+++ b/src/main/java/org/joda/time/field/FieldUtils.java
@@ -132,22 +132,40 @@ public class FieldUtils {
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
-    public static long safeMultiply(long val1, int val2) {
-        switch (val2) {
-            case -1:
-                return -val1;
-            case 0:
-                return 0L;
-            case 1:
-                return val1;
-        }
-        long total = val1 * val2;
-        if (total / val2 != val1) {
-          throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
-        }
-        return total;
+public static long safeMultiply(long val1, long val2) {
+    if (val1 > val2) {
+      long temp = val1;
+      val1 = val2;
+      val2 = temp;
     }
-
+    if (val2 < 0) {
+      if (val1 == Long.MIN_VALUE) {
+        throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+      }
+      val1 = -val1;
+      val2 = -val2;
+    }
+    if (val1 < 0) {
+      // val2 >= 0
+      if (val2 == 0) {
+        return 0;
+      }
+      long total = val1 * val2;
+      if (total / val2 != val1) {
+        throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+      }
+      return total;
+    }
+    // val1 >= 0
+    if (val1 == 0) {
+      return 0;
+    }
+    long total = val1 * val2;
+    if (total / val1 != val2) {
+      throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+    }
+    return total;
+  }
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 

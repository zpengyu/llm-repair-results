diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
index c64b2ffd..3c33d488 100644
--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
@@ -438,18 +430,22 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{
         return emptyStringNode;
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
+        if (foldedStringNode.getType() == Token.STRING) {
+          if (foldedSize > originalSize) {
+            return n;
+          }
+          arrayNode.detachChildren();
+          n.getParent().replaceChild(n, foldedStringNode);
+          reportCodeChange();
+          return foldedStringNode;
         }
+        // If the Node is not a string literal, ensure that
+        // it is coerced to a string.
+        Node replacement = new Node(Token.ADD,
+            Node.newString("").copyInformationFrom(n),
+            foldedStringNode);
+        foldedStringNode = replacement;
         arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
-          foldedStringNode = replacement;
-        }
         n.getParent().replaceChild(n, foldedStringNode);
         reportCodeChange();
         return foldedStringNode;

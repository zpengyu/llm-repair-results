diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
index c64b2ffd..4ae3d372 100644
--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
@@ -385,96 +381,98 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{
         !functionName.getString().equals("join")) {
       return n;
     }
-
       // "," is the default, it doesn't need to be explicit
-
-    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
-    List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = null;
-    int foldedSize = 0;
-    Node prev = null;
-    Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
-    while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
-        if (sb == null) {
-          sb = new StringBuilder();
+    if (arrayNode.hasChildren()) {
+      String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
+      List<Node> arrayFoldedChildren = Lists.newLinkedList();
+      StringBuilder sb = null;
+      int foldedSize = 0;
+      Node prev = null;
+      Node elem = arrayNode.getFirstChild();
+      // Merges adjacent String nodes.
+      while (elem != null) {
+        if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
+          if (sb == null) {
+            sb = new StringBuilder();
+          } else {
+            sb.append(joinString);
+          }
+          sb.append(NodeUtil.getArrayElementStringValue(elem));
         } else {
-          sb.append(joinString);
-        }
-        sb.append(NodeUtil.getArrayElementStringValue(elem));
-      } else {
-        if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
-          sb = null;
+          if (sb != null) {
+            Preconditions.checkNotNull(prev);
+            // + 2 for the quotes.
+            foldedSize += sb.length() + 2;
+            arrayFoldedChildren.add(
+                Node.newString(sb.toString()).copyInformationFrom(prev));
+            sb = null;
+          }
+          foldedSize += InlineCostEstimator.getCost(elem);
+          arrayFoldedChildren.add(elem);
         }
-        foldedSize += InlineCostEstimator.getCost(elem);
-        arrayFoldedChildren.add(elem);
+        prev = elem;
+        elem = elem.getNext();
+      }
+      if (sb != null) {
+        Preconditions.checkNotNull(prev);
+        // + 2 for the quotes.
+        foldedSize += sb.length() + 2;
+        arrayFoldedChildren.add(
+            Node.newString(sb.toString()).copyInformationFrom(prev));
+      }
+      // one for each comma.
+      foldedSize += arrayFoldedChildren.size() - 1;
+      int originalSize = InlineCostEstimator.getCost(n);
+      switch (arrayFoldedChildren.size()) {
+        case 0:
+          Node emptyStringNode = Node.newString("");
+          n.getParent().replaceChild(n, emptyStringNode);
+          reportCodeChange();
+          return emptyStringNode;
+        case 1:
+          Node foldedStringNode = arrayFoldedChildren.remove(0);
+          if (foldedSize > originalSize) {
+            return n;
+          }
+          arrayNode.detachChildren();
+          if (foldedStringNode.getType() != Token.STRING) {
+            // If the Node is not a string literal, ensure that
+            // it is coerced to a string.
+            Node replacement = new Node(Token.ADD,
+                Node.newString("").copyInformationFrom(n),
+                foldedStringNode);
+            foldedStringNode = replacement;
+          }
+          n.getParent().replaceChild(n, foldedStringNode);
+          reportCodeChange();
+          return foldedStringNode;
+        default:
+          // No folding could actually be performed.
+          if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+            return n;
+          }
+          int kJoinOverhead = "[].join()".length();
+          foldedSize += kJoinOverhead;
+          foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
+          if (foldedSize > originalSize) {
+            return n;
+          }
+          arrayNode.detachChildren();
+          for (Node node : arrayFoldedChildren) {
+            arrayNode.addChildToBack(node);
+          }
+          reportCodeChange();
+          break;
       }
-      prev = elem;
-      elem = elem.getNext();
-    }
-
-    if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
-
-    int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        n.getParent().replaceChild(n, emptyStringNode);
-        reportCodeChange();
-        return emptyStringNode;
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        n.getParent().replaceChild(n, foldedStringNode);
-        reportCodeChange();
-        return foldedStringNode;
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return n;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
-        }
-        reportCodeChange();
-        break;
+    else {
+      Node foldedStringNode = Node.newString("");
+      n.getParent().replaceChild(n, foldedStringNode);
+      reportCodeChange();
+      return foldedStringNode;
     }
-
     return n;
   }
-
   /**
    * Try to fold .substr() calls on strings
    */

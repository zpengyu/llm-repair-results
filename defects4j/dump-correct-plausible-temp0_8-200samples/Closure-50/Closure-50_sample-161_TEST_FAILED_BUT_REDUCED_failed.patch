diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
index c64b2ffd..1fe9710f 100644
--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
@@ -364,9 +364,8 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
-  private Node tryFoldArrayJoin(Node n) {
+private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
-
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
@@ -432,10 +424,7 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
-        Node emptyStringNode = Node.newString("");
-        n.getParent().replaceChild(n, emptyStringNode);
-        reportCodeChange();
-        return emptyStringNode;
+        return n;
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {

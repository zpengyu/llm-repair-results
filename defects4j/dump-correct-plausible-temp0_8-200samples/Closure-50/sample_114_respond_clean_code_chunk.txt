  private Node tryFoldArrayJoin(Node n) {
    Node callTarget = n.getFirstChild();
    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
      return n;
    }
    Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }
    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();
    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
    // "," is the default, it doesn't need to be explicit
    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    StringBuilder sb = new StringBuilder();
    Node elem = arrayNode.getFirstChild();
    while (elem != null) {
      sb.append(NodeUtil.getArrayElementStringValue(elem));
      elem = elem.getNext();
      if (elem != null) {
        sb.append(joinString);
      }
    }
    Node foldedStringNode = Node.newString(sb.toString());
    n.getParent().replaceChild(n, foldedStringNode);
    reportCodeChange();
    return foldedStringNode;
  }
diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
index 8bad30e7c..94c608289 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
@@ -131,34 +131,33 @@ public class AsPropertyTypeDeserializer extends AsArrayTypeDeserializer
     
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
-    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
-            TokenBuffer tb) throws IOException
-    {
-        // As per [JACKSON-614], may have default implementation to use
-        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
-        if (deser != null) {
-            if (tb != null) {
-                tb.writeEndObject();
-                p = tb.asParser(p);
-                // must move to point to the first token:
-                p.nextToken();
-            }
-            return deser.deserialize(p, ctxt);
-        }
-        // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
-        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
-        if (result != null) {
-            return result;
-        }
-        // or, something for which "as-property" won't work, changed into "wrapper-array" type:
-        if (p.getCurrentToken() == JsonToken.START_ARRAY) {
-            return super.deserializeTypedFromAny(p, ctxt);
+protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
+        TokenBuffer tb) throws IOException
+{
+    // As per [JACKSON-614], may have default implementation to use
+    JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
+    if (deser != null) {
+        if (tb != null) {
+            tb.writeEndObject();
+            p = tb.asParser(p);
+            // must move to point to the first token:
+            p.nextToken();
         }
-        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
-                "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
-        return null;
+        return deser.deserialize(p, ctxt);
     }
-
+    // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
+    Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
+    if (result != null) {
+        return result;
+    }
+    // or, something for which "as-property" won't work, changed into "wrapper-array" type:
+    if (p.getCurrentToken() == JsonToken.START_ARRAY) {
+        return super.deserializeTypedFromArray(p, ctxt);
+    }
+    ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
+            "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
+    return null;
+}
     /* Also need to re-route "unknown" version. Need to think
      * this through bit more in future, but for now this does address issue and has
      * no negative side effects (at least within existing unit test suite).

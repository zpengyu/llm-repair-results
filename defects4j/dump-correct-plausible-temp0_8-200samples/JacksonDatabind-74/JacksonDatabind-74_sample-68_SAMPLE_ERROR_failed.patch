diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
index 8bad30e7c..496e87ab5 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
@@ -145,20 +145,25 @@ public class AsPropertyTypeDeserializer extends AsArrayTypeDeserializer
             }
             return deser.deserialize(p, ctxt);
         }
+        if (p.getCurrentToken() == JsonToken.START_ARRAY) {
+            return super.deserializeTypedFromAny(p, ctxt);
+        }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
-        if (p.getCurrentToken() == JsonToken.START_ARRAY) {
-            return super.deserializeTypedFromAny(p, ctxt);
+        if (tb != null) {
+            tb.writeEndObject();
+            p = tb.asParser(p);
+            // must move to point to the first token:
+            p.nextToken();
+            ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
+                    "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
+            return null;
         }
-        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
-                "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
-        return null;
     }
-
     /* Also need to re-route "unknown" version. Need to think
      * this through bit more in future, but for now this does address issue and has
      * no negative side effects (at least within existing unit test suite).

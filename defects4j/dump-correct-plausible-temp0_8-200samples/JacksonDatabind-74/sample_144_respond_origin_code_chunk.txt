    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
            TokenBuffer tb) throws IOException
    {
        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
        if (deser != null) {
            if (tb != null) {
                tb.writeEndObject();
                p = tb.asParser(p);
                p.nextToken();
            }
            return deser.deserialize(p, ctxt);
        }
        // Ok: must point to START_OBJECT (or equivalent)
        JsonToken t = p.getCurrentToken();
        if (t == JsonToken.START_ARRAY) {
            return super.deserializeTypedFromAny(p, ctxt);
        }
        if (t == JsonToken.START_OBJECT) {
            t = p.nextToken();
        }
        // 27-Jun-2016, tatu: As per [databind#1318], need to handle missing property,
        //   as well as missing Type Id.
        //   May need to add some more handling for missing property case if
        //   issues arise.
        if (t != JsonToken.FIELD_NAME) {
            return super.deserializeTypedFromAny(p, ctxt);
        }
        // [databind#1697]
        String propName = p.getCurrentName();
        if (!propName.equals(_typePropertyName)) {
            return super.deserializeTypedFromAny(p, ctxt);
        }
        p.nextToken(); // value token
        String typeId = p.getText();
        p.nextToken();
        if (tb != null) {
            tb.writeFieldName(propName);
            tb.writeString(typeId);
        }
        JavaType type = ctxt.getTypeFactory().constructFromCanonical(typeId);
        return _deserializeTypedForId(p, ctxt, type);
    }


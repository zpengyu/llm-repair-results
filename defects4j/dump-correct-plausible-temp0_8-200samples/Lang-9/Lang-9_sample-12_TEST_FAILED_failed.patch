diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
index 24fa134a..6bdc93e0 100644
--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
@@ -113,42 +113,37 @@ public class FastDateParser implements DateParser, Serializable {
      * This is called from constructor and from readObject (de-serialization)
      */
     private void init() {
-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);
-
-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();
-
-        StringBuilder regex= new StringBuilder();
+        thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);
+        nameValues = new ConcurrentHashMap<Integer, KeyValue[]>();
+        StringBuilder regex = new StringBuilder();
         List<Strategy> collector = new ArrayList<Strategy>();
-
-        Matcher patternMatcher= formatPattern.matcher(pattern);
-        if(!patternMatcher.lookingAt()) {
+        Matcher patternMatcher = formatPattern.matcher(pattern);
+        if (!patternMatcher.lookingAt()) {
             throw new IllegalArgumentException("Invalid pattern");
         }
-
-        currentFormatField= patternMatcher.group();
-        Strategy currentStrategy= getStrategy(currentFormatField);
-        for(;;) {
+        currentFormatField = patternMatcher.group();
+        Strategy currentStrategy = getStrategy(currentFormatField);
+        for (; ; ) {
             patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());
-            if(!patternMatcher.lookingAt()) {
+            if (!patternMatcher.lookingAt()) {
                 nextStrategy = null;
                 break;
             }
-            String nextFormatField= patternMatcher.group();
+            String nextFormatField = patternMatcher.group();
             nextStrategy = getStrategy(nextFormatField);
-            if(currentStrategy.addRegex(this, regex)) {
+            if (currentStrategy.addRegex(this, regex)) {
                 collector.add(currentStrategy);
             }
-            currentFormatField= nextFormatField;
-            currentStrategy= nextStrategy;
+            currentFormatField = nextFormatField;
+            currentStrategy = nextStrategy;
         }
-        if(currentStrategy.addRegex(this, regex)) {
+        if (currentStrategy.addRegex(this, regex)) {
             collector.add(currentStrategy);
         }
-        currentFormatField= null;
-        strategies= collector.toArray(new Strategy[collector.size()]);
-        parsePattern= Pattern.compile(regex.toString());
+        currentFormatField = null;
+        strategies = collector.toArray(new Strategy[collector.size()]);
+        parsePattern = Pattern.compile(regex.toString());
     }
-
     // Accessors
     //-----------------------------------------------------------------------
     /* (non-Javadoc)

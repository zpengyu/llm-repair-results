diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
index 24fa134a..644aa5dc 100644
--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
@@ -124,9 +121,8 @@ public class FastDateParser implements DateParser, Serializable {
         if(!patternMatcher.lookingAt()) {
             throw new IllegalArgumentException("Invalid pattern");
         }
-
         currentFormatField= patternMatcher.group();
-        Strategy currentStrategy= getStrategy(currentFormatField);
+        Strategy currentStrategy= getStrategy(currentFormatField, null);
         for(;;) {
             patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());
             if(!patternMatcher.lookingAt()) {
@@ -134,7 +130,7 @@ public class FastDateParser implements DateParser, Serializable {
                 break;
             }
             String nextFormatField= patternMatcher.group();
-            nextStrategy = getStrategy(nextFormatField);
+            nextStrategy = getStrategy(nextFormatField, currentStrategy);
             if(currentStrategy.addRegex(this, regex)) {
                 collector.add(currentStrategy);
             }
@@ -148,7 +144,35 @@ public class FastDateParser implements DateParser, Serializable {
         strategies= collector.toArray(new Strategy[collector.size()]);
         parsePattern= Pattern.compile(regex.toString());
     }
-
+    protected Strategy getStrategy(String formatField, Strategy nextStrategy) {
+        switch (formatField.charAt(0)) {
+        case '\'':
+            return new CopyQuotedStrategy(formatField);
+        case 'D':
+            return DAY_OF_YEAR_STRATEGY;
+        case 'E':
+            return getLocaleSpecificStrategy(Calendar.DAY_OF_WEEK, formatField);
+        case 'M':
+            return formatField.length() >= 3 ? getLocaleSpecificStrategy(Calendar.MONTH, formatField) : NUMBER_MONTH_STRATEGY;
+        case 'y':
+            return formatField.length() > 2 ? LITERAL_YEAR_STRATEGY : ABBREVIATED_YEAR_STRATEGY;
+        case 'H':
+        case 'h':
+        case 'm':
+        case 's':
+        case 'S':
+        case 'a':
+            return NUMBER_STRATEGY;
+        case 'Z':
+        case 'z':
+            if (nextStrategy == null) {
+                throw new IllegalArgumentException("Format '" + formatField + "' not valid");
+            }
+            return nextStrategy == NUMBER_MONTH_STRATEGY ? new TimeZoneStrategy(formatField) : new BasicTimeZoneStrategy(formatField);
+        default:
+            throw new IllegalArgumentException("Format '" + formatField + "' not valid");
+        }
+    }
     // Accessors
     //-----------------------------------------------------------------------
     /* (non-Javadoc)

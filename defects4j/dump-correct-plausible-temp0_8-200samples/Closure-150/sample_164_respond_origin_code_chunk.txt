    @Override public void visit(NodeTraversal t, Node n, Node parent) {
      if (n == scope.getRootNode()) return;

      if (n.getType() == Token.LP && parent == scope.getRootNode()) {
        handleFunctionInputs(parent);
        return;
      }

      attachLiteralTypes(n);
      switch (n.getType()) {
        case Token.FUNCTION:
          if (parent.getType() == Token.NAME) {
            return;
          }
          defineDeclaredFunction(n, parent);
          break;
        case Token.CATCH:
          defineCatch(n, parent);
          break;
        case Token.VAR:
          defineVar(n, parent);
          break;
        case Token.IF:
          defineIf(n, parent);
          break;
      }
    }

  private void defineIf(Node n, Node parent) {
    defineVar(n, parent);
  }

  private void defineVar(Node n, Node parent) {
    // TODO Auto-generated method stub
  }

  private void defineCatch(Node n, Node parent) {
    // TODO Auto-generated method stub
  }

  private void defineDeclaredFunction(Node n, Node parent) {
    // TODO Auto-generated method stub
  }

  private void handleFunctionInputs(Node parent) {
    // TODO Auto-generated method stub
  }

  private void attachLiteralTypes(Node n) {
    // TODO Auto-generated method stub
  }
  

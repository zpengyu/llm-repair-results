diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
index 1818931d..d4acb83a 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
@@ -80,29 +80,29 @@ public abstract class CharSequenceTranslator {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
+                char c1 = input.charAt(pos);
+                out.write(c1);
+                pos++;
+                if (Character.isHighSurrogate(c1) && pos < len) {
+                    char c2 = input.charAt(pos);
+                    if (Character.isLowSurrogate(c2)) {
+                        out.write(c2);
                         pos++;
                     }
                 }
-                pos--;
+            } else {
+                // contract with translators is that they have to understand codepoints
+                // and they just took care of a surrogate pair
+                for (int pt = 0; pt < consumed; pt++) {
+                    pos += Character.charCount(Character.codePointAt(input, pos));
+                }
             }
-            pos++;
         }
     }
-
     /**
      * Helper method to create a merger of this translator with another set of 
      * translators. Useful in customizing the standard functionality.

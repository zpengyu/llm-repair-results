diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java
index 50f6bac0..36137723 100644
--- a/src/com/google/javascript/jscomp/InlineFunctions.java
+++ b/src/com/google/javascript/jscomp/InlineFunctions.java
@@ -773,19 +773,14 @@ class InlineFunctions implements SpecializationAwareCompilerPass {
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
-    // For each referenced function, add a new reference
-    if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    if (node.isCall() && node.getFirstChild().isName()) {
+      changed.add(node.getFirstChild().getString());
+    } else {
+      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
+        findCalledFunctions(c, changed);
       }
     }
-
-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
-      findCalledFunctions(c, changed);
-    }
   }
-
   /**
    * For any call-site that needs it, prepare the call-site for inlining
    * by rewriting the containing expression.

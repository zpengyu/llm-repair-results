diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java
index 50f6bac0..cd45ef65 100644
--- a/src/com/google/javascript/jscomp/InlineFunctions.java
+++ b/src/com/google/javascript/jscomp/InlineFunctions.java
@@ -770,22 +770,20 @@ class InlineFunctions implements SpecializationAwareCompilerPass {
   /**
    * @see #findCalledFunctions(Node)
    */
-  private void findCalledFunctions(
-      Node node, Set<String> changed) {
-    Preconditions.checkArgument(changed != null);
-    // For each referenced function, add a new reference
-    if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
-      }
-    }
-
-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
-      findCalledFunctions(c, changed);
+private void findCalledFunctions(
+    Node node, Set<String> changed) {
+  Preconditions.checkArgument(changed != null);
+  // For each referenced function, add a new reference
+  if (NodeUtil.isFunctionCall(node)) {
+    Node child = node.getFirstChild();
+    if (child.getType() == Token.NAME) {
+      changed.add(child.getString());
     }
   }
-
+  for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
+    findCalledFunctions(c, changed);
+  }
+}
   /**
    * For any call-site that needs it, prepare the call-site for inlining
    * by rewriting the containing expression.

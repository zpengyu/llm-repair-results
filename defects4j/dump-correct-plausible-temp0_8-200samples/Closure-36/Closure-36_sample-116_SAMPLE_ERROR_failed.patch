diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java
index 4f045430..2fec75dd 100644
--- a/src/com/google/javascript/jscomp/InlineVariables.java
+++ b/src/com/google/javascript/jscomp/InlineVariables.java
@@ -525,15 +525,6 @@ class InlineVariables implements CompilerPass {
           || !isValidReference(reference)) {
         return false;
       }
-
-      // If the value is read more than once, skip it.
-      // VAR declarations and EXPR_RESULT don't need the value, but other
-      // ASSIGN expressions parents do.
-      if (declaration != initialization &&
-          !initialization.getGrandparent().isExprResult()) {
-        return false;
-      }
-
       // Be very conservative and do no cross control structures or
       // scope boundaries
       if (declaration.getBasicBlock() != initialization.getBasicBlock()
@@ -569,12 +558,25 @@ class InlineVariables implements CompilerPass {
           if (relationship != null) {
             return false;
           }
-
           // issue 668: Don't inline singleton getter methods
           // calls as this confused class removing logic.
+          boolean isSingletonGetter = convention.isSingletonGetter(callNode);
+          if (isSingletonGetter) {
+            return false;
+          }
+          // Don't inline ES6 class constructors.
+          // If a constructor is not inlinable, it could be used as a
+          // pseudo-function-name for a call (e.g. `new Ctor()`), which the
+          // inliner doesn't support.
+          // NOTE: this check is here rather than in isValidDeclaration() or
+          // isValidInitialization() because call removal can create
+          // R-value references, which should be inlinable.
+          boolean isClassConstructor = convention.isClassConstructor(callNode);
+          if (isClassConstructor) {
+            return false;
+          }
         }
       }
-
       return canMoveAggressively(value) ||
           canMoveModerately(initialization, reference);
     }

diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java
index 4f045430..65993d12 100644
--- a/src/com/google/javascript/jscomp/InlineVariables.java
+++ b/src/com/google/javascript/jscomp/InlineVariables.java
@@ -516,24 +516,6 @@ class InlineVariables implements CompilerPass {
      * @return true if the provided reference and declaration can be safely
      *         inlined according to our criteria
      */
-    private boolean canInline(
-        Reference declaration,
-        Reference initialization,
-        Reference reference) {
-      if (!isValidDeclaration(declaration)
-          || !isValidInitialization(initialization)
-          || !isValidReference(reference)) {
-        return false;
-      }
-
-      // If the value is read more than once, skip it.
-      // VAR declarations and EXPR_RESULT don't need the value, but other
-      // ASSIGN expressions parents do.
-      if (declaration != initialization &&
-          !initialization.getGrandparent().isExprResult()) {
-        return false;
-      }
-
       // Be very conservative and do no cross control structures or
       // scope boundaries
       if (declaration.getBasicBlock() != initialization.getBasicBlock()
@@ -569,16 +549,13 @@ class InlineVariables implements CompilerPass {
           if (relationship != null) {
             return false;
           }
-
           // issue 668: Don't inline singleton getter methods
           // calls as this confused class removing logic.
+          if (convention.isSingletonGetter(callNode)) {
+            return false;
+          }
         }
       }
-
-      return canMoveAggressively(value) ||
-          canMoveModerately(initialization, reference);
-    }
-
     /**
      * If the value is a literal, we can cross more boundaries to inline it.
      */

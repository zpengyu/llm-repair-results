diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java
index 4f045430..6424a882 100644
--- a/src/com/google/javascript/jscomp/InlineVariables.java
+++ b/src/com/google/javascript/jscomp/InlineVariables.java
@@ -552,29 +549,20 @@ class InlineVariables implements CompilerPass {
       // is ok.
       Node value = initialization.getAssignedValue();
       Preconditions.checkState(value != null);
-      if (value.isGetProp()
-          && reference.getParent().isCall()
-          && reference.getParent().getFirstChild() == reference.getNode()) {
-        return false;
-      }
-
-      if (value.isFunction()) {
-        Node callNode = reference.getParent();
-        if (reference.getParent().isCall()) {
-          CodingConvention convention = compiler.getCodingConvention();
-          // Bug 2388531: Don't inline subclass definitions into class defining
-          // calls as this confused class removing logic.
-          SubclassRelationship relationship =
-              convention.getClassesDefinedByCall(callNode);
-          if (relationship != null) {
-            return false;
-          }
-
-          // issue 668: Don't inline singleton getter methods
-          // calls as this confused class removing logic.
+      if (reference.getParent().isCall()) {
+        if (value.isGetProp()
+            && reference.getParent().getFirstChild() == reference.getNode()) {
+          return false;
+        }
+        CodingConvention convention = compiler.getCodingConvention();
+        // Bug 2388531: Don't inline subclass definitions into class defining
+        // calls as this confused class removing logic.
+        SubclassRelationship relationship =
+            convention.getClassesDefinedByCall(reference.getParent());
+        if (relationship != null) {
+          return false;
         }
       }
-
       return canMoveAggressively(value) ||
           canMoveModerately(initialization, reference);
     }

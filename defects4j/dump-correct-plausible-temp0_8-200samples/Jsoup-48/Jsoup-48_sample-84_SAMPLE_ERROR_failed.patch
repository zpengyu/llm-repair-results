diff --git a/src/main/java/org/jsoup/helper/HttpConnection.java b/src/main/java/org/jsoup/helper/HttpConnection.java
index 0b7fa7e..8a38b9a 100644
--- a/src/main/java/org/jsoup/helper/HttpConnection.java
+++ b/src/main/java/org/jsoup/helper/HttpConnection.java
@@ -750,32 +750,41 @@ public class HttpConnection implements Connection {
             return headers;
         }
 
-        void processResponseHeaders(Map<String, List<String>> resHeaders) {
-            for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {
-                String name = entry.getKey();
-                if (name == null)
-                    continue; // http/1.1 line
-
-                List<String> values = entry.getValue();
-                if (name.equalsIgnoreCase("Set-Cookie")) {
-                    for (String value : values) {
-                        if (value == null)
-                            continue;
-                        TokenQueue cd = new TokenQueue(value);
-                        String cookieName = cd.chompTo("=").trim();
-                        String cookieVal = cd.consumeTo(";").trim();
-                        // ignores path, date, domain, validateTLSCertificates et al. req'd?
-                        // name not blank, value not null
-                        if (cookieName.length() > 0)
-                            cookie(cookieName, cookieVal);
-                    }
-                } else { // combine same header names with comma: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2
-                    if (!values.isEmpty())
-                        header(name, values.get(0));
-                }
+void processResponseHeaders(Map<String, List<String>> resHeaders) {
+    for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {
+        String name = entry.getKey();
+        if (name == null)
+            continue; // http/1.1 line
+        List<String> values = entry.getValue();
+        if (name.equalsIgnoreCase("Set-Cookie")) {
+            for (String value : values) {
+                if (value == null)
+                    continue;
+                TokenQueue cd = new TokenQueue(value);
+                String cookieName = cd.chompTo("=").trim();
+                String cookieVal = cd.consumeTo(";").trim();
+                // ignores path, date, domain, validateTLSCertificates et al. req'd?
+                // name not blank, value not null
+                if (cookieName.length() > 0)
+                    cookie(cookieName, cookieVal);
             }
+        } else { // combine same header names with comma: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2
+            if (!values.isEmpty())
+                header(name, combine(values, ", "));
         }
-
+    }
+}
+private static String combine(List<String> values, String seperator) {
+    Validate.notEmpty(values);
+    Validate.notNull(seperator);
+    StringBuilder stringBuilder = new StringBuilder();
+    for (String s: values) {
+        if (stringBuilder.length() > 0)
+            stringBuilder.append(seperator);
+        stringBuilder.append(s);
+    }
+    return stringBuilder.toString();
+}
         private static String setOutputContentType(final Connection.Request req) {
             // multipart mode, for files. add the header if we see something with an inputstream, and return a non-null boundary
             boolean needsMulti = false;

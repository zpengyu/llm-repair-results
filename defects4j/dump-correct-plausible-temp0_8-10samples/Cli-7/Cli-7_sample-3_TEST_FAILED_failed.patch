diff --git a/src/java/org/apache/commons/cli2/builder/PatternBuilder.java b/src/java/org/apache/commons/cli2/builder/PatternBuilder.java
index f02601e..a423774 100644
--- a/src/java/org/apache/commons/cli2/builder/PatternBuilder.java
+++ b/src/java/org/apache/commons/cli2/builder/PatternBuilder.java
@@ -199,4 +180,132 @@ public class PatternBuilder {
                 return null;
         }
     }
+    /**
+     * Defines a pattern for a primitive double.
+     *
+     * @param required whether the argument is required
+     * @return this builder
+     */
+    public PatternBuilder withDouble(boolean required) {
+        withPattern(required ? "!#" : "#");
+        return this;
+    }
+    /**
+     * Defines a pattern for a primitive float.
+     *
+     * @param required whether the argument is required
+     * @return this builder
+     */
+    public PatternBuilder withFloat(boolean required) {
+        withPattern(required ? "!#" : "#");
+        return this;
+    }
+    /**
+     * Defines a pattern for a primitive long.
+     *
+     * @param required whether the argument is required
+     * @return this builder
+     */
+    public PatternBuilder withLong(boolean required) {
+        withPattern(required ? "!#" : "#");
+        return this;
+    }
+    /**
+     * Defines a pattern for a primitive int.
+     *
+     * @param required whether the argument is required
+     * @return this builder
+     */
+    public PatternBuilder withInt(boolean required) {
+        withPattern(required ? "!#" : "#");
+        return this;
+    }
+    /**
+     * Defines a pattern for a primitive short.
+     *
+     * @param required whether the argument is required
+     * @return this builder
+     */
+    public PatternBuilder withShort(boolean required) {
+        withPattern(required ? "!#" : "#");
+        return this;
+    }
+    /**
+     * Defines a pattern for a primitive byte.
+     *
+     * @param required whether the argument is required
+     * @return this builder
+     */
+    public PatternBuilder withByte(boolean required) {
+        withPattern(required ? "!#" : "#");
+        return this;
+    }
+    /**
+     * Defines a pattern for a primitive char.
+     *
+     * @param required whether the argument is required
+     * @return this builder
+     */
+    public PatternBuilder withChar(boolean required) {
+        withPattern(required ? "!#" : "#");
+        return this;
+    }
+    /**
+     * Defines a pattern for a primitive boolean.
+     *
+     * @param required whether the argument is required
+     * @return this builder
+     */
+    public PatternBuilder withBoolean(boolean required) {
+        withPattern(required ? "!#" : "#");
+        return this;
+    }
+    /**
+     * Defines a pattern for a string.
+     *
+     * @param required whether the argument is required
+     * @return this builder
+     */
+    public PatternBuilder withString(boolean required) {
+        withPattern(required ? "!:*" : "*");
+        return this;
+    }
+    /**
+     * Defines a pattern for an object.
+     *
+     * @param required whether the argument is required
+     * @return this builder
+     */
+    public PatternBuilder withObject(boolean required) {
+        withPattern(required ? "!+" : "+");
+        return this;
+    }
+    /**
+     * Defines a pattern for a file.
+     *
+     * @param required whether the argument is required
+     * @param existing whether the argument must exist
+     * @param isDirectory whether the argument is a directory
+     * @return this builder
+     */
+    public PatternBuilder withFile(boolean required, boolean existing, boolean isDirectory) {
+        withPattern(required ?
+                    (existing ?
+                     (isDirectory ? "!<*" : "<*") :
+                     (isDirectory ? ">*" : "*")) :
+                    (existing ?
+                     (isDirectory ? "<*" : "<*") :
+                     (isDirectory ? ">*" : "*")));
+        return this;
+    }
+    /**
+     * Defines a pattern for a url.
+     *
+     * @param required whether the argument is required
+     * @return this builder
+     */
+    public PatternBuilder withUrl(boolean required) {
+        withPattern(required ? "!/*" : "/*");
+        return this;
+    }
 }
\ No newline at end of file

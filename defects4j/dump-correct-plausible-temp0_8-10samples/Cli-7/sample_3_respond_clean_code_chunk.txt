public class PatternBuilder {
    private final GroupBuilder gbuilder;
    private final DefaultOptionBuilder obuilder;
    private final ArgumentBuilder abuilder;
    /**
     * Creates a new PatternBuilder
     */
    public PatternBuilder() {
        this(
            new GroupBuilder(),
            new DefaultOptionBuilder(),
            new ArgumentBuilder());
    }
    /**
     * Creates a new PatternBuilder
     * @param gbuilder the GroupBuilder to use
     * @param obuilder the DefaultOptionBuilder to use
     * @param abuilder the ArgumentBuilder to use
     */
    public PatternBuilder(
        final GroupBuilder gbuilder,
        final DefaultOptionBuilder obuilder,
        final ArgumentBuilder abuilder) {
        this.gbuilder = gbuilder;
        this.obuilder = obuilder;
        this.abuilder = abuilder;
    }
    private final Set options = new HashSet();
    /**
     * Creates a new Option instance.
     * @return a new Option instance
     */
    public Option create() {
        final Option option;
        if (options.size() == 1) {
            option = (Option)options.iterator().next();
        }
        else {
            gbuilder.reset();
            for (final Iterator i = options.iterator(); i.hasNext();) {
                gbuilder.withOption((Option)i.next());
            }
            option = gbuilder.create();
        }
        reset();
        return option;
    }
    /**
     * Resets this builder
     */
    public PatternBuilder reset() {
        options.clear();
        return this;
    }
    private void createOption(
        final char type,
        final boolean required,
        final char opt) {
        final Argument argument;
        if (type != ' ') {
            abuilder.reset();
            abuilder.withValidator(validator(type));
            if (required) {
                abuilder.withMinimum(1);
            }
            if (type != '*') {
                abuilder.withMaximum(1);
            }
            argument = abuilder.create();
        }
        else {
            argument = null;
        }
        obuilder.reset();
        obuilder.withArgument(argument);
        obuilder.withShortName(String.valueOf(opt));
        obuilder.withRequired(required);
        options.add(obuilder.create());
    }
    /**
     * Builds an Option using a pattern string.
     * @param pattern the pattern to build from
     */
    public void withPattern(final String pattern) {
        int sz = pattern.length();
        char opt = ' ';
        char ch = ' ';
        char type = ' ';
        boolean required = false;
        for (int i = 0; i < sz; i++) {
            ch = pattern.charAt(i);
            switch (ch) {
                case '!' :
                    required = true;
                    break;
                case '@' :
                case ':' :
                case '%' :
                case '+' :
                case '#' :
                case '<' :
                case '>' :
                case '*' :
                case '/' :
                    type = ch;
                    break;
                default :
                    if (opt != ' ') {
                        createOption(type, required, opt);
                        required = false;
                        type = ' ';
                    }
                    opt = ch;
            }
        }
        if (opt != ' ') {
            createOption(type, required, opt);
        }
    }
    private static Validator validator(final char c) {
        switch (c) {
            case '@' :
                final ClassValidator classv = new ClassValidator();
                classv.setInstance(true);
                return classv;
            case '+' :
                final ClassValidator instancev = new ClassValidator();
                return instancev;
                //case ':':// no validator needed for a string
            case '%' :
                return NumberValidator.getNumberInstance();
            case '#' :
                return DateValidator.getDateInstance();
            case '<' :
                final FileValidator existingv = new FileValidator();
                existingv.setExisting(true);
                existingv.setFile(true);
                return existingv;
            case '>' :
            case '*' :
                return new FileValidator();
            case '/' :
                return new UrlValidator();
            default :
                return null;
        }
    }
    /**
     * Defines a pattern for a primitive double.
     *
     * @param required whether the argument is required
     * @return this builder
     */
    public PatternBuilder withDouble(boolean required) {
        withPattern(required ? "!#" : "#");
        return this;
    }
    /**
     * Defines a pattern for a primitive float.
     *
     * @param required whether the argument is required
     * @return this builder
     */
    public PatternBuilder withFloat(boolean required) {
        withPattern(required ? "!#" : "#");
        return this;
    }
    /**
     * Defines a pattern for a primitive long.
     *
     * @param required whether the argument is required
     * @return this builder
     */
    public PatternBuilder withLong(boolean required) {
        withPattern(required ? "!#" : "#");
        return this;
    }
    /**
     * Defines a pattern for a primitive int.
     *
     * @param required whether the argument is required
     * @return this builder
     */
    public PatternBuilder withInt(boolean required) {
        withPattern(required ? "!#" : "#");
        return this;
    }
    /**
     * Defines a pattern for a primitive short.
     *
     * @param required whether the argument is required
     * @return this builder
     */
    public PatternBuilder withShort(boolean required) {
        withPattern(required ? "!#" : "#");
        return this;
    }
    /**
     * Defines a pattern for a primitive byte.
     *
     * @param required whether the argument is required
     * @return this builder
     */
    public PatternBuilder withByte(boolean required) {
        withPattern(required ? "!#" : "#");
        return this;
    }
    /**
     * Defines a pattern for a primitive char.
     *
     * @param required whether the argument is required
     * @return this builder
     */
    public PatternBuilder withChar(boolean required) {
        withPattern(required ? "!#" : "#");
        return this;
    }
    /**
     * Defines a pattern for a primitive boolean.
     *
     * @param required whether the argument is required
     * @return this builder
     */
    public PatternBuilder withBoolean(boolean required) {
        withPattern(required ? "!#" : "#");
        return this;
    }
    /**
     * Defines a pattern for a string.
     *
     * @param required whether the argument is required
     * @return this builder
     */
    public PatternBuilder withString(boolean required) {
        withPattern(required ? "!:*" : "*");
        return this;
    }
    /**
     * Defines a pattern for an object.
     *
     * @param required whether the argument is required
     * @return this builder
     */
    public PatternBuilder withObject(boolean required) {
        withPattern(required ? "!+" : "+");
        return this;
    }
    /**
     * Defines a pattern for a file.
     *
     * @param required whether the argument is required
     * @param existing whether the argument must exist
     * @param isDirectory whether the argument is a directory
     * @return this builder
     */
    public PatternBuilder withFile(boolean required, boolean existing, boolean isDirectory) {
        withPattern(required ?
                    (existing ?
                     (isDirectory ? "!<*" : "<*") :
                     (isDirectory ? ">*" : "*")) :
                    (existing ?
                     (isDirectory ? "<*" : "<*") :
                     (isDirectory ? ">*" : "*")));
        return this;
    }
    /**
     * Defines a pattern for a url.
     *
     * @param required whether the argument is required
     * @return this builder
     */
    public PatternBuilder withUrl(boolean required) {
        withPattern(required ? "!/*" : "/*");
        return this;
    }
}
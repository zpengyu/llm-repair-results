diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index 6fa773f53..985306ae9 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -74,10 +65,19 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
      * @param returnTypeGenericMetadata The metadata to use to create the new mock.
      * @return The mock
      */
-
-
-
-
+    private Object createDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata, InvocationOnMock invocation) {
+        CreationSettings settings = new CreationSettings()
+                .invocationListeners(new MockitoListenersImpl().get())
+                .defaultAnswer(this)
+                .name(invocation.getMethod().getName())
+                .typeToMock(returnTypeGenericMetadata.rawType())
+                .serializableMode(SerializableMode.ACROSS_CLASSLOADERS);
+        if (returnTypeGenericMetadata.isParameterized()) {
+            settings.extraInterfaces(returnTypeGenericMetadata.typeParameters());
+        }
+        // mock creation will call answer on the first method call
+        return new MockMakerImpl().createMock(settings, null);
+    }
     private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {
         Class<?> clz = invocation.getMethod().getReturnType();
         final Object mock = org.mockito.Mockito.mock(clz, this);

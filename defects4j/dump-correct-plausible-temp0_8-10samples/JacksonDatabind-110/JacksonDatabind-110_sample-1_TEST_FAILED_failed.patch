diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
index ddadb9ea8..1bcf416f1 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
@@ -37,15 +32,14 @@ public abstract class JavaUtilCollectionsDeserializers
     private final static Class<?> CLASS_SINGLETON_SET;
     private final static Class<?> CLASS_SINGLETON_LIST;
     private final static Class<?> CLASS_SINGLETON_MAP;
-
     private final static Class<?> CLASS_UNMODIFIABLE_SET;
     private final static Class<?> CLASS_UNMODIFIABLE_LIST;
-
+    private final static Class<?> CLASS_UNMODIFIABLE_LIST_ALT;
     /* 02-Mar-2019, tatu: for [databind#2265], need to consider possible alternate type...
      *    which we essentially coerce into the other one
      */
     private final static Class<?> CLASS_UNMODIFIABLE_MAP;
-
+    private final static Class<?> CLASS_UNMODIFIABLE_MAP_ALT;
     static {
         Set<?> set = Collections.singleton(Boolean.TRUE);
         CLASS_SINGLETON_SET = set.getClass();
@@ -55,12 +48,15 @@ public abstract class JavaUtilCollectionsDeserializers
         CLASS_SINGLETON_LIST = list.getClass();
         CLASS_UNMODIFIABLE_LIST = Collections.unmodifiableList(list).getClass();
         // for [databind#2265]
-
+        list = Collections.emptyList();
+        CLASS_UNMODIFIABLE_LIST_ALT = Collections.unmodifiableList(list).getClass();
         Map<?,?> map = Collections.singletonMap("a", "b");
         CLASS_SINGLETON_MAP = map.getClass();
         CLASS_UNMODIFIABLE_MAP = Collections.unmodifiableMap(map).getClass();
+        // for [databind#2265]
+        map = Collections.emptyMap();
+        CLASS_UNMODIFIABLE_MAP_ALT = Collections.unmodifiableMap(map).getClass();
     }
-
     public static JsonDeserializer<?> findForCollection(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
@@ -79,6 +74,8 @@ public abstract class JavaUtilCollectionsDeserializers
             conv = converter(TYPE_UNMODIFIABLE_LIST, type, List.class);
         } else if (type.hasRawClass(CLASS_UNMODIFIABLE_SET)) {
             conv = converter(TYPE_UNMODIFIABLE_SET, type, Set.class);
+        } else if (type.hasRawClass(CLASS_UNMODIFIABLE_LIST_ALT)) {
+            conv = converter(TYPE_UNMODIFIABLE_LIST, type, List.class);
         } else {
             return null;
         }
@@ -96,6 +91,8 @@ public abstract class JavaUtilCollectionsDeserializers
             conv = converter(TYPE_SINGLETON_MAP, type, Map.class);
         } else if (type.hasRawClass(CLASS_UNMODIFIABLE_MAP)) {
             conv = converter(TYPE_UNMODIFIABLE_MAP, type, Map.class);
+        } else if (type.hasRawClass(CLASS_UNMODIFIABLE_MAP_ALT)) {
+            conv = converter(TYPE_UNMODIFIABLE_MAP, type, Map.class);
         } else {
             return null;
         }

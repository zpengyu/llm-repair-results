diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
index cc45a8f..e21ee14 100644
--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
@@ -42,18 +42,9 @@ public abstract class CoreOperationCompare extends CoreOperation {
     /**
      * Compares two values
      */
-    protected boolean equal(
-        EvalContext context,
-        Expression left,
-        Expression right) 
-    {
+protected boolean equal(EvalContext context, Expression left, Expression right) {
         Object l = left.compute(context);
         Object r = right.compute(context);
-
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
@@ -79,9 +66,32 @@ public abstract class CoreOperationCompare extends CoreOperation {
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
+        if (((l != null) && (l.getClass().isArray())) ||
+                ((r != null) && (r.getClass().isArray()))) {
+            if (l == null) {
+                return r.getClass().getComponentType().isInstance(new Object[0]);
+            }
+            if (r == null) {
+                return l.getClass().getComponentType().isInstance(new Object[0]);
+            }
+            if (!l.getClass().isAssignableFrom(r.getClass()) && !r.getClass().isAssignableFrom(l.getClass())) {
+                throw new JXPathException("Can't compare arrays of different types: " +
+                        l.getClass().getName() + " and " + r.getClass().getName());
+            }
+            Object[] array1 = (Object[]) l;
+            Object[] array2 = (Object[]) r;
+            if (array1.length != array2.length) {
+                return false;
+            }
+            for (int i = 0; i < array1.length; i++) {
+                if (!equal(array1[i], array2[i])) {
+                    return false;
+                }
+            }
+            return true;
+        }
         return equal(l, r);
     }
-
     protected boolean contains(Iterator it, Object value) {
         while (it.hasNext()) {
             Object element = it.next();

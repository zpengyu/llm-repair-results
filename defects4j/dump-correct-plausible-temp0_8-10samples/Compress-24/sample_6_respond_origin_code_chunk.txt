    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
        long    result = 0;
        int     end = offset + length;
        int     start = offset;

        if (length < 2){
            throw new IllegalArgumentException("Length "+length+" must be at least 2");
        }

        if (buffer[start] == 0) {
            return 0L;
        }

        // Skip leading spaces
        while (start < end){
            if (buffer[start] == ' '){
                start++;
            } else {
                break;
            }
        }

        // Trim all trailing NULs and spaces.
        // The ustar and POSIX tar specs require a trailing NUL or
        // space but some implementations use the extra digit for big
        // sizes/uids/gids ...
        byte trailer = buffer[end - 1];
        if (trailer == 0 || trailer == ' '){
            end--;
        } else {
            throw new IllegalArgumentException(
                    exceptionMessage(buffer, offset, length, end-1, trailer));
        }
        trailer = buffer[end - 1];
        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
            end--;
            trailer = buffer[end - 1];
        }

        for ( ;start < end; start++) {
            final byte currentByte = buffer[start];
            // CheckStyle:MagicNumber OFF
            if (currentByte < '0' || currentByte > '7'){
                throw new IllegalArgumentException(
                        exceptionMessage(buffer, offset, length, start, currentByte));
            }
            result = (result << 3) + (currentByte - '0'); // convert from ASCII
            // CheckStyle:MagicNumber ON
        }

        return result;
    }

    private static String exceptionMessage(final byte[] buffer, final int offset, final int length, final int illegalByte, final byte value) {
        final StringBuilder msg = new StringBuilder("Illegal byte ");
        if ((value & 0x80) == 0) {
            msg.append("0x");
            if (value < 0x10) {
                msg.append("0");
            }
            msg.append(Integer.toHexString(value));
        } else {
            msg.append("'").append((char) value).append("'");
        }
        msg.append(" at offset ").append(illegalByte-offset);
        msg.append(" in '");
        for (int i = offset; i < offset + length; ++i) {
            final byte b = buffer[i];
            if (b >= 32 && b < 127) {
                msg.append((char) b);
            } else {
                msg.append("0x");
                if (b < 0x10) {
                    msg.append("0");
                }
                msg.append(Integer.toHexString(b));
            }
        }
        msg.append("'");
        return msg.toString();
    }

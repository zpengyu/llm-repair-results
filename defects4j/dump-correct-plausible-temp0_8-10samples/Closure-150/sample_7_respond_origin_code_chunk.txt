    @Override public void visit(NodeTraversal t, Node n, Node parent) {
      if (n == scope.getRootNode()) return;

      if (n.getType() == Token.LP && parent == scope.getRootNode()) {
        handleFunctionInputs(parent);
        return;
      }

      attachLiteralTypes(n);
      switch (n.getType()) {
        case Token.FUNCTION:
          if (parent.getType() == Token.NAME) {
            return;
          }
          defineDeclaredFunction(n, parent);
          break;
        case Token.CATCH:
          defineCatch(n, parent);
          break;
        case Token.VAR:
          defineVar(n, parent);
          break;
        case Token.LET:
        case Token.CONST:
          defineLetConst(n, parent);
          break;
      }
    }


  private void defineLetConst(Node n, Node parent) {
    Preconditions.checkArgument(parent.getType() == Token.VAR);
    for (Node nameNode : n.children()) {
      String name = nameNode.getString();
      Preconditions.checkArgument(name != null && name.length() > 0);
      Var v = createVar(name, nameNode, false);
      setType(v, nameNode);
    }
  }

diff --git a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
index 09fc2487a..bec3535b8 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
@@ -126,20 +126,36 @@ public class SimpleType // note: until 2.6 was final
             return this;
         }
         // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
+        if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
-                    _valueHandler, _typeHandler, _asStatic);
+        }
         // Otherwise, stitch together the hierarchy. First, super-class
+        JavaType superType = _superClass;
+        if (superType != null) {
+            // Note: since this is a SimpleType, must use raw type
+            superType = superType._narrow(subclass.getSuperclass());
+        }
         // if not found, try a super-interface
-        // should not get here but...
+        if (superType == null) {
+            JavaType[] t = _superInterfaces;
+            int len = t.length;
+            for (int i = 0; i < len; ++i) {
+                JavaType intType = t[i];
+                // Note: since this is a SimpleType, must use raw type
+                Class<?> intCls = intType.getRawClass();
+                if (intCls.isAssignableFrom(subclass)) {
+                    superType = intType._narrow(subclass);
+                    break;
+                }
+            }
+        }
+        if (superType == null) {
+            throw new IllegalArgumentException("Internal error: cannot determine super-type of "+subclass.getName());
+        }
+        return new SimpleType(subclass, _bindings, superType, _superInterfaces,
+                _valueHandler, _typeHandler, _asStatic);
     }
-
     @Override
     public JavaType withContentType(JavaType contentType) {
         throw new IllegalArgumentException("Simple types have no content types; can not call withContentType()");

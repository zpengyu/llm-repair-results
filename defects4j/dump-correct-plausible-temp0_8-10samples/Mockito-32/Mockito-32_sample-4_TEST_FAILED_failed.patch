diff --git a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
index e292e1300..a6b684a47 100644
--- a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
+++ b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
@@ -29,18 +29,19 @@ public class SpyAnnotationEngine implements AnnotationEngine {
         Field[] fields = context.getDeclaredFields();
         for (Field field : fields) {
             if (field.isAnnotationPresent(Spy.class)) {
-                assertNoAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);
+                if (field.isAnnotationPresent(Mock.class) || field.isAnnotationPresent(org.mockito.MockitoAnnotations.Mock.class) || field.isAnnotationPresent(Captor.class)){
+                    throw new MockitoException("Cannot use @Mock, @Spy and @Captor annotations on the same field");
+                }
                 boolean wasAccessible = field.isAccessible();
                 field.setAccessible(true);
                 try {
                     Object instance = field.get(testClass);
                     if (instance == null) {
                         throw new MockitoException("Cannot create a @Spy for '" + field.getName() + "' field because the *instance* is missing\n" +
-                        		  "The instance must be created *before* initMocks();\n" +
+                                  "The instance must be created *before* initMocks();\n" +
                                   "Example of correct usage of @Spy:\n" +
-                            	  "   @Spy List mock = new LinkedList();\n" +
-                            	  "   //also, don't forget about MockitoAnnotations.initMocks();");
-
+                                  "   @Spy List mock = new LinkedList();\n" +
+                                  "   //also, don't forget about MockitoAnnotations.initMocks();");
                     }
                     if (new MockUtil().isMock(instance)) { 
                         // instance has been spied earlier

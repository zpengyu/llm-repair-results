diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
index af4270610..9f2a5a845 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
@@ -190,14 +190,10 @@ public class CollectionDeserializer
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
-        
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
-        final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
-            valueDeser = ctxt.findContextualValueDeserializer(vt, property);
-        } else { // if directly assigned, probably not yet contextual, so:
-            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
+            valueDeser = _findValueDeserializer(ctxt, property);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
@@ -206,7 +202,22 @@ public class CollectionDeserializer
         }
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
-
+    protected JsonDeserializer<?> _findValueDeserializer(DeserializationContext ctxt,
+            BeanProperty property) throws JsonMappingException
+    {
+        final JavaType vt = _collectionType.getContentType();
+        JsonDeserializer<?> deser = ctxt.findContextualValueDeserializer(vt, property);
+        // [databind#1043]: allow per-property allow-wrapping of single overrides:
+        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
+                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+        if (unwrapSingle == _unwrapSingle) {
+            return deser;
+        }
+        if (unwrapSingle == null) {
+            unwrapSingle = ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+        }
+        return new CollectionDeserializer(vt, deser, valueTypeDeserializer, unwrapSingle);
+    }
     /*
     /**********************************************************
     /* ContainerDeserializerBase API

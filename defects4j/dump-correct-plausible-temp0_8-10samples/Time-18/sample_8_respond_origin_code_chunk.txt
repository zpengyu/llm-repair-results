    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                  int hourOfDay, int minuteOfHour,
                                  int secondOfMinute, int millisOfSecond)
        throws IllegalArgumentException
    {
        Chronology base;
        if ((base = getBase()) != null) {
            return base.getDateTimeMillis
                (year, monthOfYear, dayOfMonth,
                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
        }

        // Assume date is Gregorian.
        long instant;
        if (year < getMinimumYear() || year > getMaximumYear()) {
            throw new IllegalArgumentException("Specified year is invalid");
        }
        if (iConverted) {
            instant = iGregorianChronology.getDateTimeMillis
                (year, monthOfYear, dayOfMonth,
                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
            if (instant < iCutoverMillis) {
                // Maybe it's Julian.
                instant = iJulianChronology.getDateTimeMillis
                    (year, monthOfYear, dayOfMonth,
                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
                if (instant >= iCutoverMillis) {
                    // Okay, it's in the illegal cutover gap.
                    throw new IllegalArgumentException("Specified date does not exist");
                }
            }
        } else {
            try {
                instant = iJulianChronology.getDateTimeMillis
                    (year, monthOfYear, dayOfMonth,
                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
            } catch (IllegalArgumentException e) {
                instant = iGregorianChronology.getDateTimeMillis
                    (year, monthOfYear, dayOfMonth,
                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
                if (instant < iCutoverMillis) {
                    throw e;
                }
            }
        }
        return instant;
    }

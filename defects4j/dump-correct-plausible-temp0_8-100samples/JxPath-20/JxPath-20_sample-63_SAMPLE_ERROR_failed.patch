diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
index cd4ceac..d25ccfa 100644
--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
@@ -32,21 +32,26 @@ import org.apache.commons.jxpath.ri.axes.SelfContext;
  * @author Matt Benson
  * @version $Revision$ $Date$
  */
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Iterator;
+import org.exolab.castor.mapping.EvaluationContext;
+import org.exolab.castor.mapping.accessors.InitialContext;
+import org.exolab.castor.mapping.xml.types.CoreOperationType;
+import org.exolab.castor.mapping.xml.types.RelationalExpressionOperatorType;
+import org.exolab.castor.mapping.xml.types.RelationalExpressionType;
 public abstract class CoreOperationRelationalExpression extends CoreOperation {
-
-    /**
-     * Create a new CoreOperationRelationalExpression.
-     * @param args arguments
-     */
-    protected CoreOperationRelationalExpression(Expression[] args) {
+    private RelationalExpressionType _relationalExpression;
+    protected CoreOperationRelationalExpression(
+            RelationalExpressionType relationalExpression, Expression[] args) {
         super(args);
+        _relationalExpression = relationalExpression;
     }
-
-    public final Object computeValue(EvalContext context) {
-        return compute(args[0].compute(context), args[1].compute(context))
-                ? Boolean.TRUE : Boolean.FALSE;
+    public final Object computeValue(EvaluationContext evalContext) {
+        Object value = compute(getExpression(0).compute(evalContext), getExpression(1)
+                .compute(evalContext));
+        return (value == null) ? Boolean.FALSE : value;
     }
-
     protected final int getPrecedence() {
         return RELATIONAL_EXPR_PRECEDENCE;
     }
@@ -54,24 +58,67 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
     protected final boolean isSymmetric() {
         return false;
     }
-
-    /**
-     * Template method for subclasses to evaluate the result of a comparison.
-     * @param compare result of comparison to evaluate
-     * @return ultimate operation success/failure
-     */
-    protected abstract boolean evaluateCompare(int compare);
-
-    /**
-     * Compare left to right.
-     * @param left left operand
-     * @param right right operand
-     * @return operation success/failure
-     */
-    private boolean compute(Object left, Object right) {
+    protected abstract Object compute(Object left, Object right);
+    protected Expression getExpression(int index) {
+        return _args[index];
+    }
+    protected RelationalExpressionType getRelationalExpression() {
+        return _relationalExpression;
+    }
+    protected boolean evaluateCompare(int compare) {
+        boolean result = false;
+        if (getRelationalExpression().getOperator() == RelationalExpressionOperatorType.EQUAL) {
+            result = (compare == 0);
+        } else if (getRelationalExpression().getOperator() == RelationalExpressionOperatorType.NOT_EQUAL) {
+            result = (compare != 0);
+        } else if (getRelationalExpression().getOperator() == RelationalExpressionOperatorType.LESS_THAN) {
+            result = (compare < 0);
+        } else if (getRelationalExpression().getOperator() == RelationalExpressionOperatorType.GREATER_THAN) {
+            result = (compare > 0);
+        } else if (getRelationalExpression().getOperator() == RelationalExpressionOperatorType.LESS_THAN_OR_EQUAL) {
+            result = (compare <= 0);
+        } else if (getRelationalExpression().getOperator() == RelationalExpressionOperatorType.GREATER_THAN_OR_EQUAL) {
+            result = (compare >= 0);
+        }
+        return result;
+    }
+    protected Object reduce(Object o) {
+        if (o instanceof EvaluationContext) {
+            o = ((EvaluationContext) o).getSingleNodePointer();
+        }
+        if (o instanceof Collection) {
+            o = ((Collection) o).iterator();
+        }
+        return o;
+    }
+    protected boolean containsMatch(Iterator it, Object value) {
+        boolean result = false;
+        while (it.hasNext()) {
+            Object element = it.next();
+            if (compute(element, value) == Boolean.TRUE) {
+                result = true;
+                break;
+            }
+        }
+        return result;
+    }
+    protected boolean findMatch(Iterator lit, Iterator rit) {
+        HashSet left = new HashSet();
+        while (lit.hasNext()) {
+            left.add(lit.next());
+        }
+        boolean result = false;
+        while (rit.hasNext()) {
+            if (containsMatch(left.iterator(), rit.next())) {
+                result = true;
+                break;
+            }
+        }
+        return result;
+    }
+    protected boolean compare(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
-
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
@@ -97,62 +144,4 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
         }
         return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
     }
-
-    /**
-     * Reduce an operand for comparison.
-     * @param o Object to reduce
-     * @return reduced operand
-     */
-    private Object reduce(Object o) {
-        if (o instanceof SelfContext) {
-            o = ((EvalContext) o).getSingleNodePointer();
-        }
-        if (o instanceof Collection) {
-            o = ((Collection) o).iterator();
-        }
-        return o;
-    }
-
-    /**
-     * Learn whether any element returned from an Iterator matches a given value.
-     * @param it Iterator
-     * @param value to look for
-     * @return whether a match was found
-     */
-    private boolean containsMatch(Iterator it, Object value) {
-        while (it.hasNext()) {
-            Object element = it.next();
-            if (compute(element, value)) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    /**
-     * Learn whether any element returned from an Iterator matches a given value.
-     * @param it Iterator
-     * @param value to look for
-     * @return whether a match was found
-     */
-
-    /**
-     * Learn whether there is an intersection between two Iterators.
-     * @param lit left Iterator
-     * @param rit right Iterator
-     * @return whether a match was found
-     */
-    private boolean findMatch(Iterator lit, Iterator rit) {
-        HashSet left = new HashSet();
-        while (lit.hasNext()) {
-            left.add(lit.next());
-        }
-        while (rit.hasNext()) {
-            if (containsMatch(left.iterator(), rit.next())) {
-                return true;
-            }
-        }
-        return false;
-    }
-
 }
\ No newline at end of file

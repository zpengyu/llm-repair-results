    public void captureArgumentsFrom(Invocation invocation) {
        if (invocation.getMethod().isVarArgs()) {
            int indexOfVararg = invocation.getRawArguments().length - 1;
            // [SF] since the method is varargs, it can also be that the argument to match is a vararg
            // e.g. call(Object... parameters)
            //      call("test", 1234, true)
            // in this case the matcher for parameters should be an instance of VarargMatcher
            Object vararg = invocation.getRawArguments()[indexOfVararg];
            if(vararg instanceof Object[]) {
                Object[] varargs = (Object[]) vararg;
                for (int i = 0; i < varargs.length; i++) {
                    invokeCapturesArguments(matchers, i, varargs[i]);
                }
            } else {
                invokeCapturesArguments(matchers, indexOfVararg, vararg);
            }
        } else {
            for (int position = 0; position < matchers.size(); position++) {
                Matcher m = matchers.get(position);
                if (m instanceof CapturesArguments) {
                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                }
            }
        }
    }
    private void invokeCapturesArguments(List<Matcher> matchers, int position, Object vararg) {
        Matcher m = matchers.get(position);
        if (m instanceof CapturesArguments) {
            ((CapturesArguments) m).captureFrom(vararg);
        }
    }
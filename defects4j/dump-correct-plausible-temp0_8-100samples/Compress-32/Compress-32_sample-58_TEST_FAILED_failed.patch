diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index 87ff4aab..ebff5e91 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -479,40 +479,45 @@ public class TarArchiveInputStream extends ArchiveInputStream {
     }
 
     private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {
-        /*
-         * The following headers are defined for Pax.
-         * atime, ctime, charset: cannot use these without changing TarArchiveEntry fields
-         * mtime
-         * comment
-         * gid, gname
-         * linkpath
-         * size
-         * uid,uname
-         * SCHILY.devminor, SCHILY.devmajor: don't have setters/getters for those
-         */
-        for (Entry<String, String> ent : headers.entrySet()){
+        for (Entry<String, String> ent : headers.entrySet()) {
             String key = ent.getKey();
             String val = ent.getValue();
-            if ("path".equals(key)){
+            if ("path".equals(key)) {
                 currEntry.setName(val);
-            } else if ("linkpath".equals(key)){
+            } else if ("linkpath".equals(key)) {
                 currEntry.setLinkName(val);
-            } else if ("gid".equals(key)){
+            } else if ("gid".equals(key)) {
                 currEntry.setGroupId(Integer.parseInt(val));
-            } else if ("gname".equals(key)){
+            } else if ("gname".equals(key)) {
                 currEntry.setGroupName(val);
-            } else if ("uid".equals(key)){
+            } else if ("uid".equals(key)) {
                 currEntry.setUserId(Integer.parseInt(val));
-            } else if ("uname".equals(key)){
+            } else if ("uname".equals(key)) {
                 currEntry.setUserName(val);
-            } else if ("size".equals(key)){
-                currEntry.setSize(Long.parseLong(val));
-            } else if ("mtime".equals(key)){
-                currEntry.setModTime((long) (Double.parseDouble(val) * 1000));
-            } else if ("SCHILY.devminor".equals(key)){
-                currEntry.setDevMinor(Integer.parseInt(val));
-            } else if ("SCHILY.devmajor".equals(key)){
-                currEntry.setDevMajor(Integer.parseInt(val));
+            } else if ("size".equals(key)) {
+                try {
+                    currEntry.setSize(Long.parseLong(val));
+                } catch (NumberFormatException e) {
+                    e.printStackTrace();
+                }
+            } else if ("mtime".equals(key)) {
+                try {
+                    currEntry.setModTime((long) (Double.parseDouble(val) * 1000));
+                } catch (NumberFormatException e) {
+                    e.printStackTrace();
+                }
+            } else if ("SCHILY.devminor".equals(key)) {
+                try {
+                    currEntry.setDevMinor(Integer.parseInt(val));
+                } catch (NumberFormatException e) {
+                    e.printStackTrace();
+                }
+            } else if ("SCHILY.devmajor".equals(key)) {
+                try {
+                    currEntry.setDevMajor(Integer.parseInt(val));
+                } catch (NumberFormatException e) {
+                    e.printStackTrace();
+                }
             }
         }
     }

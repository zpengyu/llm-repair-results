diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index 87ff4aab..4a50a31e 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -498,25 +498,51 @@ public class TarArchiveInputStream extends ArchiveInputStream {
             } else if ("linkpath".equals(key)){
                 currEntry.setLinkName(val);
             } else if ("gid".equals(key)){
-                currEntry.setGroupId(Integer.parseInt(val));
+                if(isValidId(val))
+                    currEntry.setGroupId(Integer.parseInt(val));
             } else if ("gname".equals(key)){
                 currEntry.setGroupName(val);
             } else if ("uid".equals(key)){
-                currEntry.setUserId(Integer.parseInt(val));
+                if(isValidId(val))
+                    currEntry.setUserId(Integer.parseInt(val));
             } else if ("uname".equals(key)){
                 currEntry.setUserName(val);
             } else if ("size".equals(key)){
-                currEntry.setSize(Long.parseLong(val));
+                if(isValidSize(val))
+                    currEntry.setSize(Long.parseLong(val));
             } else if ("mtime".equals(key)){
                 currEntry.setModTime((long) (Double.parseDouble(val) * 1000));
             } else if ("SCHILY.devminor".equals(key)){
-                currEntry.setDevMinor(Integer.parseInt(val));
+                if(isValidId(val))
+                    currEntry.setDevMinor(Integer.parseInt(val));
             } else if ("SCHILY.devmajor".equals(key)){
-                currEntry.setDevMajor(Integer.parseInt(val));
+                if(isValidId(val))
+                    currEntry.setDevMajor(Integer.parseInt(val));
             }
         }
     }
-
+    private boolean isValidId(String id) {
+        try {
+            int val = Integer.parseInt(id);
+            if (val < 0) {
+                return false;
+            }
+            return true;
+        } catch (NumberFormatException e) {
+            return false;
+        }
+    }
+    private boolean isValidSize(String size) {
+        try {
+            long val = Long.parseLong(size);
+            if (val < 0) {
+                return false;
+            }
+            return true;
+        } catch (NumberFormatException e) {
+            return false;
+        }
+    }
     /**
      * Adds the sparse chunks from the current entry to the sparse chunks,
      * including any additional sparse entries following the current entry.

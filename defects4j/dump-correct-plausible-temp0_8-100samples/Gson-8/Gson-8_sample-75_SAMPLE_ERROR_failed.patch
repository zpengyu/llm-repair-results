diff --git a/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java b/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
index a72d3d10..6a849a93 100644
--- a/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
+++ b/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
@@ -92,19 +89,34 @@ public abstract class UnsafeAllocator {
       };
     } catch (Exception ignored) {
     }
-
-    // give up
-    return new UnsafeAllocator() {
-      @Override
-      public <T> T newInstance(Class<T> c) {
-        throw new UnsupportedOperationException("Cannot allocate " + c);
-      }
-    };
+    // try common reflection
+    try {
+      final Constructor<?> objDef = Object.class.getDeclaredConstructor();
+      return new UnsafeAllocator() {
+        @Override
+        @SuppressWarnings("unchecked")
+        public <T> T newInstance(Class<T> c) throws Exception {
+          return (T) objDef.newInstance();
+        }
+      };
+    } catch (Exception e) {
+      return new UnsafeAllocator() {
+        @Override
+        public <T> T newInstance(Class<T> c) {
+          throw new UnsupportedOperationException("Cannot allocate " + c);
+        }
+      };
+    }
   }
-
   /**
    * Check if the class can be instantiated by unsafe allocator. If the instance has interface or abstract modifiers
    * throw an {@link java.lang.UnsupportedOperationException}
    * @param c instance of the class to be checked
    */
+  public static void checkClassAllocatable(Class<?> c) {
+    if (c.isInterface() || Modifier.isAbstract(c.getModifiers())) {
+      throw new UnsupportedOperationException(
+          "Attempting to allocate an interface or abstract class " + c.getName());
+    }
+  }
 }
\ No newline at end of file

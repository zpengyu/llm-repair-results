diff --git a/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java b/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
index a72d3d10..363a88d8 100644
--- a/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
+++ b/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
@@ -45,7 +44,11 @@ public abstract class UnsafeAllocator {
         @Override
         @SuppressWarnings("unchecked")
         public <T> T newInstance(Class<T> c) throws Exception {
-          return (T) allocateInstance.invoke(unsafe, c);
+          if (!c.isInterface() && !Modifier.isAbstract(c.getModifiers())) {
+            return (T) allocateInstance.invoke(unsafe, c);
+          } else {
+            throw new UnsupportedOperationException("Cannot instantiate an interface or abstract class.");
+          }
         }
       };
     } catch (Exception ignored) {
@@ -68,7 +70,11 @@ public abstract class UnsafeAllocator {
         @Override
         @SuppressWarnings("unchecked")
         public <T> T newInstance(Class<T> c) throws Exception {
-          return (T) newInstance.invoke(null, c, constructorId);
+          if (!c.isInterface() && !Modifier.isAbstract(c.getModifiers())) {
+            return (T) newInstance.invoke(null, c, constructorId);
+          } else {
+            throw new UnsupportedOperationException("Cannot instantiate an interface or abstract class.");
+          }
         }
       };
     } catch (Exception ignored) {
@@ -87,7 +92,11 @@ public abstract class UnsafeAllocator {
         @Override
         @SuppressWarnings("unchecked")
         public <T> T newInstance(Class<T> c) throws Exception {
-          return (T) newInstance.invoke(null, c, Object.class);
+          if (!c.isInterface() && !Modifier.isAbstract(c.getModifiers())) {
+            return (T) newInstance.invoke(null, c, Object.class);
+          } else {
+            throw new UnsupportedOperationException("Cannot instantiate an interface or abstract class.");
+          }
         }
       };
     } catch (Exception ignored) {
@@ -101,10 +109,4 @@ public abstract class UnsafeAllocator {
       }
     };
   }
-
-  /**
-   * Check if the class can be instantiated by unsafe allocator. If the instance has interface or abstract modifiers
-   * throw an {@link java.lang.UnsupportedOperationException}
-   * @param c instance of the class to be checked
-   */
 }
\ No newline at end of file

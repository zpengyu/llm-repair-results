    public ArchiveInputStream createArchiveInputStream(final InputStream in)
        throws ArchiveException {
        if (in == null) {
            throw new IllegalArgumentException("Stream must not be null.");
        }
        if (!in.markSupported()) {
            in = new BufferedInputStream(in);
        }
        final byte[] signature = new byte[12];
        in.mark(signature.length);
        try {
            final int signatureLength = in.read(signature);
            in.reset();
            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                return new ZipArchiveInputStream(in);
            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                return new JarArchiveInputStream(in);
            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                return new ArArchiveInputStream(in);
            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                return new CpioArchiveInputStream(in);
            } else if (DumpArchiveInputStream.matches(signature, signatureLength)) {
                return new DumpArchiveInputStream(in);
            } else if (TarArchiveInputStream.matches(signature, signatureLength)) {
                return new TarArchiveInputStream(in);
            }
        } catch (final IOException e) {
            throw new ArchiveException(
                "Could not use reset and mark operations.", e);
        }
        throw new ArchiveException("No Archiver found for the stream signature");
    }
    @Override public void visit(NodeTraversal t, Node n, Node parent) {
      if (t.inGlobalScope()) {
        return;
      }
      if (n.isReturn() && n.getFirstChild() != null) {
        data.get(t.getScopeRoot()).recordNonEmptyReturn();
      }
      if (t.getScopeDepth() <= 2) {
        // The first-order function analyzer looks at two types of variables:
        //
        // 1) Local variables that are assigned in inner scopes ("escaped vars")
        //
        // 2) Local variables that are assigned more than once.
        //
        // We treat all global variables as escaped by default, so there's
        // no reason to do this extra computation for them.
        return;
      }
      if (n.isName() && NodeUtil.isLValue(n) &&
          // Be careful of bleeding functions, which create variables
          // in the inner scope, not the scope where the name appears.
          !NodeUtil.isBleedingFunctionName(n)) {
        String name = n.getString();
        Scope scope = t.getScope();
        Var var = scope.getVar(name);
        if (var != null) {
          Scope ownerScope = var.getScope();
          if (ownerScope.isLocal()) {
            data.get(ownerScope.getRootNode()).recordAssignedName(name);
          }
          if (scope != ownerScope && ownerScope.isLocal()) {
            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
          }
        }
      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
          NodeUtil.isLValue(n)) {
        String name = NodeUtil.getRootOfQualifiedName(n).getString();
        Scope scope = t.getScope();
        Var var = scope.getVar(name);
        if (var != null) {
          Scope ownerScope = var.getScope();
          if (scope != ownerScope && ownerScope.isLocal()) {
            data.get(ownerScope.getRootNode())
                .recordEscapedQualifiedName(n.getQualifiedName());
          }
        }
      } else if (n.isAssign()) {
        // There is a special case where we can detect the intended
        // behavior of a program, even though it looks like variables
        // are being assigned in different scopes.
        //
        // For example:
        //
        // function foo(x) {
        //   x = 3;
        //   return function() {
        //     x = 5;
        //   };
        // }
        //
        // Here, the program is accessing x from the outer scope,
        // but assigning it from the inner scope. However, the
        // outer scope is always going to be "this" and the inner
        // scope is always going to be "window", so we can assume
        // that this is the programmer's intention, even though it
        // looks like a bug.
        Node lhs = n.getFirstChild();
        Node rhs = n.getLastChild();
        if (lhs.isName() && rhs.isName()) {
          Scope scope = t.getScope();
          Var lhsVar = scope.getVar(lhs.getString());
          Var rhsVar = scope.getVar(rhs.getString());
          if (lhsVar != null && rhsVar != null) {
            Scope lhsOwnerScope = lhsVar.getScope();
            Scope rhsOwnerScope = rhsVar.getScope();
            if (lhsOwnerScope != rhsOwnerScope &&
                lhsOwnerScope.isLocal() &&
                rhsOwnerScope.isLocal()) {
              data.get(lhsOwnerScope.getRootNode())
                  .recordPotentialEscapedVarName(lhs.getString());
            }
          }
        }
      }
    }
diff --git a/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java b/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java
index 0ea5b51..d98d033 100644
--- a/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java
+++ b/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java
@@ -31,13 +31,13 @@ import org.apache.commons.jxpath.ri.model.NodePointer;
  */
 public class UnionContext extends NodeSetContext {
     private EvalContext contexts[];
+    private int currentContextIndex;
     private boolean prepared;
-
     public UnionContext(EvalContext parentContext, EvalContext contexts[]) {
         super(parentContext, new BasicNodeSet());
         this.contexts = contexts;
+        this.currentContextIndex = 0;
     }
-
     public int getDocumentOrder() {
         return contexts.length > 1 ? 1 : super.getDocumentOrder();
     }
@@ -47,17 +46,15 @@ public class UnionContext extends NodeSetContext {
             prepared = true;
             BasicNodeSet nodeSet = (BasicNodeSet) getNodeSet();
             ArrayList pointers = new ArrayList();
-            for (int i = 0; i < contexts.length; i++) {
-                EvalContext ctx = (EvalContext) contexts[i];
-                while (ctx.nextSet()) {
-                    while (ctx.nextNode()) {
-                        NodePointer ptr = ctx.getCurrentNodePointer();
-                        if (!pointers.contains(ptr)) {
-                            nodeSet.add(ptr);
-                            pointers.add(ptr);
-                        }
+            while (contexts[currentContextIndex].nextSet()) {
+                while (contexts[currentContextIndex].nextNode()) {
+                    NodePointer ptr = contexts[currentContextIndex].getCurrentNodePointer();
+                    if (!pointers.contains(ptr)) {
+                        nodeSet.add(ptr);
+                        pointers.add(ptr);
                     }
                 }
+                currentContextIndex++;
             }
         }
         return super.setPosition(position);

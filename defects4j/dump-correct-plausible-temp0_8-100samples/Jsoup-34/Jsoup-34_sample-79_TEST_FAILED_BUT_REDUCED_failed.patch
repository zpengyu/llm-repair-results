diff --git a/src/main/java/org/jsoup/parser/CharacterReader.java b/src/main/java/org/jsoup/parser/CharacterReader.java
index bcda218..c547b61 100644
--- a/src/main/java/org/jsoup/parser/CharacterReader.java
+++ b/src/main/java/org/jsoup/parser/CharacterReader.java
@@ -79,24 +79,32 @@ class CharacterReader {
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
-    int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
-        char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+int nextIndexOf(CharSequence seq) {
+    int slen = seq.length();
+    if (slen == 0)
+        return pos;
+    outer:
+    for (int offset = pos; offset < length; offset++) {
+        char c0 = seq.charAt(0);
+        // scan to first instance of c0
+        if (c0 != input[offset]) {
+            while (++offset < length && c0 != input[offset]);
+            if (offset >= length)
+                break outer;
+        }
+        int i = offset + 1;
+        for (int last = i + slen-1; last < length; i++, last++) {
+            for (int j = 1; j < slen; j++) {
+                char c = seq.charAt(j);
+                if (c != input[i++])
+                    continue outer;
             }
+            // found full sequence
+            return offset - pos;
         }
-        return -1;
     }
-
+    return -1;
+}
     String consumeTo(char c) {
         int offset = nextIndexOf(c);
         if (offset != -1) {

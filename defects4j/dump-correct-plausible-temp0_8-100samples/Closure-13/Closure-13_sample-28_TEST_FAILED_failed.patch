diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
index 7eda511e..4e3b1e4f 100644
--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
@@ -111,10 +111,6 @@ class PeepholeOptimizationsPass
   }
 
   private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
@@ -122,21 +117,18 @@ class PeepholeOptimizationsPass
     int visits = 0;
     do {
       Node c = node.getFirstChild();
-      while(c != null) {
+      while (c != null) {
         traverse(c);
-        Node next = c.getNext();
-        c = next;
+        c = c.getNext();
       }
-
       visit(node);
       visits++;
-
-      Preconditions.checkState(visits < 10000, "too many interations");
+      Preconditions.checkState(
+          visits < 10000,
+          "too many iterations");
     } while (shouldRetraverse(node));
-
     exitNode(node);
   }
-
   private boolean shouldRetraverse(Node node) {
     if (node.getParent() != null && node.isFunction() || node.isScript()) {
       ScopeState state = traversalState.peek();

diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
index 7eda511e..a9eaf90a 100644
--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
@@ -110,7 +110,7 @@ class PeepholeOptimizationsPass
     compiler.removeChangeHandler(handler);
   }
 
-  private void traverse(Node node) {
+private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
@@ -123,20 +122,16 @@ class PeepholeOptimizationsPass
     do {
       Node c = node.getFirstChild();
       while(c != null) {
-        traverse(c);
         Node next = c.getNext();
+        traverse(c);
         c = next;
       }
-
       visit(node);
       visits++;
-
       Preconditions.checkState(visits < 10000, "too many interations");
     } while (shouldRetraverse(node));
-
     exitNode(node);
   }
-
   private boolean shouldRetraverse(Node node) {
     if (node.getParent() != null && node.isFunction() || node.isScript()) {
       ScopeState state = traversalState.peek();

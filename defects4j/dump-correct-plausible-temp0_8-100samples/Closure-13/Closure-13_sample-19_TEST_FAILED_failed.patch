diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
index 7eda511e..e0ab4b4c 100644
--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
@@ -118,25 +118,19 @@ class PeepholeOptimizationsPass
     if (!shouldVisit(node)) {
       return;
     }
-
-    int visits = 0;
-    do {
-      Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
-        Node next = c.getNext();
-        c = next;
-      }
-
-      visit(node);
-      visits++;
-
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
-
+    Node c = node.getFirstChild();
+    while (c != null) {
+      traverse(c);
+      c = c.getNext();
+    }
+    visit(node);
+    // we re-visit the node in case something has changed
+    // that warrants revisiting.  This is rare.
+    if (shouldRetraverse(node)) {
+      traverse(node);
+    }
     exitNode(node);
   }
-
   private boolean shouldRetraverse(Node node) {
     if (node.getParent() != null && node.isFunction() || node.isScript()) {
       ScopeState state = traversalState.peek();

diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java
index d6770e15..3f8ddb1b 100644
--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java
+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java
@@ -79,8 +79,7 @@ final class CheckGlobalThis implements Callback {
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
@@ -117,23 +112,22 @@ final class CheckGlobalThis implements Callback {
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
-
-      if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
+      if (n == rhs) {
+        // Always traverse the right side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
-          assignLhsChild = lhs;
+          assignLhsChild = rhs;
         }
       } else {
-        // Only traverse the right side if it's not an assignment to a prototype
+        // Only traverse the left side if it's not an assignment to a prototype
         // property or subproperty.
-        if (NodeUtil.isGet(lhs)) {
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+        if (NodeUtil.isGet(rhs)) {
+          if (rhs.getType() == Token.GETPROP &&
+              rhs.getLastChild().getString().equals("prototype")) {
             return false;
           }
-          Node llhs = lhs.getFirstChild();
+          Node llhs = rhs.getFirstChild();
           if (llhs.getType() == Token.GETPROP &&
               llhs.getLastChild().getString().equals("prototype")) {
             return false;

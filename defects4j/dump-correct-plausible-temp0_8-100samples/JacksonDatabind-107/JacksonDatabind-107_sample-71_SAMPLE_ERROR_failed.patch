diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
index e8942ba4b..bfdf7b8e4 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -158,14 +158,21 @@ public abstract class TypeDeserializerBase
                 // use the default impl if no type id available:
                 deser = _findDefaultImplDeserializer(ctxt);
                 if (deser == null) {
-                    // 10-May-2016, tatu: We may get some help...
-                    JavaType actual = _handleUnknownTypeId(ctxt, typeId);
-                    if (actual == null) { // what should this be taken to mean?
-                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
-                        return null;
+                    /* Should never occur but in case of broken code, throw
+                     * a clearer exception than NPE:
+                     */
+                    if (_defaultImpl == null) {
+                        return ctxt.reportBadTypeDefinition(_baseType, String.format(
+                                "No (JsonSerializable) Type id found for type %s, not even when resolving as subtype of %s",
+                                _baseType, BASE_TYPE));
                     }
-                    // ... would this actually work?
-                    deser = ctxt.findContextualValueDeserializer(actual, _property);
+                    Class<?> cls = _defaultImpl.getRawClass();
+                    ctxt.reportBadDefinition(_baseType,
+                            String.format("No (JsonSerializable) Type id found for type %s, but found %s",
+                            _baseType, cls));
+                    return ctxt.handleMissingInstantiator(cls,
+                            _defaultImpl.getTypeHandler(), _property,
+                            "no suitable creator method found to deserialize from JSON String");
                 }
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,

diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
index e8942ba4b..f9f4c6a97 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -155,6 +155,26 @@ public abstract class TypeDeserializerBase
              */
             JavaType type = _idResolver.typeFromId(ctxt, typeId);
             if (type == null) {
+                /* 16-Apr-2016, tatu: [databind#1216] Need to support custom unknown type
+                 *   handling, if configured.
+                 */
+                if (_needDeserializer) {
+                    /* 21-Feb-2017, tatu: As per [databind#1592], may need to support
+                     *   fully resolved types, so:
+                     */
+                    if (!_needViewProcesing) {
+                        type = _baseType;
+                    } else {
+                        type = ctxt.constructType(_baseType);
+                    }
+                    deser = ctxt.findNonContextualValueDeserializer(type);
+                    // 21-Nov-2016, tatu: As per [databind#1361] should add deserializer
+                    //   to cache if it is a non-contextual one.
+                    if (deser.isCachable()) {
+                        _deserializers.put(typeId, deser);
+                    }
+                    return deser;
+                }
                 // use the default impl if no type id available:
                 deser = _findDefaultImplDeserializer(ctxt);
                 if (deser == null) {

    @Override public void visit(NodeTraversal t, Node n, Node parent) {
      if (n == scope.getRootNode()) return;
      attachLiteralTypes(n);
      switch (n.getType()) {
        case Token.FUNCTION:
          if (parent.getType() == Token.NAME) {
            return;
          }
          defineDeclaredFunction(n, parent);
          break;
        case Token.CATCH:
          defineCatch(n, parent);
          break;
        case Token.VAR:
          defineVar(n, parent);
          break;
      }
    }

    private void handleFunctionInputs(Node fn) {
      if (fn.getFirstChild().getType() != Token.NAME) {
        return;
      }

      Node args = fn.getFirstChild().getNext();
      if (args == null || args.getType() != Token.PARAM_LIST) {
        return;
      }

      int index = 0;
      while (args != null) {
        Node arg = args.getFirstChild();
        if (arg != null) {
          defineArg(arg, fn, index);
          index++;
        }
        args = args.getNext();
      }
    }


diff --git a/src/main/java/org/apache/commons/compress/utils/BitInputStream.java b/src/main/java/org/apache/commons/compress/utils/BitInputStream.java
index 4086c8b5..79f21b7b 100644
--- a/src/main/java/org/apache/commons/compress/utils/BitInputStream.java
+++ b/src/main/java/org/apache/commons/compress/utils/BitInputStream.java
@@ -85,7 +85,10 @@ public class BitInputStream implements Closeable {
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
-                return nextByte;
+                if (bitsCachedSize == 0) {
+                    return nextByte;
+                }
+                break;
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsCached |= (nextByte << bitsCachedSize);
@@ -96,15 +99,13 @@ public class BitInputStream implements Closeable {
             bitsCachedSize += 8;
         }
             // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-
         final long bitsOut;
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
-            }
-            bitsCachedSize -= count;
+        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            bitsOut = (bitsCached & MASKS[count]);
+            bitsCached >>>= count;
+        } else {
+            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        }
+        bitsCachedSize -= count;
         return bitsOut;
-    }
-}
+    }}

diff --git a/src/main/java/org/apache/commons/compress/utils/BitInputStream.java b/src/main/java/org/apache/commons/compress/utils/BitInputStream.java
index 4086c8b5..40b8a1f1 100644
--- a/src/main/java/org/apache/commons/compress/utils/BitInputStream.java
+++ b/src/main/java/org/apache/commons/compress/utils/BitInputStream.java
@@ -78,33 +78,32 @@ public class BitInputStream implements Closeable {
      *         the requested number of bits
      * @throws IOException on error
      */
-    public long readBits(final int count) throws IOException {
-        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
-            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
+public long readBits(final int count) throws IOException {
+    if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
+        throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
+    }
+    while (bitsCachedSize < count) {
+        final long nextByte = in.read();
+        if (nextByte < 0) {
+            return nextByte;
         }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
-            }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
-            }
-            bitsCachedSize += 8;
+        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            bitsCached |= (nextByte << bitsCachedSize);
+        } else {
+            bitsCached <<= 8;
+            bitsCached |= nextByte;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-
-        final long bitsOut;
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
-            }
-            bitsCachedSize -= count;
-        return bitsOut;
+        bitsCachedSize += 8;
     }
-}
+        // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
+    final long bitsOut;
+        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            bitsOut = (bitsCached & MASKS[count]);
+            bitsCached >>>= count;
+        } else {
+            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            bitsCached &= MASKS[bitsCachedSize - count];
+        }
+        bitsCachedSize -= count;
+    return bitsOut;
+}}

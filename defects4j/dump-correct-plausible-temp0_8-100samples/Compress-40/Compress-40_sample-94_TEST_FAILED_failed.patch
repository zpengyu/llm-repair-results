diff --git a/src/main/java/org/apache/commons/compress/utils/BitInputStream.java b/src/main/java/org/apache/commons/compress/utils/BitInputStream.java
index 4086c8b5..3b4d88e3 100644
--- a/src/main/java/org/apache/commons/compress/utils/BitInputStream.java
+++ b/src/main/java/org/apache/commons/compress/utils/BitInputStream.java
@@ -82,29 +82,38 @@ public class BitInputStream implements Closeable {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
+        if (bitsCachedSize < count) {
+            bitsCachedSize = 0;
+            bitsCached = 0;
+            int skipped = 0;
+            while (skipped < count / 8) {
+                final long nextByte = in.read();
+                if (nextByte < 0) {
+                    return nextByte;
+                }
+                skipped++;
             }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+            while (bitsCachedSize < count) {
+                final long nextByte = in.read();
+                if (nextByte < 0) {
+                    return nextByte;
+                }
+                if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                    bitsCached |= (nextByte << bitsCachedSize);
+                } else {
+                    bitsCached <<= 8;
+                    bitsCached |= nextByte;
+                }
+                bitsCachedSize += 8;
             }
-            bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-
         final long bitsOut;
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
-            }
-            bitsCachedSize -= count;
+        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            bitsOut = (bitsCached & MASKS[count]);
+            bitsCached >>>= count;
+        } else {
+            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        }
+        bitsCachedSize -= count;
         return bitsOut;
-    }
-}
+    }}

diff --git a/gson/src/main/java/com/google/gson/TypeInfoFactory.java b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
index 0aa1455a..92c9443c 100644
--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java
+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
@@ -29,33 +29,7 @@ import java.lang.reflect.WildcardType;
  * @author Inderjeet Singh
  * @author Joel Leitch
  */
-final class TypeInfoFactory {
-
-  private TypeInfoFactory() {
-    // Not instantiable since it provides factory methods only.
-  }
-
-  public static TypeInfoArray getTypeInfoForArray(Type type) {
-    Preconditions.checkArgument(TypeUtils.isArray(type));
-    return new TypeInfoArray(type);
-  }
-
-  /**
-   * Evaluates the "actual" type for the field.  If the field is a "TypeVariable" or has a
-   * "TypeVariable" in a parameterized type then it evaluates the real type.
-   *
-   * @param f the actual field object to retrieve the type from
-   * @param typeDefiningF the type that contains the field {@code f}
-   * @return the type information for the field
-   */
-  public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) {
-    Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF);
-    Type type = f.getGenericType();
-    Type actualType = getActualType(type, typeDefiningF, classDefiningF);
-    return new TypeInfo(actualType);
-  }
-
-  private static Type getActualType(
+public static Type getActualType(
       Type typeToEvaluate, Type parentType, Class<?> rawParentClass) {
     if (typeToEvaluate instanceof Class<?>) {
       return typeToEvaluate;
@@ -90,10 +64,16 @@ final class TypeInfoFactory {
         int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);
         Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();
         return actualTypeArguments[indexOfActualTypeArgument];
-
-
+      } else if (parentType instanceof Class<?>) {
+        // special case where field is declared in a non parameterized class and
+        // type info is extracted from an instance
+        // For example, class Foo<A> { A a; }
+        // new Foo<Integer>().a; defines the actual type of a to be Integer.
+        Class<?> classOfField = TypeUtils.toRawClass(parentType);
+        // There is only one possible type for the type variable - the bound
+        TypeVariable<?> typeVariable = (TypeVariable<?>) typeToEvaluate;
+        return getFirstBoundedType(typeVariable, classOfField);
       }
-
       throw new UnsupportedOperationException("Expecting parameterized type, got " + parentType
           + ".\n Are you missing the use of TypeToken idiom?\n See "
           + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener");
@@ -105,30 +85,3 @@ final class TypeInfoFactory {
           + "ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.");
     }
   }
\ No newline at end of file
-
-
-      // Evaluate type on this type
-
-
-
-  private static Type[] extractRealTypes(
-      Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) {
-    Preconditions.checkNotNull(actualTypeArguments);
-
-    Type[] retTypes = new Type[actualTypeArguments.length];
-    for (int i = 0; i < actualTypeArguments.length; ++i) {
-      retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass);
-    }
-    return retTypes;
-  }
-
-  private static int getIndex(TypeVariable<?>[] types, TypeVariable<?> type) {
-    for (int i = 0; i < types.length; ++i) {
-      if (type.equals(types[i])) {
-        return i;
-      }
-    }
-    throw new IllegalStateException(
-        "How can the type variable not be present in the class declaration!");
-  }
-}

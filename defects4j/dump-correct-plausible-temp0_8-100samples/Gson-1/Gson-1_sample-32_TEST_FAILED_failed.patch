diff --git a/gson/src/main/java/com/google/gson/TypeInfoFactory.java b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
index 0aa1455a..c4e25457 100644
--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java
+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
@@ -90,13 +86,17 @@ final class TypeInfoFactory {
         int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);
         Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();
         return actualTypeArguments[indexOfActualTypeArgument];
-
-
+      } else if (parentType instanceof TypeVariable<?>) {
+        // A class Foo<T> { T t; } case
+        // We can't do any better here. We have to return the type parameter as is.
+        return typeToEvaluate;
+      } else {
+        // This case is not handled here. So, throw an exception.
+        throw new IllegalArgumentException(
+            "Expecting parent type to be ParameterizedType or TypeVariable, got " + parentType
+                + ".\nAre you missing the use of TypeToken idiom?\nSee "
+                + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener");
       }
-
-      throw new UnsupportedOperationException("Expecting parameterized type, got " + parentType
-          + ".\n Are you missing the use of TypeToken idiom?\n See "
-          + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener");
     } else if (typeToEvaluate instanceof WildcardType) {
       WildcardType castedType = (WildcardType) typeToEvaluate;
       return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);

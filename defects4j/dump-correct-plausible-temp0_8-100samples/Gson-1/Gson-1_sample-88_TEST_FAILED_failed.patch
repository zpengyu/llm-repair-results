diff --git a/gson/src/main/java/com/google/gson/TypeInfoFactory.java b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
index 0aa1455a..a6db48f0 100644
--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java
+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
@@ -99,7 +92,17 @@ final class TypeInfoFactory {
           + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener");
     } else if (typeToEvaluate instanceof WildcardType) {
       WildcardType castedType = (WildcardType) typeToEvaluate;
-      return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);
+      Type[] upperBounds = castedType.getUpperBounds();
+      if (upperBounds.length == 1) {
+        return getActualType(upperBounds[0], parentType, rawParentClass);
+      } else {
+        // In some cases, the wildcard can have multiple upper bound types.
+        // In such cases, prefer the first upper bound type for use.
+        // For example, in the type declaration List<? extends Number>,
+        // the wildcard should be considered to have Number as its type,
+        // rather than Object.
+        return getActualType(upperBounds[0], parentType, rawParentClass);
+      }
     } else {
       throw new IllegalArgumentException("Type \'" + typeToEvaluate + "\' is not a Class, "
           + "ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.");

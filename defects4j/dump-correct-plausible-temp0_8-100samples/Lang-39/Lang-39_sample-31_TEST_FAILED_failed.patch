diff --git a/src/java/org/apache/commons/lang3/StringUtils.java b/src/java/org/apache/commons/lang3/StringUtils.java
index f1b13417..6bc1b153 100644
--- a/src/java/org/apache/commons/lang3/StringUtils.java
+++ b/src/java/org/apache/commons/lang3/StringUtils.java
@@ -3605,16 +3605,10 @@ public class StringUtils {
     private static String replaceEach(String text, String[] searchList, String[] replacementList,
                                       boolean repeat, int timeToLive)
     {
-
-        // mchyzer Performance note: This creates very few new objects (one major goal)
-        // let me know if there are performance requests, we can create a harness to measure
-
         if (text == null || text.length() == 0 || searchList == null || 
-            searchList.length == 0 || replacementList == null || replacementList.length == 0) 
-        {
+            searchList.length == 0 || replacementList == null || replacementList.length == 0) {
             return text;
         }
-
         // if recursing, this shouldnt be less than 0
         if (timeToLive < 0) {
             throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: " + text);
@@ -3630,11 +3622,8 @@ public class StringUtils {
                 + " vs "
                 + replacementLength);
         }
-
-        // keep track of which still have matches
         boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];
-
-        // index on index that the match was found
+        // keep track of which still have matches
         int textIndex = -1;
         int replaceIndex = -1;
         int tempIndex = -1;
@@ -3643,8 +3631,7 @@ public class StringUtils {
         // NOTE: logic duplicated below START
         for (int i = 0; i < searchLength; i++) {
             if (noMoreMatchesForReplIndex[i] || searchList[i] == null || 
-                searchList[i].length() == 0 || replacementList[i] == null) 
-            {
+                searchList[i].length() == 0 || replacementList[i] == null) {
                 continue;
             }
             tempIndex = text.indexOf(searchList[i]);
@@ -3665,14 +3650,10 @@ public class StringUtils {
         if (textIndex == -1) {
             return text;
         }
-
         int start = 0;
-
-        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit
         int increase = 0;
-
         // count the replacement text elements that are larger than their corresponding text being replaced
-        for (int i = 0; i < searchList.length; i++) {
+        for (int i = 0; i < searchLength; i++) {
             int greater = replacementList[i].length() - searchList[i].length();
             if (greater > 0) {
                 increase += 3 * greater; // assume 3 matches
@@ -3699,8 +3675,7 @@ public class StringUtils {
             // NOTE: logic mostly duplicated above START
             for (int i = 0; i < searchLength; i++) {
                 if (noMoreMatchesForReplIndex[i] || searchList[i] == null || 
-                    searchList[i].length() == 0 || replacementList[i] == null) 
-                {
+                    searchList[i].length() == 0 || replacementList[i] == null) {
                     continue;
                 }
                 tempIndex = text.indexOf(searchList[i], start);
@@ -3715,8 +3689,7 @@ public class StringUtils {
                     }
                 }
             }
-            // NOTE: logic duplicated above END
-
+            // NOTE: logic mostly duplicated above END
         }
         int textLength = text.length();
         for (int i = start; i < textLength; i++) {

diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 83a73c74..c9b61517 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1405,30 +1404,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
+    while (arguments.hasNext() && parameters.hasNext()) {
       // If there are no parameters left in the list, then the while loop
       // above implies that this must be a var_args function.
-        parameter = parameters.next();
+      parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
-
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
-
+    if (parameters.hasNext()) {
+      // If there are still parameters left in the list, then it means
+      // the function requires more arguments than the given call
+      // provides.
+      parameter = parameters.next();
+      report(t, call, WRONG_ARGUMENT_COUNT,
+             validator.getReadableJSTypeName(call.getFirstChild(), false),
+             String.valueOf(ordinal), String.valueOf(ordinal + 1), "");
+    }
     int numArgs = call.getChildCount() - 1;
-    int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+    if (maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
-              validator.getReadableJSTypeName(call.getFirstChild(), false),
-              String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+             validator.getReadableJSTypeName(call.getFirstChild(), false),
+             String.valueOf(numArgs), String.valueOf(ordinal),
+             " and no more than " + maxArgs + " argument(s)");
     }
   }
-
   /**
    * Visits a RETURN node.
    *

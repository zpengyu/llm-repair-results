diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java b/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java
index 927f617..fb1a5b5 100644
--- a/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java
+++ b/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java
@@ -37,31 +37,18 @@ import java.util.Locale;
  * @version $Revision$ $Date$
  */
 public abstract class Expression {
-
-    protected static final Double ZERO = new Double(0);
-    protected static final Double ONE = new Double(1);
-    protected static final Double NOT_A_NUMBER = new Double(Double.NaN);
-
-    private boolean contextDependencyKnown = false;
+    /**
+     * Flag that indicates if this expression should be re-evaluated
+     * each time the current position in the context changes.
+     */
     private boolean contextDependent;
-
     /**
      * Returns true if this expression should be re-evaluated
      * each time the current position in the context changes.
      */
     public boolean isContextDependent() {
-        if (!contextDependencyKnown) {
-            contextDependent = computeContextDependent();
-            contextDependencyKnown = true;
-        }
         return contextDependent;
     }
-
-    /**
-     * Implemented by subclasses and result is cached by isContextDependent()
-     */
-    public abstract boolean computeContextDependent();
-
     /**
      * Evaluates the expression. If the result is a node set, returns
      * the first element of the node set.

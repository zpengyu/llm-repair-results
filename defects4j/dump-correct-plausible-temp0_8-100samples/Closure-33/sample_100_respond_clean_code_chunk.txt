  public void matchConstraint(ObjectType constraintObj) {
    // We only want to match contraints on anonymous types.
    // Handle the case where the constraint object is a record type.
    //
    // param constraintObj {{prop: (number|undefined)}}
    // function f(constraintObj) {}
    // f({});
    //
    // We want to modify the object literal to match the constraint, by
    // taking any each property on the record and trying to match
    // properties on this object.
    if (constraintObj.isRecordType()) {
      for (String prop : constraintObj.getOwnPropertyNames()) {
        JSType propType = constraintObj.getPropertyType(prop);
        if (!isPropertyTypeDeclared(prop)) {
          JSType typeToInfer = propType;
          if (!hasProperty(prop)) {
            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                .getLeastSupertype(propType);
          }
          defineInferredProperty(prop, typeToInfer, null);
        }
      }
    }
    else if (constraintObj.isNoType()) {
      // We don't want to lose the function type if the constraint is NoType
      if (this.isFunctionType()) {
        return;
      }
    }
    else {
      // TODO(user): Remove this special case when we do more precise
      // instantiation. For now, we need to preserve the type information
      // better for most of our closure primitive types, so we filter out
      // all non-record types.
      for (String prop : getOwnPropertyNames()) {
        if (!isPropertyTypeDeclared(prop)) {
          removeProperty(prop);
        }
      }
    }
  }
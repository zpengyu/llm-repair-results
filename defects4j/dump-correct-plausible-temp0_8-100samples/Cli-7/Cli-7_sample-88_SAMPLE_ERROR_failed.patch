diff --git a/src/java/org/apache/commons/cli2/builder/PatternBuilder.java b/src/java/org/apache/commons/cli2/builder/PatternBuilder.java
index f02601e..4d78727 100644
--- a/src/java/org/apache/commons/cli2/builder/PatternBuilder.java
+++ b/src/java/org/apache/commons/cli2/builder/PatternBuilder.java
@@ -33,105 +33,8 @@ import org.apache.commons.cli2.validation.Validator;
  * Builds Options using a String pattern
  */
 //TODO Document and link to the acceptable patterns
-public class PatternBuilder {
-
-    private final GroupBuilder gbuilder;
-    private final DefaultOptionBuilder obuilder;
-    private final ArgumentBuilder abuilder;
-
-    /**
-     * Creates a new PatternBuilder
-     */
-    public PatternBuilder() {
-        this(
-            new GroupBuilder(),
-            new DefaultOptionBuilder(),
-            new ArgumentBuilder());
-    }
-
-    /**
-     * Creates a new PatternBuilder
-     * @param gbuilder the GroupBuilder to use
-     * @param obuilder the DefaultOptionBuilder to use
-     * @param abuilder the ArgumentBuilder to use
-     */
-    public PatternBuilder(
-        final GroupBuilder gbuilder,
-        final DefaultOptionBuilder obuilder,
-        final ArgumentBuilder abuilder) {
-        this.gbuilder = gbuilder;
-        this.obuilder = obuilder;
-        this.abuilder = abuilder;
-    }
-
-    private final Set options = new HashSet();
-
-    /**
-     * Creates a new Option instance.
-     * @return a new Option instance
-     */
-    public Option create() {
-        final Option option;
-
-        if (options.size() == 1) {
-            option = (Option)options.iterator().next();
-        }
-        else {
-            gbuilder.reset();
-            for (final Iterator i = options.iterator(); i.hasNext();) {
-                gbuilder.withOption((Option)i.next());
-            }
-            option = gbuilder.create();
-        }
-
-        reset();
-
-        return option;
-    }
-
-    /**
-     * Resets this builder
-     */
-    public PatternBuilder reset() {
-        options.clear();
-        return this;
-    }
-
-    private void createOption(
-        final char type,
-        final boolean required,
-        final char opt) {
-        final Argument argument;
-        if (type != ' ') {
-            abuilder.reset();
-            abuilder.withValidator(validator(type));
-            if (required) {
-                abuilder.withMinimum(1);
-            }
-            if (type != '*') {
-                abuilder.withMaximum(1);
-            }
-            argument = abuilder.create();
-        }
-        else {
-            argument = null;
-        }
-
-        obuilder.reset();
-        obuilder.withArgument(argument);
-        obuilder.withShortName(String.valueOf(opt));
-        obuilder.withRequired(required);
-
-        options.add(obuilder.create());
-    }
-
-    /**
-     * Builds an Option using a pattern string.
-     * @param pattern the pattern to build from
-     */
     public void withPattern(final String pattern) {
         int sz = pattern.length();
-
         char opt = ' ';
         char ch = ' ';
         char type = ' ';
@@ -179,6 +77,7 @@ public class PatternBuilder {
                 return classv;
             case '+' :
                 final ClassValidator instancev = new ClassValidator();
+                instancev.setInstance(true);
                 return instancev;
                 //case ':':// no validator needed for a string
             case '%' :
@@ -199,4 +98,3 @@ public class PatternBuilder {
                 return null;
         }
     }
\ No newline at end of file
-}

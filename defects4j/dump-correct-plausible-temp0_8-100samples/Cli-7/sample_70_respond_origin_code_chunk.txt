private void createOption(
        final char type,
        final boolean required,
        final char opt) {
    final Argument argument;
    if (type != ' ') {
        abuilder.reset();
        abuilder.withValidator(validator(type));
        if (required) {
            abuilder.withMinimum(1);
        }
        if (type != '*') {
            abuilder.withMaximum(1);
        }
        argument = abuilder.create();
    }
    else {
        argument = null;
    }

    obuilder.reset();
    obuilder.withArgument(argument);
    obuilder.withShortName(String.valueOf(opt));
    obuilder.withRequired(required);

    options.add(obuilder.create());
}

/**
 * Builds an Option using a pattern string.
 * @param pattern the pattern to build from
 */
public void withPattern(final String pattern) {
    int sz = pattern.length();

    char opt = ' ';
    char ch = ' ';
    char type = ' ';
    boolean required = false;

    for (int i = 0; i < sz; i++) {
        ch = pattern.charAt(i);

        switch (ch) {
            case '!' :
                required = true;
                break;
            case '@' :
            case ':' :
            case '%' :
            case '+' :
            case '#' :
            case '<' :
            case '>' :
            case '*' :
            case '/' :
                type = ch;
                break;
            default :
                if (opt != ' ') {
                    createOption(type, required, opt);
                    required = false;
                    type = ' ';
                }

                opt = ch;
        }
    }

    if (opt != ' ') {
        createOption(type, required, opt);
    }
}

private static Validator validator(final char c) {
    switch (c) {
        case '@' :
            final ClassValidator classv = new ClassValidator();
            classv.setInstance(true);
            return classv;
        case '+' :
            final ClassValidator instancev = new ClassValidator();
            return instancev;
        case ':':// no validator needed for a string
        case '%' :
            return NumberValidator.getNumberInstance();
        case '#' :
            return DateValidator.getDateInstance();
        case '<' :
            final FileValidator existingv = new FileValidator();
            existingv.setExisting(true);
            existingv.setFile(true);
            return existingv;
        case '>' :
        case '*' :
            return new FileValidator();
        case '/' :
            return new UrlValidator();
        default :
            return null;
    }
}


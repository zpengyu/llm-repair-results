diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 2f5a8e10..38ee35ca 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -163,25 +162,24 @@ class InlineObjectLiterals implements CompilerPass {
         // Ignore most indirect references, like x.y (but not x.y(),
         // since the function referenced by y might reference 'this').
         //
+        if (parent.isGetProp()
+            && gramps.isCall()
+            && gramps.getFirstChild() == parent) {
+          // A call target may be using the object as a 'this' value.
+          return false;
+        }
+        // Deleting a property has different semantics from deleting
+        // a variable, so deleted properties should not be inlined.
+        // NOTE(nicksantos): This pass's object-splitting algorithm has
+        // a blind spot. It assumes that if a property isn't defined on an
+        // object, then the value is undefined. This is not true, because
+        // Object.prototype can have arbitrary properties on it.
+        //
+        // We short-circuit this problem by bailing out if we see a reference
+        // to a property that isn't defined on the object literal. This
+        // isn't a perfect algorithm, but it should catch most cases.
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target may be using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
-            return false;
-          }
-
-          // Deleting a property has different semantics from deleting
-          // a variable, so deleted properties should not be inlined.
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
           String propName = parent.getLastChild().getString();
           if (!validProperties.contains(propName)) {
             if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {

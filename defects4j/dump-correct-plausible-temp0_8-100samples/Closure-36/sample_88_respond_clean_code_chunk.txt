    private boolean canInline(
        Reference declaration,
        Reference initialization,
        Reference reference) {
      if (!isValidDeclaration(declaration)
          || !isValidInitialization(initialization)
          || !isValidReference(reference)) {
        return false;
      }
      // If the value is read more than once, skip it.
      // VAR declarations and EXPR_RESULT don't need the value, but other
      // ASSIGN expressions parents do.
      if (declaration != initialization &&
          !initialization.getGrandparent().isExprResult()) {
        return false;
      }
      // Be very conservative and do no cross control structures or
      // scope boundaries
      if (declaration.getBasicBlock() != initialization.getBasicBlock()
          || declaration.getBasicBlock() != reference.getBasicBlock()) {
        return false;
      }
      // Do not inline into a call node. This would change
      // the context in which it was being called. For example,
      //   var a = b.c;
      //   a();
      // should not be inlined, because it calls a in the context of b
      // rather than the context of the window.
      //   var a = b.c;
      //   f(a)
      // is ok.
      Node value = initialization.getAssignedValue();
      Preconditions.checkState(value != null);
      if (value.isGetProp()
          && reference.getParent().isCall()
          && reference.getParent().getFirstChild() == reference.getNode()) {
        return false;
      }
      if (value.isFunction()) {
        Node callNode = reference.getParent();
        if (reference.getParent().isCall()) {
          CodingConvention convention = compiler.getCodingConvention();
          // Bug 2388531: Don't inline subclass definitions into class defining
          // calls as this confused class removing logic.
          SubclassRelationship relationship =
              convention.getClassesDefinedByCall(callNode);
          if (relationship != null) {
            return false;
          }
          // issue 668: Don't inline singleton getter methods
          // calls as this confused class removing logic.
        } else if (callNode.isNew()) {
          // issue 668: Don't inline singleton getter methods
          // calls as this confused class removing logic.
          // Do not inline a constructor if it is assigned directly to a
          // class's prototype property.
          // Ex:
          // ClassA.prototype = new (function() {})
          // This breaks class removing, because the prototype is not
          // a singleton, and so can be removed, but the class is not
          // removed because it is referenced in the inlined constructor.
          // TODO(johnlenz): It may be possible to remove the class,
          // if the constructor isn't invoked by the time it is reached.
          // TODO(johnlenz): Support inlining of constructors when
          // there are references from the constructor to "this".
          Node parent = callNode.getParent();
          if (parent.isGetProp()
              && "prototype".equals(parent.getLastChild().getString())
              && parent.getParent().isAssign()
              && NodeUtil.isExpressionResultUsed(parent.getParent())) {
            return false;
          }
        }
      }
      return canMoveAggressively(value) ||
          canMoveModerately(initialization, reference);
    }
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
index 316efa3a9..224f3305a 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
@@ -580,17 +578,20 @@ public class BuilderBasedDeserializer
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+                // Last creator property to set?
+                Object value = creatorProp.deserialize(p, ctxt);
+                if (buffer.assignParameter(creatorProp, value)) {
                     t = p.nextToken();
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                        wrapInstantiationProblem(e, ctxt);
                         continue;
                     }
+                    // if so, need to copy all remaining tokens into buffer
                     while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
+                        p.nextToken(); // to skip name
                         tokens.copyCurrentStructure(p);
                         t = p.nextToken();
                     }
@@ -601,6 +602,7 @@ public class BuilderBasedDeserializer
                     }
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
+                // nope; save for later
                 continue;
             }
             // Object Id property?
@@ -631,7 +632,8 @@ public class BuilderBasedDeserializer
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
-            return wrapInstantiationProblem(e, ctxt);
+            wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+            return null;
         }
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }

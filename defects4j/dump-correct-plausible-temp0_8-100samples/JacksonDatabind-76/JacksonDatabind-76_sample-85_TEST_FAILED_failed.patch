diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
index 316efa3a9..f4e5191a9 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
@@ -580,27 +578,29 @@ public class BuilderBasedDeserializer
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
+                // Last creator property to set?
+                Object value;
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
                     t = p.nextToken();
-                    Object bean;
                     try {
-                        bean = creator.build(ctxt, buffer);
+                        Object bean = creator.build(ctxt, buffer);
+                        while (t == JsonToken.FIELD_NAME) {
+                            p.nextToken();
+                            tokens.copyCurrentStructure(p);
+                            t = p.nextToken();
+                        }
+                        if (bean.getClass() != _beanType.getRawClass()) {
+                            ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+                            return null;
+                        }
+                        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                         continue;
                     }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
+                // nope, just an ordinary property
+                buffer.bufferProperty(creatorProp, creatorProp.deserialize(p, ctxt));
                 continue;
             }
             // Object Id property?
@@ -613,23 +613,23 @@ public class BuilderBasedDeserializer
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
-                handleIgnoredProperty(p, ctxt, handledType(), propName);
+            // "any property"?
+            if (_anySetter != null) {
+                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
                 continue;
             }
+            // Ok then, let's collect the whole field; name and value
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
-            // "any property"?
-            if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+            // but if it's ignorable, we'll skip all that, and save some buffers/processing
+            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                handleIgnoredProperty(p, ctxt, handledType(), propName);
             }
         }
-
         // We hit END_OBJECT, so:
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
-            bean = creator.build(ctxt, buffer);
+            bean =  creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }

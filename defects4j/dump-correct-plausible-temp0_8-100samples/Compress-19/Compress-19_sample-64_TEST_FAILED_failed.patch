diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java b/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java
index 430232a7..53c99f11 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java
@@ -256,7 +256,27 @@ public class Zip64ExtendedInformationExtraField implements ZipExtraField {
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            if (rawCentralDirectoryData.length == expectedLength) {
+                int offset = 0;
+                if (hasUncompressedSize) {
+                    size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                    offset += DWORD;
+                }
+                if (hasCompressedSize) {
+                    compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
+                                                         offset);
+                    offset += DWORD;
+                }
+                if (hasRelativeHeaderOffset) {
+                    relativeHeaderOffset =
+                        new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                    offset += DWORD;
+                }
+                if (hasDiskStart) {
+                    diskStart = new ZipLong(rawCentralDirectoryData, offset);
+                    offset += WORD;
+                }
+            } else {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
                                        + " doesn't match central directory"
@@ -264,28 +284,8 @@ public class Zip64ExtendedInformationExtraField implements ZipExtraField {
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
-            int offset = 0;
-            if (hasUncompressedSize) {
-                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
-            }
-            if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
-                offset += DWORD;
-            }
-            if (hasRelativeHeaderOffset) {
-                relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
-            }
-            if (hasDiskStart) {
-                diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
-            }
         }
     }
-
     /**
      * The uncompressed size stored in this extra field.
      */

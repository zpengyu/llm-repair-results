diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java
index a00893b3..e81614de 100644
--- a/src/com/google/javascript/jscomp/GlobalNamespace.java
+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java
@@ -303,132 +303,139 @@ class GlobalNamespace
       return true;
     }
 
-    public void collect(JSModule module, Scope scope, Node n) {
-      Node parent = n.getParent();
-
-      String name;
-      boolean isSet = false;
-      Name.Type type = Name.Type.OTHER;
-      boolean isPropAssign = false;
-
+private static boolean isUnqualifiedReference(Node n) {
+  switch (n.getType()) {
+    case Token.NAME:
+    case Token.GETPROP:
+      return true;
+    default:
+      return false;
+  }
+}
+private static boolean isGlobalNameReference(String name, Scope scope) {
+  return scope.isGlobal()
+      || scope.isInGlobalScope()
+      || scope.getVar(name) == null;
+}
+private void collect(JSModule module, Scope scope, Node n) {
+  Node parent = n.getParent();
+  String name;
+  boolean isSet = false;
+  Name.Type type = Name.Type.OTHER;
+  boolean isPropAssign = false;
+  switch (n.getType()) {
+    case Token.GETTER_DEF:
+    case Token.SETTER_DEF:
+    case Token.STRING_KEY:
+      // This may be a key in an object literal declaration.
+      name = null;
+      if (parent != null && parent.isObjectLit()) {
+        name = getNameForObjLitKey(n);
+      }
+      if (name == null) {
+        return;
+      }
+      isSet = true;
       switch (n.getType()) {
-        case Token.GETTER_DEF:
-        case Token.SETTER_DEF:
         case Token.STRING_KEY:
-          // This may be a key in an object literal declaration.
-          name = null;
-          if (parent != null && parent.isObjectLit()) {
-            name = getNameForObjLitKey(n);
-          }
-          if (name == null) {
-            return;
-          }
-          isSet = true;
-          switch (n.getType()) {
-            case Token.STRING_KEY:
-              type = getValueType(n.getFirstChild());
-              break;
-            case Token.GETTER_DEF:
-              type = Name.Type.GET;
-              break;
-            case Token.SETTER_DEF:
-              type = Name.Type.SET;
-              break;
-            default:
-              throw new IllegalStateException("unexpected:" + n);
-          }
+          type = getValueType(n.getFirstChild());
           break;
-        case Token.NAME:
-          // This may be a variable get or set.
-          if (parent != null) {
-            switch (parent.getType()) {
-              case Token.VAR:
-                isSet = true;
-                Node rvalue = n.getFirstChild();
-                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);
-                break;
-              case Token.ASSIGN:
-                if (parent.getFirstChild() == n) {
-                  isSet = true;
-                  type = getValueType(n.getNext());
-                }
-                break;
-              case Token.GETPROP:
-                return;
-              case Token.FUNCTION:
-                Node gramps = parent.getParent();
-                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {
-                  return;
-                }
-                isSet = true;
-                type = Name.Type.FUNCTION;
-                break;
-              case Token.INC:
-              case Token.DEC:
-                isSet = true;
-                type = Name.Type.OTHER;
-                break;
-              default:
-                if (NodeUtil.isAssignmentOp(parent) &&
-                    parent.getFirstChild() == n) {
-                  isSet = true;
-                  type = Name.Type.OTHER;
-                }
-            }
-          }
-          name = n.getString();
+        case Token.GETTER_DEF:
+          type = Name.Type.GET;
           break;
-        case Token.GETPROP:
-          // This may be a namespaced name get or set.
-          if (parent != null) {
-            switch (parent.getType()) {
-              case Token.ASSIGN:
-                if (parent.getFirstChild() == n) {
-                  isSet = true;
-                  type = getValueType(n.getNext());
-                  isPropAssign = true;
-                }
-                break;
-              case Token.INC:
-              case Token.DEC:
-                isSet = true;
-                type = Name.Type.OTHER;
-                break;
-              case Token.GETPROP:
-                return;
-              default:
-                if (NodeUtil.isAssignmentOp(parent) &&
-                    parent.getFirstChild() == n) {
-                  isSet = true;
-                  type = Name.Type.OTHER;
-                }
-            }
-          }
-          name = n.getQualifiedName();
-          if (name == null) {
-            return;
-          }
+        case Token.SETTER_DEF:
+          type = Name.Type.SET;
           break;
         default:
-          return;
+          throw new IllegalStateException("unexpected:" + n);
       }
-
-      // We are only interested in global names.
-      if (!isGlobalNameReference(name, scope)) {
-        return;
+      break;
+    case Token.NAME:
+      // This may be a variable get or set.
+      if (parent != null) {
+        switch (parent.getType()) {
+          case Token.VAR:
+            isSet = true;
+            Node rvalue = n.getFirstChild();
+            type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);
+            break;
+          case Token.ASSIGN:
+            if (parent.getFirstChild() == n) {
+              isSet = true;
+              type = getValueType(n.getNext());
+            }
+            break;
+          case Token.FUNCTION:
+            Node gramps = parent.getParent();
+            if (gramps == null || NodeUtil.isFunctionExpression(parent)) {
+              return;
+            }
+            isSet = true;
+            type = Name.Type.FUNCTION;
+            break;
+          case Token.INC:
+          case Token.DEC:
+            isSet = true;
+            type = Name.Type.OTHER;
+            break;
+          default:
+            if (NodeUtil.isAssignmentOp(parent) &&
+                parent.getFirstChild() == n) {
+              isSet = true;
+              type = Name.Type.OTHER;
+            }
+        }
       }
-
-      if (isSet) {
-        if (isGlobalScope(scope)) {
-          handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);
-        } else {
-          handleSetFromLocal(module, scope, n, parent, name);
+      name = n.getString();
+      break;
+    case Token.GETPROP:
+      // This may be a namespaced name get or set.
+      if (parent != null) {
+        switch (parent.getType()) {
+          case Token.ASSIGN:
+            if (parent.getFirstChild() == n) {
+              isSet = true;
+              type = getValueType(n.getNext());
+              isPropAssign = true;
+            }
+            break;
+          case Token.INC:
+          case Token.DEC:
+            isSet = true;
+            type = Name.Type.OTHER;
+            break;
+          case Token.GETPROP:
+            return;
+          default:
+            if (NodeUtil.isAssignmentOp(parent) &&
+                parent.getFirstChild() == n) {
+              isSet = true;
+              type = Name.Type.OTHER;
+            }
         }
-      } else {
-        handleGet(module, scope, n, parent, name);
       }
-    }
-
+      name = n.getQualifiedName();
+      if (name == null) {
+        return;
+      }
+      break;
+    default:
+      return;
+  }
+  // We are only interested in global names.
+  if (!isGlobalNameReference(name, scope)) {
+    return;
+  }
+  if (isSet) {
+    if (isGlobalScope(scope)) {
+      handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);
+    } else {
+      handleSetFromLocal(module, scope, n, parent, name);
+    }
+  } else {
+    handleGet(module, scope, n, parent, name);
+  }
+}
     /**
      * Gets the fully qualified name corresponding to an object literal key,
      * as long as it and its prefix property names are valid JavaScript

diff --git a/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java
index 9cd8713f4..40b441b88 100644
--- a/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java
+++ b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java
@@ -30,42 +30,7 @@ import org.apache.commons.math3.util.FastMath;
  * @version $Id$
  * @since 2.0
  */
-public class ElitisticListPopulation extends ListPopulation {
-
-    /** percentage of chromosomes copied to the next generation */
-    private double elitismRate = 0.9;
-
-    /**
-     * Creates a new ElitisticListPopulation instance.
-     *
-     * @param chromosomes list of chromosomes in the population
-     * @param populationLimit maximal size of the population
-     * @param elitismRate how many best chromosomes will be directly transferred to the
-     *                    next generation [in %]
-     * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range
-     */
-    public ElitisticListPopulation(final List<Chromosome> chromosomes,
-                                   final int populationLimit,
-                                   final double elitismRate) {
-        super(chromosomes, populationLimit);
-        this.elitismRate = elitismRate;
-    }
-
-    /**
-     * Creates a new ListPopulation instance and initializes its inner
-     * chromosome list.
-     *
-     * @param populationLimit maximal size of the population
-     * @param elitismRate how many best chromosomes will be directly transferred to the
-     *                    next generation [in %]
-     * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range
-     */
-    public ElitisticListPopulation(final int populationLimit, final double elitismRate) {
-        super(populationLimit);
-        this.elitismRate = elitismRate;
-    }
-
-    /**
+/**
      * Start the population for the next generation. The <code>{@link #elitismRate}</code>
      * percents of the best chromosomes are directly copied to the next generation.
      *
@@ -74,39 +39,12 @@ public class ElitisticListPopulation extends ListPopulation {
     public Population nextGeneration() {
         // initialize a new generation with the same parameters
         ElitisticListPopulation nextGeneration = new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());
-
         List<Chromosome> oldChromosomes = this.getChromosomes();
         Collections.sort(oldChromosomes);
-
         // index of the last "not good enough" chromosome
         int boundIndex = (int) FastMath.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());
-        for (int i=boundIndex; i<oldChromosomes.size(); i++) {
+        for (int i=0; i<boundIndex; i++) {
             nextGeneration.addChromosome(oldChromosomes.get(i));
         }
         return nextGeneration;
     }
\ No newline at end of file
-
-    /**
-     * Sets the elitism rate, i.e. how many best chromosomes will be directly
-     * transferred to the next generation [in %].
-     *
-     * @param elitismRate how many best chromosomes will be directly transferred to the
-     *                    next generation [in %]
-     * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range
-     */
-    public void setElitismRate(final double elitismRate) {
-        if (elitismRate < 0 || elitismRate > 1) {
-            throw new OutOfRangeException(LocalizedFormats.ELITISM_RATE, elitismRate, 0, 1);
-        }
-        this.elitismRate = elitismRate;
-    }
-
-    /**
-     * Access the elitism rate.
-     * @return the elitism rate
-     */
-    public double getElitismRate() {
-        return this.elitismRate;
-    }
-
-}

/**
 * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
 * from this InputStream.
 *
 * @param b
 *            destination byte array
 * @param offset
 *            where to start writing the bytes
 * @param len
 *            maximum number of bytes to read
 *
 * @return number of bytes read
 * @throws IOException
 *             if an I/O error occurs.
 * @throws NullPointerException
 *             if the byte array parameter is null
 * @throws IndexOutOfBoundsException
 *             if offset, len or buffer size are invalid
 */
@Override
public int read(byte b[], int offset, int len) throws IOException {
    if (b == null) {
        throw new NullPointerException();
    } else if (offset < 0 || len < 0) {
        throw new IndexOutOfBoundsException();
    } else if (offset > b.length || offset + len > b.length) {
        throw new IndexOutOfBoundsException();
    } else if (len == 0) {
        return 0;
    } else {
        int readLen = 0;
        /*
         Rationale for while-loop on (readLen == 0):
         -----
         Base32.readResults() usually returns > 0 or EOF (-1).  In the
         rare case where it returns 0, we just keep trying.

         This is essentially an undocumented contract for InputStream
         implementors that want their code to work properly with
         java.io.InputStreamReader, since the latter hates it when
         InputStream.read(byte[]) returns a zero.  Unfortunately our
         readResults() call must return 0 if a large amount of the data
         being decoded was non-base32, so this while-loop enables proper
         interop with InputStreamReader for that scenario.
         -----
         This is a fix for CODEC-101
        */
        while (readLen == 0) {
            if (!baseNCodec.hasData()) {
                byte[] buf = new byte[doEncode ? 4096 : 8192];
                int c = in.read(buf);
                if (c == -1) {
                    baseNCodec.encode(buf, 0, 0);
                    baseNCodec.flush(true);
                } else if (doEncode) {
                    baseNCodec.encode(buf, 0, c);
                } else {
                    baseNCodec.decode(buf, 0, c);
                }
            }
            readLen = baseNCodec.readResults(b, offset, len);
        }
        return readLen;
    }
}
/**
 * Attempts to skip <code>n</code> bytes of input.
 *
 * @param n
 *            number of bytes to be skipped
 * @return number of bytes skipped.
 * @throws IOException
 *             if an I/O error occurs.
 * @throws IllegalArgumentException
 *             if the skip length is negative
 */
public long skip(long n) throws IOException {
    if (n < 0) {
        throw new IllegalArgumentException("Negative skip length: " + n);
    }

    int chunk = SKIP_BUFFER_SIZE;
    long remaining = n;
    byte[] skipBuffer = new byte[chunk];
    int read;
    while (remaining > 0) {
        read = read(skipBuffer, 0, (int)Math.min(chunk, remaining));
        if (read == -1) {
            break;
        }
        remaining -= read;
    }
    return n - remaining;
}
/**
 * {@inheritDoc}
 *
 * @return <code>0</code> if the {@link InputStream} has reached <code>EOF</code>,
 * <code>1</code> otherwise
 */
public int available() throws IOException {
    return baseNCodec.hasData() ? 1 : 0;
}


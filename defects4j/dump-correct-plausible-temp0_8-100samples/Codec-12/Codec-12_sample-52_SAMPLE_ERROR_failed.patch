diff --git a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
index 78f4d67e..b56fbb92 100644
--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
@@ -139,20 +131,53 @@ public class BaseNCodecInputStream extends FilterInputStream {
      *
      * @throws IllegalArgumentException if the provided skip length is negative
      */
-
-        // skip in chunks of 512 bytes
-
-
+    @Override
+    public long skip(final long n) throws IOException {
+        if (n < 0) {
+            throw new IllegalArgumentException("Negative skip length: " + n);
+        }
+        final int chunkSize = 512; // cache this value (has effect only inside loop)
+        long remain = n;
+        while (remain > 0) {
+            final long skipped = in.skip(Math.min(remain, chunkSize));
+            if (skipped == 0) {
+                // force a read of the next byte to see if EOF has been reached
+                // since some InputStreams will return 0 rather than throw if EOF
+                // has been reached
+                int test = read();
+                if (test == -1) {
+                    break;
+                }
+            }
+            remain -= skipped;
+        }
+        return n - remain;
+    }
     /**
      * {@inheritDoc}
      *
      * @return <code>0</code> if the {@link InputStream} has reached <code>EOF</code>,
      * <code>1</code> otherwise
      */
+    @Override
+    public int available() throws IOException {
         // Note: the logic is similar to the InflaterInputStream:
         //       as long as we have not reached EOF, indicate that there is more
         //       data available. As we do not know for sure how much data is left,
         //       just return 1 as a safe guess.
-
+        if (baseNCodec.hasData()) {
+            return 1;
+        } else {
+            return super.available();
+        }
+    }
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void close() throws IOException {
         // use the EOF flag of the underlying codec instance
+        baseNCodec.setEof();
+        in.close();
+    }
 }
\ No newline at end of file

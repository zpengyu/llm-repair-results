diff --git a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
index 78f4d67e..3536f6a5 100644
--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
@@ -139,20 +131,43 @@ public class BaseNCodecInputStream extends FilterInputStream {
      *
      * @throws IllegalArgumentException if the provided skip length is negative
      */
-
-        // skip in chunks of 512 bytes
-
-
+    @Override
+    public long skip(final long skipLen) throws IOException {
+        if (skipLen < 0) {
+            throw new IllegalArgumentException("Negative skip length: " + skipLen);
+        }
+        final int skipBufferLen = (int) Math.min(skipLen, SKIP_BUFFER_SIZE);
+        if (skipBuffer == null || skipBuffer.length < skipBufferLen) {
+            skipBuffer = new byte[skipBufferLen];
+        }
+        long skip = skipLen;
+        while (skip > 0) {
+            final int returned = read(skipBuffer, 0, (int) Math.min(skip, skipBufferLen));
+            if (returned < 0) {
+                break; // we reached EOF
+            }
+            skip -= returned;
+        }
+        return skipLen - skip;
+    }
     /**
      * {@inheritDoc}
      *
      * @return <code>0</code> if the {@link InputStream} has reached <code>EOF</code>,
      * <code>1</code> otherwise
      */
-        // Note: the logic is similar to the InflaterInputStream:
-        //       as long as we have not reached EOF, indicate that there is more
-        //       data available. As we do not know for sure how much data is left,
-        //       just return 1 as a safe guess.
-
-        // use the EOF flag of the underlying codec instance
+    @Override
+    public int available() throws IOException {
+        if (baseNCodec.hasData()) {
+            return 1;
+        } else if (in.available() == 0) {
+            return 0;
+        } else {
+            return 1;
+        }
+    }
+    @Override
+    public void close() throws IOException {
+        in.close();
+    }
 }
\ No newline at end of file

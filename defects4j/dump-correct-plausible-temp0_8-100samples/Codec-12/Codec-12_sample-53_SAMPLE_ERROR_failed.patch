diff --git a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
index 78f4d67e..c1fce23b 100644
--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
@@ -113,6 +106,9 @@ public class BaseNCodecInputStream extends FilterInputStream {
                 if (!baseNCodec.hasData()) {
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
+                    if (c == EOF) {
+                        break;
+                    }
                     if (doEncode) {
                         baseNCodec.encode(buf, 0, c);
                     } else {
@@ -139,20 +134,36 @@ public class BaseNCodecInputStream extends FilterInputStream {
      *
      * @throws IllegalArgumentException if the provided skip length is negative
      */
-
-        // skip in chunks of 512 bytes
-
-
+    @Override
+    public long skip(long n) throws IOException {
+        if (n < 0) {
+            throw new IllegalArgumentException("Negative skip length: " + n);
+        }
+        final int chunkSize = 512;
+        long remaining = n;
+        byte[] skipBuffer = new byte[chunkSize];
+        int read;
+        while (remaining > 0) {
+            read = read(skipBuffer, 0, (int)Math.min(chunkSize, remaining));
+            if (read == EOF) {
+                break;
+            }
+            remaining -= read;
+        }
+        return n - remaining;
+    }
     /**
      * {@inheritDoc}
      *
      * @return <code>0</code> if the {@link InputStream} has reached <code>EOF</code>,
      * <code>1</code> otherwise
      */
+    @Override
+    public int available() throws IOException {
         // Note: the logic is similar to the InflaterInputStream:
         //       as long as we have not reached EOF, indicate that there is more
         //       data available. As we do not know for sure how much data is left,
         //       just return 1 as a safe guess.
-
-        // use the EOF flag of the underlying codec instance
+        return baseNCodec.hasData() ? 1 : 0;
+    }
 }
\ No newline at end of file

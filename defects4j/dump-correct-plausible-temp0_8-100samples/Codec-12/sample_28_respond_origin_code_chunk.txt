@Override
public int read(byte b[], int offset, int len) throws IOException {
    if (b == null) {
        throw new NullPointerException();
    } else if (offset < 0 || len < 0) {
        throw new IndexOutOfBoundsException();
    } else if (offset > b.length || offset + len > b.length) {
        throw new IndexOutOfBoundsException();
    } else if (len == 0) {
        return 0;
    } else {
        final int readLen;
        if (!baseNCodec.hasData()) {
            byte[] buf = new byte[doEncode ? 4096 : 8192];
            int c = in.read(buf);
            if (c == -1) {
                return EOF;
            }
            if (doEncode) {
                baseNCodec.encode(buf, 0, c);
            } else {
                baseNCodec.decode(buf, 0, c);
            }
        }
        readLen = baseNCodec.readResults(b, offset, len);
        return readLen;
    }
}
@Override
public long skip(long n) throws IOException {
    if (n < 0) {
        throw new IllegalArgumentException("Negative skip length: " + n);
    }
    final int chunk = 512;
    long remaining = n;
    final byte[] skipBuffer = new byte[chunk];
    int read;
    while (remaining > 0) {
        read = read(skipBuffer, 0, (int)Math.min(chunk, remaining));
        if (read == EOF) {
            break;
        }
        remaining -= read;
    }
    return n - remaining;
}

@Override
public int available() throws IOException {
    // similar to the readResults() method, but with a null b array
    return baseNCodec.available();
}

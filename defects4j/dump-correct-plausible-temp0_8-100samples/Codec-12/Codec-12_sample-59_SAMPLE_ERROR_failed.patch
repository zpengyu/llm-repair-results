diff --git a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
index 78f4d67e..91323ecb 100644
--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
@@ -28,60 +28,7 @@ import java.io.InputStream;
  * 
  * @since 1.5
  */
-public class BaseNCodecInputStream extends FilterInputStream {
-
-    private final boolean doEncode;
-
-    private final BaseNCodec baseNCodec;
-
-    private final byte[] singleByte = new byte[1];
-
-    protected BaseNCodecInputStream(InputStream in, BaseNCodec baseNCodec, boolean doEncode) {
-        super(in);
-        this.doEncode = doEncode;
-        this.baseNCodec = baseNCodec;
-    }
-
-    /**
-     * Reads one <code>byte</code> from this input stream.
-     * 
-     * @return the byte as an integer in the range 0 to 255. Returns -1 if EOF has been reached.
-     * @throws IOException
-     *             if an I/O error occurs.
-     */
-    @Override
-    public int read() throws IOException {
-        int r = read(singleByte, 0, 1);
-        while (r == 0) {
-            r = read(singleByte, 0, 1);
-        }
-        if (r > 0) {
-            final byte b = singleByte[0];
-            return b < 0 ? 256 + b : b;
-        }
-        return EOF;
-    }
-
-    /**
-     * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
-     * from this InputStream.
-     * 
-     * @param b
-     *            destination byte array
-     * @param offset
-     *            where to start writing the bytes
-     * @param len
-     *            maximum number of bytes to read
-     * 
-     * @return number of bytes read
-     * @throws IOException
-     *             if an I/O error occurs.
-     * @throws NullPointerException
-     *             if the byte array parameter is null
-     * @throws IndexOutOfBoundsException
-     *             if offset, len or buffer size are invalid
-     */
-    @Override
+@Override
     public int read(byte b[], int offset, int len) throws IOException {
         if (b == null) {
             throw new NullPointerException();
@@ -113,6 +59,9 @@ public class BaseNCodecInputStream extends FilterInputStream {
                 if (!baseNCodec.hasData()) {
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
+                    if (c == -1) {
+                        break;
+                    }
                     if (doEncode) {
                         baseNCodec.encode(buf, 0, c);
                     } else {
@@ -121,38 +70,6 @@ public class BaseNCodecInputStream extends FilterInputStream {
                 }
                 readLen = baseNCodec.readResults(b, offset, len);
             }
-            return readLen;
+            return readLen == -1 ? -1 : 1;
         }
     }
\ No newline at end of file
-    /**
-     * {@inheritDoc}
-     * 
-     * @return false
-     */
-    @Override
-    public boolean markSupported() {
-        return false; // not an easy job to support marks
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * @throws IllegalArgumentException if the provided skip length is negative
-     */
-
-        // skip in chunks of 512 bytes
-
-
-    /**
-     * {@inheritDoc}
-     *
-     * @return <code>0</code> if the {@link InputStream} has reached <code>EOF</code>,
-     * <code>1</code> otherwise
-     */
-        // Note: the logic is similar to the InflaterInputStream:
-        //       as long as we have not reached EOF, indicate that there is more
-        //       data available. As we do not know for sure how much data is left,
-        //       just return 1 as a safe guess.
-
-        // use the EOF flag of the underlying codec instance
-}

     public static double linearCombination(final double[] a, final double[] b)
        throws DimensionMismatchException {
        final int len = a.length;
        if (len != b.length) {
            throw new DimensionMismatchException(len, b.length);
        }
        // Revert to scalar multiplication.
        if (len == 1) {
            return a[0] * b[0];
        }
        final double[] prodHigh = new double[len];
        double prodLowSum = 0;
        for (int i = 0; i < len; i++) {
            final double ai = a[i];
            final double ca = SPLIT_FACTOR * ai;
            final double aHigh = ca - (ca - ai);
            final double aLow = ai - aHigh;
            final double bi = b[i];
            final double cb = SPLIT_FACTOR * bi;
            final double bHigh = cb - (cb - bi);
            final double bLow = bi - bHigh;
            prodHigh[i] = ai * bi;
            final double prodLow = aLow * bLow - (((prodHigh[i] -
                                                    aHigh * bHigh) -
                                                   aLow * bHigh) -
                                                  aHigh * bLow);
            prodLowSum += prodLow;
        }
        // Start accumulation in the correct order ...
        final double sHighPrev = prodHigh[len - 1];
        int lenMinusOne = len - 1;
        double sPrime = sHighPrev;
        double sLowSum = 0;
        for (int i = len - 2; i >= 0; i--) {
            final double prodHighCur = prodHigh[i];
            final double sHighCur = sHighPrev + prodHighCur;
            sPrime = sHighCur - sHighPrev;
            sLowSum += (sHighPrev - sPrime) + (prodHighCur - sPrime);
            sHighPrev = sHighCur;
            lenMinusOne--;
        }
        double result = sHighPrev + (prodLowSum + sLowSum);
        if (Double.isNaN(result)) {
            // either we have split infinite numbers or some coefficients were NaNs,
            // just rely on the naive implementation and let IEEE754 handle this
            result = 0;
            for (int i = 0; i < len; ++i) {
                result += a[i] * b[i];
            }
        }
        return result;
    }
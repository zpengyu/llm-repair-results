diff --git a/src/main/java/org/apache/commons/math3/util/MathArrays.java b/src/main/java/org/apache/commons/math3/util/MathArrays.java
index 9ef28e3d8..cc0cc80bf 100644
--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java
+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java
@@ -840,25 +836,17 @@ public class MathArrays {
                                                   aHigh * bLow);
             prodLowSum += prodLow;
         }
-
-
-        final double prodHighCur = prodHigh[0];
-        double prodHighNext = prodHigh[1];
-        double sHighPrev = prodHighCur + prodHighNext;
-        double sPrime = sHighPrev - prodHighNext;
-        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
-
+        double sHighPrev = prodHigh[0] + prodHigh[1];
+        double sPrime = sHighPrev - prodHigh[1];
+        double sLowSum = (prodHigh[1] - (sHighPrev - sPrime)) + (prodHigh[0] - sPrime);
         final int lenMinusOne = len - 1;
         for (int i = 1; i < lenMinusOne; i++) {
-            prodHighNext = prodHigh[i + 1];
-            final double sHighCur = sHighPrev + prodHighNext;
-            sPrime = sHighCur - prodHighNext;
-            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
+            final double sHighCur = sHighPrev + prodHigh[i + 1];
+            sPrime = sHighCur - prodHigh[i + 1];
+            sLowSum += (prodHigh[i + 1] - (sHighCur - sPrime)) + (sHighPrev - sPrime);
             sHighPrev = sHighCur;
         }
-
         double result = sHighPrev + (prodLowSum + sLowSum);
-
         if (Double.isNaN(result)) {
             // either we have split infinite numbers or some coefficients were NaNs,
             // just rely on the naive implementation and let IEEE754 handle this

diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index 6c9c7846..093e36bc 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -1180,35 +1180,29 @@ class TypeInference
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
-  private boolean inferTemplatedTypesForCall(
+private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
-
-    // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
-
-
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
-
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
-
-    callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
-
-    return replacer.madeChanges;
+    callTarget.setJSType(fnType);
+    n.setJSType(fnType.getReturnType());
+    boolean madeChanges = replacer.madeChanges;
+    if (madeChanges) {
+      callTarget.setJSType(
+          fnType.visit(replacer).toMaybeFunctionType());
+    }
+    return madeChanges;
   }
-
   private FlowScope traverseNew(Node n, FlowScope scope) {
     scope = traverseChildren(n, scope);
 

    public JavaType refineSerializationType(final MapperConfig<?> config,
            final Annotated a, final JavaType baseType) throws JsonMappingException
    {
        JavaType type = baseType;
        final TypeFactory tf = config.getTypeFactory();
        final AnnotationIntrospector ai = config.getAnnotationIntrospector();
        
        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
        //    now-deprecated secondary methods; this because while
        //    direct sub-class not yet retrofitted may only override
        //    those methods. With 2.8 or later we may consider removal
        //    of these methods

        Class<?> serClass = null;
        if (type.isContainerType()) {
            // 10-Oct-2015, tatu: Deprecation means we need to check both
            //    methods, in this order
            serClass = ai.findSerializationKeyType(a, type.getKeyType());
            if (serClass == null) {
                serClass = findSerializationKeyType(a, type.getKeyType());
            }
            if (serClass != null) {
                if (!(type instanceof MapLikeType)) {
                    throw new JsonMappingException(null,
                            String.format("Illegal key-type annotation: type %s is not a Map(-like)",
                                    type));
                }
                try {
                    type = ((MapLikeType) type).withKeyType(tf.constructType(serClass));
                } catch (IllegalArgumentException iae) {
                    throw new JsonMappingException(null,
                            String.format("Failed to narrow key type of %s with key-type annotation (value %s), from '%s': %s",
                                    type, serClass.getName(), a.getName(), iae.getMessage()),
                                    iae);
                }
            }

            serClass = ai.findSerializationContentType(a, type.getContentType());
            if (serClass == null) {
                serClass = findSerializationContentType(a, type.getContentType());
            }
            if (serClass != null) {
                // 10-Oct-2015, tatu: Deprecation means we need to check both
                //    methods, in this order
                // Ok: start by refining the main type itself; common to all types
                if (!type.isContainerType()) {
                    throw new JsonMappingException(null,
                            String.format("Illegal content-type annotation: type %s is not a container type",
                                    type));
                }
                try {
                    type = type.withContentType(tf.constructType(serClass));
                } catch (IllegalArgumentException iae) {
                    throw new JsonMappingException(null,
                            String.format("Failed to narrow value type of %s with content-type annotation (value %s), from '%s': %s",
                                    type, serClass.getName(), a.getName(), iae.getMessage()),
                                    iae);
                }
            }
        }

        // Ok: start by refining the main type itself; common to all types
        serClass = ai.findSerializationType(a);
        if (serClass != null) {
            // 10-Oct-2015, tatu: Deprecation means we need to check both
            //    methods, in this order
            // ... except that we never allow refining to non-container, so:
            if (!type.hasRawClass(serClass)) {
                if (!type.isContainerType()) {
                    throw new JsonMappingException(null,
                            String.format("Illegal container-type annotation: type %s is not a container type",
                                    type));
                }
                try {
                    type = tf.constructSpecializedType(type, serClass);
                } catch (IllegalArgumentException iae) {
                    throw new JsonMappingException(null,
                            String.format("Failed to narrow type %s with annotation (value %s), from '%s': %s",
                                    type, serClass.getName(), a.getName(), iae.getMessage()),
                                    iae);
                }
            }
        }

        return type;
    }


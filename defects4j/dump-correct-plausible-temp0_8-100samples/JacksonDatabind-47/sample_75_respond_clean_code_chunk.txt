    public JavaType refineSerializationType(final MapperConfig<?> config,
            final Annotated a, final JavaType baseType) throws JsonMappingException
    {
        JavaType type = baseType;
        final TypeFactory tf = config.getTypeFactory();
        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
        //    now-deprecated secondary methods; this because while
        //    direct sub-class not yet retrofitted may only override
        //    those methods. With 2.8 or later we may consider removal
        //    of these methods
        {
            Class<?> keyClass = _findSerializationKeyType(a, config, type);
            if (keyClass != null) {
                type = (type.isMapLikeType())
                    ? ((MapLikeType) type).withKeyType(tf.constructType(keyClass))
                    : tf.constructMapLikeType(type.getRawClass(),
                            tf.constructType(keyClass));
            }
        }
        // then, content type (for all containers)
        {
            Class<?> contentClass = _findSerializationContentType(a, config, type);
            if (contentClass != null) {
                type = type.withContentType(tf.constructType(contentClass));
            }
        }
        // Ok: start by refining the main type itself; common to all types
        Class<?> serClass = findSerializationType(a);
        if (serClass != null) {
            if (type.hasRawClass(serClass)) {
                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
                //    static typing this way
                type = type.withStaticTyping();
            } else {
                try {
                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
                    //   may be needed here too in future?
                    type = tf.constructGeneralizedType(type, serClass);
                } catch (IllegalArgumentException iae) {
                    throw new JsonMappingException(null,
                            String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
                                    type, serClass.getName(), a.getName(), iae.getMessage()),
                                    iae);
                }
            }
        }
        return type;
    }
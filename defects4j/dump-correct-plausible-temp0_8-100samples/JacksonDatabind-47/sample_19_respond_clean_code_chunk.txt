    public JavaType refineSerializationType(final MapperConfig<?> config,
            final Annotated a, JavaType baseType) throws JsonMappingException
    {
        final TypeFactory tf = config.getTypeFactory();
        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
        //    now-deprecated secondary methods; this because while
        //    direct sub-class not yet retrofitted may only override
        //    those methods. With 2.8 or later we may consider removal
        //    of these methods
        // Ok: start by refining the main type itself; common to all types
        Class<?> serClass = findSerializationType(a);
        if (serClass != null) {
            if (baseType.hasRawClass(serClass)) { // as is, no change
                if (serClass.isArray()) {
                    baseType = tf.constructArrayType(serClass.getComponentType());
                }
                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
                //    static typing this way
                baseType = baseType.withStaticTyping();
            } else {
                try {
                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
                    //   may be needed here too in future?
                    if (serClass.isArray()) {
                        baseType = tf.constructArrayType(serClass.getComponentType());
                    } else {
                        baseType = tf.constructGeneralizedType(baseType, serClass);
                    }
                } catch (IllegalArgumentException iae) {
                    throw new JsonMappingException(null,
                            String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
                                    baseType, serClass.getName(), a.getName(), iae.getMessage()),
                                    iae);
                }
            }
        }
        // Then further processing for container types
        final JavaType keyType;
        final JavaType contentType;
        if (baseType.isContainerType()) {
            keyType = contentType = baseType.getContentType();
        } else {
            keyType = null;
            contentType = null;
        }
        // First, key type (for Maps, Map-like types):
        if (keyType != null) {
            Class<?> keyClass = findSerializationKeyType(a, keyType);
            if (keyClass != null && keyClass != keyType.getRawClass()) {
                if (keyType.hasRawClass(keyClass)) { // as is, no change
                    keyType = keyType.withStaticTyping();
                } else {
                    Class<?> currRaw = keyType.getRawClass();
                    try {
                        // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
                        //   specialize (narrow) type sometimes, even if more commonly opposite
                        //   is needed.
                        if (keyClass.isAssignableFrom(currRaw)) { // common case
                            keyType = tf.constructGeneralizedType(keyType, keyClass);
                        } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
                            keyType = tf.constructSpecializedType(keyType, keyClass);
                        } else {
                            throw new JsonMappingException(null,
                                    String.format("Can not refine serialization key type %s into %s; types not related",
                                            keyType, keyClass.getName()));
                        }
                    } catch (IllegalArgumentException iae) {
                        throw new JsonMappingException(null,
                                String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
                                        baseType, keyClass.getName(), a.getName(), iae.getMessage()),
                                        iae);
                    }
                }
                baseType = ((MapLikeType) baseType).withKeyType(keyType);
            }
        }
        // And then value types for all containers:
        if (contentType != null) {
            Class<?> contentClass = findSerializationContentType(a, contentType);
            if (contentClass != null && contentClass != contentType.getRawClass()) {
                if (contentType.hasRawClass(contentClass)) {
                    contentType = contentType.withStaticTyping();
                } else {
                    // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
                    //   specialize (narrow) type sometimes, even if more commonly opposite
                    //   is needed.
                    Class<?> currRaw = contentType.getRawClass();
                    try {
                        if (contentClass.isAssignableFrom(currRaw)) { // common case
                            contentType = tf.constructGeneralizedType(contentType, contentClass);
                        } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
                            contentType = tf.constructSpecializedType(contentType, contentClass);
                        } else {
                            throw new JsonMappingException(null,
                                    String.format("Can not refine serialization content type %s into %s; types not related",
                                            contentType, contentClass.getName()));
                        }
                    } catch (IllegalArgumentException iae) { // shouldn't really happen
                        throw new JsonMappingException(null,
                                String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
                                        baseType, contentClass.getName(), a.getName(), iae.getMessage()),
                                        iae);
                    }
                }
                baseType = baseType.withContentType(contentType);
            }
        }
        return baseType;
    }
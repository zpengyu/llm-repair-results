diff --git a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
index 624a1fd7e..fc8b25c7e 100644
--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
@@ -803,10 +802,9 @@ public abstract class AnnotationIntrospector
         //    direct sub-class not yet retrofitted may only override
         //    those methods. With 2.8 or later we may consider removal
         //    of these methods
-
-        
+        Class<?> serClass = null;
         // Ok: start by refining the main type itself; common to all types
-        Class<?> serClass = findSerializationType(a);
+        serClass = findSerializationType(a);
         if (serClass != null) {
             if (type.hasRawClass(serClass)) {
                 // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
@@ -830,9 +827,9 @@ public abstract class AnnotationIntrospector
         // First, key type (for Maps, Map-like types):
         if (type.isMapLikeType()) {
             JavaType keyType = type.getKeyType();
-            Class<?> keyClass = findSerializationKeyType(a, keyType);
-            if (keyClass != null) {
-                if (keyType.hasRawClass(keyClass)) {
+            serClass = findSerializationKeyType(a, keyType);
+            if (serClass != null) {
+                if (keyType.hasRawClass(serClass)) {
                     keyType = keyType.withStaticTyping();
                 } else {
                     Class<?> currRaw = keyType.getRawClass();
@@ -840,19 +837,19 @@ public abstract class AnnotationIntrospector
                         // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
                         //   specialize (narrow) type sometimes, even if more commonly opposite
                         //   is needed.
-                        if (keyClass.isAssignableFrom(currRaw)) { // common case
-                            keyType = tf.constructGeneralizedType(keyType, keyClass);
-                        } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
-                            keyType = tf.constructSpecializedType(keyType, keyClass);
+                        if (serClass.isAssignableFrom(currRaw)) { // common case
+                            keyType = tf.constructGeneralizedType(keyType, serClass);
+                        } else if (currRaw.isAssignableFrom(serClass)) { // specialization, ok as well
+                            keyType = tf.constructSpecializedType(keyType, serClass);
                         } else {
                             throw new JsonMappingException(null,
                                     String.format("Can not refine serialization key type %s into %s; types not related",
-                                            keyType, keyClass.getName()));
+                                            keyType, serClass.getName()));
                         }
                     } catch (IllegalArgumentException iae) {
                         throw new JsonMappingException(null,
                                 String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                        type, keyClass.getName(), a.getName(), iae.getMessage()),
+                                        type, serClass.getName(), a.getName(), iae.getMessage()),
                                         iae);
                     }
                 }
@@ -863,9 +859,9 @@ public abstract class AnnotationIntrospector
         JavaType contentType = type.getContentType();
         if (contentType != null) { // collection[like], map[like], array, reference
             // And then value types for all containers:
-           Class<?> contentClass = findSerializationContentType(a, contentType);
-           if (contentClass != null) {
-               if (contentType.hasRawClass(contentClass)) {
+           serClass = findSerializationContentType(a, contentType);
+           if (serClass != null) {
+               if (contentType.hasRawClass(serClass)) {
                    contentType = contentType.withStaticTyping();
                } else {
                    // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
@@ -873,19 +869,19 @@ public abstract class AnnotationIntrospector
                    //   is needed.
                    Class<?> currRaw = contentType.getRawClass();
                    try {
-                       if (contentClass.isAssignableFrom(currRaw)) { // common case
-                           contentType = tf.constructGeneralizedType(contentType, contentClass);
-                       } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
-                           contentType = tf.constructSpecializedType(contentType, contentClass);
+                       if (serClass.isAssignableFrom(currRaw)) { // common case
+                           contentType = tf.constructGeneralizedType(contentType, serClass);
+                       } else if (currRaw.isAssignableFrom(serClass)) { // specialization, ok as well
+                           contentType = tf.constructSpecializedType(contentType, serClass);
                        } else {
                            throw new JsonMappingException(null,
                                    String.format("Can not refine serialization content type %s into %s; types not related",
-                                           contentType, contentClass.getName()));
+                                           contentType, serClass.getName()));
                        }
                    } catch (IllegalArgumentException iae) { // shouldn't really happen
                        throw new JsonMappingException(null,
                                String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                       type, contentClass.getName(), a.getName(), iae.getMessage()),
+                                       type, serClass.getName(), a.getName(), iae.getMessage()),
                                        iae);
                    }
                }

diff --git a/src/main/java/org/jsoup/safety/Whitelist.java b/src/main/java/org/jsoup/safety/Whitelist.java
index 23a215d..265c702 100644
--- a/src/main/java/org/jsoup/safety/Whitelist.java
+++ b/src/main/java/org/jsoup/safety/Whitelist.java
@@ -335,16 +335,28 @@ public class Whitelist {
         return false;
     }
 
-    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
+private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
+        String value = attr.getValue();
         // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
         // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
-
+        if (attr.isUrl() && value.startsWith("#") && el.baseUri() != null) {
+            attr.setValue(el.baseUri() + value);
+        }
+        // for [foo] relative urls, update to http://baseuri.com/foo
+        if (!value.contains(":")) {
+            if (el.baseUri() != null) {
+                String relUri = UrlUtil.resolve(el.baseUri(), value);
+                if (preserveRelativeLinks)
+                    attr.setValue(relUri);
+                else
+                    attr.setValue(UrlUtil.resolve(relUri, el.ownerDocument().location()));
+            } else {
+                attr.setValue(""); // remove
+                return true;
+            }
+        }
         for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+            if (value.toLowerCase().startsWith(protocol.toString())) {
                 return true;
             }
         }

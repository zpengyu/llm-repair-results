diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
index f07f4be2d..73f10c807 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
@@ -82,39 +82,35 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {
     Object returnValueFor(Class<?> type) {
         if (Primitives.isPrimitiveOrWrapper(type)) {
             return Primitives.defaultValueForPrimitiveOrWrapper(type);
-            //new instances are used instead of Collections.emptyList(), etc.
-            //to avoid UnsupportedOperationException if code under test modifies returned collection
         } else if (type == Collection.class) {
-            return new LinkedList<Object>();
+            return Collections.emptyList();
         } else if (type == Set.class) {
-            return new HashSet<Object>();
-        } else if (type == HashSet.class) {
-            return new HashSet<Object>();
+            return Collections.emptySet();
         } else if (type == SortedSet.class) {
-            return new TreeSet<Object>();
-        } else if (type == TreeSet.class) {
-            return new TreeSet<Object>();
+            return Collections.emptySortedSet();
+        } else if (type == HashSet.class) {
+            return Collections.emptySet();
         } else if (type == LinkedHashSet.class) {
-            return new LinkedHashSet<Object>();
+            return Collections.emptySet();
+        } else if (type == TreeSet.class) {
+            return Collections.emptySortedSet();
         } else if (type == List.class) {
-            return new LinkedList<Object>();
-        } else if (type == LinkedList.class) {
-            return new LinkedList<Object>();
+            return Collections.emptyList();
         } else if (type == ArrayList.class) {
-            return new ArrayList<Object>();
+            return Collections.emptyList();
+        } else if (type == LinkedList.class) {
+            return Collections.emptyList();
         } else if (type == Map.class) {
-            return new HashMap<Object, Object>();
+            return Collections.emptyMap();
         } else if (type == HashMap.class) {
-            return new HashMap<Object, Object>();
+            return Collections.emptyMap();
         } else if (type == SortedMap.class) {
-            return new TreeMap<Object, Object>();
+            return Collections.emptySortedMap();
         } else if (type == TreeMap.class) {
-            return new TreeMap<Object, Object>();
+            return Collections.emptySortedMap();
         } else if (type == LinkedHashMap.class) {
-            return new LinkedHashMap<Object, Object>();
+            return Collections.emptyMap();
         }
-        //Let's not care about the rest of collections.
         return null;
     }
-
 }

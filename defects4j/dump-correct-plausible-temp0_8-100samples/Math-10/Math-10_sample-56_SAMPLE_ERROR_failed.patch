diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
index fc9944c36..c2782ab9a 100644
--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
@@ -1412,13 +1407,34 @@ public class DSCompiler {
             for (int i = 1; i < tmp2.length; ++i) {
                 result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
             }
-
         }
-
         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
+        if (isInfinite(y, yOffset) && isInfinite(x, xOffset)) {
+            if (Double.doubleToLongBits(x[xOffset]) == Double.doubleToLongBits(y[yOffset])) {
+                for (int i = 0; i < result.length; ++i) {
+                    result[resultOffset + i] = ((tmp2[i] <= 0) ? -FastMath.PI : FastMath.PI) / 4;
+                }
+            } else {
+                for (int i = 0; i < result.length; ++i) {
+                    result[resultOffset + i] = ((tmp2[i] <= 0) ? -3 * FastMath.PI : 3 * FastMath.PI) / 4;
+                }
+            }
+        } else if (isInfinite(y, yOffset)) {
+            if (Double.doubleToLongBits(x[xOffset]) == Double.doubleToLongBits(y[yOffset])) {
+                for (int i = 0; i < result.length; ++i) {
+                    result[resultOffset + i] = ((tmp2[i] <= 0) ? -FastMath.PI : FastMath.PI) / 2;
+                }
+            } else {
+                for (int i = 0; i < result.length; ++i) {
+                    result[resultOffset + i] = ((tmp2[i] <= 0) ? -FastMath.PI : FastMath.PI);
+                }
+            }
+        } else if (isInfinite(x, xOffset)) {
+            for (int i = 0; i < result.length; ++i) {
+                result[resultOffset + i] = 0.0;
+            }
+        }
     }
-
     /** Compute hyperbolic cosine of a derivative structure.
      * @param operand array holding the operand
      * @param operandOffset offset of the operand in its array

diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
index fc9944c36..8b0234495 100644
--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
@@ -1408,17 +1403,22 @@ public class DSCompiler {
             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
             result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
+                    ((y[yOffset] < 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
             for (int i = 1; i < tmp2.length; ++i) {
                 result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
             }
-
         }
-
         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
+        for (int i = 0; i < x.length; ++i) {
+            if (Double.isInfinite(y[yOffset + i]) && Double.isInfinite(x[xOffset + i])) {
+                result[resultOffset + i] = ((x[xOffset + i] < 0) ? -0.5 * FastMath.PI : 0.5 * FastMath.PI) * (y[yOffset + i] / FastMath.abs(y[yOffset + i]));
+            } else if (Double.isInfinite(x[xOffset + i])) {
+                result[resultOffset + i] = (x[xOffset + i] < 0) ? FastMath.PI : 0;
+            } else if (Double.isNaN(x[xOffset + i]) || Double.isNaN(y[yOffset + i])) {
+                result[resultOffset + i] = Double.NaN;
+            }
+        }
     }
-
     /** Compute hyperbolic cosine of a derivative structure.
      * @param operand array holding the operand
      * @param operandOffset offset of the operand in its array

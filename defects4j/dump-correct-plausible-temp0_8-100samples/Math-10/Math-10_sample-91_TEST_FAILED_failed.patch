diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
index fc9944c36..1b7134b5f 100644
--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
@@ -1390,35 +1389,62 @@ public class DSCompiler {
         multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
         add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
         rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
-
-        if (x[xOffset] >= 0) {
-
-            // compute atan2(y, x) = 2 atan(y / (r + x))
-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
-            for (int i = 0; i < tmp2.length; ++i) {
+        // compute atan2(y, x) = 2 atan(y / (r + x))
+        add(tmp1, 0, x, xOffset, tmp2, 0);              // r + x
+        divide(y, yOffset, tmp2, 0, tmp1, 0);           // y /(r + x)
+        atan(tmp1, 0, tmp2, 0);                         // atan(y / (r + x))
+        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
+        final double x0 = x[xOffset];
+        final double y0 = y[yOffset];
+        final int start = (x0 > 0.0) ? 0 : (y0 >= 0.0) ? 1 : 2;
+        final int end   = (x0 > 0.0) ? getSize() : (y0 >= 0.0) ? 1 : 2;
+        if (x0 > 0.0) {
+            for (int i = start; i < end; ++i) {
                 result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
             }
-
         } else {
-
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
-            result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
-            for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+            for (int i = start; i < end; ++i) {
+                result[resultOffset + i] = (FastMath.PI - 2 * tmp2[i]); // +/-pi - 2 * atan(y / (r - x))
             }
-
         }
-
         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
+        int k = y0 > 0 ? 0 : 1;
+        for (int i = start; i < end; ++i) {
+            if (Double.isNaN(x[xOffset + i])) {
+                result[resultOffset + i] = Double.NaN;
+                continue;
+            }
+            if (Double.isNaN(y[yOffset + i])) {
+                result[resultOffset + i] = y[yOffset + i];
+                continue;
+            }
+            if (y[yOffset + i] == 0.0) {
+                if (x[xOffset + i] == 0.0) {
+                    result[resultOffset + i] = k * FastMath.PI / 2.0;
+                } else if (x[xOffset + i] > 0) {
+                    result[resultOffset + i] = k * 0.0;
+                } else {
+                    result[resultOffset + i] = k * FastMath.PI;
+                }
+            } else if (Double.isInfinite(x[xOffset + i])) {
+                if (Double.isInfinite(y[yOffset + i])) {
+                    result[resultOffset + i] = k * FastMath.PI / 4.0;
+                } else {
+                    result[resultOffset + i] = k * FastMath.PI / 2.0;
+                }
+            } else if (Double.isInfinite(y[yOffset + i])) {
+                if (x[xOffset + i] == 0.0) {
+                    result[resultOffset + i] = k * FastMath.PI / 2.0;
+                } else {
+                    result[resultOffset + i] = k * 0.0;
+                }
+            } else if (x[xOffset + i] == 0.0) {
+                result[resultOffset + i] = k * FastMath.PI / 2.0;
+            } else {
+                // can't be reached
+            }
+        }
     }
-
     /** Compute hyperbolic cosine of a derivative structure.
      * @param operand array holding the operand
      * @param operandOffset offset of the operand in its array

diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
index 9fe2d40b0..999d3c878 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
@@ -16,11 +16,8 @@ import com.fasterxml.jackson.databind.JsonMappingException;
  *
  * @since 2.8.11
  */
-public class SubTypeValidator
-{
+public class SubTypeValidator {
     protected final static String PREFIX_SPRING = "org.springframework.";
-
-
     /**
      * Set of well-known "nasty classes", deserialization of which is considered dangerous
      * and should (and is) prevented by default.
@@ -61,15 +55,10 @@ public class SubTypeValidator
      * Set of class names of types that are never to be deserialized.
      */
     protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES;
-
     private final static SubTypeValidator instance = new SubTypeValidator();
-
     protected SubTypeValidator() { }
-
     public static SubTypeValidator instance() { return instance; }
-
-    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
-    {
+    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {
         // There are certain nasty classes that could cause problems, mostly
         // via default typing -- catch them here.
         final Class<?> raw = type.getRawClass();
@@ -87,7 +74,7 @@ public class SubTypeValidator
             if (raw.isInterface()) {
                 ;
             } else if (full.startsWith(PREFIX_SPRING)) {
-                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()){
+                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {
                     String name = cls.getSimpleName();
                     // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                     if ("AbstractPointcutAdvisor".equals(name)
@@ -95,12 +82,12 @@ public class SubTypeValidator
                             || "AbstractApplicationContext".equals(name)) {
                         break main_check;
                     }
-                // [databind#1737]; more 3rd party
-                // s.add("com.mchange.v2.c3p0.JndiRefForwardingDataSource");
-                // s.add("com.mchange.v2.c3p0.WrapperConnectionPoolDataSource");
-                // [databind#1931]; more 3rd party
-                // com.mchange.v2.c3p0.ComboPooledDataSource
-                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource
+                    // [databind#1737]; more 3rd party
+                    // s.add("com.mchange.v2.c3p0.JndiRefForwardingDataSource");
+                    // s.add("com.mchange.v2.c3p0.WrapperConnectionPoolDataSource");
+                    // [databind#1931]; more 3rd party
+                    // com.mchange.v2.c3p0.ComboPooledDataSource
+                    // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource
                 }
             }
             return;

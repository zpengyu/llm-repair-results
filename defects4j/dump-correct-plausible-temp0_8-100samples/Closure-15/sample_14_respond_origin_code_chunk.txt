      public boolean apply(Node n) {
        // When the node is null it means, we reached the implicit return
        // where the function returns (possibly without an return statement)
        if (n == null) {
          return false;
        }

        // TODO(user): We only care about calls to functions that
        // passes one of the dependent variable to a non-side-effect free
        // function.
        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
          return true;
        }

        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
          return true;
        }

        // handle variable declaration
        if (n.isVar()) {
          String varName = n.getFirstChild().getString();

          // the variable is in a function
          if (currentScope.isDefinedLocally(varName)) {

            // remove it from the set of local variables that
            // are are not known to be modifiable
            currentScope.setVarModifiable(varName);

          } else if (
              currentScope.isDefinedLocally(varName) &&
              !globalVars.contains(varName)) {

            // the variable is global and not known to be modifiable
            globalVars.add(varName);
          }

        }
        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
            return true;
          }
        }
        return false;
      }

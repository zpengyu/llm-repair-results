class BuggyFunction {
   public boolean apply(Node n) {
        // When the node is null it means, we reached the implicit return
        // where the function returns (possibly without an return statement)
        if (n == null) {
          return false;
        }
        // TODO(user): We only care about calls to functions that
        // passes one of the dependent variable to a non-side-effect free
        // function.
        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
          return true;
        }
        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
          return true;
        }
        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
            return true;
          }
        }
        return false;
      }
      public static void main (String[] args) {
        BuggyFunction bf = new BuggyFunction();
        Node n = new Node(1);
        n.addChildToBack(new Node(2));
        n.addChildToBack(new Node(3));
        n.addChildToBack(new Node(4));
        n.addChildToBack(new Node(5));
        n.addChildToBack(new Node(6));
        n.addChildToBack(new Node(7));
        n.addChildToBack(new Node(8));
        n.addChildToBack(new Node(9));
        n.addChildToBack(new Node(10));
        bf.apply(n);
      }
}
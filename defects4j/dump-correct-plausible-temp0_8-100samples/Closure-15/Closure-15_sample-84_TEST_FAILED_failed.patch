diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
index 0a7f29c3..ab0ee633 100644
--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
@@ -81,7 +81,7 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback
   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
     new Predicate<Node>() {
       @Override
-      public boolean apply(Node n) {
+    public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
@@ -98,16 +96,16 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
-
-
-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
-            return true;
+        // TODO(user): Remove this once we decide to handle other cases
+        if (!n.isGetElem() && !n.isGetProp()) {
+          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
+              return true;
+            }
           }
         }
         return false;
-      }
-  };
+      }  };
 
   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {
     this.compiler = compiler;

      public boolean apply(Node n) {
        // When the node is null it means, we reached the implicit return
        // where the function returns (possibly without an return statement)
        if (n == null) {
          return false;
        }

        // TODO(user): We only care about calls to functions that
        // passes one of the dependent variable to a non-side-effect free
        // function.
        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
          return true;
        }

        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
          return true;
        }

        // If the node is the name of a variable and the parent of the name node
        // is a call, the variable is being passed to a function, thus we need
        // to check the definition of the variable.
        if (n.isName() &&
            NodeUtil.isGet(n.getParent()) &&
            n.hasChildren() &&
            n.getFirstChild().isGetProp()) {
          Node var = n.getFirstChild().getFirstChild();

          if (!apply(var)) {
            return false;
          }
        }

        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
            return true;
          }
        }
        return false;
      }


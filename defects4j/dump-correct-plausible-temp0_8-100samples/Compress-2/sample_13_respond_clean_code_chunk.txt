public class ArArchiveInputStream extends ArchiveInputStream {
    private final InputStream input;
    private long offset = 0;
    private boolean closed;
    private boolean entrySizeCalculated;
    private boolean eof;
    private int entrySize;
    public ArArchiveInputStream(final InputStream pInput) {
        input = pInput;
        closed = false;
    }
    public ArArchiveEntry getNextArEntry() throws IOException {
        if (offset == 0) {
            final byte[] expected = ArArchiveEntry.HEADER.getBytes();
            final byte[] realized = new byte[expected.length];
            final int read = read(realized);
            if (read != expected.length) {
                throw new IOException("failed to read header");
            }
            for (int i = 0; i < expected.length; i++) {
                if (expected[i] != realized[i]) {
                    throw new IOException("invalid header " + new String(realized));
                }
            }
        }
        if (eof) {
            return null;
        }
        if (offset % 2 != 0) {
            read();
        }
        final byte[] name = new byte[16];
        final byte[] lastmodified = new byte[12];
        final byte[] userid = new byte[6];
        final byte[] groupid = new byte[6];
        final byte[] filemode = new byte[8];
        final byte[] length = new byte[10];
        read(name);
        read(lastmodified);
        read(userid);
        read(groupid);
        read(filemode);
        read(length);
        {
            final byte[] expected = ArArchiveEntry.TRAILER.getBytes();
            final byte[] realized = new byte[expected.length];
            final int read = read(realized);
            if (read != expected.length) {
                throw new IOException("failed to read entry header");
            }
            for (int i = 0; i < expected.length; i++) {
                if (expected[i] != realized[i]) {
                    throw new IOException("invalid entry header. not read the content?");
                }
            }
        }
        eof = true;
        entrySize = Integer.parseInt(new String(length).trim());
        entrySizeCalculated = true;
        return new ArArchiveEntry(new String(name).trim(), entrySize);
    }
    public ArchiveEntry getNextEntry() throws IOException {
        return getNextArEntry();
    }
    public void close() throws IOException {
        if (!closed) {
            closed = true;
            input.close();
        }
    }
    public int read() throws IOException {
        final int ret = input.read();
        offset += (ret > 0 ? 1 : 0);
        if (ret > 0) {
            entrySize--;
        }
        return ret;
    }
    public int read(byte[] b) throws IOException {
        return read(b, 0, b.length);
    }
    public int read(byte[] b, final int off, final int len) throws IOException {
        if (entrySizeCalculated && entrySize == 0) {
            return -1;
        }
        int toRead = len;
        if (entrySizeCalculated && entrySize < len) {
            toRead = entrySize;
        }
        final int ret = this.input.read(b, off, toRead);
        offset += (ret > 0 ? ret : 0);
        if (entrySizeCalculated && ret > 0) {
            entrySize -= ret;
        }
        return ret;
    }
    public static boolean matches(byte[] signature, int length) {
        // 3c21 7261 6863 0a3e
        if (length < 8) {
            return false;
        }
        if (signature[0] != 0x21) {
            return false;
        }
        if (signature[1] != 0x3c) {
            return false;
        }
        if (signature[2] != 0x61) {
            return false;
        }
        if (signature[3] != 0x72) {
            return false;
        }
        if (signature[4] != 0x63) {
            return false;
        }
        if (signature[5] != 0x68) {
            return false;
        }
        if (signature[6] != 0x3e) {
            return false;
        }
        if (signature[7] != 0x0a) {
            return false;
        }
        return true;
    }
}
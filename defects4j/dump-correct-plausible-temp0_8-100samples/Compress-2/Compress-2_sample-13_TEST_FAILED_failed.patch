diff --git a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
index 9112fa85..8fc53c3f 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
@@ -35,31 +34,14 @@ public class ArArchiveInputStream extends ArchiveInputStream {
     private final InputStream input;
     private long offset = 0;
     private boolean closed;
-    /*
-     * If getNextEnxtry has been called, the entry metadata is stored in
-     * currentEntry.
-     */
-    /*
-     * The offset where the current entry started. -1 if no entry has been
-     * called
-     */
-
-    public ArArchiveInputStream( final InputStream pInput ) {
+    private boolean entrySizeCalculated;
+    private boolean eof;
+    private int entrySize;
+    public ArArchiveInputStream(final InputStream pInput) {
         input = pInput;
         closed = false;
     }
-
-    /**
-     * Returns the next AR entry in this stream.
-     * 
-     * @return the next AR entry.
-     * @throws IOException
-     *             if the entry could not be read
-     */
     public ArArchiveEntry getNextArEntry() throws IOException {
-                    // hit EOF before previous entry was complete
-                    // TODO: throw an exception instead?
-
         if (offset == 0) {
             final byte[] expected = ArArchiveEntry.HEADER.getBytes();
             final byte[] realized = new byte[expected.length];
@@ -73,13 +55,9 @@ public class ArArchiveInputStream extends ArchiveInputStream {
                 }
             }
         }
-
-                // hit eof
-
-        if (input.available() == 0) {
+        if (eof) {
             return null;
         }
-
         if (offset % 2 != 0) {
             read();
         }
@@ -110,13 +86,11 @@ public class ArArchiveInputStream extends ArchiveInputStream {
                 }
             }
         }
-
-        return new ArArchiveEntry(new String(name).trim(),
-                                          Long.parseLong(new String(length)
-                                                         .trim()));
+        eof = true;
+        entrySize = Integer.parseInt(new String(length).trim());
+        entrySizeCalculated = true;
+        return new ArArchiveEntry(new String(name).trim(), entrySize);
     }
-
-
     public ArchiveEntry getNextEntry() throws IOException {
         return getNextArEntry();
     }
@@ -131,23 +103,31 @@ public class ArArchiveInputStream extends ArchiveInputStream {
     public int read() throws IOException {
         final int ret = input.read();
         offset += (ret > 0 ? 1 : 0);
+        if (ret > 0) {
+            entrySize--;
+        }
         return ret;
     }
-
     public int read(byte[] b) throws IOException {
         return read(b, 0, b.length);
     }
-
     public int read(byte[] b, final int off, final int len) throws IOException {
+        if (entrySizeCalculated && entrySize == 0) {
+            return -1;
+        }
         int toRead = len;
+        if (entrySizeCalculated && entrySize < len) {
+            toRead = entrySize;
+        }
         final int ret = this.input.read(b, off, toRead);
         offset += (ret > 0 ? ret : 0);
+        if (entrySizeCalculated && ret > 0) {
+            entrySize -= ret;
+        }
         return ret;
     }
-
     public static boolean matches(byte[] signature, int length) {
         // 3c21 7261 6863 0a3e
-
         if (length < 8) {
             return false;
         }

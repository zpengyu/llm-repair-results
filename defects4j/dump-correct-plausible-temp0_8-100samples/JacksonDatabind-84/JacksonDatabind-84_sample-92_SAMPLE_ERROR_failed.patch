diff --git a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
index 7b8c69af7..6f0a2b23a 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
@@ -38,68 +31,75 @@ public class ResolvedRecursiveType extends TypeBase
     public StringBuilder getErasedSignature(StringBuilder sb) {
         return _referencedType.getErasedSignature(sb);
     }
-
     @Override
     public JavaType withContentType(JavaType contentType) {
-        return this;
+        if (_referencedType != null) {
+            return _referencedType.withContentType(contentType);
+        }
+        return null;
     }
-    
     @Override
-    public JavaType withTypeHandler(Object h) {
-        return this;
+    public JavaType withContentTypeHandler(Object h) {
+        if (_referencedType != null) {
+            return _referencedType.withContentTypeHandler(h);
+        }
+        return null;
     }
-
     @Override
-    public JavaType withContentTypeHandler(Object h) {
-        return this;
+    public JavaType withTypeHandler(Object h) {
+        if (_referencedType != null) {
+            return _referencedType.withTypeHandler(h);
+        }
+        return null;
     }
-
     @Override
     public JavaType withValueHandler(Object h) {
-        return this;
+        if (_referencedType != null) {
+            return _referencedType.withValueHandler(h);
+        }
+        return null;
     }
-
     @Override
     public JavaType withContentValueHandler(Object h) {
-        return this;
+        if (_referencedType != null) {
+            return _referencedType.withContentValueHandler(h);
+        }
+        return null;
     }
-
     @Override
     public JavaType withStaticTyping() {
-        return this;
+        if (_referencedType != null) {
+            return _referencedType.withStaticTyping();
+        }
+        return null;
     }
-
     @Deprecated // since 2.7
     @Override
     protected JavaType _narrow(Class<?> subclass) {
-        return this;
+        if (_referencedType != null) {
+            return _referencedType._narrow(subclass);
+        }
+        return null;
     }
-
     @Override
     public JavaType refine(Class<?> rawType, TypeBindings bindings,
             JavaType superClass, JavaType[] superInterfaces) {
+        if (_referencedType != null) {
+            return _referencedType.refine(rawType, bindings, superClass, superInterfaces);
+        }
         return null;
     }
-
     @Override
     public boolean isContainerType() {
-        return false;
+        return (_referencedType != null) && _referencedType.isContainerType();
     }
-
     @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder(40)
-                .append("[recursive type; ");
-        if (_referencedType == null) {
-            sb.append("UNRESOLVED");
-        } else {
-            // [databind#1301]: Typically resolves to a loop so short-cut
-            //   and only include type-erased class
-            sb.append(_referencedType.getRawClass().getName());
+        if (_referencedType != null) {
+            return _referencedType.toString();
         }
-        return sb.toString();
+        return "[recursive type; UNRESOLVED]";
     }
-
     @Override
     public boolean equals(Object o) {
         if (o == this) return true;

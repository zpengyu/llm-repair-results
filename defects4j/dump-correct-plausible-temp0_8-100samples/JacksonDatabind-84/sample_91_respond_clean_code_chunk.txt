public class ResolvedRecursiveType extends TypeBase
{
    private static final long serialVersionUID = 1L;
    protected final JavaType _referencedType;
    public ResolvedRecursiveType(Class<?> erasedType, TypeBindings bindings) {
        super(erasedType, bindings, null, null, 0, null, null, false);
        _referencedType = _construct(bindings, this);
    }
    @Override
    public boolean isContainerType() { return false; }
    @Override
    public JavaType withContentType(JavaType contentType) { return this; }
    @Override
    public JavaType withTypeHandler(Object h) { return this; }
    @Override
    public JavaType withContentTypeHandler(Object h) { return this; }
    @Override
    public JavaType withValueHandler(Object h) { return this; }
    @Override
    public JavaType withContentValueHandler(Object h) { return this; }
    @Override
    public JavaType withStaticTyping() { return this; }
    // Actually ok to use here, since type has no contents
    @Override
    public JavaType narrowContentsBy(Class<?> contentClass) { return this; }
    // Actually ok to use here, since type has no contents
    @Override
    public JavaType widenContentsBy(Class<?> contentClass) { return this; }
    @Override
    public StringBuilder getGenericSignature(StringBuilder sb) {
        _referencedType.getGenericSignature(sb);
        return sb;
    }
    @Override
    public StringBuilder getErasedSignature(StringBuilder sb) {
        _referencedType.getErasedSignature(sb);
        return sb;
    }
    @Override
    protected String buildCanonicalName() {
        return _referencedType.toCanonical();
    }
    @Deprecated // since 2.7
    @Override
    protected JavaType _narrow(Class<?> subclass) {
        return this;
    }
    @Override
    public JavaType refine(Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces) {
        // impossible to do anything here.
        return null;
    }
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder(40)
                .append("[recursive type; ");
        if (_referencedType == null) {
            sb.append("UNRESOLVED");
        } else {
            sb.append(_referencedType.toString());
        }
        return sb.toString();
    }
    @Override
    public boolean equals(Object o) {
        if (o == this) return true;
        if (o == null) return false;
        if (o.getClass() != getClass()) {
            return false;
        }
        ResolvedRecursiveType other = (ResolvedRecursiveType) o;
        // Do NOT ever match unresolved references
        return (_referencedType != null)
                && _referencedType.equals(other._referencedType);
    }
}
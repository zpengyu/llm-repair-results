diff --git a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
index 7b8c69af7..9a6e70fdb 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
@@ -7,12 +7,10 @@ import com.fasterxml.jackson.databind.JavaType;
  *
  * @since 2.7
  */
-public class ResolvedRecursiveType extends TypeBase
+class ResolvedRecursiveType extends TypeBase
 {
     private static final long serialVersionUID = 1L;
-
     protected JavaType _referencedType;
-
     public ResolvedRecursiveType(Class<?> erasedType, TypeBindings bindings) {
         super(erasedType, bindings, null, null, 0, null, null, false);
     }
@@ -85,30 +69,12 @@ public class ResolvedRecursiveType extends TypeBase
     public boolean isContainerType() {
         return false;
     }
-
     @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder(40)
-                .append("[recursive type; ");
-        if (_referencedType == null) {
-            sb.append("UNRESOLVED");
-        } else {
-            // [databind#1301]: Typically resolves to a loop so short-cut
-            //   and only include type-erased class
-            sb.append(_referencedType.getRawClass().getName());
-        }
-        return sb.toString();
+        return "";
     }
-
     @Override
     public boolean equals(Object o) {
-        if (o == this) return true;
-        if (o == null) return false;
-        // Do NOT ever match unresolved references
-        if (_referencedType == null) {
-            return false;
-        }
-        return (o.getClass() == getClass()
-                && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));
+        return false;
     }
 }
\ No newline at end of file

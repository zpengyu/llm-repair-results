diff --git a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
index 7b8c69af7..9b4407096 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
@@ -10,25 +10,11 @@ import com.fasterxml.jackson.databind.JavaType;
 public class ResolvedRecursiveType extends TypeBase
 {
     private static final long serialVersionUID = 1L;
-
-    protected JavaType _referencedType;
-
+    protected final Class<?> _referencedType;
     public ResolvedRecursiveType(Class<?> erasedType, TypeBindings bindings) {
         super(erasedType, bindings, null, null, 0, null, null, false);
+        _referencedType = erasedType;
     }
-
-    public void setReference(JavaType ref)
-    {
-        // sanity check; should not be called multiple times
-        if (_referencedType != null) {
-            throw new IllegalStateException("Trying to re-set self reference; old value = "+_referencedType+", new = "+ref);
-        }
-        _referencedType = ref;
-    }
-
-
-    public JavaType getSelfReferencedType() { return _referencedType; }
-
     @Override
     public StringBuilder getGenericSignature(StringBuilder sb) {
         return _referencedType.getGenericSignature(sb);
@@ -95,7 +70,7 @@ public class ResolvedRecursiveType extends TypeBase
         } else {
             // [databind#1301]: Typically resolves to a loop so short-cut
             //   and only include type-erased class
-            sb.append(_referencedType.getRawClass().getName());
+            sb.append(_referencedType.getName());
         }
         return sb.toString();
     }
@@ -109,6 +83,6 @@ public class ResolvedRecursiveType extends TypeBase
             return false;
         }
         return (o.getClass() == getClass()
-                && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));
+                && _referencedType.equals(((ResolvedRecursiveType) o)._referencedType));
     }
 }
\ No newline at end of file

diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
index 41175cf3..d03d956c 100644
--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -367,18 +367,7 @@ class RemoveUnusedVars
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
-
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
@@ -390,15 +378,11 @@ class RemoveUnusedVars
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
       // Strip unreferenced args off the end of the function declaration.
-      Node lastArg;
-      while ((lastArg = argList.getLastChild()) != null) {
-        Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
-          compiler.reportCodeChange();
-        } else {
-          break;
-        }
+      for (Node lastArg = argList.getLastChild();
+           lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()));
+           lastArg = argList.getLastChild()) {
+        argList.removeChild(lastArg);
+        compiler.reportCodeChange();
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);

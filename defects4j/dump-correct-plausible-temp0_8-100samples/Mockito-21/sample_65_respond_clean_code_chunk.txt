import java.lang.reflect.Constructor;
public class ConstructorInstantiator implements Instantiator {
    private final Object outerClassInstance;
    public ConstructorInstantiator(Object outerClassInstance) {
        this.outerClassInstance = outerClassInstance;
    }
    public <T> T newInstance(Class<T> cls) {
        if (outerClassInstance == null) {
            return noArgConstructor(cls);
        }
        return withOuterClass(cls);
    }
    private <T> T withOuterClass(Class<T> cls) {
        try {
            //this is kind of overengineered because we don't need to support more params
            //however, I know we will be needing it :)
            Constructor<T> c = null;
            Class<?> outerClass = outerClassInstance.getClass();
            for (Constructor<?> constructor : cls.getDeclaredConstructors()) {
                Class<?> outerParam = constructor.getParameterTypes()[0];
                if (outerParam.isAssignableFrom(outerClass)) {
                    c = (Constructor<T>) constructor;
                    break;
                }
            }
            if (c != null) {
                return c.newInstance(outerClassInstance);
            } else {
                throw new InstantationException("Unable to create mock instance of '"
                        + cls.getSimpleName() + "'.\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.");
            }
        } catch (Exception e) {
            throw paramsException(cls, e);
        }
    }
    private static <T> InstantationException paramsException(Class<T> cls, Exception e) {
        return new InstantationException("Unable to create mock instance of '"
                + cls.getSimpleName() + "'.\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.", e);
    }
    private static <T> T noArgConstructor(Class<T> cls) {
        try {
            return cls.newInstance();
        } catch (Exception e) {
            throw new InstantationException("Unable to create mock instance of '"
                    + cls.getSimpleName() + "'.\nPlease ensure it has parameter-less constructor.", e);
        }
    }
}
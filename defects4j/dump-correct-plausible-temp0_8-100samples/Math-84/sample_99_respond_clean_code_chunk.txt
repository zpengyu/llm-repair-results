    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
        while (true) {
            incrementIterationsCounter();
            // save the original vertex
            final RealPointValuePair[] original = simplex;
            final RealPointValuePair best = original[0];
            // perform a reflection step
            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
            if (comparator.compare(reflected, best) < 0) {
                // compute the expanded simplex
                final RealPointValuePair[] reflectedSimplex = simplex;
                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                if (comparator.compare(reflected, expanded) < 0) {
                    // accept the reflected simplex
                    simplex = reflectedSimplex;
                } else {
                    // accept the expanded simplex
                    simplex[simplex.length - 1] = expanded;
                }
                return;
            }
            // compute the contracted simplex
            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
            if (comparator.compare(contracted, best) <= 0) {
                // accept the contracted simplex
                simplex[simplex.length - 1] = contracted;
            } else {
                // perform a reduction step
                for (int i = 1; i < simplex.length; ++i) {
                    for (int j = 0; j < simplex[i].getPoint().length; ++j) {
                        final double[] v = simplex[i].getPointRef();
                        v[j] = best.getPoint()[j] + sigma * (v[j] - best.getPoint()[j]);
                        simplex[i] = new RealPointValuePair(v, Double.NaN, false);
                    }
                }
                evaluate(simplex, comparator);
            }
        }
    }
Unit testing is a development process that is used to test the correctness of isolated units (components) of a software system.
The primary benefit of unit testing is that it helps in finding defects early in the development cycle.
It is performed by developers with white-box testing techniques.
These tests can be automated and run as part of integration and build processes.
Unit testing ensures that each program module runs as expected and performs its functions correctly.
The most commonly used unit testing frameworks are JUnit, TestNG, etc.
The section below lists some of the most common unit testing techniques.
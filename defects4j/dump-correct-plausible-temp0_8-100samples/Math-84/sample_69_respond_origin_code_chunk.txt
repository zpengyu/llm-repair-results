    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {

        while (true) {

            incrementIterationsCounter();

            // save the original vertex
            final RealPointValuePair[] original = simplex;
            final RealPointValuePair best = original[0];

            // perform a reflection step
            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
            if (comparator.compare(reflected, best) < 0) {

                // compute the expanded simplex
                final RealPointValuePair[] reflectedSimplex = simplex;
                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                if (comparator.compare(best, expanded) <= 0 &&
                    comparator.compare(reflected, expanded) <= 0) {
                    // accept the reflected simplex
                    simplex = reflectedSimplex;
                } else {
                    // accept the expanded simplex
                    simplex = reflectedSimplex;
                }

                return;

            }

            // compute the contracted simplex
            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
            if (comparator.compare(contracted, best) <= 0) {
                // accept the contracted simplex

                // check convergence
                return;
            }

            // perform a reduction step
            for (int i = getDimension(); i >= 0; --i) {
                if (i > 0) {
                    System.arraycopy(original[i - 1].getPointRef(), 0, simplex[i].getPointRef(), 0, getDimension());
                }
                evaluateNewSimplex(simplex, beta, comparator);
            }

            // check convergence
            if (comparator.compare(simplex[0], best) == 0) {
                return;
            }

        }

    }



diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
index 2fa8c34bf..1b0ba290c 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
@@ -79,25 +74,39 @@ public class MultiDirectional extends DirectSearchOptimizer {
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = expanded;
                 }
-
                 return;
-
             }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+            // perform an outside contraction step
+            final RealPointValuePair[] originalOut = simplex;
+            final RealPointValuePair contractedOut = evaluateNewSimplex(originalOut, gamma, comparator);
+            if (comparator.compare(contractedOut, best) <= 0) {
                 // accept the contracted simplex
-
-            // check convergence
+                simplex = contractedOut;
+                // check convergence
                 return;
             }
-
+            // perform an inside contraction step
+            final RealPointValuePair contractedIn = evaluateNewSimplex(original, -gamma, comparator);
+            if (comparator.compare(contractedIn, best) < 0) {
+                // accept the contracted simplex
+                simplex = contractedIn;
+            } else {
+                // perform a reduction step
+                for (int i = 1; i < simplex.length; ++i) {
+                    for (int j = 0; j < simplex[i].getPoint().length; ++j) {
+                        final double[] v = simplex[i].getPointRef();
+                        v[j] = best.getPoint()[j] - sigma * (v[j] - best.getPoint()[j]);
+                    }
+                }
+                evaluate(simplex[0].getPoint(), comparator);
+            }
+            return;
         }
-
     }
-
     /** Compute and evaluate a new simplex.
      * @param original original simplex (to be preserved)
      * @param coeff linear coefficient

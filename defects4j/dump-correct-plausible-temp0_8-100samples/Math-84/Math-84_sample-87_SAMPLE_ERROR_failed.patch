diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
index 2fa8c34bf..c2247db1a 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
@@ -76,28 +71,37 @@ public class MultiDirectional extends DirectSearchOptimizer {
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+                if (comparator.compare(reflected, expanded) < 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = reflectedSimplex;
                 }
-
                 return;
-
             }
-
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
-                return;
+                simplex = simplex;
+            } else {
+                // perform a reduction step
+                final RealPointValuePair[] reducedSimplex = new RealPointValuePair[n + 1];
+                reducedSimplex[0] = original[0];
+                for (int i = 1; i <= n; ++i) {
+                    final double[] x = new double[n];
+                    for (int j = 0; j < n; ++j) {
+                        x[j] = sigma * (original[0].getPoint()[j] + original[i].getPoint()[j]);
+                    }
+                    reducedSimplex[i] = new RealPointValuePair(x, Double.NaN, false);
+                }
+                simplex = reducedSimplex;
             }
-
+        // check convergence
+            return;
         }
-
     }
-
     /** Compute and evaluate a new simplex.
      * @param original original simplex (to be preserved)
      * @param coeff linear coefficient

diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
index 2fa8c34bf..cfd193597 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
@@ -79,25 +74,31 @@ public class MultiDirectional extends DirectSearchOptimizer {
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = expandedSimplex;
                 }
-
                 return;
-
             }
-
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+            if (comparator.compare(contracted, best) <= 0) {
                 // accept the contracted simplex
-
-            // check convergence
-                return;
+                simplex = contractedSimplex;
+            } else {
+                // perform a shrinkage operation on the simplex
+                for (int i = 0; i < simplex.length; ++i) {
+                    final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);
+                    if (comparator.compare(contracted, best) < 0) {
+                        simplex = contractedSimplex;
+                    } else {
+                        // reject the contraction and keep the original simplex
+                        simplex = original;
+                    }
+                }
             }
-
         }
-
     }
-
     /** Compute and evaluate a new simplex.
      * @param original original simplex (to be preserved)
      * @param coeff linear coefficient

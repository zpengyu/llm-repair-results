diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
index 2fa8c34bf..0904843cc 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
@@ -79,25 +74,42 @@ public class MultiDirectional extends DirectSearchOptimizer {
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = reflectedSimplex;
+                }
+            } else {
+                // perform a contraction step
+                // compute the contracted simplex
+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+                if (comparator.compare(contracted, best) <= 0) {
+                    // accept the contracted simplex
+                    simplex = contractedSimplex;
+                } else {
+                    // perform a reduction step
+                    // compute the reduced simplex
+                    final RealPointValuePair reduced = evaluateNewSimplex(original, rho, comparator);
+                    if (comparator.compare(reduced, best) < 0) {
+                        // accept the reduced simplex
+                        simplex = reducedSimplex;
+                    } else {
+                        // shrink the simplex
+                        final RealPointValuePair[] smallSimplex = simplex;
+                        for (int i = 1; i < smallSimplex.length; ++i) {
+                            for (int j = 0; j < smallSimplex[i].getPoint().length; ++j) {
+                                final double[] vertex = smallSimplex[i].getPoint();
+                                vertex[j] = best.getPoint()[j] + sigma * (vertex[j] - best.getPoint()[j]);
+                            }
+                        }
+                    }
                 }
-
-                return;
-
             }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
             // check convergence
+            if (isConverged(getIterations(), original, simplex, comparator)) {
                 return;
             }
-
         }
-
     }
-
     /** Compute and evaluate a new simplex.
      * @param original original simplex (to be preserved)
      * @param coeff linear coefficient

diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java
index b388e22e..3ab2dfa0 100644
--- a/src/java/org/apache/commons/lang/time/DateUtils.java
+++ b/src/java/org/apache/commons/lang/time/DateUtils.java
@@ -617,7 +617,7 @@ public class DateUtils {
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
-    private static void modify(Calendar val, int field, boolean round) {
+    public static void modify(Calendar val, int field, int modType) {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
@@ -635,31 +632,30 @@ public class DateUtils {
         Date date = val.getTime();
         long time = date.getTime();
         boolean done = false;
-
         // truncate milliseconds
         int millisecs = val.get(Calendar.MILLISECOND);
-        if (!round || millisecs < 500) {
+        if (modType == DateUtils.ROUND_DOWN && millisecs < 500) {
             time = time - millisecs;
-        if (field == Calendar.SECOND) {
-            done = true;
-            }
         }
-
+        if (modType == DateUtils.ROUND_UP && millisecs >= 500) {
+            time = time + (1000 - millisecs);
+        }
         // truncate seconds
         int seconds = val.get(Calendar.SECOND);
-        if (!done && (!round || seconds < 30)) {
+        if (!done && modType == DateUtils.ROUND_DOWN && seconds < 30) {
             time = time - (seconds * 1000L);
-        if (field == Calendar.MINUTE) {
-            done = true;
-            }
         }
-
+        if (!done && modType == DateUtils.ROUND_UP && seconds >= 30) {
+            time = time + (60000 - (seconds * 1000L));
+        }
         // truncate minutes
         int minutes = val.get(Calendar.MINUTE);
-        if (!done && (!round || minutes < 30)) {
+        if (!done && modType == DateUtils.ROUND_DOWN && minutes < 30) {
             time = time - (minutes * 60000L);
         }
-
+        if (!done && modType == DateUtils.ROUND_UP && minutes >= 30) {
+            time = time + ((60 * 60000) - (minutes * 60000L));
+        }
         // reset time
         if (date.getTime() != time) {
             date.setTime(time);
@@ -672,7 +667,7 @@ public class DateUtils {
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
                     //This is our field... we stop looping
-                    if (round && roundUp) {
+                    if (modType == DateUtils.ROUND_UP) {
                         if (field == DateUtils.SEMI_MONTH) {
                             //This is a special case that's hard to generalize
                             //If the date is 1, we round up to 16, otherwise

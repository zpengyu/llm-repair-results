diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
index 3c89dc109..ae6a2ffac 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
@@ -834,7 +830,84 @@ public class BeanDeserializer
         }
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
-
+    /**
+     * Method called to deserialize bean using "property-based creator":
+     * this means that a non-default constructor or factory method is
+     * called, and then possibly other setters. The trick is that
+     * values for creator method need to be buffered, first; and 
+     * due to non-guaranteed ordering possibly some other properties
+     * as well.
+     */
+    public Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)
+        throws IOException
+    {
+        final ExternalTypeHandler ext = _externalTypeIdHandler.start();
+        final PropertyBasedCreator creator = _propertyBasedCreator;
+        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
+        TokenBuffer tokens = new TokenBuffer(p, ctxt);
+        tokens.writeStartObject();
+        for (JsonToken t = p.getCurrentToken(); t == JsonToken.FIELD_NAME; t = p.nextToken()) {
+            String propName = p.getCurrentName();
+            p.nextToken(); // to point to value
+            // creator property?
+            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
+            if (creatorProp != null) {
+                // Last creator property to set?
+                if (ext.handlePropertyValue(p, ctxt, propName, buffer, creatorProp)) {
+                    t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
+                    Object bean;
+                    try {
+                        bean = creator.build(ctxt, buffer);
+                    } catch (Exception e) {
+                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                        continue; // never gets here
+                    }
+                    // if so, need to copy all remaining tokens into buffer
+                    while (t == JsonToken.FIELD_NAME) {
+                        String n = p.getCurrentName();
+                        p.nextToken();
+                        ext.handleTypePropertyValue(p, ctxt, n, bean);
+                        t = p.nextToken();
+                    }
+                    return ext.complete(p, ctxt, bean);
+                }
+                continue;
+            }
+            // regular property? needs buffering
+            SettableBeanProperty prop = _beanProperties.find(propName);
+            if (prop != null) {
+                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+                continue;
+            }
+            // external type id (or property that depends on it)?
+            if (ext.handlePropertyValue(p, ctxt, propName, null, null)) {
+                continue;
+            }
+            // things marked as ignorable should not be passed to any setter
+            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                handleIgnoredProperty(p, ctxt, handledType(), propName);
+                continue;
+            }
+            // "any property"?
+            if (_anySetter != null) {
+                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+                continue;
+            }
+            // Ok then, let's collect the whole field; name and value
+            tokens.writeFieldName(propName);
+            tokens.copyCurrentStructure(p);
+            // but we are NOT to advance the parser!
+        }
+        // We hit END_OBJECT, so:
+        Object bean;
+        try {
+            bean = creator.build(ctxt, buffer);
+        } catch (Exception e) {
+            wrapInstantiationProblem(e, ctxt);
+            return null; // never gets here
+        }
+        return ext.complete(p, ctxt, bean);
+    }
     /*
     /**********************************************************
     /* Handling for cases where we have property/-ies with

diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
index 3c89dc109..f1e712bda 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
@@ -756,25 +753,47 @@ public class BeanDeserializer
                 // Last creator property to set?
                 if (buffer.assignParameter(creatorProp,
                         _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
-                    t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
-                        bean = wrapInstantiationProblem(e, ctxt);
+                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                        continue; // never gets here
                     }
                     // [databind#631]: Assign current value, to be accessible by custom serializers
                     p.setCurrentValue(bean);
-                    // if so, need to copy all remaining tokens into buffer
-                    while (t == JsonToken.FIELD_NAME) {
-                        // NOTE: do NOT skip name as it needs to be copied; `copyCurrentStructure` does that
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
+                    while (p.nextToken() != JsonToken.END_OBJECT) {
+                        propName = p.getCurrentName();
+                        p.nextToken(); // to point to value
+                        // creator property?
+                        // regular property? needs buffering
+                        SettableBeanProperty prop = _beanProperties.find(propName);
+                        if (prop != null) {
+                            buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));
+                            continue;
+                        }
+                        // Things marked as ignorable should not be passed to any setter
+                        if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                            handleIgnoredProperty(p, ctxt, handledType(), propName);
+                            continue;
+                        }
+                        // 29-Nov-2016, tatu: probably should try to avoid sending content
+                        //    both to any setter AND buffer... but, for now, the only thing
+                        //    we can do.
+                        // how about any setter? We'll get copies but...
+                        if (_anySetter == null) {
+                            // but... others should be passed to unwrapped property deserializers
+                            tokens.writeFieldName(propName);
+                            tokens.copyCurrentStructure(p);
+                        } else {
+                            // Need to copy to a separate buffer first
+                            TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);
+                            tokens.writeFieldName(propName);
+                            tokens.append(b2);
+                            buffer.bufferAnyProperty(_anySetter, propName,
+                                    _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));
+                        }
                     }
-                    // 28-Aug-2018, tatu: Let's add sanity check here, easier to catch off-by-some
-                    //    problems if we maintain invariants
-                    tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
                         // !!! 08-Jul-2011, tatu: Could probably support; but for now
                         //   it's too complicated, so bail out
@@ -814,16 +833,10 @@ public class BeanDeserializer
                 TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);
                 tokens.writeFieldName(propName);
                 tokens.append(b2);
-                try {
-                    buffer.bufferAnyProperty(_anySetter, propName,
-                            _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));
-                } catch (Exception e) {
-                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                }
-                continue;
+                buffer.bufferAnyProperty(_anySetter, propName,
+                        _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));
             }
         }
-
         // We hit END_OBJECT, so:
         Object bean;
         try {

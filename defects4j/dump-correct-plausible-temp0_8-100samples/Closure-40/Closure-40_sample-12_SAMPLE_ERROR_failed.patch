diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java
index 25e2b5d4..cfb96993 100644
--- a/src/com/google/javascript/jscomp/NameAnalyzer.java
+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java
@@ -911,15 +900,22 @@ final class NameAnalyzer implements CompilerPass {
           recordReference(referringName, name, depType);
         }
       } else {
-        // No named dependency scope found.  Unfortunately that might
-        // mean that the expression is a child of an function expression
-        // or assignment with a complex lhs.  In those cases,
-        // protect this node by creating a reference to WINDOW.
-        for (Node ancestor : n.getAncestors()) {
-          if (NodeUtil.isAssignmentOp(ancestor) ||
-              ancestor.isFunction()) {
-            recordReference(WINDOW, name, RefType.REGULAR);
-            break;
+        if (NodeUtil.isFunction(n)) {
+          // If we are in a function expression, then there is no referring
+          // name.  In that case, we want to create a reference to this
+          // function expression.
+          recordReference(WINDOW, name, RefType.REGULAR);
+        } else {
+          // No named dependency scope found.  Unfortunately that might
+          // mean that the expression is a child of an function expression
+          // or assignment with a complex lhs.  In those cases,
+          // protect this node by creating a reference to WINDOW.
+          for (Node ancestor : n.getAncestors()) {
+            if (NodeUtil.isAssignmentOp(ancestor) ||
+                ancestor.isFunction()) {
+              recordReference(WINDOW, name, RefType.REGULAR);
+              break;
+            }
           }
         }
       }

    Node processFunctionNode(FunctionNode functionNode) {
      Name name = functionNode.getFunctionName();
      Boolean isUnnamedFunction = false;
      if (name == null) {
        name = new Name();
        name.setIdentifier("");
        isUnnamedFunction = true;
      }
      Node node = newNode(Token.FUNCTION);
      Node newName = transform(name);
      if (isUnnamedFunction) {
        // Old Rhino tagged the empty name node with the line number of the
        // declaration.
        newName.setLineno(functionNode.getLineno());
        // TODO(bowdidge) Mark line number of paren correctly.
        // Same problem as below - the left paren might not be on the
        // same line as the function keyword.
        int lpColumn = functionNode.getAbsolutePosition() +
            functionNode.getLp();
        newName.setCharno(position2charno(lpColumn));
      }

      node.addChildToBack(newName);
      Node lp = newNode(Token.LP);
      // The left paren's complicated because it's not represented by an
      // AstNode, so there's nothing that has the actual line number that it
      // appeared on.  We know the paren has to appear on the same line as the
      // function name (or else a semicolon will be inserted.)  If there's no
      // function name, assume the paren was on the same line as the function.
      // TODO(bowdidge): Mark line number of paren correctly.
      Name fnName = functionNode.getFunctionName();
      if (fnName != null) {
        lp.setLineno(fnName.getLineno());
      } else {
        lp.setLineno(functionNode.getLineno());
      }
      int lparenCharno = functionNode.getLp() +
          functionNode.getAbsolutePosition();

      lp.setCharno(position2charno(lparenCharno));
      for (AstNode param : functionNode.getParams()) {
        lp.addChildToBack(transform(param));
      }
      node.addChildToBack(lp);

      Node bodyNode = transform(functionNode.getBody());
      parseDirectives(bodyNode);
      node.addChildToBack(bodyNode);
      if (functionNode.getEnclosingSource() != null) {
        // If there's an enclosing source, then we've got a normal source
        // file, and can add the source to the parse tree.
        String source = functionNode.getEnclosingSource().toSource();
        source = source.substring(
            functionNode.getAbsolutePosition(),
            functionNode.getAbsolutePosition() + functionNode.getLength());
        node.putProp(Node.SOURCENAME_PROP, functionNode.getSourceName());
        node.putProp(Node.SOURCEFILE_PROP, functionNode.getSourceFileName());
        node.putProp(Node.SLASH_STAR_COMMENTS_PROP,
            functionNode.getEnclosingSource().getComments());
        node.setInputId(functionNode.getInputId());
        node.setEncodedSourceBounds(
            new int[] {
              functionNode.getAbsolutePosition(),
              functionNode.getLength()});
        node.putProp(Node.RAW_SOURCE_PROP, source);
      }
      return node;
    }

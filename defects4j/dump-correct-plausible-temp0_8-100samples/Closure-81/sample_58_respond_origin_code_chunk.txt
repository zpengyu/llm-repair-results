    Node processFunctionNode(FunctionNode functionNode) {
      Name name = functionNode.getFunctionName();
      Boolean isUnnamedFunction = false;
      if (name == null) {
        name = new Name();
        name.setIdentifier("");
        isUnnamedFunction = true;
      }
      Node node = newNode(Token.FUNCTION);
      Node newName = transform(name);
      if (isUnnamedFunction) {
        // Old Rhino tagged the empty name node with the line number of the
        // declaration.
        newName.setLineno(functionNode.getLineno());
        // TODO(bowdidge) Mark line number of paren correctly.
        // Same problem as below - the left paren might not be on the
        // same line as the function keyword.
        int lpColumn = functionNode.getAbsolutePosition() +
            functionNode.getLp();
        newName.setCharno(position2charno(lpColumn));
      }

      node.addChildToBack(newName);
      Node lp = newNode(Token.LP);
      // The left paren's complicated because it's not represented by an
      // AstNode, so there's nothing that has the actual line number that it
      // appeared on.  We know the paren has to appear on the same line as the
      // function name (or else a semicolon will be inserted.)  If there's no
      // function name, assume the paren was on the same line as the function.
      // TODO(bowdidge): Mark line number of paren correctly.
      Name fnName = functionNode.getFunctionName();
      if (fnName != null) {
        lp.setLineno(fnName.getLineno());
      } else {
        lp.setLineno(functionNode.getLineno());
      }
      int lparenCharno = functionNode.getLp() +
          functionNode.getAbsolutePosition();

      lp.setCharno(position2charno(lparenCharno));
      for (AstNode param : functionNode.getParams()) {
        lp.addChildToBack(transform(param));
      }
      node.addChildToBack(lp);

      Node bodyNode = transform(functionNode.getBody());
      parseDirectives(bodyNode);
      // if body is a block and there is more than one child in the block
      // then we want to wrap all children except the first in a block.
      // this way we ensure that the function body is a block and we can
      // handle the return case below and get the correct return statement.
      //
      // example of what we are trying to prevent:
      // function test() {
      //   console.log("foo");
      //   return;
      //   console.log("bar");
      // }
      //
      // should be:
      //
      // function test() {
      //   console.log("foo");
      //   return;
      //   { console.log("bar"); }
      // }
      Node currentNode = bodyNode;
      while (currentNode.getChildCount() == 1) {
        currentNode = currentNode.getFirstChild();
      }

      if (currentNode.getChildCount() > 1
          && currentNode.isBlock()
          && (currentNode.getFirstChild().isReturn()
              || currentNode.getFirstChild().isThrow())) {
        // wrap the block so that we only return from the first statement
        Node wrapper = new Node(Token.BLOCK);
        wrapper.addChildToBack(currentNode.getFirstChild());
        currentNode.detachChildren();
        currentNode.addChildrenToBack(wrapper);
      }
      node.addChildToBack(currentNode);
      return node;
    }



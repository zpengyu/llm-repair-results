diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 0f2a6d44..5d62d32a 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -656,21 +655,6 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
-
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
-
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
-        return n;
-      }
-
       // Convert the numbers to ints
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
@@ -683,7 +666,18 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
-
+      // check ranges.  We do not do anything that would clip the double to
+      // a 32-bit range, since the user likely does not intend that.
+      if (!(lvalInt >= Integer.MIN_VALUE && lvalInt <= Integer.MAX_VALUE)) {
+        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+        return n;
+      }
+      // only the lower 5 bits are used when shifting, so don't do anything
+      // if the shift amount is outside [0,32)
+      if (!(rvalInt >= 0 && rvalInt < 32)) {
+        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
+        return n;
+      }
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;

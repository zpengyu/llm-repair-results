diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 0f2a6d44..fc14b63c 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -650,13 +650,9 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
-    if (left.getType() == Token.NUMBER &&
-        right.getType() == Token.NUMBER) {
-
-      double result;
+    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {
       double lval = left.getDouble();
       double rval = right.getDouble();
-
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
@@ -683,7 +676,7 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
-
+      int result;
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;

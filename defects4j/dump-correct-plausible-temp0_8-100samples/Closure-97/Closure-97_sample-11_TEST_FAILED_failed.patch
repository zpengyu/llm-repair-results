diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 0f2a6d44..5a4753eb 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -649,10 +649,9 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
   /**
    * Try to fold shift operations
    */
-  private Node tryFoldShift(Node n, Node left, Node right) {
+   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
-
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
@@ -689,13 +683,10 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
-          result = lvalInt >> rvalInt;
+          result = lvalInt >>> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          result = lvalInt >> rvalInt;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +

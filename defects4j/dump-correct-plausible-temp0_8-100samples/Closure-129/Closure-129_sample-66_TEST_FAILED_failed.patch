diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java
index 0791c7e6..c9d5796f 100644
--- a/src/com/google/javascript/jscomp/PrepareAst.java
+++ b/src/com/google/javascript/jscomp/PrepareAst.java
@@ -155,27 +155,22 @@ class PrepareAst implements CompilerPass {
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
-    private void annotateCalls(Node n) {
-      Preconditions.checkState(n.isCall());
-
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
-      Node first = n.getFirstChild();
-
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
-        n.putBooleanProp(Node.FREE_CALL, true);
-      }
-
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+      private void annotateCalls(Node n) {
+        Preconditions.checkState(n.isCall());
+        // Keep track of of the "this" context of a call.  A call without an
+        // explicit "this" is a free call.
+        Node first = n.getFirstChild();
+        // ignore cast nodes.
+        if (!NodeUtil.isGet(first) && !NodeUtil.isFunctionObjectCall(n)) {
+          n.putBooleanProp(Node.FREE_CALL, true);
+        }
+        // Keep track of the context in which eval is called. It is important
+        // to distinguish between "(0, eval)()" and "eval()".
+        if (first.isName() &&
+            "eval".equals(first.getString())) {
+          first.putBooleanProp(Node.DIRECT_EVAL, true);
+        }
       }
-    }
-
     /**
      * Translate dispatcher info into the property expected node.
      */

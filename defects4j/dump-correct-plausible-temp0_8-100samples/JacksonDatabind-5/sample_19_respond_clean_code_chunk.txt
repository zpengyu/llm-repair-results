    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
            Class<?> mixInCls, AnnotatedMethodMap mixIns)
    {
        List<Class<?>> parents = new ArrayList<Class<?>>();
        parents.add(mixInCls);
        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
        for (Class<?> mixin : parents) {
            for (Method m : mixin.getDeclaredMethods()) {
                if (!_isIncludableMemberMethod(m)) {
                    continue;
                }
                AnnotatedMethod am = methods.find(m);
                if (am != null) {
                    _addMixUnders(m, am);
                } else {
                    AnnotatedMethod newMethod = _constructMethod(m);
                    mixIns.add(newMethod);
                    // Well, or, as per [Issue#515], multi-level merge within mixins...
                    if (newMethod.getDeclaringClass().isInterface() && !m.getDeclaringClass().isInterface()) {
                        // Need to copy it again, from actual implementation class, to get it right
                        am = methods.find(m);
                        if (am != null) {
                            _addMixUnders(m, am);
                        }
                    }
                }
            }
        }
    }
diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 805db9af..80f5bab0 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -1445,32 +1442,45 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
-
-    Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
+    if (intIndex == 0) {
+      Node current = left.getFirstChild();
+      Node elem = null;
         elem = current;
-
-      current = current.getNext();
-    }
-
-    if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
-    if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+      if (elem == null) {
+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+        return n;
+      }
+      if (elem.isEmpty()) {
+        elem = NodeUtil.newUndefinedNode(elem);
+      } else {
+        left.removeChild(elem);
+      }
+      // Replace the entire GETELEM with the value
+      n.getParent().replaceChild(n, elem);
+      reportCodeChange();
+      return elem;
     } else {
-      left.removeChild(elem);
+      Node current = left.getFirstChild();
+      Node elem = null;
+      for (int i = 0; current != null && i < intIndex; i++) {
+          elem = current;
+        current = current.getNext();
+      }
+      if (elem == null) {
+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+        return n;
+      }
+      if (elem.isEmpty()) {
+        elem = NodeUtil.newUndefinedNode(elem);
+      } else {
+        left.removeChild(elem);
+      }
+      // Replace the entire GETELEM with the value
+      n.getParent().replaceChild(n, elem);
+      reportCodeChange();
+      return elem;
     }
-
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
-    reportCodeChange();
-    return elem;
   }
-
   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {
     Preconditions.checkArgument(NodeUtil.isGet(n));
 

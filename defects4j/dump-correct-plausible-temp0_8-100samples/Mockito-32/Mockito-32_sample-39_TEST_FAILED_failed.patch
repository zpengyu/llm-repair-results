diff --git a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
index e292e1300..b2c7c7a0d 100644
--- a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
+++ b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java
@@ -36,17 +36,20 @@ public class SpyAnnotationEngine implements AnnotationEngine {
                     Object instance = field.get(testClass);
                     if (instance == null) {
                         throw new MockitoException("Cannot create a @Spy for '" + field.getName() + "' field because the *instance* is missing\n" +
-                        		  "The instance must be created *before* initMocks();\n" +
+                                  "The instance must be created *before* initMocks();\n" +
                                   "Example of correct usage of @Spy:\n" +
-                            	  "   @Spy List mock = new LinkedList();\n" +
-                            	  "   //also, don't forget about MockitoAnnotations.initMocks();");
-
+                                  "   @Spy List mock = new LinkedList();\n" +
+                                  "   //also, don't forget about MockitoAnnotations.initMocks();");
                     }
                     if (new MockUtil().isMock(instance)) { 
                         // instance has been spied earlier
                         Mockito.reset(instance);
                     } else {
-                        field.set(testClass, Mockito.spy(instance));
+                    	Object spiedObj = Mockito.spy(instance);
+                    	 if (!instance.getClass().isArray()) {
+                    		 Mockito.doReturn(instance).when(spiedObj).getClass();
+                             field.set(testClass, spiedObj);
+                    	 }
                     }
                 } catch (IllegalAccessException e) {
                     throw new MockitoException("Problems initiating spied field " + field.getName(), e);

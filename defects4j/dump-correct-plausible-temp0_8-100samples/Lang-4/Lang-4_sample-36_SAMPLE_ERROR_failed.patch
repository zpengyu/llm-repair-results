diff --git a/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java
index f372f004..d9ca9548 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java
@@ -27,11 +27,11 @@ import java.util.HashMap;
  * @version $Id$
  */
 public class LookupTranslator extends CharSequenceTranslator {
-
     private final HashMap<CharSequence, CharSequence> lookupMap;
+    private final HashSet<CharSequence> prefixSet;
+    private final HashSet<CharSequence> suffixSet;
     private final int shortest;
     private final int longest;
-
     /**
      * Define the lookup table to be used in translation
      *
@@ -44,11 +44,15 @@ public class LookupTranslator extends CharSequenceTranslator {
      */
     public LookupTranslator(final CharSequence[]... lookup) {
         lookupMap = new HashMap<CharSequence, CharSequence>();
+        prefixSet = new HashSet<CharSequence>();
+        suffixSet = new HashSet<CharSequence>();
         int _shortest = Integer.MAX_VALUE;
         int _longest = 0;
         if (lookup != null) {
             for (final CharSequence[] seq : lookup) {
                 this.lookupMap.put(seq[0], seq[1]);
+                this.prefixSet.add(seq[0].charAt(0));
+                this.suffixSet.add(seq[0].charAt(seq[0].length() - 1));
                 final int sz = seq[0].length();
                 if (sz < _shortest) {
                     _shortest = sz;
@@ -67,17 +70,20 @@ public class LookupTranslator extends CharSequenceTranslator {
      */
     @Override
     public int translate(final CharSequence input, final int index, final Writer out) throws IOException {
-        int max = longest;
-        if (index + longest > input.length()) {
-            max = input.length() - index;
-        }
-        // descend so as to get a greedy algorithm
-        for (int i = max; i >= shortest; i--) {
-            final CharSequence subSeq = input.subSequence(index, index + i);
-            final CharSequence result = lookupMap.get(subSeq);
-            if (result != null) {
-                out.write(result.toString());
-                return i;
+        // check if translation exists for the input at position index
+        if (prefixSet.contains(input.charAt(index))) {
+            int max = longest;
+            if (index + longest > input.length()) {
+                max = input.length() - index;
+            }
+            // implement greedy algorithm by trying maximum match first
+            for (int i = max; i >= shortest; i--) {
+                final CharSequence subSeq = input.subSequence(index, index + i);
+                final CharSequence result = lookupMap.get(subSeq);
+                if (result != null) {
+                    out.write(result.toString());
+                    return i;
+                }
             }
         }
         return 0;

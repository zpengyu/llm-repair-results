diff --git a/src/main/java/org/jsoup/nodes/LeafNode.java b/src/main/java/org/jsoup/nodes/LeafNode.java
index 0e068b5..0cfb3a9 100644
--- a/src/main/java/org/jsoup/nodes/LeafNode.java
+++ b/src/main/java/org/jsoup/nodes/LeafNode.java
@@ -5,92 +5,21 @@ import org.jsoup.helper.Validate;
 import java.util.List;
 
 abstract class LeafNode extends Node {
-
-    Object value; // either a string value, or an attribute map (in the rare case multiple attributes are set)
-
+    protected String coreValue; // either a string value, or an attribute map (in the rare case multiple attributes are set)
     protected final boolean hasAttributes() {
-        return value instanceof Attributes;
-    }
-
-    @Override
-    public final Attributes attributes() {
-        ensureAttributes();
-        return (Attributes) value;
-    }
-
-    private void ensureAttributes() {
-        if (!hasAttributes()) {
-            Object coreValue = value;
-            Attributes attributes = new Attributes();
-            value = attributes;
-            if (coreValue != null)
-                attributes.put(nodeName(), (String) coreValue);
-        }
-    }
-
-    String coreValue() {
-        return attr(nodeName());
-    }
-
-    void coreValue(String value) {
-        attr(nodeName(), value);
-    }
-
-    @Override
-    public String attr(String key) {
-        Validate.notNull(key);
-        if (!hasAttributes()) {
-            return key.equals(nodeName()) ? (String) value : EmptyString;
-        }
-        return super.attr(key);
+        return attributes != null;
     }
-
-    @Override
-    public Node attr(String key, String value) {
-        if (!hasAttributes() && key.equals(nodeName())) {
-            this.value = value;
-        } else {
-            ensureAttributes();
-            super.attr(key, value);
-        }
-        return this;
-    }
-
-    @Override
-    public boolean hasAttr(String key) {
-        ensureAttributes();
-        return super.hasAttr(key);
-    }
-
-    @Override
-    public Node removeAttr(String key) {
-        ensureAttributes();
-        return super.removeAttr(key);
-    }
-
-    @Override
-    public String absUrl(String key) {
-        ensureAttributes();
-        return super.absUrl(key);
-    }
-
-    @Override
-    public String baseUri() {
-        return hasParent() ? parent().baseUri() : "";
+    protected final void ensureAttributes() {
+        if (!hasAttributes())
+            attributes = new LinkedHashMap<String, Attributes>();
     }
-
-    @Override
-    protected void doSetBaseUri(String baseUri) {
-        // noop
+    protected final String coreValue() {
+        return coreValue;
     }
-
-    @Override
-    public int childNodeSize() {
-        return 0;
+    protected final void coreValue(String coreValue) {
+        this.coreValue = coreValue;
     }
-
-    @Override
-    protected List<Node> ensureChildNodes() {
+    protected final void ensureChildNodes() {
         throw new UnsupportedOperationException("Leaf Nodes do not have child nodes.");
     }
 }
\ No newline at end of file

diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java
index aeaa0dc42..924b96ad4 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java
@@ -425,33 +425,58 @@ System.err.println("And new propr #"+slot+" '"+key+"'");
      */
     public void remove(SettableBeanProperty propToRm)
     {
-        ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
         String key = getPropertyName(propToRm);
-        boolean found = false;
-
-        for (int i = 1, end = _hashArea.length; i < end; i += 2) {
-            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
-            if (prop == null) {
-                continue;
+        int len = _hashArea.length;
+        int pos = _findFromObjectId(key);
+        if ((pos >> 1) >= len) {
+            throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
+        }
+        int foundPos = pos;
+        for (;;) {
+            int ix = pos >> 1;
+            int val = _hashArea[ix+ix];
+            if (val == 0) {
+                throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
             }
-            if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
-                if (found) {
-                    // need to leave a hole here
-                    _propsInOrder[_findFromOrdered(prop)] = null;
-                    continue;
+            if (val == key.hashCode()) {
+                pos = ix;
+                break;
+            }
+            // continue from previous position, may have wrapped
+            pos = ((pos >> 1) + (len >> 1)) & (len - 1);
+        }
+        int left = pos;
+        int right = pos+1;
+        if (_hashArea[left] != 0) {
+            while (left > 0) {
+                --left;
+                if (_hashArea[left] == 0) {
+                    break;
                 }
             }
-            props.add(prop);
         }
-        if (!found) {
-            throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
+        if (_hashArea[right] != 0) {
+            while (right < len) {
+                if (_hashArea[right] == 0) {
+                    break;
+                }
+                ++right;
+            }
+        }
+        int count = right - left - 1;
+        System.arraycopy(_hashArea, right, _hashArea, left + 1, count);
+        _hashArea[left] = 0;
+        _hashArea[left+1] = null;
+        int index = foundPos & (len >> 1);
+        _propsInOrder[index] = null;
+        if (count > 0) {
+            count = (len >> 1) - count;
+            System.arraycopy(_propsInOrder, right, _propsInOrder, left + 1, count);
+            Arrays.fill(_propsInOrder, left + 1 + count, len >> 1, null);
+        } else {
+            Arrays.fill(_propsInOrder, left + 1, len >> 1, null);
         }
-        init(props);
     }
-
     /**
      * Convenience method that tries to find property with given name, and
      * if it is found, call {@link SettableBeanProperty#deserializeAndSet}

diff --git a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
index f516e584..bf80f9fc 100644
--- a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
+++ b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
@@ -121,125 +121,72 @@ public class ProcessCommonJSModules implements CompilerPass {
   /**
    * Visits require, every "script" and special module.exports assignments.
    */
-  private class ProcessCommonJsModulesCallback extends
-      AbstractPostOrderCallback {
-
-    private int scriptNodeCount = 0;
-
-    @Override
-    public void visit(NodeTraversal t, Node n, Node parent) {
-      if (n.isCall() && n.getChildCount() == 2 &&
-          "require".equals(n.getFirstChild().getQualifiedName()) &&
-          n.getChildAtIndex(1).isString()) {
-        visitRequireCall(t, n, parent);
-      }
-
-      if (n.isScript()) {
-        scriptNodeCount++;
-        visitScript(t, n);
-      }
-
-      if (n.isGetProp() &&
-          "module.exports".equals(n.getQualifiedName())) {
-        visitModuleExports(n);
-      }
-    }
-
-    /**
-     * Visit require calls. Emit corresponding goog.require and rewrite require
-     * to be a direct reference to name of require module.
-     */
-    private void visitRequireCall(NodeTraversal t, Node require, Node parent) {
-      String moduleName = toModuleName(require.getChildAtIndex(1).getString(),
-          normalizeSourceName(t.getSourceName()));
-      Node moduleRef = IR.name(moduleName).srcref(require);
-      parent.replaceChild(require, moduleRef);
-      Node script = getCurrentScriptNode(parent);
-      if (reportDependencies) {
-        t.getInput().addRequire(moduleName);
+import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.Token;
+import com.google.javascript.rhino.jstype.JSTypeNative;
+import com.google.javascript.rhino.jstype.JSTypeRegistry;
+import com.google.javascript.rhino.jstype.ObjectType;
+/**
+ * Ensures that a constructor can be called as a function.
+ *
+ */
+class ConvertToDartConstructorVisitor extends AbstractPostOrderCallback {
+  private final JSTypeRegistry typeRegistry;
+  private final boolean hasExterns;
+  ConvertToDartConstructorVisitor(JSTypeRegistry typeRegistry,
+      boolean hasExterns) {
+    this.typeRegistry = typeRegistry;
+    this.hasExterns = hasExterns;
+  }
+  @Override
+  public void visit(NodeTraversal t, Node n, Node parent) {
+    if (n.isFunction()) {
+      // Try to get the type of the constructor.
+      JSDocInfo info = n.getJSDocInfo();
+      if (info == null) {
+        return;
       }
-      // Rewrite require("name").
-      script.addChildToFront(IR.exprResult(
-          IR.call(IR.getprop(IR.name("goog"), IR.string("require")),
-              IR.string(moduleName))).copyInformationFromForTree(require));
-      compiler.reportCodeChange();
-    }
-
-    /**
-     * Emit goog.provide and add suffix to all global vars to avoid conflicts
-     * with other modules.
-     */
-    private void visitScript(NodeTraversal t, Node script) {
-      Preconditions.checkArgument(scriptNodeCount == 1,
-          "ProcessCommonJSModules supports only one invocation per " +
-          "CompilerInput / script node");
-      String moduleName = guessCJSModuleName(normalizeSourceName(script
-          .getSourceFileName()));
-      script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())
-          .copyInformationFromForTree(script));
-      if (reportDependencies) {
-        CompilerInput ci = t.getInput();
-        ci.addProvide(moduleName);
-        JSModule m = new JSModule(moduleName);
-        m.addAndOverrideModule(ci);
-        module = m;
+      // TODO(nicksantos): Support @extends.
+      if (info.getBaseType() != null) {
+        return;
       }
-      script.addChildToFront(IR.exprResult(
-          IR.call(IR.getprop(IR.name("goog"), IR.string("provide")),
-              IR.string(moduleName))).copyInformationFromForTree(script));
-
-      emitOptionalModuleExportsOverride(script, moduleName);
-
-      // Rename vars to not conflict in global scope.
-      NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(
-          moduleName));
-
-      compiler.reportCodeChange();
-    }
-
-    /**
-     * Emit <code>if (moduleName.module$exports) {
-     *    moduleName = moduleName.module$export;
-     * }</code> at end of file.
-     */
-    private void emitOptionalModuleExportsOverride(Node script,
-        String moduleName) {
-
-      Node moduleExportsProp = IR.getprop(IR.name(moduleName),
-          IR.string("module$exports"));
-      script.addChildToBack(IR.ifNode(
-          moduleExportsProp,
-          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),
-              moduleExportsProp.cloneTree())))).copyInformationFromForTree(
-          script));
-    }
-
-    /**
-     * Rewrite module.exports to moduleName.module$exports.
-     */
-    private void visitModuleExports(Node prop) {
-      String moduleName = guessCJSModuleName(prop.getSourceFileName());
-      Node module = prop.getChildAtIndex(0);
-      module.putProp(Node.ORIGINALNAME_PROP, "module");
-      module.setString(moduleName);
-      Node exports = prop.getChildAtIndex(1);
-      exports.putProp(Node.ORIGINALNAME_PROP, "exports");
-      exports.setString("module$exports");
-    }
-
-    /**
-     * Returns next script node in parents.
-     */
-    private Node getCurrentScriptNode(Node n) {
-      while (true) {
-        if (n.isScript()) {
-          return n;
+      if (info.isConstructor() || info.isInterface()) {
+        // TODO(nicksantos): Support @template.
+        if (!info.getTemplateTypeNames().isEmpty()) {
+          return;
         }
-        n = n.getParent();
+        n.putBooleanProp(Node.IS_CONSTRUCTOR, true);
+        Node thisName = NodeUtil.newQName(t.getCompiler(), "this");
+        Node superName = NodeUtil.newQName(t.getCompiler(), "super");
+        ObjectType ownerType = null;
+        if (hasExterns) {
+          ownerType = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
+        } else {
+          ownerType = typeRegistry.getNativeObjectType(
+              JSTypeNative.GLOBAL_LEXICAL_SCOPE);
+        }
+        thisName.setTypeI(ownerType.getPropertyType("this"));
+        superName.setTypeI(ownerType.getPropertyType("super"));
+        Node body = n.getLastChild();
+        body.addChildrenToFront(
+            IR.exprResult(IR.assign(thisName.cloneTree(), IR.thisNode()))
+                .srcrefTree(n));
+        body.addChildrenToFront(
+            IR.exprResult(IR.assign(superName.cloneTree(), IR.superNode()))
+                .srcrefTree(n));
+        body.addChildrenToFront(IR.var(thisName, null));
+        body.addChildrenToFront(IR.var(superName, null));
+        n.getFirstChild().setTypeI(
+            typeRegistry.createFunctionType(
+                typeRegistry.createFunctionType(
+                    typeRegistry.getNativeType(JSTypeNative.OBJECT_TYPE),
+                    ownerType,
+                    null)));
+        t.getCompiler().reportCodeChange();
       }
     }
   }
-
+}
   /**
    * Traverses a node tree and appends a suffix to all global variable names.
    */

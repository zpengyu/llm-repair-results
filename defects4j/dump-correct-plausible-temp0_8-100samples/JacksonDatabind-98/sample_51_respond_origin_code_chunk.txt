    public Object complete(JsonParser p, DeserializationContext ctxt,
            PropertyValueBuffer buffer, PropertyBasedCreator creator)
        throws IOException
    {
        // first things first: deserialize all data buffered:
        final int len = _properties.length;
        Object[] values = new Object[len];
        for (int i = 0; i < len; ++i) {
            String typeId = _typeIds[i];
            final ExtTypedProperty extProp = _properties[i];
            if (typeId == null) {
                // let's allow missing both type and property (may already have been set, too)
                if (_tokens[i] == null) {
                    continue;
                }
                // but not just one
                // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'
                if (!extProp.hasDefaultType()) {
                    ctxt.reportInputMismatch(_beanType,
                            "Missing external type id property '%s'",
                            extProp.getTypePropertyName());
                } else {
                    typeId = extProp.getDefaultTypeId();
                }
            } else if (_tokens[i] == null) {
                SettableBeanProperty prop = extProp.getProperty();
                ctxt.reportInputMismatch(_beanType,
                        "Missing property '%s' for external type id '%s'",
                        prop.getName(), _properties[i].getTypePropertyName());
            }
            values[i] = _deserialize(p, ctxt, i, typeId);

            final SettableBeanProperty prop = extProp.getProperty();
            // also: if it's creator prop, fill in
            if (prop.getCreatorIndex() >= 0) {
                buffer.assignParameter(prop, values[i]);

                // [databind#999] And maybe there's creator property for type id too?
                SettableBeanProperty typeProp = extProp.getTypeProperty();
                // for now, should only be needed for creator properties, too
                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
                    // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to
                    //    apply deserializer... fun fun.
                    buffer.assignParameter(typeProp, typeId);
                }
            }
        }
        // [databind#759]: See if we have something to inject into bean itself
        if (_propertyBasedCreator != null) {
            SettableBeanProperty[] creatorProps = _propertyBasedCreator.properties();
            int i = 0;
            for (; i < creatorProps.length; ++i) {
                SettableBeanProperty prop = creatorProps[i];
                if (!buffer.hasParameter(prop)) {
                    break;
                }
            }
            // if we did not get all parameters, error out
            if (i < creatorProps.length) {
                for (i = 0; i < len; ++i) {
                    if (_properties[i].hasTypePropertyName(creatorProps[i].getName())) {
                        // Not sure if this can ever happen, due to ordering, but...
                        continue;
                    }
                    if (_tokens[i] != null) {
                        ctxt.reportBadPropertyDefinition(_beanType,
                                String.format("Missing external type id property '%s'",
                                        _properties[i].getTypePropertyName()),
                                _properties[i].getProperty());
                    }
                    ctxt.reportBadPropertyDefinition(_beanType,
                            String.format("Missing property '%s' for external type id '%s'",
                                    _properties[i].getProperty().getName(),
                                    _properties[i].getTypePropertyName()),
                            _properties[i].getProperty());
                }
            }
        }
        Object bean = creator.build(ctxt, buffer);
        // third: assign non-creator properties
        for (int i = 0; i < len; ++i) {
            SettableBeanProperty prop = _properties[i].getProperty();
            if (prop.getCreatorIndex() < 0) {
                prop.set(bean, values[i]);
            }
        }
        return bean;
    }


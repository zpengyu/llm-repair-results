diff --git a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
index 70c30e14..f658acb2 100644
--- a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
@@ -96,22 +96,25 @@ final class DefaultDateTypeAdapter extends TypeAdapter<Date> {
 
   @Override
   public Date read(JsonReader in) throws IOException {
-    if (in.peek() != JsonToken.STRING) {
-      throw new JsonParseException("The date should be a string value");
-    }
-    Date date = deserializeToDate(in.nextString());
-    if (dateType == Date.class) {
-      return date;
-    } else if (dateType == Timestamp.class) {
-      return new Timestamp(date.getTime());
-    } else if (dateType == java.sql.Date.class) {
-      return new java.sql.Date(date.getTime());
+    if (in.peek() == JsonToken.STRING) {
+      Date date = deserializeToDate(in.nextString());
+      if (dateType == Date.class) {
+        return date;
+      } else if (dateType == Timestamp.class) {
+        return new Timestamp(date.getTime());
+      } else if (dateType == java.sql.Date.class) {
+        return new java.sql.Date(date.getTime());
+      } else {
+        // This must never happen: dateType is guarded in the primary constructor
+        throw new AssertionError();
+      }
+    } else if (in.peek() == JsonToken.NULL) {
+      in.nextNull();
+      return null;
     } else {
-      // This must never happen: dateType is guarded in the primary constructor
-      throw new AssertionError();
+      throw new JsonParseException("The date should be a string value");
     }
   }
-
   private Date deserializeToDate(String s) {
     synchronized (localFormat) {
       try {

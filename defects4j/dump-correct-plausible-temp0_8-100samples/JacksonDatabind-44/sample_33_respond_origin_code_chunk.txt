    protected JavaType _narrow(Class<?> subclass)
    {
        if (_class == subclass) {
            return this;
        }
        // Should we check that there is a sub-class relationship?
        if (!_class.isAssignableFrom(subclass)) { // just a sanity check
            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                    +_class.getName());
        }
        // Otherwise, stitch together the hierarchy. First, super-class
        JavaType superClass = _superClass;
        if (superClass != null && superClass.getRawClass().isAssignableFrom(subclass)) {
            superClass = superClass.narrowBy(subclass);
        } else {
            //  but there are some complications with
            //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
            // TODO: fix in 2.8
            /*
            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                    +_class.getName());
                    */
            superClass = _superClass;
            // Otherwise, stitch together the hierarchy. First, super-class
            // if not found, try a super-interface
            if (superClass == null || !superClass.getRawClass().isAssignableFrom(subclass)) {
                superClass = _findSuperTypeChain(subclass);
                if (superClass == null) {
                    superClass = _superClass;
                }
            }
        }
        // should not get here but...
        if (superClass == null) {
            throw new IllegalArgumentException("Internal error: cannot resolve Class "+subclass.getName()+" into a super type of "+_class.getName());
        }
        return new SimpleType(subclass, _bindings, superClass, _superInterfaces,
                _valueHandler, _typeHandler, _asStatic);
    }

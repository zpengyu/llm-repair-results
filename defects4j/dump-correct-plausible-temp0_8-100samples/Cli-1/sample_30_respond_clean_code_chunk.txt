public Option[] getOptions()
{
    Collection processed = options.values();
    // reinitialise array
    Option[] optionsArray = new Option[processed.size()];
    // return the array
    return (Option[]) processed.toArray(optionsArray);
}
//Exception
public Option[] getOptions()
{
    Collection processed = options.values();
    // reinitialise array
    Option[] optionsArray = new Option[processed.size()];
    // return the array
    try {
        return (Option[]) processed.toArray(optionsArray);
    } catch (ArrayStoreException e) {
      e.printStackTrace();
    }
}
//Modified Array
public Option[] getOptions()
{
    Collection processed = options.values();
    // reinitialise array
    Option[] optionsArray = new Option[processed.size()];
    // return the array
    try {
        return (Option[]) processed.toArray(optionsArray);
    } catch (ArrayStoreException e) {
        Option[] anotherArray = new Option[processed.size()];
        return (Option[]) processed.toArray(anotherArray);
    }
}
//Use ArrayList
public Option[] getOptions()
{
    Collection processed = options.values();
    // reinitialise array
    Option[] optionsArray = new Option[processed.size()];
    // return the array
    try {
        return (Option[]) processed.toArray(optionsArray);
    } catch (ArrayStoreException e) {
        List<Option> list = new ArrayList<Option>();
        for (Object o: processed) {
            if(o instanceof Option) {
                list.add((Option)o);
            }
        }
        return list.toArray(new Option[list.size()]);
    }
}
public double solve(final UnivariateRealFunction f,
                                final double min, final double max, final double initial)
            throws MaxIterationsExceededException, FunctionEvaluationException {

        clearResult();
        verifySequence(min, initial, max);

        // Return the initial guess if it is good enough.
        double yInitial = f.value(initial);
        if (FastMath.abs(yInitial) <= functionValueAccuracy) {
            setResult(initial, 0);
            return result;
        }

        // Return the first endpoint if it is good enough.
        double yMin = f.value(min);
        if (FastMath.abs(yMin) <= functionValueAccuracy) {
            setResult(min, 0);
            return result;
        }

        // Return the second endpoint if it is good enough.
        double yMax = f.value(max);
        if (FastMath.abs(yMax) <= functionValueAccuracy) {
            setResult(max, 0);
            return result;
        }

        // Verify bracketing of initial guess.
        if (yInitial * yMin >= 0) {
            throw MathRuntimeException.createIllegalArgumentException(
                  "Initial guess {0} is not strictly less than {1} and less than or equal to {2}",
                  initial, min, max);
        }
        if (yInitial * yMax >= 0) {
            throw MathRuntimeException.createIllegalArgumentException(
                  "Initial guess {0} is not strictly less than {1} and greater than or equal to {2}",
                  initial, max, min);
        }

        // Full Brent algorithm starting with provided initial guess.
        return solve(f, min, yMin, max, yMax, initial, yInitial);

    }

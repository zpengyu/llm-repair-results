diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java
index a6bf55c7..ae12b613 100644
--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java
@@ -791,27 +791,29 @@ public class PeriodFormatterBuilder {
     }
 
     //-----------------------------------------------------------------------
-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
-        if (notPrinter && notParser) {
-            throw new IllegalStateException("Builder has created neither a printer nor a parser");
-        }
-        int size = elementPairs.size();
-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
-            Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
-                sep = sep.finish(f.getPrinter(), f.getParser());
-                return new PeriodFormatter(sep, sep);
-        }
-        Object[] comp = createComposite(elementPairs);
-        if (notPrinter) {
-            return new PeriodFormatter(null, (PeriodParser) comp[1]);
-        } else if (notParser) {
-            return new PeriodFormatter((PeriodPrinter) comp[0], null);
-        } else {
-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
-        }
+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
+    if (notPrinter && notParser) {
+        throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
-
+    int size = elementPairs.size();
+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {
+        Separator sep = (Separator) elementPairs.get(0);
+        if (sep.iAfterParser == null && sep.iAfterPrinter == null) {
+            throw new IllegalStateException("No parser or printer supplied");
+        }
+        PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+        sep = sep.finish(f.getPrinter(), f.getParser());
+        return new PeriodFormatter(sep, sep);
+    }
+    Object[] comp = createComposite(elementPairs);
+    if (notPrinter) {
+        return new PeriodFormatter(null, (PeriodParser) comp[1]);
+    } else if (notParser) {
+        return new PeriodFormatter((PeriodPrinter) comp[0], null);
+    } else {
+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
+    }
+}
     private static Object[] createComposite(List<Object> elementPairs) {
         switch (elementPairs.size()) {
             case 0:

    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
        if (notPrinter && notParser) {
            throw new IllegalStateException("Builder has created neither a printer nor a parser");
        }
        int size = elementPairs.size();
        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
            Separator sep = (Separator) elementPairs.get(0);
            if (sep.iAfterParser == null && sep.iAfterPrinter == null) {
                if (size == 2) {
                    return new PeriodFormatter(sep, sep);
                }
                Separator prSep = sep;
                Separator paSep = sep;
                if (sep.iUseBefore) {
                    if (!sep.iUseAfter) {
                        PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
                        paSep = paSep.finish(f.getPrinter(), f.getParser());
                        return new PeriodFormatter(paSep, paSep);
                    }
                }
                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
                prSep = prSep.finish(f.getPrinter(), null);
                paSep = paSep.finish(null, f.getParser());
                return new PeriodFormatter(prSep, paSep);
            }
        }
        Object[] comp = createComposite(elementPairs);
        if (notPrinter) {
            return new PeriodFormatter(null, (PeriodParser) comp[1]);
        } else if (notParser) {
            return new PeriodFormatter((PeriodPrinter) comp[0], null);
        } else {
            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
        }
    }

    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
        if (notPrinter && notParser) {
            throw new IllegalStateException("Builder has created neither a printer nor a parser");
        }
        int size = elementPairs.size();
        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
            Separator sep = (Separator) elementPairs.get(0);
            if (size == 2) {
                if (notPrinter) {
                    if (sep.iAfterParser == null) {
                        throw new IllegalStateException("No parser available");
                    }
                    return new PeriodFormatter(null, sep.iAfterParser);
                } else if (notParser) {
                    if (sep.iAfterPrinter == null) {
                        throw new IllegalStateException("No printer available");
                    }
                    return new PeriodFormatter(sep.iAfterPrinter, null);
                }
                return new PeriodFormatter(sep.iAfterPrinter, sep.iAfterParser);
            }
            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
            sep = sep.finish(f.getPrinter(), f.getParser());
            return new PeriodFormatter(sep, sep);
        }
        Object[] comp = createComposite(elementPairs);
        if (notPrinter) {
            return new PeriodFormatter(null, (PeriodParser) comp[1]);
        } else if (notParser) {
            return new PeriodFormatter((PeriodPrinter) comp[0], null);
        } else {
            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
        }
    }
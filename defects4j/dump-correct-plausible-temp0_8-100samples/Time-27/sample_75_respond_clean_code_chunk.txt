    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
        if (notPrinter && notParser) {
            throw new IllegalStateException("Builder has created neither a printer nor a parser");
        }
        int size = elementPairs.size();
        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
            Separator sep = (Separator) elementPairs.get(0);
            if (!notPrinter && elementPairs.get(1) instanceof PeriodPrinter) {
                PeriodPrinter p = (PeriodPrinter) elementPairs.get(1);
                PeriodParser parser = sep.finish(p, null);
                if (parser == null && size == 2) {
                    return new PeriodFormatter(p, null);
                }
                if (size > 2) {
                    return new PeriodFormatter(p, parser.with(toFormatter(elementPairs.subList(2, size), false, notParser).getParser()));
                }
                return new PeriodFormatter(p, parser);
            } else if (!notParser && elementPairs.get(1) instanceof PeriodParser) {
                PeriodParser p = (PeriodParser) elementPairs.get(1);
                PeriodPrinter printer = sep.finish(null, p);
                if (printer == null && size == 2) {
                    return new PeriodFormatter(null, p);
                }
                if (size > 2) {
                    return new PeriodFormatter(printer.with(toFormatter(elementPairs.subList(2, size), notPrinter, false).getPrinter()), p);
                }
                return new PeriodFormatter(printer, p);
            } else {
                throw new IllegalStateException("Builder has created neither a printer nor a parser");
            }
        }
        Object[] comp = createComposite(elementPairs);
        if (notPrinter) {
            return new PeriodFormatter(null, (PeriodParser) comp[1]);
        } else if (notParser) {
            return new PeriodFormatter((PeriodPrinter) comp[0], null);
        } else {
            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
        }
    }
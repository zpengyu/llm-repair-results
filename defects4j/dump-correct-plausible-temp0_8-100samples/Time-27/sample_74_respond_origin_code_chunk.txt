    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
        if (notPrinter && notParser) {
            throw new IllegalStateException("Builder has created neither a printer nor a parser");
        }
        int size = elementPairs.size();
        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
            Separator sep = (Separator) elementPairs.get(0);
            if (size == 2) {
                return new PeriodFormatter(sep, sep);
            } else if (elementPairs.get(1) instanceof Separator) {
                Separator sep2 = (Separator) elementPairs.get(1);
                if (sep.iFinal) {
                    sep2 = sep2.finish(sep.iAfterParser, sep.iAfterPrinter);
                    return new PeriodFormatter(null, sep2);
                } else if (sep2.iFinal) {
                    sep = sep.finish(sep2.iAfterParser, sep2.iAfterPrinter);
                    return new PeriodFormatter(sep, null);
                }
                sep = sep.finish(sep2.iBeforePrinter, sep2.iBeforeParser);
                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
                sep2 = sep2.finish(f.getPrinter(), f.getParser());
                return new PeriodFormatter(sep, sep2);
            } else {
                PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);
                sep = sep.finish(f.getPrinter(), f.getParser());
                return new PeriodFormatter(sep, sep);
            }
        }
        Object[] comp = createComposite(elementPairs);
        if (notPrinter) {
            return new PeriodFormatter(null, (PeriodParser) comp[1]);
        } else if (notParser) {
            return new PeriodFormatter((PeriodPrinter) comp[0], null);
        } else {
            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
        }
    }

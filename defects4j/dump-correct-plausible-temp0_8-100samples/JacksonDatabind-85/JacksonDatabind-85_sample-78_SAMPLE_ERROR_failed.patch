diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
index ae5fd6538..55dc223ce 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
@@ -80,20 +79,32 @@ public abstract class DateTimeSerializerBase<T>
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
-
         // Otherwise, need one of these changes:
-
-
+        JsonFormat.Value def = this._format;
+        final Locale loc = def.hasLocale()
+                ? def.getLocale() : serializers.getLocale();
         // Jackson's own `StdDateFormat` is quite easy to deal with...
-
+        if (this._formatter instanceof StdDateFormat) {
+            StdDateFormat df = ((StdDateFormat) this._formatter).withTimeZone(serializers.getTimeZone())
+                    .withLocale(loc);
+            return withFormat(Boolean.FALSE, df);
+        }
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
+        if (!(this._formatter instanceof SimpleDateFormat)) {
+            serializers.reportBadDefinition(handledType(), String.format(
+                    "Cannot change configuration of non-SimpleDateFormat instances (`%s`); "
+                    +"must be reconfigured with new instance",
+                    ClassUtil.nameOf(this._formatter)));
+            return this;
+        }
+        // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        SimpleDateFormat sdf = (SimpleDateFormat) this._formatter;
+        SimpleDateFormat newDf = new SimpleDateFormat(sdf.toPattern(), loc);
+        newDf.setTimeZone(def.getTimeZone());
+        return withFormat(Boolean.FALSE, newDf);
     }
-
     /*
     /**********************************************************
     /* Accessors

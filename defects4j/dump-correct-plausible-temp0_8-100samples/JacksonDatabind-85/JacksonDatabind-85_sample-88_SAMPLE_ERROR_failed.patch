diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
index ae5fd6538..0bb1136b7 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
@@ -46,24 +46,53 @@ public abstract class DateTimeSerializerBase<T>
     public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat);
 
     @Override
-    public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
-    {
-        if (property == null) {
-            return this;
-        }
-        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
-        if (format == null) {
-            return this;
-        }
-        // Simple case first: serialize as numeric timestamp?
-        JsonFormat.Shape shape = format.getShape();
-        if (shape.isNumeric()) {
-            return withFormat(Boolean.TRUE, null);
-        }
-
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
+        public JsonSerializer<?> createContextual(SerializerProvider serializers,
+                BeanProperty property) throws JsonMappingException
+        {
+            if (property == null) {
+                return this;
+            }
+            JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
+            if (format == null) {
+                return this;
+            }
+            // Simple case first: serialize as numeric timestamp?
+            JsonFormat.Shape shape = format.getShape();
+            if (shape.isNumeric()) {
+                return withFormat(Boolean.TRUE, null);
+            }
+            // Otherwise, need one of these changes:
+            // Jackson's own `StdDateFormat` is quite easy to deal with...
+            SerializationConfig config = serializers.getConfig();
+            DateFormat dateFormat = config.getDateFormat();
+            if (!format.hasShape()) {
+                // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+                dateFormat = (DateFormat) dateFormat.clone();
+            } else {
+                if (dateFormat instanceof StdDateFormat) {
+                    dateFormat = ((StdDateFormat) dateFormat).withShape(shape);
+                } else {
+                    // 08-Jun-2017, tatu: Unfortunately there's no generally usable
+                    //    mechanism for changing `DateFormat` instances (or even clone()ing)
+                    //    So: require it be `SimpleDateFormat`; can't config other types
+                    serializers.reportBadDefinition(handledType(), String.format(
+                            "Cannot change shape of date format from `%s`; must be `%s` or `%s`",
+                            dateFormat.getClass().getName(),
+                            "java.text.SimpleDateFormat", StdDateFormat.class.getName()));
+                }
+            }
+            // custom pattern will override things
+            if (format.hasPattern()) {
+                try {
+                    dateFormat = new SimpleDateFormat(format.getPattern());
+                } catch (IllegalArgumentException iae) {
+                    throw new IllegalArgumentException(
+                            String.format("Invalid format pattern (%s) for `%s`: %s",
+                                    format.getPattern(), handledType().getName(), iae.getMessage()));
+                }
+            }
+            // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
+            // First: custom pattern will override things
                 if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                                 || format.hasLocale() || format.hasTimeZone()) {
                     TimeZone tz = format.getTimeZone();
@@ -80,20 +109,8 @@ public abstract class DateTimeSerializerBase<T>
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
-    }
-
+            return withFormat(Boolean.FALSE, dateFormat);
+        }
     /*
     /**********************************************************
     /* Accessors

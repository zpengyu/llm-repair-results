    public JsonSerializer<?> createContextual(SerializerProvider serializers,
            BeanProperty property) throws JsonMappingException
    {
        if (property == null) {
            return this;
        }
        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
        if (format == null) {
            return this;
        }
        // Simple case first: serialize as numeric timestamp?
        JsonFormat.Shape shape = format.getShape();
        if (shape.isNumeric()) {
            return withFormat(Boolean.TRUE, null);
        }
        TimeZone tz = format.getTimeZone();
        Locale loc = format.getLocale();
        // Any change really?
        if (!format.hasPattern() && (loc == null) && (tz == null)) {
            return this;
        }
        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
        // First: custom pattern will override things
        if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                        || format.hasLocale() || format.hasTimeZone()) {
            if (format.hasPattern()) {
                // Ugh. No way to change `Locale`, create copy; must re-crete completely:
                SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
                if (tz == null) {
                    tz = serializers.getTimeZone();
                }
                df.setTimeZone(tz);
                return withFormat(Boolean.FALSE, df);
            }
            // Jackson's own `StdDateFormat` is quite easy to deal with...
            DateFormat df = serializers.getConfig().getDateFormat();
            if (df.getClass() == StdDateFormat.class) {
                df = ((StdDateFormat) df).withTimeZone(tz);
                df = ((StdDateFormat) df).withLocale(loc);
                return withFormat(Boolean.FALSE, df);
            }
            // 08-Jun-2017, tatu: Unfortunately there's no generally usable
            //    mechanism for changing `DateFormat` instances (or even clone()ing)
            //    So: require it be `SimpleDateFormat`; can't config other types
            serializers.reportBadDefinition(handledType(), String.format(
                    "Can not change format of non-SimpleDateFormat instance (%s) of type %s",
                    df.getClass().getName(), df.getClass().getName()));
        }

        // Otherwise, need one of these changes:

        return this;
    }

    public JsonSerializer<?> createContextual(SerializerProvider serializers,
            BeanProperty property) throws JsonMappingException
    {
        if (property == null) {
            return this;
        }
        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
        if (format == null) {
            return this;
        }
        // Simple case first: serialize as numeric timestamp?
        JsonFormat.Shape shape = format.getShape();
        if (shape.isNumeric()) {
            return withFormat(Boolean.TRUE, null);
        }
        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
        // First: custom pattern will override things
        if (format.hasPattern()) {
            DateFormat df;
            String pattern = format.getPattern();
            // 08-Jun-2017, tatu: Unfortunately there's no generally usable
            //    mechanism for changing `DateFormat` instances (or even clone()ing)
            //    So: require it be `SimpleDateFormat`; can't config other types
            if (!(getDateFormat() instanceof SimpleDateFormat)) {
                serializers.reportBadDefinition(handledType(), String.format(
                        "Configured `DateFormat` (%s) not usable: must be `SimpleDateFormat`",
                        ClassUtil.classNameOf(getDateFormat())));
            }
            Locale loc = format.hasLocale()
                    ? format.getLocale()
                    : serializers.getLocale();
            df = new SimpleDateFormat(pattern, loc);
            TimeZone tz = format.getTimeZone();
            if (tz == null) {
                tz = serializers.getTimeZone();
            }
            df.setTimeZone(tz);
            return withFormat(Boolean.FALSE, df);
        }
        // Otherwise, need one of these changes:
        // Jackson's own `StdDateFormat` is quite easy to deal with...
        if (getDateFormat() instanceof StdDateFormat) {
            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
            StdDateFormat std = (StdDateFormat) getDateFormat();
            StdDateFormat std2 = new StdDateFormat();
            std2.setTimeZone(std.getTimeZone());
            if (format.hasLocale()) {
                std2.overrideFormatLocale(format.getLocale());
            } else {
                std2.overrideFormatLocale(serializers.getLocale());
            }
            return withFormat(Boolean.FALSE, std2);
        }
        // Otherwise we could try to figure out if there are changes
        // to make; but for now, let's just say this is a "no-go"
        serializers.reportBadDefinition(handledType(), String.format(
                "Configured `DateFormat` (%s) not compatible with `JsonFormat.Shape.STRING`",
                ClassUtil.classNameOf(getDateFormat())));
        return this;
    }
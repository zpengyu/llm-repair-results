    public JsonSerializer<?> createContextual(SerializerProvider serializers,
            BeanProperty property) throws JsonMappingException
    {
        if (property == null) {
            return this;
        }
        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
        if (format == null) {
            return this;
        }
        // Simple case first: serialize as numeric timestamp?
        JsonFormat.Shape shape = format.getShape();
        if (shape.isNumeric()) {
            return withFormat(Boolean.TRUE, null);
        }
        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
        // First: custom pattern will override things
        if (format.hasPattern()) {
            final String pattern = format.getPattern();
            if (serializers.getConfig().hasDateFormat()) {
                DateFormat df = serializers.getConfig().getDateFormat();
                if (df instanceof StdDateFormat) {
                    return withFormat(Boolean.FALSE, ((StdDateFormat) df).withPattern(pattern));
                }
            }
            return withFormat(Boolean.FALSE, new SimpleDateFormat(pattern, serializers.getLocale()));
        }
        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
        //    mechanism for changing `DateFormat` instances (or even clone()ing)
        //    So: require it be `SimpleDateFormat`; can't config other types
        // Ugh. No way to change `Locale`, create copy; must re-crete completely:
        return this;
    }

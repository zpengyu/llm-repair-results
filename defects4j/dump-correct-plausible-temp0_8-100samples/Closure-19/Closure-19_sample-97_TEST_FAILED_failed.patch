diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
index abff329b..f6adca97 100644
--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
@@ -155,28 +155,25 @@ public abstract class ChainableReverseAbstractInterpreter
    * the given scope, as determined by {@link #getTypeIfRefinable}.
    */
   protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
-    switch (node.getType()) {
-      case Token.NAME:
-        scope.inferSlotType(node.getString(), type);
-        break;
-
-      case Token.GETPROP:
-        String qualifiedName = node.getQualifiedName();
-        Preconditions.checkNotNull(qualifiedName);
-
-        JSType origType = node.getJSType();
-        origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
-        scope.inferQualifiedSlot(node, qualifiedName, origType, type);
-        break;
-
-        // "this" references aren't currently modeled in the CFG.
-
-      default:
-        throw new IllegalArgumentException("Node cannot be refined. \n" +
-            node.toStringTree());
+    if (!type.isAllType()) {
+      switch (node.getType()) {
+        case Token.NAME:
+          scope.inferSlotType(node.getString(), type);
+          break;
+        case Token.GETPROP:
+          String qualifiedName = node.getQualifiedName();
+          Preconditions.checkNotNull(qualifiedName);
+          JSType origType = node.getJSType();
+          origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
+          scope.inferQualifiedSlot(node, qualifiedName, origType, type);
+          break;
+          // "this" references aren't currently modeled in the CFG.
+        default:
+          throw new IllegalArgumentException("Node cannot be refined. \n" +
+              node.toStringTree());
+      }
     }
   }
-
   /**
    * @see #getRestrictedWithoutUndefined(JSType)
    */

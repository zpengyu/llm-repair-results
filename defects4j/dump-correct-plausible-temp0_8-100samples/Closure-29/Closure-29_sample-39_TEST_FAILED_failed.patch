diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index a26b500d..539c7d25 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -178,9 +176,13 @@ class InlineObjectLiterals implements CompilerPass {
           // We short-circuit this problem by bailing out if we see a reference
           // to a property that isn't defined on the object literal. This
           // isn't a perfect algorithm, but it should catch most cases.
+          //
+          // this line is added
+          if (isNotInlineableProperty(parent, refs)) {
+            return false;
+          }
           continue;
         }
-
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;
@@ -196,8 +196,7 @@ class InlineObjectLiterals implements CompilerPass {
         if (!val.isObjectLit()) {
           return false;
         }
-
-        // Make sure that the value is not self-refential. IOW,
+        // Make sure that the value is not self-referential. IOW,
         // disallow things like x = {b: x.a}.
         //
         // TODO: Only exclude unorderable self-referential
@@ -238,7 +233,19 @@ class InlineObjectLiterals implements CompilerPass {
       }
       return ret;
     }
-
+    // this function is added
+    private boolean isNotInlineableProperty(Node propNode, List<Reference> refs) {
+      Node value = propNode.getLastChild();
+      if (value.isName()) {
+        for (Reference ref : refs) {
+          Node otherValue = ref.getAssignedValue();
+          if (otherValue == value) {
+            return true;
+          }
+        }
+      }
+      return false;
+    }
     private boolean isVarOrAssignExprLhs(Node n) {
       Node parent = n.getParent();
       return parent.isVar() ||

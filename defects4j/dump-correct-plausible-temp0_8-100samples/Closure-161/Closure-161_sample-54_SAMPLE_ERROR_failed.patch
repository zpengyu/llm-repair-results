diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 42875ffc..2d80b941 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -1275,52 +1275,10 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
     return false;
   }
 
-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {
-    Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
-
-    if (right.getType() != Token.NUMBER) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
-      return n;
-    }
-
-    double index = right.getDouble();
-    int intIndex = (int) index;
-    if (intIndex != index) {
-      error(INVALID_GETELEM_INDEX_ERROR, right);
-      return n;
-    }
-
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
-    Node elem = left.getFirstChild();
-    for (int i = 0; elem != null && i < intIndex; i++) {
-      elem = elem.getNext();
-    }
-
-    if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
-    if (elem.getType() == Token.EMPTY) {
-      elem = NodeUtil.newUndefinedNode(elem);
-    } else {
-      left.removeChild(elem);
-    }
-
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
-    reportCodeChange();
-    return elem;
+private static boolean isReduceableFunctionExpression(Node n) {
+    return NodeUtil.isFunctionExpression(n) &&
+      !NodeUtil.isGetOrSetKey(n.getParent());
   }
-
   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {
     Preconditions.checkArgument(NodeUtil.isGet(n));
 

diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 140e9d4f9..0822a239f 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -535,8 +533,19 @@ public class CMAESOptimizer
                 boundaries = new double[2][];
                 boundaries[0] = lB;
                 boundaries[1] = uB;
-
                 // Abort early if the normalization will overflow (cf. "encode" method).
+                for (int i = 0; i < lB.length; i++) {
+                    if (FastMath.abs(lB[i]) > FastMath.ulp(lB[i])) {
+                        // The boundaries are not normalized, the initial
+                        // values would not be either (see "encode" method).
+                        throw new NumberIsTooLargeException(lB[i], -FastMath.ulp(lB[i]), false);
+                    }
+                    if (FastMath.abs(uB[i]) > FastMath.ulp(uB[i])) {
+                        // The boundaries are not normalized, the initial
+                        // values would not be either (see "encode" method).
+                        throw new NumberIsTooLargeException(uB[i], -FastMath.ulp(uB[i]), true);
+                    }
+                }
             }
         } else {
             // Convert API to internal handling of boundaries.

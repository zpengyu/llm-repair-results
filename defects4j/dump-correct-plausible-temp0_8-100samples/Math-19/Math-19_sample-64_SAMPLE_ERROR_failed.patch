diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 140e9d4f9..657c2d191 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -535,8 +533,26 @@ public class CMAESOptimizer
                 boundaries = new double[2][];
                 boundaries[0] = lB;
                 boundaries[1] = uB;
-
                 // Abort early if the normalization will overflow (cf. "encode" method).
+                // We need to know the initial sigma and the initial mean.
+                double overallMin = Double.POSITIVE_INFINITY;
+                double overallMax = Double.NEGATIVE_INFINITY;
+                for (int i = 0; i < lB.length; i++) {
+                    final double[] range = boundaries[i];
+                    if (range[0] < overallMin) {
+                        overallMin = range[0];
+                    }
+                    if (range[1] > overallMax) {
+                        overallMax = range[1];
+                    }
+                }
+                final double normSigma = FastMath.min(FastMath.abs(overallMax - overallMin), 1.0);
+                double sum = 0;
+                for (int i = 0; i < lB.length; i++) {
+                    sum += FastMath.abs(init[i]);
+                }
+                final double normMean = sum / lB.length;
+                setNormalization(normSigma, normMean);
             }
         } else {
             // Convert API to internal handling of boundaries.

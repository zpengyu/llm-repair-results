diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 140e9d4f9..5a56080d5 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -535,8 +533,27 @@ public class CMAESOptimizer
                 boundaries = new double[2][];
                 boundaries[0] = lB;
                 boundaries[1] = uB;
-
                 // Abort early if the normalization will overflow (cf. "encode" method).
+                // This can happen if there is only one finite bound and it is too close
+                // to the end of double range.
+                boolean skip = false;
+                for (int i = 0; i < init.length; i++) {
+                    final double range = boundaries[1][i] - boundaries[0][i];
+                    if (range >= Double.MAX_VALUE) {
+                        // Infinite range, cannot overflow in the normalization.
+                        continue;
+                    }
+                    final double mid = 0.5 * (boundaries[0][i] + boundaries[1][i]);
+                    if (range >= Double.MAX_VALUE / FastMath.ulp(mid)) {
+                        // Normalization will overflow.
+                        skip = true;
+                        break;
+                    }
+                }
+                if (skip) {
+                    // All points are exactly representable in the finite range.
+                    boundaries = null;
+                }
             }
         } else {
             // Convert API to internal handling of boundaries.

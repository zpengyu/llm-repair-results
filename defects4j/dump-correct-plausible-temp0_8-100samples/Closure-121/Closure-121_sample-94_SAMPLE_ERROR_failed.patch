diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java
index 03f4fcf3..acfd8a7b 100644
--- a/src/com/google/javascript/jscomp/InlineVariables.java
+++ b/src/com/google/javascript/jscomp/InlineVariables.java
@@ -292,40 +291,16 @@ class InlineVariables implements CompilerPass {
           inlineWellDefinedVariable(v, value, referenceInfo.references);
           staleVars.add(v);
         }
-      }
-
-      // If this variable was not inlined normally, check if we can
-      // inline an alias of it. (If the variable was inlined, then the
-      // reference data is out of sync. We're better off just waiting for
-      // the next pass.)
-      if (!maybeModifiedArguments &&
-          !staleVars.contains(v) &&
-          referenceInfo.isWellDefined() &&
-          referenceInfo.isAssignedOnceInLifetime()) {
-          // Inlining the variable based solely on well-defined and assigned
-          // once is *NOT* correct. We relax the correctness requirement if
-          // the variable is declared constant.
-        List<Reference> refs = referenceInfo.references;
-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {
-          Node nameNode = refs.get(i).getNode();
-          if (aliasCandidates.containsKey(nameNode)) {
-            AliasCandidate candidate = aliasCandidates.get(nameNode);
-            if (!staleVars.contains(candidate.alias) &&
-                !isVarInlineForbidden(candidate.alias)) {
-              Reference aliasInit;
-              aliasInit = candidate.refInfo.getInitializingReference();
-              Node value = aliasInit.getAssignedValue();
-              Preconditions.checkNotNull(value);
-              inlineWellDefinedVariable(candidate.alias,
-                  value,
-                  candidate.refInfo.references);
-              staleVars.add(candidate.alias);
-            }
-          }
+      } else if (declaration != init && refCount == 2) {
+        if (isValidDeclaration(declaration) && isValidInitialization(init)) {
+          // The only reference is the initialization, remove the assignment and
+          // the variable declaration.
+          Node value = init.getAssignedValue();
+          Preconditions.checkNotNull(value);
+          inlineWellDefinedVariable(v, value, referenceInfo.references);
+          staleVars.add(v);
         }
       }
-    }
-
     /**
      * If there are any variable references in the given node tree, blacklist
      * them to prevent the pass from trying to inline the variable.

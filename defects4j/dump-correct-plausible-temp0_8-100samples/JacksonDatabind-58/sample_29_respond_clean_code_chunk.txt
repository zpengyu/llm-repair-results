    protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,
            BeanDescription beanDesc, BeanPropertyDefinition propDef,
            JavaType propType0)
        throws JsonMappingException
    {
        // need to ensure method is callable (for non-public)
        AnnotatedMember mutator = propDef.getNonConstructorMutator();
        if (mutator == null) {
            // 25-Jul-2016, tatu: Allow delegation
            if (_valueInstantiator.canCreateFromObjectWith()) {
                final AnnotatedMethod factory = _valueInstantiator.getFactoryMethod();
                if (factory != null) {
                    final Class<?> rawReturnType = factory.getRawReturnType();
                    final Class<?> rawDelegateType;
                    if (factory.getParameterCount() == 1) {
                        rawDelegateType = factory.getRawParameterType(0);
                    } else {
                        rawDelegateType = null;
                    }
                    final Type returnType = _valueInstantiator.getGenericCreationType();
                    final Type delegateType;
                    if (returnType instanceof ParameterizedType) {
                        delegateType = ((ParameterizedType) returnType).getActualTypeArguments()[0];
                    } else if (returnType instanceof Class) {
                        delegateType = ((Class<?>) returnType).getTypeParameters()[0];
                    } else {
                        delegateType = null;
                    }
                    if (rawReturnType != null && rawDelegateType != null && returnType != null && delegateType != null) {
                        final JavaType factoryReturnType = ctxt.constructType(returnType);
                        final JavaType delegateParamType = ctxt.constructType(delegateType);
                        if (factoryReturnType.hasRawClass(rawReturnType) && delegateParamType.hasRawClass(rawDelegateType)) {
                            final AnnotationIntrospector ai = ctxt.getAnnotationIntrospector();
                            if (ai != null && ai.findUnwrappingNameTransformer(factory) == null) {
                                final NameTransformer unwrapper = NameTransformer.simpleTransformer(factory.getName(),
                                        factoryReturnType.getRawClass(), rawReturnType);
                                return constructCreatorProperty(ctxt, beanDesc, propDef, propType0, unwrapper);
                            }
                        }
                    }
                }
            }
            return null;
        }
        if (ctxt.canOverrideAccessModifiers()) {
            // [databind#877]: explicitly prevent forced access to `cause` of `Throwable`;
            // never needed and attempts may cause problems on some platforms.
            // !!! NOTE: should be handled better for 2.8 and later
            if (!ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)
                    || (mutator instanceof AnnotatedMethod
                        && Throwable.class.isAssignableFrom(((AnnotatedMethod) mutator).getDeclaringClass())
                        && "initCause".equals(((AnnotatedMethod) mutator).getName()))) {
                mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
            }
        }
        // note: this works since we know there's exactly one argument for methods
        BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),
                propType0, propDef.getWrapperName(),
                beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());
        JavaType type = resolveType(ctxt, beanDesc, propType0, mutator);
        // did type change?
        if (type != propType0) {
            property = property.withType(type);
        }
        // First: does the Method specify the deserializer to use? If so, let's use it.
        JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);
        type = modifyTypeByAnnotation(ctxt, mutator, type);
        TypeDeserializer typeDeser = type.getTypeHandler();
        SettableBeanProperty prop;
        if (mutator instanceof AnnotatedMethod) {
            prop = new MethodProperty(propDef, type, typeDeser,
                    beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);
        } else {
            prop = new FieldProperty(propDef, type, typeDeser,
                    beanDesc.getClassAnnotations(), (AnnotatedField) mutator);
        }
        if (propDeser != null) {
            prop = prop.withValueDeserializer(propDeser);
        }
        // need to retain name of managed forward references:
        AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();
        if (ref != null && ref.isManagedReference()) {
            prop.setManagedReferenceName(ref.getName());
        }
        ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();
        if(objectIdInfo != null){
            prop.setObjectIdInfo(objectIdInfo);
        }
        return prop;
    }
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
index bc8e6736f..ce601b9f3 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
@@ -707,12 +707,18 @@ public class BeanDeserializerFactory
     {
         // need to ensure method is callable (for non-public)
         AnnotatedMember mutator = propDef.getNonConstructorMutator();
-
+        if (mutator == null) {
+            ctxt.reportBadPropertyDefinition(beanDesc, propDef);
+            return null;
+        }
         if (ctxt.canOverrideAccessModifiers()) {
             // [databind#877]: explicitly prevent forced access to `cause` of `Throwable`;
             // never needed and attempts may cause problems on some platforms.
             // !!! NOTE: should be handled better for 2.8 and later
+            if (!((mutator instanceof AnnotatedMethod)
+                && ((AnnotatedMethod) mutator).getAnnotated().getDeclaringClass() == Throwable.class)) {
                 mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
+            }
         }
         // note: this works since we know there's exactly one argument for methods
         BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),
@@ -745,7 +750,7 @@ public class BeanDeserializerFactory
             prop.setManagedReferenceName(ref.getName());
         }
         ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();
-        if(objectIdInfo != null){
+        if (objectIdInfo != null) {
             prop.setObjectIdInfo(objectIdInfo);
         }
         return prop;

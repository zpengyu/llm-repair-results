diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java
index 9acb07a5..6a2e1029 100644
--- a/src/com/google/javascript/jscomp/Compiler.java
+++ b/src/com/google/javascript/jscomp/Compiler.java
@@ -223,7 +223,7 @@ public class Compiler extends AbstractCompiler {
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
-  public void initOptions(CompilerOptions options) {
+public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
@@ -264,23 +261,21 @@ public class Compiler extends AbstractCompiler {
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
-
-
-    // All passes must run the variable check. This synthesizes
-    // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
-      guards.add(new DiagnosticGroupWarningsGuard(
-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
+    if (warningsGuard != null) {
+      guards.add(warningsGuard);
+    } else {
+      // All passes must run the variable check. This synthesizes
+      // variables later so that the compiler doesn't crash. It also
+      // checks the externs file for validity. If you don't want to warn
+      // about missing variable declarations, we shut that specific
+      // error off.
+      if (!options.checkSymbols) {
+        guards.add(new DiagnosticGroupWarningsGuard(
+            DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
+      }
     }
-
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
-
   /**
    * Initializes the instance state needed for a compile job.
    */

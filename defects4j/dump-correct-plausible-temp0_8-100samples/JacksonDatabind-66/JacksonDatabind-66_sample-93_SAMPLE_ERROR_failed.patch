diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
index d4417f6ad..997788708 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
@@ -305,24 +305,19 @@ public class StdKeyDeserializer extends KeyDeserializer
 
         @SuppressWarnings("resource")
         @Override
-        public final Object deserializeKey(String key, DeserializationContext ctxt)
-            throws IOException
-        {
-            if (key == null) { // is this even legal call?
-                return null;
-            }
-            try {
-                // Ugh... should not have to give parser which may or may not be correct one...
-                Object result = _delegate.deserialize(ctxt.getParser(), ctxt);
-                if (result != null) {
-                    return result;
-                }
-                return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation");
-            } catch (Exception re) {
-                return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation: %s", re.getMessage());
-            }
+    public final Object deserializeKey(String key, DeserializationContext ctxt)
+        throws IOException
+    {
+        if (key == null) { // is this even legal call?
+            return null;
         }
-
+        try {
+            // Ugh... should not have to give parser which may or may not be correct one...
+            return _delegate.deserializeKey(key, ctxt);
+        } catch (Exception re) {
+            return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation: %s", re.getMessage());
+        }
+    }
         public Class<?> getKeyClass() { return _keyClass; }
     }
      

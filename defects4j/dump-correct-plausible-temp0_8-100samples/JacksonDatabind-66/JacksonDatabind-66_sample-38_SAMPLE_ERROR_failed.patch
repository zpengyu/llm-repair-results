diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
index d4417f6ad..c8e3dbab4 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
@@ -305,24 +305,35 @@ public class StdKeyDeserializer extends KeyDeserializer
 
         @SuppressWarnings("resource")
         @Override
-        public final Object deserializeKey(String key, DeserializationContext ctxt)
-            throws IOException
-        {
-            if (key == null) { // is this even legal call?
-                return null;
-            }
-            try {
-                // Ugh... should not have to give parser which may or may not be correct one...
-                Object result = _delegate.deserialize(ctxt.getParser(), ctxt);
+public final Object deserializeKey(String key, DeserializationContext ctxt)
+    throws IOException
+{
+    if (key == null) { // is this even legal call?
+        return null;
+    }
+    try {
+        // Ugh... should not have to give parser which may or may not be correct one...
+        JsonParser parser = ctxt.getParser();
+        if (parser != null) {
+            if (parser.hasTokenId(JsonToken.FIELD_NAME.id())) {
+                String k = parser.getCurrentName();
+                parser.nextToken();
+                Object result = _delegate.deserialize(parser, ctxt);
                 if (result != null) {
-                    return result;
+                    if (k.equals(key)) {
+                        return result;
+                    }
+                    return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation");
                 }
-                return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation");
-            } catch (Exception re) {
-                return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation: %s", re.getMessage());
             }
         }
-
+        // Not an error but let's output something to help debugging
+        ctxt.reportBadDefinition(_keyClass, "Cannot handle managed/back reference '"+key+"': back reference type/handler not available");
+        return null;
+    } catch (Exception re) {
+        return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation: %s", re.getMessage());
+    }
+}
         public Class<?> getKeyClass() { return _keyClass; }
     }
      

public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {


      // rescale both vectors without losing precision,
      // to ensure their norm are the same order of magnitude

      // we reduce cancellation errors by preconditioning,
      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
      // v3 without loss of precision. See Kahan lecture
      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf

      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
      double rho = 0;
      final double threshold = v2.getNorm1() * 0.1;
      if ((v1.getNorm1() > threshold) && (v2.getNorm1() > threshold)) {
          rho = v1.dotProduct(v2) / v2.dotProduct(v2);
      }
      final double x = v1.x - rho * v2.x;
      final double y = v1.y - rho * v2.y;
      final double z = v1.z - rho * v2.z;

      // compute cross product from v3 and v2 instead of v1 and v2
      return new Vector3D(y * v2.z - z * v2.y, z * v2.x - x * v2.z, x * v2.y - y * v2.x);

  }


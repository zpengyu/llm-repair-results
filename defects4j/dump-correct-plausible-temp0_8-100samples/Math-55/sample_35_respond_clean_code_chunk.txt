  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
      // rescale both vectors without losing precision,
      // to ensure their norm are the same order of magnitude
      // we reduce cancellation errors by preconditioning,
      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
      // v3 without loss of precision. See Kahan lecture
      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
      final double rho   = v1.dotProduct(v2) / v2.dotProduct(v2);
      // compute cross product from v3 and v2 instead of v1 and v2
      final double vx = v1.y * v2.z - v1.z * v2.y - rho * (v2.y * v2.z);
      final double vy = v1.z * v2.x - v1.x * v2.z - rho * (v2.z * v2.x);
      final double vz = v1.x * v2.y - v1.y * v2.x - rho * (v2.x * v2.y);
      return new Vector3D(vx, vy, vz);
  }
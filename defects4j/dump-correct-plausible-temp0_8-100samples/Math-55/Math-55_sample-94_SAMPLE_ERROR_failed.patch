diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java
index b1dca2211..0d56b9f58 100644
--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java
+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java
@@ -465,15 +462,16 @@ public class Vector3D implements Serializable {
       // v3 without loss of precision. See Kahan lecture
       // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
       // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
+      int rho   = 0;
+      int alpha = 0;
+      for (int i = 0; i < v1.v.length; ++i) {
+          rho   += (int) (v1.v[i] * v2.v[i] * (1.0 / (1 << 7)));
+          alpha += (int) (v2.v[i] * v2.v[i] * (1.0 / (1 << 7)));
+      }
       // compute cross product from v3 and v2 instead of v1 and v2
       return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
   }
-
   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
    * <p>Calling this method is equivalent to calling:
    * <code>v1.subtract(v2).getNorm1()</code> except that no intermediate

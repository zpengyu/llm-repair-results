public class Primitives {
	
	public static <T> Class<T> primitiveTypeOf(Class<T> clazz) {
		if (clazz.isPrimitive()) {
			return clazz;
		}
		return (Class<T>) primitiveTypes.get(clazz);
	}

	public static <T> Class<T> primitiveTypeOf(Class<T> clazz) {
		if (clazz.isPrimitive()) {
			return clazz;
		}
		return (Class<T>) primitiveTypes.get(clazz);
	}

	public static boolean isPrimitiveWrapper(Class<?> type) {
		return primitiveWrappers.containsKey(type);
	}

	public static <T> T primitiveWrapperOf(Class<T> type) {
		return (T) primitiveWrappers.get(type);
	}

	public static <T> T primitiveValueOrNullFor(Class<T> primitiveType) {
		return (T) primitiveValues.get(primitiveType);
	}

	private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();
	private static Map<Class<?>, Object> primitiveWrappers = new HashMap<Class<?>, Object>();
	private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();

	static {
		primitiveTypes.put(boolean.class, Boolean.class);
		primitiveTypes.put(char.class, Character.class);
		primitiveTypes.put(byte.class, Byte.class);
		primitiveTypes.put(short.class, Short.class);
		primitiveTypes.put(int.class, Integer.class);
		primitiveTypes.put(long.class, Long.class);
		primitiveTypes.put(float.class, Float.class);
		primitiveTypes.put(double.class, Double.class);
	}

	static {
		primitiveWrappers.put(Boolean.class, false);
		primitiveWrappers.put(Character.class, '\u0000');
		primitiveWrappers.put(Byte.class, (byte) 0);
		primitiveWrappers.put(Short.class, (short) 0);
		primitiveWrappers.put(Integer.class, 0);
		primitiveWrappers.put(Long.class, 0L);
		primitiveWrappers.put(Float.class, 0F);
		primitiveWrappers.put(Double.class, 0D);
	}

	static {
		primitiveValues.put(boolean.class, false);
		primitiveValues.put(char.class, '\u0000');
		primitiveValues.put(byte.class, (byte) 0);
		primitiveValues.put(short.class, (short) 0);
		primitiveValues.put(int.class, 0);
		primitiveValues.put(long.class, 0L);
		primitiveValues.put(float.class, 0F);
		primitiveValues.put(double.class, 0);
	}

}

diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java
index b44b8253d..ff6880393 100644
--- a/src/org/mockito/internal/util/Primitives.java
+++ b/src/org/mockito/internal/util/Primitives.java
@@ -8,23 +8,22 @@ import java.util.HashMap;
 import java.util.Map;
 
 @SuppressWarnings("unchecked")
+package com.github.monkeywie.proxyee;
+import java.util.HashMap;
+import java.util.Map;
 public class Primitives {
-    
     public static <T> Class<T> primitiveTypeOf(Class<T> clazz) {
         if(clazz.isPrimitive()) {
             return clazz;
         }
         return (Class<T>) primitiveTypes.get(clazz);
     }
-
     public static boolean isPrimitiveWrapper(Class<?> type) {
-        return wrapperReturnValues.containsKey(type);
+        return wrapperTypes.containsKey(type);
     }
-
     public static <T> T primitiveWrapperOf(Class<T> type) {
-        return (T) wrapperReturnValues.get(type);
+        return (T) wrapperTypes.get(type);
     }
-
     public static <T> T primitiveValueOrNullFor(Class<T> primitiveType) {
         return (T) primitiveValues.get(primitiveType);
     }
@@ -43,7 +41,16 @@ public class Primitives {
         primitiveTypes.put(Float.class, Float.TYPE);
         primitiveTypes.put(Double.class, Double.TYPE);
     }
-
+    static {
+        wrapperTypes.put(Boolean.class, Boolean.TYPE);
+        wrapperTypes.put(Character.class, Character.TYPE);
+        wrapperTypes.put(Byte.class, Byte.TYPE);
+        wrapperTypes.put(Short.class, Short.TYPE);
+        wrapperTypes.put(Integer.class, Integer.TYPE);
+        wrapperTypes.put(Long.class, Long.TYPE);
+        wrapperTypes.put(Float.class, Float.TYPE);
+        wrapperTypes.put(Double.class, Double.TYPE);
+    }
     static {
         wrapperReturnValues.put(Boolean.class, false);
         wrapperReturnValues.put(Character.class, '\u0000');

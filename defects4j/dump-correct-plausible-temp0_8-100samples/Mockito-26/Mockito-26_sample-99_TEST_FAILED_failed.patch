diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java
index b44b8253d..25a23946d 100644
--- a/src/org/mockito/internal/util/Primitives.java
+++ b/src/org/mockito/internal/util/Primitives.java
@@ -28,6 +24,36 @@ public class Primitives {
     public static <T> T primitiveValueOrNullFor(Class<T> primitiveType) {
         return (T) primitiveValues.get(primitiveType);
     }
+    public static <T> T wrapperOf(Class<T> clazz) {
+        if(clazz.isPrimitive()) {
+            return wrapperOfPrimitive(clazz);
+        }
+        return (T) wrapperReturnValues.get(clazz);
+    }
+    public static <T> T wrapperOfPrimitive(Class<T> primitiveType) {
+        return (T) wrapperReturnValues.get(primitiveTypes.get(primitiveType));
+    }
+    public static <T> boolean isWrapperTypeOf(Class<T> clazz) {
+        if(clazz.isPrimitive()) {
+            return false;
+        }
+        return wrapperReturnValues.containsKey(clazz);
+    }
+    public static <T> boolean isPrimitive(Class<T> clazz) {
+        return clazz.isPrimitive();
+    }
+    public static <T> T primitiveValueOrDefault(Class<T> primitiveType) {
+        return (T) primitiveValues.get(primitiveType);
+    }
+    public static <T> Class<T> wrapperTypeOf(Class<T> clazz) {
+        if(clazz.isPrimitive()) {
+            return wrapperTypeOfPrimitive(clazz);
+        }
+        return (Class<T>) wrapperTypes.get(clazz);
+    }
+    public static <T> Class<T> wrapperTypeOfPrimitive(Class<T> primitiveType) {
+        return (Class<T>) wrapperTypes.get(primitiveType);
+    }
     private static Map<Class<?>, Class<?>> wrapperTypes = new HashMap<Class<?>, Class<?>>();
     private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();
     private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();

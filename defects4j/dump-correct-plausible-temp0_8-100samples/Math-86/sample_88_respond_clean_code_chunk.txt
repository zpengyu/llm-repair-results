    public CholeskyDecompositionImpl(final RealMatrix matrix,
                                     final double relativeSymmetryThreshold,
                                     final double absolutePositivityThreshold)
        throws NonSquareMatrixException,
               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
        if (!matrix.isSquare()) {
            throw new NonSquareMatrixException(matrix.getRowDimension(),
                                               matrix.getColumnDimension());
        }
        final int order = matrix.getRowDimension();
        lTData   = matrix.getData();
        cachedL  = null;
        cachedLT = null;
        // check the matrix before transformation
        for (int i = 0; i < order; ++i) {
            final double[] lI = lTData[i];
            if (lTData[i][i] < absolutePositivityThreshold) {
                throw new NotPositiveDefiniteMatrixException();
            }
            // check off-diagonal elements (and reset them to 0)
            for (int j = i + 1; j < order; ++j) {
                final double[] lJ = lTData[j];
                final double lIJ = lI[j];
                final double lJI = lJ[i];
                final double maxDelta =
                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                if (Math.abs(lIJ - lJI) > maxDelta) {
                    throw new NotSymmetricMatrixException();
                }
                lJ[i] = 0;
            }
        }
        // transform the matrix
        for (int i = 0; i < order; ++i) {
            final double[] ltI = lTData[i];
            // check diagonal element
            for (int j = i; j < order; ++j) {
                double sum = ltI[j];
                for (int k = i - 1; k >= 0; --k) {
                    sum -= lTData[j][k] * lTData[i][k];
                }
                if (i == j) {
                    if (sum <= 0) {
                        throw new NotPositiveDefiniteMatrixException();
                    }
                    ltI[i] = Math.sqrt(sum);
                } else {
                    ltI[j] = sum / ltI[i];
                }
            }
        }
    }
diff --git a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
index 8229df2b9..f0097c7ad 100644
--- a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
+++ b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
@@ -90,54 +90,41 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
-    public CholeskyDecompositionImpl(final RealMatrix matrix,
-                                     final double relativeSymmetryThreshold,
-                                     final double absolutePositivityThreshold)
-        throws NonSquareMatrixException,
-               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
-
+import java.util.Arrays;
+public class CholeskyDecompositionImpl implements CholeskyDecomposition {
+    /** The threshold for testing the symmetry of a matrix. */
+    private static final double SYMMETRY_THRESHOLD = 1.0e-15;
+    /** The threshold for testing the positive definiteness of a matrix. */
+    private static final double DEFINITE_THRESHOLD = 1.0e-13;
+    /** The decomposed matrix. */
+    private final double[][] lTData;
+    /**
+     * Build a new instance.
+     *
+     * @param matrix The matrix to decompose.
+     * @throws NonSymmetricMatrixException If the matrix is not symmetric.
+     * @throws NotPositiveDefiniteMatrixException If the matrix is not positive definite.
+     * @throws NotSquareMatrixException If the matrix is not square
+     * @throws InvalidMatrixException If the matrix is not valid
+     */
+    public CholeskyDecompositionImpl(final RealMatrix matrix)
+        throws NonSquareMatrixException, NonSymmetricMatrixException, NotPositiveDefiniteMatrixException, InvalidMatrixException {
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
-
         final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
-        cachedL  = null;
-        cachedLT = null;
-
-        // check the matrix before transformation
-        for (int i = 0; i < order; ++i) {
-
-            final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
-            for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
-                final double maxDelta =
-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
-                if (Math.abs(lIJ - lJI) > maxDelta) {
-                    throw new NotSymmetricMatrixException();
-                }
-                lJ[i] = 0;
-           }
-        }
-
+        lTData = matrix.getData();
         // transform the matrix
         for (int i = 0; i < order; ++i) {
-
             final double[] ltI = lTData[i];
-
+            final double ltII = ltI[i];
             // check diagonal element
-
-            ltI[i] = Math.sqrt(ltI[i]);
+            if (ltII <= 0.0) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
+            ltI[i] = Math.sqrt(ltII);
             final double inverse = 1.0 / ltI[i];
-
             for (int q = order - 1; q > i; --q) {
                 ltI[q] *= inverse;
                 final double[] ltQ = lTData[q];
@@ -145,11 +132,71 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
+        // check symmetry and zero diagonal elements
+        for (int i = 0; i < order; ++i) {
+            final double[] ltI = lTData[i];
+            final double diag = ltI[i];
+            ltI[i] = 0.0;
+            final double[] ltJ = lTData[i];
+            for (int j = i + 1; j < order; ++j) {
+                final double delta = ltI[j] - ltJ[i];
+                final double delta2 = delta * delta;
+                final double maxDelta2 = SYMMETRY_THRESHOLD * diag * ltJ[j];
+                if (delta2 > maxDelta2) {
+                    throw new NonSymmetricMatrixException();
+                }
+                ltJ[i] = 0.0;
+            }
+        }
     }
-
+    /**
+     * Checks if a matrix is symmetric.
+     * <p>The matrix is considered to be symmetric when all the absolute value of
+     * its difference from its transpose are below a threshold.
+     * </p>
+     * @param matrix matrix to check
+     * @param threshold threshold of the non-symmetry
+     * @throws NonSymmetricMatrixException if the matrix is not symmetric
+     * @since 2.0
+     */
+    private static void checkSymmetry(final RealMatrix matrix, final double threshold)
+        throws NonSymmetricMatrixException {
+        final int n = matrix.getRowDimension();
+        final int m = matrix.getColumnDimension();
+        for (int r = 0; r < n; ++r) {
+            final double[] rowR = matrix.getRow(r);
+            for (int c = 0; c < m; ++c) {
+                final double[] rowC = matrix.getRow(c);
+                final double delta = Math.abs(rowR[c] - rowC[r]);
+                final double scale = Math.max(Math.abs(rowR[c]), Math.abs(rowC[r]));
+                if (delta > scale * threshold) {
+                    throw new NonSymmetricMatrixException();
+                }
+            }
+        }
+    }
+    /**
+     * Checks if a matrix is positive definite.
+     * <p>
+     * A matrix is considered positive definite if all its leading principal
+     * minors are positive.
+     * </p>
+     * @param matrix matrix to check
+     * @param threshold threshold of the positive definiteness
+     * @throws NotPositiveDefiniteMatrixException if the matrix is not positive definite
+     * @since 2.0
+     */
+    private static void checkPositiveDefinite(final RealMatrix matrix, final double threshold)
+        throws NotPositiveDefiniteMatrixException {
+        final int n = matrix.getRowDimension();
+        for (int i = 0; i < n; ++i) {
+            if (matrix.getEntry(i, i) <= threshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
+        }
+    }
+}
     /** {@inheritDoc} */
     public RealMatrix getL() {
         if (cachedL == null) {

diff --git a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
index 42399c04d..040df37b9 100644
--- a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
+++ b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
@@ -297,6 +292,7 @@ public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
+            double c4 = sx2 * syz - sxy * sxz;
             if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
                 final int last = observations.length - 1;
                 // Range of the observations, assuming that the
@@ -322,12 +317,15 @@ public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {
             } else {
                     // In some ill-conditioned cases (cf. MATH-844), the guesser
                     // procedure cannot produce sensible results.
-
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+                if (c3 == 0) {
+                    a = FastMath.sqrt(c1 / c2);
+                    omega = FastMath.sqrt(c2 / c3);
+                } else {
+                    a = FastMath.sqrt((c1 / c2) * (c3 / c4));
+                    omega = FastMath.sqrt((c2 / c3) * (c4 / c1));
+                }
             }
         }
-
         /**
          * Estimate a first guess of the phase.
          */

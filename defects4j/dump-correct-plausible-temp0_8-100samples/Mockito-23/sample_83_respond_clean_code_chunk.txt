import net.bytebuddy.ByteBuddy;
import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
import net.bytebuddy.implementation.MethodCall;
import net.bytebuddy.matcher.ElementMatchers;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import java.io.Serializable;
import java.lang.reflect.Modifier;
import java.util.HashSet;
import java.util.Set;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
public class ObjenesisTestClass {
    static interface TestInterface {
        String getString();
    }
    static class TestClass implements TestInterface {
        private String s = "";
        public void setString(String s) {
            this.s = s;
        }
        @Override
        public String getString() {
            return s;
        }
    }
    TestInterface testInterface;
    TestClass testClass;
    @Before
    public void setup() {
        testInterface = mock(TestInterface.class);
        testClass = mock(TestClass.class);
    }
    @Test
    public void mockTestInterface() {
        when(testInterface.getString()).thenReturn("test");
        assertThat(testInterface.getString(), is("test"));
    }
    @Test
    public void mockTestClass() {
        when(testClass.getString()).thenReturn("test");
        assertThat(testClass.getString(), is("test"));
    }
    @Test
    public void mockTestClass_useCallRealMethod() {
        when(testClass.getString()).thenCallRealMethod();
        testClass.setString("test");
        assertThat(testClass.getString(), is("test"));
    }
    @Test
    public void newInstanceTest() {
        try {
            new ByteBuddy().subclass(TestInterface.class).method(ElementMatchers.named("getString"))
                    .intercept(MethodCall.invoke(String.class.getDeclaredMethod("valueOf", boolean.class)))
                    .make().load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                    .getLoaded().newInstance();
            assertEquals(true, false);
        } catch (InstantiationException e) {
            assertEquals(true, false);
        } catch (Exception e) {
            assertEquals(true, true);
        }
    }
    @Test
    public void newInterfaceInstance() {
        try {
            TestInterface test = new ByteBuddy().subclass(TestInterface.class).method(ElementMatchers.named("getString"))
                    .intercept(MethodCall.invoke(String.class.getDeclaredMethod("valueOf", boolean.class)))
                    .make().load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                    .getLoaded().newInstance();
            assertEquals(true, true);
            assertEquals(test.getString(), "false");
        } catch (Exception e) {
            assertEquals(true, false);
        }
    }
    @Test
    public void newClassInstance() {
        try {
            TestClass test = new ByteBuddy().subclass(TestClass.class).method(ElementMatchers.named("getString"))
                    .intercept(MethodCall.invoke(String.class.getDeclaredMethod("valueOf", boolean.class)))
                    .make().load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                    .getLoaded().newInstance();
            assertEquals(true, true);
            assertEquals(test.getString(), "false");
        } catch (Exception e) {
            assertEquals(true, false);
        }
    }
    @Test
    public void mockNewInterfaceInstance() {
        try {
            TestInterface test = new ByteBuddy().subclass(TestInterface.class).method(ElementMatchers.named("getString"))
                    .intercept(MethodCall.invoke(String.class.getDeclaredMethod("valueOf", boolean.class)))
                    .make().load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                    .getLoaded().newInstance();
            when(test.getString()).thenReturn("test");
            assertEquals(test.getString(), "test");
        } catch (Exception e) {
            assertEquals(true, false);
        }
    }
    @Test
    public void mockNewClassInstance() {
        try {
            TestClass test = new ByteBuddy().subclass(TestClass.class).method(ElementMatchers.named("getString"))
                    .intercept(MethodCall.invoke(String.class.getDeclaredMethod("valueOf", boolean.class)))
                    .make().load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                    .getLoaded().newInstance();
            when(test.getString()).thenReturn("test");
            assertEquals(test.getString(), "test");
        } catch (Exception e) {
            assertEquals(true, false);
        }
    }
    @Test
    public void mockNewClassInstance_useCallRealMethod() {
        try {
            TestClass test = new ByteBuddy().subclass(TestClass.class).method(ElementMatchers.named("getString"))
                    .intercept(MethodCall.invoke(String.class.getDeclaredMethod("valueOf", boolean.class)))
                    .make().load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                    .getLoaded().newInstance();
            when(test.getString()).thenCallRealMethod();
            test.setString("test");
            assertEquals(test.getString(), "test");
        } catch (Exception e) {
            assertEquals(true, false);
        }
    }
}
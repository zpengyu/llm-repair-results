diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index c4384f7fc..e6dbb1449 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -52,27 +48,39 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
         if (!mockitoCore.isTypeMockable(rawType)) {
             return delegate.returnValueFor(rawType);
         }
-
         return getMock(invocation, returnTypeGenericMetadata);
     }
-
-
-
+    /**
+     * <p>
+     * Internally we create a mock using the return type of the mocked method and we wrap it in an Answer.
+     * Then, using the InvocationContainer we add that answer to the list of answers to be returned.
+     * </p>
+     * <p>
+     * The most important part here is how we actually create the mock, as that is the part that may fail if the type
+     * is final or if it has a private constructor. For this we are using the {@link GenericMetadataSupport} to infer
+     * what the type of the mock is and then we pass the information to the {@link org.mockito.internal.creation.settings.CreationSettingsBuilder}.
+     * </p>
+     * <p>
+     * Finally as we want to mock the actual type, but we want to pass along the contextual generics meta-data
+     * that was resolved for the current return type, for this to happen we associate to the mock an new instance of
+     * {@link ReturnsDeepStubs} answer in which we will store the returned type generic metadata.
+     * </p>
+     *
+     * @param invocation The current invocation.
+     * @param returnTypeGenericMetadata The metadata to use to create the new mock.
+     * @return The mock
+     * @throws Throwable
+     */
     private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
-    	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
-    	InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();
-
         // matches invocation for verification
-        for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {
-    		if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {
-    			return stubbedInvocationMatcher.answer(invocation);
-    		}
-		}
-
+        for (StubbedInvocationMatcher stubbedInvocationMatcher : getInvocationContainer(invocation).getStubbedInvocations()) {
+            if(getInvocationContainer(invocation).getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {
+                return stubbedInvocationMatcher.answer(invocation);
+            }
+        }
         // deep stub
-        return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);
+        return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), invocation);
     }
-
     /**
      * Creates a mock using the Generics Metadata.
      *
@@ -93,9 +100,8 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
     private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {
         MockSettings mockSettings =
                 returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ?
-                withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())
-                : withSettings();
-
+                        withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())
+                        : withSettings();
         return mockSettings
                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
     }
@@ -108,21 +113,17 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
             }
         };
     }
-
-    private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {
-
-        container.addAnswer(new Answer<Object>() {
+    private Object recordDeepStubMock(final Object mock, InvocationOnMock invocation) throws Throwable {
+        getInvocationContainer(invocation).addAnswer(new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return mock;
             }
         }, false);
-
         return mock;
     }
-	
-		
-	
-
+    private InvocationContainer getInvocationContainer(InvocationOnMock invocation) {
+        return ((InternalMockHandler) getMockHandler(invocation.getMock())).getInvocationContainer();
+    }
     protected GenericMetadataSupport actualParameterizedType(Object mock) {
         CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();
         return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());

diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index c4384f7fc..20bf47416 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -68,11 +59,9 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
     			return stubbedInvocationMatcher.answer(invocation);
     		}
 		}
-
         // deep stub
-        return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);
+        return recordDeepStubMock(createNewDeepStubMock(invocation, returnTypeGenericMetadata), container);
     }
-
     /**
      * Creates a mock using the Generics Metadata.
      *
@@ -80,27 +69,25 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
      * that was resolved for the current return type, for this to happen we associate to the mock an new instance of
      * {@link ReturnsDeepStubs} answer in which we will store the returned type generic metadata.
      *
+     * @param invocation The current invocation.
      * @param returnTypeGenericMetadata The metadata to use to create the new mock.
      * @return The mock
      */
-    private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {
+    private Object createNewDeepStubMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) {
         return mockitoCore.mock(
                 returnTypeGenericMetadata.rawType(),
-                withSettingsUsing(returnTypeGenericMetadata)
+                withSettingsUsing(invocation, returnTypeGenericMetadata)
         );
     }
-
-    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {
+    private MockSettings withSettingsUsing(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) {
         MockSettings mockSettings =
                 returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ?
                 withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())
                 : withSettings();
-
         return mockSettings
-                .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
+                .defaultAnswer(returnsDeepStubsAnswerUsing(invocation, returnTypeGenericMetadata));
     }
-
-    private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {
+    private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final InvocationOnMock invocation, final GenericMetadataSupport returnTypeGenericMetadata) {
         return new ReturnsDeepStubs() {
             @Override
             protected GenericMetadataSupport actualParameterizedType(Object mock) {

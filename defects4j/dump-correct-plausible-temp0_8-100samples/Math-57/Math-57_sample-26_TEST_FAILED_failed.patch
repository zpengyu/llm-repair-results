diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
index 888d00e22..15ab57532 100644
--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
@@ -158,45 +158,39 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {
      * @param random random generator to use
      * @return the initial centers
      */
-    private static <T extends Clusterable<T>> List<Cluster<T>>
-        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
-
-        final List<T> pointSet = new ArrayList<T>(points);
-        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
-
-        // Choose one center uniformly at random from among the data points.
-        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
-        resultSet.add(new Cluster<T>(firstPoint));
-
-        final double[] dx2 = new double[pointSet.size()];
-        while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
-            for (int i = 0; i < pointSet.size(); i++) {
-                final T p = pointSet.get(i);
-                final Cluster<T> nearest = getNearestCluster(resultSet, p);
-                final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
-            }
-
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
-            final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
-                    break;
-                }
+private static <T extends Clusterable<T>> List<Cluster<T>>
+    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
+    final List<T> pointSet = new ArrayList<T>(points);
+    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
+    // Choose one center uniformly at random from among the data points.
+    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
+    resultSet.add(new Cluster<T>(firstPoint));
+    final double[] dx2 = new double[pointSet.size()];
+    while (resultSet.size() < k) {
+        // For each data point x, compute D(x), the distance between x and
+        // the nearest center that has already been chosen.
+        int sum = 0;
+        for (int i = 0; i < pointSet.size(); i++) {
+            final T p = pointSet.get(i);
+            final Cluster<T> nearest = getNearestCluster(resultSet, p);
+            final double d = p.distanceFrom(nearest.getCenter());
+            sum += d * d;
+            dx2[i] = sum;
+        }
+        // Add one new data point as a center. Each point x is chosen with
+        // probability proportional to D(x)2
+        double r = random.nextDouble() * sum;
+        for (int i = 0 ; i < dx2.length; i++) {
+            if (dx2[i] >= r) {
+                final T p = pointSet.remove(i);
+                resultSet.add(new Cluster<T>(p));
+                break;
             }
+            r -= dx2[i];
         }
-
-        return resultSet;
-
     }
-
+    return resultSet;
+}
     /**
      * Get a random point from the {@link Cluster} with the largest distance variance.
      *

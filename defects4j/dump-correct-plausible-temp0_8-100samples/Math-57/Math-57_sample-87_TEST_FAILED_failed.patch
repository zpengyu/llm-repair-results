diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
index 888d00e22..11a0b4e2a 100644
--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
@@ -158,12 +158,10 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {
      * @param random random generator to use
      * @return the initial centers
      */
-    private static <T extends Clusterable<T>> List<Cluster<T>>
+private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
-
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
-
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
@@ -186,7 +182,7 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {
             final double r = random.nextDouble() * sum;
             for (int i = 0 ; i < dx2.length; i++) {
                 if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
+                    final T p = pointSet.get(i);
                     resultSet.add(new Cluster<T>(p));
                     break;
                 }

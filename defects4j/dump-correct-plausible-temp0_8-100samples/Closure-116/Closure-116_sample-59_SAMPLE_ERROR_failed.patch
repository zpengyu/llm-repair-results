diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java
index c17b3cb3..f8d83017 100644
--- a/src/com/google/javascript/jscomp/FunctionInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -713,41 +709,36 @@ class FunctionInjector {
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
-
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
-          }
+    for (int n = NodeUtil.getFunctionParameterCount(fnNode); n > 0; n--) {
+      if (cArg == null) {
+        // Check for missing arguments when we are in a function with
+        // missing .apply() call.
+        if (block.isParamList()) {
+          block.addChildToFront(IR.name("undefined"));
+        }
+      } else {
+        // Check for arguments that are evaluated more than once.
+        // Note: Unlike block inlining, there it is not possible that a
+        // parameter reference will be in a loop.
+        if (NodeUtil.mayEffectMutableState(cArg, compiler)
+            && NodeUtil.getNameReferenceCount(
+                block, fnParam.getString()) > 1) {
+          return CanInlineResult.NO;
         }
-
         // Move to the next name.
         fnParam = fnParam.getNext();
-      }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
+        // Check for side-effects in an argument, even if there isn't a
+        // named parameter to match.
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
-        cArg = cArg.getNext();
       }
+      cArg = cArg.getNext();
     }
-
     return CanInlineResult.YES;
   }
-
   /**
    * Determine if inlining the function is likely to reduce the code size.
    * @param namesToAlias

diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java
index 324dd037..e8a22363 100644
--- a/src/java/org/apache/commons/lang/time/DateUtils.java
+++ b/src/java/org/apache/commons/lang/time/DateUtils.java
@@ -620,24 +620,38 @@ public class DateUtils {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
-
-
+        if (!(val instanceof GregorianCalendar)) {
+            throw new IllegalArgumentException("Modification only supported on GregorianCalendar");
+        }
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
         // Manually truncate milliseconds, seconds and minutes, rather than using
         // Calendar methods.
-
-
+        Date date = val.getTime();
+        long time = date.getTime();
+        boolean done = false;
         // truncate milliseconds
-
+        int millisecs = val.get(Calendar.MILLISECOND);
+        if (!(done = (millisecs < 500))) {
+            time = time - millisecs;
+        }
         // truncate seconds
-
+        int seconds = val.get(Calendar.SECOND);
+        if (!done && (!(done = (seconds < 30)))) {
+            time = time - (seconds * 1000L);
+        }
         // truncate minutes
-
+        int minutes = val.get(Calendar.MINUTE);
+        if (!done && (!(done = (minutes < 30)))) {
+            time = time - (minutes * 60000L);
+        }
         // reset time
+        if (date.getTime() != time) {
+            date.setTime(time);
+            val.setTime(date);
+        }
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
-
         boolean roundUp = false;
         for (int i = 0; i < fields.length; i++) {
             for (int j = 0; j < fields[i].length; j++) {
@@ -685,14 +699,14 @@ public class DateUtils {
                     }
                     break;
                 case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
+                    if (fields[i][0] == Calendar.HOUR) {
                         //If we're going to drop the HOUR field's value,
                         //  we want to do this our own way.
-                        offset = val.get(Calendar.HOUR_OF_DAY);
+                        offset = val.get(Calendar.HOUR);
                         if (offset >= 12) {
                             offset -= 12;
                         }
-                        roundUp = offset > 6;
+                        roundUp = offset >= 6;
                         offsetSet = true;
                     }
                     break;
@@ -706,12 +720,12 @@ public class DateUtils {
                 roundUp = offset > ((max - min) / 2);
             }
             //We need to remove this field
+            if (offset != 0) {
                 val.set(fields[i][0], val.get(fields[i][0]) - offset);
+            }
         }
         throw new IllegalArgumentException("The field " + field + " is not supported");
-
     }
-
     //-----------------------------------------------------------------------
     /**
      * <p>This constructs an <code>Iterator</code> over each day in a date

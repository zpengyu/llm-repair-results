diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java
index ddaada2f1..b4b11c236 100644
--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java
+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java
@@ -48,10 +47,24 @@ public class ByteBuddyMockMaker implements MockMaker {
                     ""
             ),cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        	Class<?> mockedType = settings.getTypeToMock();
+        	Class<?> actualType = mockInstance.getClass();
+        	List<Method> abstractMethods = new ArrayList<Method>();
+        	for (Method method : mockedType.getMethods()) {
+        		if (Modifier.isAbstract(method.getModifiers()) && !isOverridden(method, actualType, new HashSet<Class<?>>())) {
+        			abstractMethods.add(method);
+        		}
+        	}
+        	if (abstractMethods.size() > 0) {
+        		throw new MockitoException(join(
+                        "Class " + actualType.getSimpleName() + " is not an abstract class so it cannot extend abstract class " + mockedType.getSimpleName() + " and must therefore override the following methods:",
+                        describeMethods(abstractMethods)
+                ), e);
+        	} else {
+                throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+            }
         }
     }
-
     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {
         // Force explicit cast to mocked type here, instead of
         // relying on the JVM to implicitly cast on the client call site.

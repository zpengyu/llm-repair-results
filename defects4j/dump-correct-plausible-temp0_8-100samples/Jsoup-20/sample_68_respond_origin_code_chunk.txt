    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
        Document doc = null;
        if (charsetName == null) { // determine from meta. safe parse as UTF-8
            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
            doc = parser.parseInput(Charset.forName(defaultCharset).decode(byteData).toString(), baseUri);
            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
            if (meta != null) { // if not found, will keep utf-8 as best attempt
                String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                    charsetName = foundCharset;
                    byteData.rewind();
                    doc = parser.parseInput(Charset.forName(foundCharset).decode(byteData).toString(), baseUri);
                }
            }
        } else { // specified by content type header (or by user on file load)
            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
            doc = parser.parseInput(Charset.forName(charsetName).decode(byteData).toString(), baseUri);
        }
        if (doc != null) {
            // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
            // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
            // into head mode
            String docData = doc.data();
            if (docData.length() > 0 && docData.charAt(0) == 65279) {
                doc.data(docData.substring(1));
            }
        }
        doc.outputSettings().charset(charsetName);
        return doc;
    }

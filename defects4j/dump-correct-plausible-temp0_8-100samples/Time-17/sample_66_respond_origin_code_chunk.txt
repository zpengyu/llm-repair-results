    public long adjustOffset(long instant, boolean earlierOrLater) {
        // a bit messy, but will work in all non-pathological cases
        
        // evaluate 3 hours before and after to work out if anything is happening
        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
        if (instantBefore == instantAfter) {
            return instant;  // not an overlap (less than is a gap, equal is normal case)
        }
        
        // work out range of instants that have duplicate local times
        long local = convertUTCToLocal(instant);
        long start = local;
        long end = local;
        int count = 0;
        while (start > instantBefore && count < 7) {
            --start;
            ++count;
        }
        count = 0;
        while (end < instantAfter && count < 7) {
            ++end;
            ++count;
        }
        
        // pick the instant closest to the requested instant
        if ((instant - start) < (end - instant)) {
            return convertLocalToUTC(start, false, instantAfter);
        } else {
            return convertLocalToUTC(end, false, instantBefore);
        }
        
        // calculate result
          // currently in later offset
          // currently in earlier offset
    }

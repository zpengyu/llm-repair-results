    public long adjustOffset(long instant, boolean earlierOrLater) {
        // a bit messy, but will work in all non-pathological cases
        
        // evaluate 3 hours before and after to work out if anything is happening
        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
        if (instantBefore == instantAfter) {
            return instant;  // not an overlap (less than is a gap, equal is normal case)
        }
        
        // work out range of instants that have duplicate local times
        long local = convertUTCToLocal(instant);
        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
        
        // calculate result
        if (instant < instantBefore) {  // currently in later offset
            return instant;
        } else if (instant >= instantAfter) {  // currently in earlier offset
            return convertUTCToLocal(instant);
        } else if (instantBefore < instantAfter) {  // not in gap
            return earlierOrLater ? instantBefore : instantAfter;
        } else {
            long gapInstant = earlierOrLater ? instantBefore : instantAfter;
            long gapOffset = earlierOrLater ? 0 : 1;
            int i;
            for (i = 1; i < 7; i++) {
                if (instantBefore == gapInstant || instantAfter == gapInstant) {
                    return gapOffset + convertUTCToLocal(instant);
                }
                gapOffset++;
                gapInstant += DateTimeConstants.MILLIS_PER_HOUR;
            }
            return instant;
        }
    }


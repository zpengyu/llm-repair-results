diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
index e9bf3cdcb..67e7d31bf 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
@@ -86,36 +86,33 @@ public class AsWrapperTypeDeserializer
             }
         }
         // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                        "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
+        JsonToken t = p.getCurrentToken();
+        if (t == JsonToken.START_OBJECT) {
+            t = p.nextToken();
+            if (t == JsonToken.FIELD_NAME) {
+                // should always get field name, but just in case...
+                final String typeId = p.getText();
+                p.nextToken();
+                JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+                // Minor complication: we may need to merge type id in?
+                if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
+                    // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
+                    TokenBuffer tb = new TokenBuffer(null, false);
+                    tb.writeStartObject(); // recreate START_OBJECT
+                    tb.writeFieldName(_typePropertyName);
+                    tb.writeString(typeId);
+                    p = JsonParserSequence.createFlattened(tb.asParser(p), p);
+                    p.nextToken();
+                }
+                Object value = deser.deserialize(p, ctxt);
+                // And then need the closing END_OBJECT
+                if (p.nextToken() != JsonToken.END_OBJECT) {
+                    throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
+                            "expected closing END_OBJECT after type information and deserialized value");
+                }
+                return value;
             }
-        final String typeId = p.getText();
-        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
-
-        // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
-            TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
-            tb.writeFieldName(_typePropertyName);
-            tb.writeString(typeId);
-            p = JsonParserSequence.createFlattened(tb.asParser(p), p);
-            p.nextToken();
         }
-        
-        Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
-                    "expected closing END_OBJECT after type information and deserialized value");
-        }
-        return value;
-    }
-}
+        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+    }}

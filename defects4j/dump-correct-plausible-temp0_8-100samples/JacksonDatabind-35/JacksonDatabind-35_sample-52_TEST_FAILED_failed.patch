diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
index e9bf3cdcb..59731ab6b 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
@@ -86,12 +86,14 @@ public class AsWrapperTypeDeserializer
             }
         }
         // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+        JsonToken t = p.getCurrentToken();
+        if (t != JsonToken.START_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
             // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
+            t = p.nextToken();
+            if (t != JsonToken.FIELD_NAME) {
                 throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
             }
@@ -109,13 +110,12 @@ public class AsWrapperTypeDeserializer
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
-        
         Object value = deser.deserialize(p, ctxt);
         // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
+        t = p.nextToken();
+        if (t != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
-    }
-}
+    }}

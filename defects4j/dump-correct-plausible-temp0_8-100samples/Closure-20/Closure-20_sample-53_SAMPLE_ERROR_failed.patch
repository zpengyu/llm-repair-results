diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index dee765a1..262fc9a9 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -209,7 +209,7 @@ class PeepholeSubstituteAlternateSyntax
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
+        callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
@@ -218,12 +218,22 @@ class PeepholeSubstituteAlternateSyntax
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
       if (value != null) {
-        Node addition = IR.add(
-            IR.string("").srcref(callTarget),
-            value.detachFromParent());
-        n.getParent().replaceChild(n, addition);
-        reportCodeChange();
-        return addition;
+        if (value.isImmutableValue()) {
+          Node addition = IR.add(
+              IR.string("").srcref(callTarget),
+              value.detachFromParent());
+          n.getParent().replaceChild(n, addition);
+          reportCodeChange();
+          return addition;
+        } else if (value.isName() &&
+            value.getString().equals("eval")) {
+          Node addition = IR.add(
+              IR.string("").srcref(callTarget),
+              value.detachFromParent());
+          n.getParent().replaceChild(n, addition);
+          reportCodeChange();
+          return addition;
+        }
       }
     }
     return n;

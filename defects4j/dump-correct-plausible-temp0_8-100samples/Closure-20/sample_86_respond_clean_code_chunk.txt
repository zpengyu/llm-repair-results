  private Node tryFoldSimpleFunctionCall(Node n) {
    Preconditions.checkState(n.isCall());
    Node callTarget = n.getFirstChild();
    if (callTarget != null && callTarget.isName() &&
          callTarget.getString().equals("String")) {
      // Fold String(a) to '' + (a) on immutable literals,
      // which allows further optimizations
      //
      // We can't do this in the general case, because String(a) has
      // slightly different semantics than '' + (a). See
      // http://code.google.com/p/closure-compiler/issues/detail?id=759
      Node value = callTarget.getNext();
      if (value != null) {
        Node addition = IR.add(
            IR.string("").srcref(callTarget),
            value.detachFromParent());
        n.getParent().replaceChild(n, addition);
        reportCodeChange();
        return addition;
      }
    } else if (callTarget != null && callTarget.isName() &&
               callTarget.getString().equals("Array")) {
      // Fold Array(n) to [], [x], [x,y], etc.
      Node value = callTarget.getNext();
      if (value != null) {
        Node arrayLiteral = IR.arraylit();
        if (!value.isUndefined()) {
          arrayLiteral.addChildToBack(value.detachFromParent());
        }
        n.getParent().replaceChild(n, arrayLiteral);
        reportCodeChange();
        return arrayLiteral;
      }
    }
    return n;
  }
diff --git a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
index 6905f1ac9..15c515b74 100644
--- a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
@@ -108,55 +108,32 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
-        final double lo = getMin();
-        final double mid = getStartValue();
-        final double hi = getMax();
-
-        // Optional additional convergence criteria.
-        final ConvergenceChecker<UnivariatePointValuePair> checker
-            = getConvergenceChecker();
-
-        double a;
-        double b;
-        if (lo < hi) {
-            a = lo;
-            b = hi;
-        } else {
-            a = hi;
-            b = lo;
-        }
-
-        double x = mid;
-        double v = x;
-        double w = x;
-        double d = 0;
+        double a = getMin();
+        double b = getMax();
+        double v = getStartValue();
+        double x = v;
+        double w = v;
         double e = 0;
-        double fx = computeObjectiveValue(x);
-        if (!isMinim) {
-            fx = -fx;
-        }
+        double fx = isMinim ? computeObjectiveValue(x) : -computeObjectiveValue(x);
         double fv = fx;
         double fw = fx;
-
+        final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker();
         UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
-
+        UnivariatePointValuePair current = new UnivariatePointValuePair(x, fx);
         int iter = 0;
         while (true) {
             final double m = 0.5 * (a + b);
             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
             final double tol2 = 2 * tol1;
-
-            // Default stopping criterion.
-            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
-            if (!stop) {
-                double p = 0;
-                double q = 0;
-                double r = 0;
-                double u = 0;
-
-                if (FastMath.abs(e) > tol1) { // Fit parabola.
+            if (FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)) {
+                return current;
+            }
+            if (FastMath.abs(e) > tol1) {
+                // Attempt inverse quadratic interpolation.
+                double r;
+                double q;
+                double p;
+                if (w != x) {
                     r = (x - w) * (fx - fv);
                     q = (x - v) * (fx - fw);
                     p = (x - v) * q - (x - w) * r;
@@ -167,104 +143,91 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
                     } else {
                         q = -q;
                     }
-
                     r = e;
                     e = d;
-
-                    if (p > q * (a - x) &&
-                        p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
-                        // Parabolic interpolation step.
-                        d = p / q;
-                        u = x + d;
-
-                        // f must not be evaluated too close to a or b.
-                        if (u - a < tol2 || b - u < tol2) {
-                            if (x <= m) {
-                                d = tol1;
-                            } else {
-                                d = -tol1;
-                            }
-                        }
+                } else {
+                    r = (x - v) * (fx - fw);
+                    q = (x - w) * (fx - fv);
+                    p = (x - v) * q - (x - w) * r;
+                    q = 2 * (q - r);
+                    if (q > 0) {
+                        p = -p;
                     } else {
-                        // Golden section step.
-                        if (x < m) {
-                            e = b - x;
-                        } else {
-                            e = a - x;
-                        }
-                        d = GOLDEN_SECTION * e;
+                        q = -q;
+                    }
+                    r = e;
+                    e = d;
+                }
+                if (p > q * (a - x) &&
+                    p < q * (b - x)) {
+                    // Inverse quadratic interpolation step.
+                    d = p / q;
+                    double u = x + d;
+                    // f must not be evaluated too close to a or b.
+                    if ((u - a) < tol2 || (b - u) < tol2) {
+                        d = FastMath.copySign(FastMath.max(tol1, 0.5 * (b - a)), m - x);
                     }
                 } else {
-                    // Golden section step.
-                    if (x < m) {
-                        e = b - x;
-                    } else {
+                    // A golden-section step.
+                    if (x >= m) {
                         e = a - x;
+                    } else {
+                        e = b - x;
                     }
                     d = GOLDEN_SECTION * e;
                 }
-
-                // Update by at least "tol1".
-                if (FastMath.abs(d) < tol1) {
-                    if (d >= 0) {
-                        u = x + tol1;
-                    } else {
-                        u = x - tol1;
-                    }
+            } else {
+                // A golden-section step.
+                if (x >= m) {
+                    e = a - x;
                 } else {
-                    u = x + d;
+                    e = b - x;
                 }
-
-                double fu = computeObjectiveValue(u);
-                if (!isMinim) {
-                    fu = -fu;
+                d = GOLDEN_SECTION * e;
+            }
+            // f must not be evaluated too close to x.
+            double u = x + FastMath.max(FastMath.abs(d), tol1);
+            u = FastMath.min(u, b - tol1);
+            double fu = isMinim ? computeObjectiveValue(u) : -computeObjectiveValue(u);
+            // Update a, b, v, w, x, d and e.
+            if (fu <= fx) {
+                if (u < x) {
+                    b = x;
+                } else {
+                    a = x;
                 }
-
-                // User-defined convergence checker.
-                previous = current;
-                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
-
-                if (checker != null) {
-                    if (checker.converged(iter, previous, current)) {
-                        return current;
-                    }
+                v = w;
+                fv = fw;
+                w = x;
+                fw = fx;
+                x = u;
+                fx = fu;
+            } else {
+                if (u < x) {
+                    a = u;
+                } else {
+                    b = u;
                 }
-
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
-                    if (u < x) {
-                        b = x;
-                    } else {
-                        a = x;
-                    }
+                if (fu <= fw ||
+                    Precision.equals(w, x)) {
                     v = w;
                     fv = fw;
-                    w = x;
-                    fw = fx;
-                    x = u;
-                    fx = fu;
-                } else {
-                    if (u < x) {
-                        a = u;
-                    } else {
-                        b = u;
-                    }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
-                        v = w;
-                        fv = fw;
-                        w = u;
-                        fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
-                        v = u;
-                        fv = fu;
-                    }
+                    w = u;
+                    fw = fu;
+                } else if (fu <= fv ||
+                           Precision.equals(v, x) ||
+                           Precision.equals(v, w)) {
+                    v = u;
+                    fv = fu;
+                }
+            }
+            // User-defined convergence checker.
+            previous = current;
+            current = new UnivariatePointValuePair(x, fx);
+            if (checker != null) {
+                if (checker.converged(iter, previous, current)) {
+                    return current;
                 }
-            } else { // Default termination (Brent's criterion).
-                return current;
             }
             ++iter;
         }

diff --git a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
index 6905f1ac9..5ff6ec549 100644
--- a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
@@ -263,7 +247,103 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
                         fv = fu;
                     }
                 }
-            } else { // Default termination (Brent's criterion).
+            } else if (FastMath.abs(w - x) > tol1) {
+                double u = w + (w - x) * GOLDEN_SECTION;
+                double fu = computeObjectiveValue(u);
+                if (!isMinim) {
+                    fu = -fu;
+                }
+                previous = current;
+                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
+                if (checker != null) {
+                    if (checker.converged(iter, previous, current)) {
+                        return current;
+                    }
+                }
+                if (fu <= fw) {
+                    if (u < w) {
+                        b = w;
+                    } else {
+                        a = w;
+                    }
+                    v = w;
+                    fv = fw;
+                    w = u;
+                    fw = fu;
+                } else {
+                    if (u < w) {
+                        a = u;
+                    } else {
+                        b = u;
+                    }
+                    v = u;
+                    fv = fu;
+                }
+            } else if (FastMath.abs(v - x) > tol1) {
+                double u = v + (v - x) * GOLDEN_SECTION;
+                double fu = computeObjectiveValue(u);
+                if (!isMinim) {
+                    fu = -fu;
+                }
+                previous = current;
+                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
+                if (checker != null) {
+                    if (checker.converged(iter, previous, current)) {
+                        return current;
+                    }
+                }
+                if (fu <= fv) {
+                    if (u < v) {
+                        b = v;
+                    } else {
+                        a = v;
+                    }
+                    v = u;
+                    fv = fu;
+                } else {
+                    if (u < v) {
+                        a = u;
+                    } else {
+                        b = u;
+                    }
+                    v = u;
+                    fv = fu;
+                }
+            } else if (FastMath.abs(w - v) > tol1) {
+                double u = w + (w - v) * GOLDEN_SECTION;
+                double fu = computeObjectiveValue(u);
+                if (!isMinim) {
+                    fu = -fu;
+                }
+                previous = current;
+                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
+                if (checker != null) {
+                    if (checker.converged(iter, previous, current)) {
+                        return current;
+                    }
+                }
+                if (fu <= fw) {
+                    if (u < w) {
+                        b = w;
+                    } else {
+                        a = w;
+                    }
+                    v = w;
+                    fv = fw;
+                    w = u;
+                    fw = fu;
+                } else {
+                    if (u < w) {
+                        a = u;
+                    } else {
+                        b = u;
+                    }
+                    v = w;
+                    fv = fw;
+                    w = u;
+                    fw = fu;
+                }
+            } else {
                 return current;
             }
             ++iter;

    protected UnivariatePointValuePair doOptimize() {
        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
        double a = getMin();
        double b = getMax();
        double v = getStartValue();
        double x = v;
        double w = v;
        double e = 0;
        double fx = isMinim ? computeObjectiveValue(x) : -computeObjectiveValue(x);
        double fv = fx;
        double fw = fx;
        final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker();
        UnivariatePointValuePair previous = null;
        UnivariatePointValuePair current = new UnivariatePointValuePair(x, fx);
        int iter = 0;
        while (true) {
            final double m = 0.5 * (a + b);
            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
            final double tol2 = 2 * tol1;
            if (FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)) {
                return current;
            }
            if (FastMath.abs(e) > tol1) {
                // Attempt inverse quadratic interpolation.
                double r;
                double q;
                double p;
                if (w != x) {
                    r = (x - w) * (fx - fv);
                    q = (x - v) * (fx - fw);
                    p = (x - v) * q - (x - w) * r;
                    q = 2 * (q - r);
                    if (q > 0) {
                        p = -p;
                    } else {
                        q = -q;
                    }
                    r = e;
                    e = d;
                } else {
                    r = (x - v) * (fx - fw);
                    q = (x - w) * (fx - fv);
                    p = (x - v) * q - (x - w) * r;
                    q = 2 * (q - r);
                    if (q > 0) {
                        p = -p;
                    } else {
                        q = -q;
                    }
                    r = e;
                    e = d;
                }
                if (p > q * (a - x) &&
                    p < q * (b - x)) {
                    // Inverse quadratic interpolation step.
                    d = p / q;
                    double u = x + d;
                    // f must not be evaluated too close to a or b.
                    if ((u - a) < tol2 || (b - u) < tol2) {
                        d = FastMath.copySign(FastMath.max(tol1, 0.5 * (b - a)), m - x);
                    }
                } else {
                    // A golden-section step.
                    if (x >= m) {
                        e = a - x;
                    } else {
                        e = b - x;
                    }
                    d = GOLDEN_SECTION * e;
                }
            } else {
                // A golden-section step.
                if (x >= m) {
                    e = a - x;
                } else {
                    e = b - x;
                }
                d = GOLDEN_SECTION * e;
            }
            // f must not be evaluated too close to x.
            double u = x + FastMath.max(FastMath.abs(d), tol1);
            u = FastMath.min(u, b - tol1);
            double fu = isMinim ? computeObjectiveValue(u) : -computeObjectiveValue(u);
            // Update a, b, v, w, x, d and e.
            if (fu <= fx) {
                if (u < x) {
                    b = x;
                } else {
                    a = x;
                }
                v = w;
                fv = fw;
                w = x;
                fw = fx;
                x = u;
                fx = fu;
            } else {
                if (u < x) {
                    a = u;
                } else {
                    b = u;
                }
                if (fu <= fw ||
                    Precision.equals(w, x)) {
                    v = w;
                    fv = fw;
                    w = u;
                    fw = fu;
                } else if (fu <= fv ||
                           Precision.equals(v, x) ||
                           Precision.equals(v, w)) {
                    v = u;
                    fv = fu;
                }
            }
            // User-defined convergence checker.
            previous = current;
            current = new UnivariatePointValuePair(x, fx);
            if (checker != null) {
                if (checker.converged(iter, previous, current)) {
                    return current;
                }
            }
            ++iter;
        }
    }
diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java
index c6d25483..e728cecb 100644
--- a/src/com/google/javascript/jscomp/TypeValidator.java
+++ b/src/com/google/javascript/jscomp/TypeValidator.java
@@ -722,60 +722,49 @@ class TypeValidator {
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
-
     // The best type name is the actual type name.
-
+    String typeName = getJSType(n).toString();
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
     if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
-        String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
+      // Find the type of the object being accessed.
+      // Don't use n.getFirstChild() because it may be qualified.
+      String objName = n.getFirstChild().getQualifiedName();
+      if (objName != null) {
+        JSType objType = getTypeRegistry().getType(objName);
+        if (objType != null && objType.isConstructor()) {
+          ObjectType objObjectType = objType.toMaybeObjectType();
+          if (objObjectType != null) {
+            // Find the class the property was defined in.
+            String propName = n.getLastChild().getString();
+            ObjectType declType = objObjectType.findPropertyType(propName);
+            if (declType != null) {
+              // Report the type as the type of the property on the class
+              // itself, as opposed to on the prototype.
+              if (dereference) {
+                declType = declType.dereference();
+              }
+              if (declType != null) {
+                return declType.toString();
+              }
+            }
           }
         }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
-        }
       }
     }
-
-    JSType type = getJSType(n);
-    if (dereference) {
-      ObjectType dereferenced = type.dereference();
-      if (dereferenced != null) {
-        type = dereferenced;
+    // Don't show complex function names or anonymous types.
+    if (typeName.contains("(") || typeName.contains("?")) {
+      // Try to get a human-readable name.
+      String name = n.getQualifiedName();
+      if (name != null) {
+        return name;
+      } else if (getJSType(n).isFunctionType()) {
+        return "function";
       }
     }
-    if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
-      return type.toString();
-    }
-    String qualifiedName = n.getQualifiedName();
-    if (qualifiedName != null) {
-      return qualifiedName;
-    } else if (type.isFunctionType()) {
-      // Don't show complex function names.
-      return "function";
-    } else {
-      return type.toString();
-    }
+    return typeName;
   }
-
   /**
    * This method gets the JSType from the Node argument and verifies that it is
    * present.

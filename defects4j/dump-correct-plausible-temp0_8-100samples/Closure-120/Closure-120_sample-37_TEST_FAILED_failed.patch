diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
index fefd3926..57005c60 100644
--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
@@ -418,25 +418,20 @@ class ReferenceCollectingCallback implements ScopedCallback,
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
-    boolean isAssignedOnceInLifetime() {
-      Reference ref = getOneAndOnlyAssignment();
-      if (ref == null) {
-        return false;
-      }
-
-      // Make sure this assignment is not in a loop.
-      for (BasicBlock block = ref.getBasicBlock();
-           block != null; block = block.getParent()) {
-        if (block.isFunction) {
-          break;
-        } else if (block.isLoop) {
-          return false;
-        }
-      }
-
-      return true;
+boolean isAssignedOnceInLifetime() {
+  Reference ref = getOneAndOnlyAssignment();
+  if (ref == null) {
+    return false;
+  }
+  // Make sure this assignment is not in a loop.
+  for (BasicBlock block = ref.getBasicBlock();
+       block != null; block = block.getParent()) {
+    if (block.isLoop) {
+      return false;
     }
-
+  }
+  return true;
+}
     /**
      * @return The one and only assignment. Returns if there are 0 or 2+
      *    assignments.

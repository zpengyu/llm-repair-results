  /**
   * Given a property assignment, e.g. this.foo = 'bar', the property name
   * is the node following the property assignment operator.
   */
  private Node getNameNodeFromProperty(Node propertyNode) {
    Node nameNode = null;
    switch (propertyNode.getType()) {
      case Token.GETTER_DEF:
      case Token.SETTER_DEF:
        nameNode = propertyNode.getFirstChild();
        break;
      case Token.STRING_KEY:
        nameNode = propertyNode.getFirstChild();
        break;
      case Token.GETELEM:
      case Token.GETPROP:
        nameNode = propertyNode.getLastChild();
        break;
    }
    return nameNode;
  }
  private void handleObjectLit(NodeTraversal t, Node n) {
    for (Node child = n.getFirstChild();
        child != null;
        child = child.getNext()) {
      // Maybe STRING, GET, SET
      // We should never see a mix of numbers and strings.
      String name = child.getString();
      T type = typeSystem.getType(getScope(), n, name);
      Property prop = getProperty(name);
      if (!prop.scheduleRenaming(child,
                                 processProperty(t, prop, type, null))) {
        // TODO(user): It doesn't look like the user can do much in this
        // case right now.
        if (propertiesToErrorFor.containsKey(name)) {
          compiler.report(JSError.make(
              t.getSourceName(), child, propertiesToErrorFor.get(name),
              Warnings.INVALIDATION, name,
              (type == null ? "null" : type.toString()), n.toString(), ""));
        }
      }
    }
  }
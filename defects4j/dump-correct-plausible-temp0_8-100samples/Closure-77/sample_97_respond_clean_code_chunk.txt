  static String strEscape(String s, char quote,
                          String doublequoteEscape,
                          String singlequoteEscape,
                          String backslashEscape,
                          CharsetEncoder outputCharsetEncoder) {
    StringBuilder sb = new StringBuilder(s.length() + 2);
    sb.append(quote);
    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);
      switch (c) {
        case '\n': sb.append("\\n"); break;
        case '\r': sb.append("\\r"); break;
        case '\t': sb.append("\\t"); break;
        case '\\': sb.append(backslashEscape); break;
        case '\"': sb.append(doublequoteEscape); break;
        case '\'': sb.append(singlequoteEscape); break;
        case '>':                       // Break --> into --\> or ]]> into ]]\>
          if (i >= 2 &&
              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
            sb.append("\\>");
          } else {
            sb.append(c);
          }
          break;
        case '<':
          // Break </script into <\/script
          final String END_SCRIPT = "/script";
          // Break <!-- into <\!--
          final String START_COMMENT = "!--";
          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
                              END_SCRIPT.length())) {
            sb.append("<\\");
          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
                                     START_COMMENT.length())) {
            sb.append("<\\");
          } else {
            sb.append(c);
          }
          break;
        default:
          // If we're given an outputCharsetEncoder, then check if the
          //  character can be represented in this character set.
          if (outputCharsetEncoder != null) {
            if (outputCharsetEncoder.canEncode(c)) {
              sb.append(c);
            } else {
              // Unicode-escape the character.
              appendHexJavaScriptRepresentation(sb, c);
            }
          } else {
            // No charsetEncoder provided - pass straight latin characters
            // through, and escape the rest.  Doing the explicit character
            // check is measurably faster than using the CharsetEncoder.
            if (c > 0x1f && c <= 0x7f) {
              sb.append(c);
            } else {
              // Other characters can be misinterpreted by some js parsers,
              // or perhaps mangled by proxies along the way,
              // so we play it safe and unicode escape them.
              appendHexJavaScriptRepresentation(sb, c);
            }
          }
      }
    }
    sb.append(quote);
    return sb.toString();
  }
  private static void appendHexJavaScriptRepresentation(
      StringBuilder sb, char c) {
    sb.append("\\u");
    String hex = Integer.toHexString(c);
    int len = hex.length();
    // Pad with 0s if necessary.
    for (int j = len; j < 4; j++) {
      sb.append('0');
    }
    sb.append(hex);
  }
  static void appendJsString(StringBuilder sb, String s) {
    strEscape(sb, s, '"', "\\\"", "\\\\", null);
  }
  static void appendJsEscapedValue(
      StringBuilder sb, String s, CharsetEncoder outputCharsetEncoder) {
    if (outputCharsetEncoder != null) {
      if (outputCharsetEncoder.canEncode(s)) {
        appendJsString(sb, s);
      } else {
        sb.append('"');
        int length = s.length();
        for (int i = 0; i < length; ++i) {
          char c = s.charAt(i);
          if (outputCharsetEncoder.canEncode(c)) {
            sb.append(c);
          } else {
            // Unicode-escape the character.
            appendHexJavaScriptRepresentation(sb, c);
          }
        }
        sb.append('"');
      }
    } else {
      appendJsString(sb, s);
    }
  }
  static String escapeJsString(String s, boolean escapeWhitespace) {
    StringBuilder sb = new StringBuilder(s.length() + 2);
    strEscape(sb, s, '"', "\\\"", "\\\\", null);
    if (escapeWhitespace) {
      // Escape whitespace for better compatibility with JSON.
      return escapeWhitespace(sb, false).toString();
    }
    return sb.toString();
  }
  static String escapeJsString(String s) {
    return escapeJsString(s, false);
  }
  static StringBuilder escapeWhitespace(StringBuilder sb, boolean escapeSpace) {
    int length = sb.length();
    int lastEscapePos = -1;
    int lastEscapeLength = 0;
    for (int pos = 0; pos < length; ++pos) {
      char ch = sb.charAt(pos);
      if (ch == '\r') {
        // If a CR is followed by a LF, assume the CR is part of a CRLF pair
        // and don't escape it. Otherwise escape it.
        if (pos + 1 < length && sb.charAt(pos + 1) == '\n') {
          ++pos;
          continue;
        }
        ch = '\\';
      } else if (ch == '\n') {
        ch = '\\';
      } else if (ch == '\t') {
        ch = '\\';
      } else if (ch == ' ' && escapeSpace) {
        ch = '\\';
      } else {
        continue;
      }
      if (lastEscapePos < 0) {
        lastEscapePos = pos;
      }
      lastEscapeLength++;
      sb.setCharAt(pos, ch);
    }
    if (lastEscapePos >= 0) {
      sb.insert(lastEscapePos, '"');
      sb.append('"');
      return sb;
    }
    return null;
  }
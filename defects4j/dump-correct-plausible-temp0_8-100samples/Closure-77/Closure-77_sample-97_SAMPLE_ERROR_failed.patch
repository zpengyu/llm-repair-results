diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index a9d0a5b0..7111dd25 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -1023,7 +1021,91 @@ class CodeGenerator {
     sb.append(quote);
     return sb.toString();
   }
-
+  private static void appendHexJavaScriptRepresentation(
+      StringBuilder sb, char c) {
+    sb.append("\\u");
+    String hex = Integer.toHexString(c);
+    int len = hex.length();
+    // Pad with 0s if necessary.
+    for (int j = len; j < 4; j++) {
+      sb.append('0');
+    }
+    sb.append(hex);
+  }
+  static void appendJsString(StringBuilder sb, String s) {
+    strEscape(sb, s, '"', "\\\"", "\\\\", null);
+  }
+  static void appendJsEscapedValue(
+      StringBuilder sb, String s, CharsetEncoder outputCharsetEncoder) {
+    if (outputCharsetEncoder != null) {
+      if (outputCharsetEncoder.canEncode(s)) {
+        appendJsString(sb, s);
+      } else {
+        sb.append('"');
+        int length = s.length();
+        for (int i = 0; i < length; ++i) {
+          char c = s.charAt(i);
+          if (outputCharsetEncoder.canEncode(c)) {
+            sb.append(c);
+          } else {
+            // Unicode-escape the character.
+            appendHexJavaScriptRepresentation(sb, c);
+          }
+        }
+        sb.append('"');
+      }
+    } else {
+      appendJsString(sb, s);
+    }
+  }
+  static String escapeJsString(String s, boolean escapeWhitespace) {
+    StringBuilder sb = new StringBuilder(s.length() + 2);
+    strEscape(sb, s, '"', "\\\"", "\\\\", null);
+    if (escapeWhitespace) {
+      // Escape whitespace for better compatibility with JSON.
+      return escapeWhitespace(sb, false).toString();
+    }
+    return sb.toString();
+  }
+  static String escapeJsString(String s) {
+    return escapeJsString(s, false);
+  }
+  static StringBuilder escapeWhitespace(StringBuilder sb, boolean escapeSpace) {
+    int length = sb.length();
+    int lastEscapePos = -1;
+    int lastEscapeLength = 0;
+    for (int pos = 0; pos < length; ++pos) {
+      char ch = sb.charAt(pos);
+      if (ch == '\r') {
+        // If a CR is followed by a LF, assume the CR is part of a CRLF pair
+        // and don't escape it. Otherwise escape it.
+        if (pos + 1 < length && sb.charAt(pos + 1) == '\n') {
+          ++pos;
+          continue;
+        }
+        ch = '\\';
+      } else if (ch == '\n') {
+        ch = '\\';
+      } else if (ch == '\t') {
+        ch = '\\';
+      } else if (ch == ' ' && escapeSpace) {
+        ch = '\\';
+      } else {
+        continue;
+      }
+      if (lastEscapePos < 0) {
+        lastEscapePos = pos;
+      }
+      lastEscapeLength++;
+      sb.setCharAt(pos, ch);
+    }
+    if (lastEscapePos >= 0) {
+      sb.insert(lastEscapePos, '"');
+      sb.append('"');
+      return sb;
+    }
+    return null;
+  }
   static String identifierEscape(String s) {
     // First check if escaping is needed at all -- in most cases it isn't.
     if (NodeUtil.isLatin(s)) {

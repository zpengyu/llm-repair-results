diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index a9d0a5b0..824cee5f 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -953,11 +953,11 @@ class CodeGenerator {
   }
 
   /** Helper to escape javascript string as well as regular expression */
-  static String strEscape(String s, char quote,
-                          String doublequoteEscape,
-                          String singlequoteEscape,
-                          String backslashEscape,
-                          CharsetEncoder outputCharsetEncoder) {
+   static String strEscape(String s, char quote,
+                           String doublequoteEscape,
+                           String singlequoteEscape,
+                           String backslashEscape,
+                           CharsetEncoder outputCharsetEncoder) {
     StringBuilder sb = new StringBuilder(s.length() + 2);
     sb.append(quote);
     for (int i = 0; i < s.length(); i++) {
@@ -1011,10 +1009,32 @@ class CodeGenerator {
             // check is measurably faster than using the CharsetEncoder.
             if (c > 0x1f && c <= 0x7f) {
               sb.append(c);
+            } else if (c >= 0x0080 && c <= 0x07FF) {
+              // 2-byte UTF-8 sequence:
+              // First, the leading byte:
+              appendHexJavaScriptRepresentation(sb, (char) (0xc0 | (c >> 6)));
+              // Then the trailing byte:
+              appendHexJavaScriptRepresentation(sb, (char) (0x80 | (c & 0x3F)));
+            } else if (c >= 0x0800 && c <= 0xFFFF) {
+              // 3-byte UTF-8 sequence:
+              // First, the leading byte:
+              appendHexJavaScriptRepresentation(sb, (char) (0xe0 | (c >> 12)));
+              // Then the middle byte:
+              appendHexJavaScriptRepresentation(sb, (char) (0x80 | ((c >> 6) & 0x3F)));
+              // Then the trailing byte:
+              appendHexJavaScriptRepresentation(sb, (char) (0x80 | (c & 0x3F)));
+            } else if (c >= 0x10000 && c <= 0x10FFFF) {
+              // 4-byte UTF-8 sequence:
+              // First, the leading byte:
+              appendHexJavaScriptRepresentation(sb, (char) (0xF0 | (c >> 18)));
+              // Then the second byte:
+              appendHexJavaScriptRepresentation(sb, (char) (0x80 | ((c >> 12) & 0x3F)));
+              // Then the third byte:
+              appendHexJavaScriptRepresentation(sb, (char) (0x80 | ((c >> 6) & 0x3F)));
+              // Then the trailing byte:
+              appendHexJavaScriptRepresentation(sb, (char) (0x80 | (c & 0x3F)));
             } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
+              // Unicode-escape the character.
               appendHexJavaScriptRepresentation(sb, c);
             }
           }

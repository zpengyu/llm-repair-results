diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java
index 152e9424e..71c880eac 100644
--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java
+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java
@@ -63,26 +63,30 @@ public abstract class GenericMetadataSupport {
     protected Map<TypeVariable, Type> contextualActualTypeParameters = new HashMap<TypeVariable, Type>();
 
 
-    protected void registerTypeVariablesOn(Type classType) {
-        if (!(classType instanceof ParameterizedType)) {
-            return;
-        }
-        ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
-        for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
-            Type actualTypeArgument = actualTypeArguments[i];
-
-            if (actualTypeArgument instanceof WildcardType) {
-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
-            } else {
-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
-            }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
-        }
-    }
-
+	protected void registerTypeVariablesOn(Type classType) {
+		if (!(classType instanceof ParameterizedType)) {
+			return;
+		}
+		ParameterizedType parameterizedType = (ParameterizedType) classType;
+		TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+		Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+		for (int i = 0; i < actualTypeArguments.length; i++) {
+			TypeVariable typeParameter = typeParameters[i];
+			Type actualTypeArgument = actualTypeArguments[i];
+			TypeVariable<?> typeParameter2;
+			if (typeParameter.getGenericDeclaration() instanceof Class<?>) {
+				typeParameter2 = ((Class<?>) typeParameter.getGenericDeclaration()).getTypeParameters()[0];
+			} else {
+				typeParameter2 = ((Method) typeParameter.getGenericDeclaration()).getTypeParameters()[0];
+			}
+			if (actualTypeArgument instanceof WildcardType) {
+				contextualActualTypeParameters.put(typeParameter2, boundsOf((WildcardType) actualTypeArgument));
+			} else {
+				contextualActualTypeParameters.put(typeParameter2, actualTypeArgument);
+			}
+			// logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+		}
+	}
     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {
         for (TypeVariable typeVariable : typeParameters) {
             registerTypeVariableIfNotPresent(typeVariable);

diff --git a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
index bed27f2b..53510a94 100644
--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
@@ -32,7 +30,7 @@ public class JsonParserSequence extends JsonParserDelegate
      *
      * @since 2.8
      */
-
+    protected boolean _hasToken;
     /*
      *******************************************************
      * Construction
@@ -103,6 +95,68 @@ public class JsonParserSequence extends JsonParserDelegate
     @Override
     public JsonToken nextToken() throws IOException, JsonParseException
     {
+        if (!_hasToken) {
+            // If we already point to a token, no need to fetch next:
+            JsonToken t = delegate.nextToken();
+            if (t != null) return t;
+            while (switchToNext()) {
+                t = delegate.nextToken();
+                if (t != null) return t;
+            }
+            // still no token? We have hit end of sequence
+            return null;
+        }
+        _hasToken = false;
+        return _currToken;
+    }
+    @Override
+    public void clearCurrentToken()
+    {
+        if (_hasToken) {
+            _hasToken = false;
+        } else {
+            delegate.clearCurrentToken();
+        }
+    }
+    @Override
+    public JsonToken getCurrentToken() {
+        return _hasToken ? _currToken : delegate.getCurrentToken();
+    }
+    @Override
+    public int getCurrentTokenId() {
+        return _hasToken ? _currToken.id() : delegate.getCurrentTokenId();
+    }
+    @Override
+    public boolean hasCurrentToken() {
+        return _hasToken || delegate.hasCurrentToken();
+    }
+    @Override
+    public boolean hasTokenId(int id) {
+        return _hasToken ? (_currToken.id() == id) : delegate.hasTokenId(id);
+    }
+    @Override
+    public boolean hasToken(JsonToken t) {
+        return _hasToken ? (_currToken == t) : delegate.hasToken(t);
+    }
+    @Override
+    public boolean isExpectedStartArrayToken() {
+        return _hasToken ? (_currToken == JsonToken.START_ARRAY) : delegate.isExpectedStartArrayToken();
+    }
+    @Override
+    public boolean isExpectedStartObjectToken() {
+        return _hasToken ? (_currToken == JsonToken.START_OBJECT) : delegate.isExpectedStartObjectToken();
+    }
+    @Override
+    public JsonToken nextValue() throws IOException, JsonParseException
+    {
+        if (_hasToken) {
+            _hasToken = false;
+            return _currToken;
+        }
+        // First: fast path for single-parser case
+        if (_parsers.length == 1) {
+            return delegate.nextValue();
+        }
         JsonToken t = delegate.nextToken();
         if (t != null) return t;
         while (switchToNext()) {
@@ -111,7 +165,41 @@ public class JsonParserSequence extends JsonParserDelegate
         }
         return null;
     }
-
+    @Override
+    public JsonParser skipChildren() throws IOException, JsonParseException
+    {
+        if (_hasToken) {
+            _hasToken = false;
+            return this;
+        }
+        delegate.skipChildren();
+        return this;
+    }
+    @Override
+    public String getCurrentName() throws IOException, JsonParseException {
+        if (_hasToken) {
+            return _parsers[_nextParser-1].getCurrentName();
+        }
+        return delegate.getCurrentName();
+    }
+    @Override
+    public void overrideCurrentName(String name) {
+        if (!_hasToken) {
+            delegate.overrideCurrentName(name);
+        }
+    }
+    @Override
+    public JsonStreamContext getParsingContext() {
+        return delegate.getParsingContext();
+    }
+    @Override
+    public JsonLocation getTokenLocation() {
+        return delegate.getTokenLocation();
+    }
+    @Override
+    public JsonLocation getCurrentLocation() {
+        return delegate.getCurrentLocation();
+    }
     /*
     /*******************************************************
     /* Additional extended API

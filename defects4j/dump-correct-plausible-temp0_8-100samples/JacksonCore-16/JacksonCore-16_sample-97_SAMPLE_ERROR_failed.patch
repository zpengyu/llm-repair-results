diff --git a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
index bed27f2b..04dbc487 100644
--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
@@ -32,7 +30,7 @@ public class JsonParserSequence extends JsonParserDelegate
      *
      * @since 2.8
      */
-
+    protected boolean _hasToken;
     /*
      *******************************************************
      * Construction
@@ -44,8 +41,8 @@ public class JsonParserSequence extends JsonParserDelegate
         super(parsers[0]);
         _parsers = parsers;
         _nextParser = 1;
+        _hasToken = false;
     }
-
     /**
      * Method that will construct a parser (possibly a sequence) that
      * contains all given sub-parsers.
@@ -103,7 +96,8 @@ public class JsonParserSequence extends JsonParserDelegate
     @Override
     public JsonToken nextToken() throws IOException, JsonParseException
     {
-        JsonToken t = delegate.nextToken();
+        JsonToken t = (_hasToken) ? _currToken : (delegate.nextToken());
+        _hasToken = false;
         if (t != null) return t;
         while (switchToNext()) {
             t = delegate.nextToken();
@@ -111,7 +105,29 @@ public class JsonParserSequence extends JsonParserDelegate
         }
         return null;
     }
-
+    @Override
+    public JsonParser skipChildren() throws IOException {
+        if (_currToken != JsonToken.START_OBJECT
+            && _currToken != JsonToken.START_ARRAY) {
+            return this;
+        }
+        int open = 1;
+        // Since proper matching of start/end markers is handled
+        // by event parser itself, we'll just count nesting levels here
+        while (true) {
+            JsonToken t = nextToken();
+            if (t == null) {
+                return this;
+            }
+            if (t.isStructStart()) {
+                ++open;
+            } else if (t.isStructEnd()) {
+                if (--open == 0) {
+                    return this;
+                }
+            }
+        }
+    }
     /*
     /*******************************************************
     /* Additional extended API

diff --git a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
index bed27f2b..d2fa268f 100644
--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
@@ -32,7 +30,7 @@ public class JsonParserSequence extends JsonParserDelegate
      *
      * @since 2.8
      */
-
+    protected boolean _hasToken;
     /*
      *******************************************************
      * Construction
@@ -103,6 +95,10 @@ public class JsonParserSequence extends JsonParserDelegate
     @Override
     public JsonToken nextToken() throws IOException, JsonParseException
     {
+        if (_hasToken) { // can call nextToken() directly
+            _hasToken = false;
+            return delegate.getCurrentToken();
+        }
         JsonToken t = delegate.nextToken();
         if (t != null) return t;
         while (switchToNext()) {
@@ -111,7 +107,77 @@ public class JsonParserSequence extends JsonParserDelegate
         }
         return null;
     }
-
+    @Override
+    public JsonToken currentToken() {
+        JsonToken t = delegate.currentToken();
+        return (t == null) ? null : t;
+    }
+    @Override
+    public int currentTokenId() {
+        JsonToken t = delegate.currentToken();
+        return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();
+    }
+    @Override
+    public boolean hasCurrentToken() {
+        return delegate.hasCurrentToken();
+    }
+    @Override
+    public boolean hasTokenId(int id) {
+        JsonToken t = delegate.currentToken();
+        if (t == null) {
+            return (id == JsonTokenId.ID_NO_TOKEN);
+        }
+        return t.id() == id;
+    }
+    @Override
+    public boolean hasToken(JsonToken t) {
+        return delegate.hasCurrentToken() && delegate.currentToken() == t;
+    }
+    @Override
+    public boolean isExpectedStartArrayToken() {
+        return delegate.currentToken() == JsonToken.START_ARRAY;
+    }
+    @Override
+    public boolean isExpectedStartObjectToken() {
+        return delegate.currentToken() == JsonToken.START_OBJECT;
+    }
+    @Override
+    public JsonToken nextValue() throws IOException
+    {
+        JsonToken t = nextToken();
+        if (t == JsonToken.FIELD_NAME) {
+            t = nextToken();
+        }
+        return t;
+    }
+    @Override
+    public JsonParser skipChildren() throws IOException
+    {
+        if (delegate.currentToken() != JsonToken.START_OBJECT
+                && delegate.currentToken() != JsonToken.START_ARRAY) {
+            return this;
+        }
+        int open = 1;
+        /* Since proper matching of start/end markers is handled
+         * by the parser, we'll just count nesting levels here
+         */
+        while (true) {
+            JsonToken t = nextToken();
+            if (t == null) {
+                _handleEOF(); // only valid for closed contexts
+                // Should never get this far
+                throw _constructError("Unexpected end-of-input when skipping contents of "+
+                        delegate.currentToken());
+            }
+            if (t.isStructStart()) {
+                ++open;
+            } else if (t.isStructEnd()) {
+                if (--open == 0) {
+                    return this;
+                }
+            }
+        }
+    }
     /*
     /*******************************************************
     /* Additional extended API

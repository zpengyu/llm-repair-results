diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
index 385e8b07..fb51af98 100644
--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
@@ -301,26 +301,9 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback
       if (provided == null || !provided.isExplicitlyProvided()) {
         unrecognizedRequires.add(
             new UnrecognizedRequire(n, ns, t.getSourceName()));
-      } else {
-        JSModule providedModule = provided.explicitModule;
-
-        // This must be non-null, because there was an explicit provide.
-        Preconditions.checkNotNull(providedModule);
-
-        JSModule module = t.getModule();
-        if (moduleGraph != null &&
-            module != providedModule &&
-            !moduleGraph.dependsOn(module, providedModule)) {
-          compiler.report(
-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
-                  providedModule.getName(),
-                  module.getName()));
-        }
       }
-
       maybeAddToSymbolTable(left);
       maybeAddStringNodeToSymbolTable(arg);
-
       // Requires should be removed before further processing.
       // Some clients run closure pass multiple times, first with
       // the checks for broken requires turned off. In these cases, we

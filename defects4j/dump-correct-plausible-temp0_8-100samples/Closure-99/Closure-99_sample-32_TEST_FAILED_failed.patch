diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java
index 961b964c..fae8863e 100644
--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java
+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java
@@ -111,7 +108,16 @@ final class CheckGlobalThis implements Callback {
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
-      
+      // Only traverse the right side if it's not an assignment to a prototype
+      // property or subproperty.
+      if (rhs == n && lhs.getType() == Token.GETPROP) {
+        if (lhs.getLastChild().getString().equals("prototype")) {
+          return false;
+        }
+        if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+          return false;
+        }
+      }
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
@@ -119,22 +125,10 @@ final class CheckGlobalThis implements Callback {
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
-      } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
-            return false;
-          }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
-            return false;
-          }
       }
     }
-
     return true;
   }
-
   public void visit(NodeTraversal t, Node n, Node parent) {
     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {
       compiler.report(t.makeError(n, level, GLOBAL_THIS));

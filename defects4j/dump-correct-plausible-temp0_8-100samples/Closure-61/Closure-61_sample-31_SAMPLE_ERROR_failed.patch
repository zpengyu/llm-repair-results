diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 53389622..7e59ab97 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -923,39 +923,7 @@ public final class NodeUtil {
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
-  static boolean functionCallHasSideEffects(
-      Node callNode, @Nullable AbstractCompiler compiler) {
-    if (callNode.getType() != Token.CALL) {
-      throw new IllegalStateException(
-          "Expected CALL node, got " + Token.name(callNode.getType()));
-    }
-
-    if (callNode.isNoSideEffectsCall()) {
-      return false;
-    }
-
-    Node nameNode = callNode.getFirstChild();
-
-    // Built-in functions with no side effects.
-    if (nameNode.getType() == Token.NAME) {
-      String name = nameNode.getString();
-      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
-        return false;
-      }
-    } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
-        return false;
-      }
-
-      if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
-        return false;
-      }
-
-      // Functions in the "Math" namespace have no side effects.
-
+    if (!nameNode.getString().equals("Math")) {
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
@@ -971,10 +939,6 @@ public final class NodeUtil {
         }
       }
     }
-
-    return true;
-  }
-
   /**
    * @return Whether the call has a local result.
    */

diff --git a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
index 60bfd244..6bc8c0f9 100644
--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
@@ -44,7 +44,7 @@ import java.util.logging.Logger;
  *    being initialized.
  *
  */
-class UnreachableCodeElimination extends AbstractPostOrderCallback
+public class UnreachableCodeElimination extends AbstractPostOrderCallback
     implements CompilerPass, ScopedCallback  {
   private static final Logger logger =
     Logger.getLogger(UnreachableCodeElimination.class.getName());
@@ -175,10 +157,7 @@ class UnreachableCodeElimination extends AbstractPostOrderCallback
         // branches to the same node. If removing it the control flow still
         // branches to that same node. It is safe to remove it.
         List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
-        if (outEdges.size() == 1 &&
-            // If there is a next node, there is no chance this jump is useless.
-            (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {
-
+        if (outEdges.size() == 1) {
           Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);
           Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));
           Node nextCfgNode = outEdges.get(0).getDestination().getValue();

diff --git a/src/main/java/org/jsoup/nodes/Node.java b/src/main/java/org/jsoup/nodes/Node.java
index 0d0f9d4..713c61e 100644
--- a/src/main/java/org/jsoup/nodes/Node.java
+++ b/src/main/java/org/jsoup/nodes/Node.java
@@ -153,31 +153,42 @@ public abstract class Node implements Cloneable {
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
-    public String absUrl(String attributeKey) {
+public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
-
-        String relUrl = attr(attributeKey);
-        if (!hasAttr(attributeKey)) {
+        if (!hasAttr(attributeKey))
             return ""; // nothing to make absolute with
-        } else {
-            URL base;
-            try {
+        String relUrl = attr(attributeKey);
+        if (!relUrl.contains("://")) {
+            if (relUrl.startsWith("//")) {
+                return "http:" + relUrl;
+            } else if (relUrl.startsWith("/")) {
                 try {
-                    base = new URL(baseUri);
+                    URL abs = new URL(baseUri);
+                    return abs.getProtocol() + "://" + abs.getHost() + relUrl;
                 } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
-                    return abs.toExternalForm();
+                    return "";
+                }
+            } else if (relUrl.startsWith("#")) {
+                try {
+                    URL abs = new URL(baseUri);
+                    return abs.getProtocol() + "://" + abs.getHost() + abs.getPath() + relUrl;
+                } catch (MalformedURLException e) {
+                    return "";
                 }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
-                return abs.toExternalForm();
-            } catch (MalformedURLException e) {
-                return "";
             }
+        } else {
+            return relUrl;
         }
+        // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+        URL abs;
+        try {
+            abs = new URL(baseUri);
+            abs = new URL(abs, relUrl);
+        } catch (MalformedURLException e) {
+            return "";
+        }
+        return abs.toExternalForm();
     }
-
     /**
      Get a child node by index
      @param index index of child node

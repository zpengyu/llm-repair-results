diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
index 6d0db8734..2987c0016 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
@@ -118,16 +107,15 @@ public class NumberSerializers
     public final static class ShortSerializer extends Base<Short>
     {
         final static ShortSerializer instance = new ShortSerializer();
-
         public ShortSerializer() { super(Short.class, JsonParser.NumberType.INT, "number"); }
-
-
         @Override
         public void serialize(Short value, JsonGenerator gen, SerializerProvider provider) throws IOException {
-            gen.writeNumber(value.shortValue());
+            if (value == Short.valueOf((short) 0))
+                _serializeAsZero(gen, provider);
+            else
+                gen.writeNumber(value.shortValue());
         }
     }
-
     /**
      * This is the special serializer for regular {@link java.lang.Integer}s
      * (and primitive ints)
@@ -142,12 +130,13 @@ public class NumberSerializers
     public final static class IntegerSerializer extends Base<Object>
     {
         public IntegerSerializer() { super(Integer.class, JsonParser.NumberType.INT ,"integer"); }
-    
         @Override
         public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
-            gen.writeNumber(((Integer) value).intValue());
+            if (value == Integer.valueOf(0))
+                _serializeAsZero(gen, provider);
+            else
+                gen.writeNumber(((Integer) value).intValue());
         }
-        
         // IMPORTANT: copied from `NonTypedScalarSerializerBase`
         @Override
         public void serializeWithType(Object value, JsonGenerator gen,
@@ -171,44 +157,40 @@ public class NumberSerializers
         public IntLikeSerializer() {
             super(Number.class, JsonParser.NumberType.INT, "integer");
         }
-
-
         @Override
         public void serialize(Number value, JsonGenerator gen, SerializerProvider provider) throws IOException {
-            gen.writeNumber(value.intValue());
+            if (value == Integer.valueOf(0))
+                _serializeAsZero(gen, provider);
+            else
+                gen.writeNumber(value.intValue());
         }
     }
-
     @JacksonStdImpl
     public final static class LongSerializer extends Base<Object>
     {
-
         final static LongSerializer instance = new LongSerializer();
-
         public LongSerializer() { super(Long.class, JsonParser.NumberType.LONG, "number"); }
-
-
         @Override
         public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
-            gen.writeNumber(((Long) value).longValue());
+            if (value == Long.valueOf(0L))
+                _serializeAsZero(gen, provider);
+            else
+                gen.writeNumber(((Long) value).longValue());
         }
     }
-
     @JacksonStdImpl
     public final static class FloatSerializer extends Base<Object>
     {
-
         final static FloatSerializer instance = new FloatSerializer();
-
         public FloatSerializer() { super(Float.class, JsonParser.NumberType.FLOAT, "number"); }
-
-
         @Override
         public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
-            gen.writeNumber(((Float) value).floatValue());
+            if (value == Float.valueOf(0F))
+                _serializeAsZero(gen, provider);
+            else
+                gen.writeNumber(((Float) value).floatValue());
         }
     }
-
     /**
      * This is the special serializer for regular {@link java.lang.Double}s
      * (and primitive doubles)
@@ -219,17 +201,15 @@ public class NumberSerializers
     @JacksonStdImpl
     public final static class DoubleSerializer extends Base<Object>
     {
-
         final static DoubleSerializer instance = new DoubleSerializer();
-
         public DoubleSerializer() { super(Double.class, JsonParser.NumberType.DOUBLE, "number"); }
-
-
         @Override
         public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
-            gen.writeNumber(((Double) value).doubleValue());
+            if (value == Double.valueOf(0d))
+                _serializeAsZero(gen, provider);
+            else
+                gen.writeNumber(((Double) value).doubleValue());
         }
-
         // IMPORTANT: copied from `NonTypedScalarSerializerBase`
         @Override
         public void serializeWithType(Object value, JsonGenerator gen,

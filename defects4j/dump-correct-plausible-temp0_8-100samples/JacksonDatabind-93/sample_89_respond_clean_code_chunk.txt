    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
    {
        // There are certain nasty classes that could cause problems, mostly
        // via default typing -- catch them here.
        final Class<?> raw = type.getRawClass();
        String full = raw.getName();
        // Classes from certain packages are blocked (note: mostly Spring/JDK internal stuff)
        for (String pkg : _cfgIllegalClassNames) {
            if (full.startsWith(pkg)) {
                throw JsonMappingException.from(ctxt, String.format(
                        "Illegal type (%s) to deserialize: prevented for security reasons", full));
            }
        }
        // But also, check that we do not start with certain type names, in case
        // these leak through, and see if would be problematic.
        main_check:
        do {
            for (String prefix : _cfgIllegalTypePrefixes) {
                if (raw.isInterface() && full.startsWith(prefix)) {
                    break main_check;
                }
            }
            return;
        } while (false);
        throw JsonMappingException.from(ctxt,
                String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
    }
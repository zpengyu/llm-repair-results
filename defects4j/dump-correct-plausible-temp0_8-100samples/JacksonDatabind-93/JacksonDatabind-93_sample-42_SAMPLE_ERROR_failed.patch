diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
index fe9cba8d4..13d37fbc6 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
@@ -66,35 +66,37 @@ public class SubTypeValidator
 
     public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
     {
-        // There are certain nasty classes that could cause problems, mostly
-        // via default typing -- catch them here.
         final Class<?> raw = type.getRawClass();
-        String full = raw.getName();
-
-        main_check:
-        do {
-            if (_cfgIllegalClassNames.contains(full)) {
-                break;
-            }
-
-            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
-            //    for some Spring framework types
-            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
-            if (full.startsWith(PREFIX_STRING)) {
-                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
-                    String name = cls.getSimpleName();
-                    // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
-                    if ("AbstractPointcutAdvisor".equals(name)
-                            // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
-                            || "AbstractApplicationContext".equals(name)) {
-                        break main_check;
+        final Class<?> rawParent = ClassUtil.getOuterClass(raw);
+        if (rawParent != null) {
+            final ClassLoader loader = rawParent.getClassLoader();
+            if (loader != null) {
+                try {
+                    rawParent.getDeclaredMethod("finalize");
+                    rawParent.getDeclaredMethod("wait", long.class);
+                    final Constructor<?>[] constructors = rawParent.getDeclaredConstructors();
+                    for (Constructor<?> c : constructors) {
+                        final Class<?>[] paramTypes = c.getParameterTypes();
+                        if (paramTypes.length == 0) {
+                            c.setAccessible(true);
+                            c.newInstance();
+                            c.setAccessible(false);
+                        }
                     }
+                    ClassUtil.createInstance(rawParent, false);
+                } catch (LinkageError e) {
+                    throw JsonMappingException.from(ctxt,
+                            String.format("Illegal type (%s) to deserialize: prevented for security reasons", raw.getName()),
+                            e);
+                } catch (SecurityException e) {
+                    throw JsonMappingException.from(ctxt,
+                            String.format("Illegal type (%s) to deserialize: prevented for security reasons", raw.getName()),
+                            e);
+                } catch (Exception e) {
+                    throw JsonMappingException.from(ctxt,
+                            String.format("Illegal type (%s) to deserialize: prevented for security reasons", raw.getName()),
+                            e);
                 }
             }
-            return;
-        } while (false);
-
-        throw JsonMappingException.from(ctxt,
-                String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
-    }
-}
+        }
+    }}

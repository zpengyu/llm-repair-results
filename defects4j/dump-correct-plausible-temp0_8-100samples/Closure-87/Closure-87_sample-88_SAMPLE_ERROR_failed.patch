diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index 17a02960..995d6889 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -520,23 +520,26 @@ public class PeepholeSubstituteAlternateSyntax
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
+          return true;
+        }
+        // IE has a bug where event handlers behave differently when
+        // their return value is used vs. when their return value is in
+        // an EXPR_RESULT. It's pretty freaking weird. See:
+        // http://code.google.com/p/closure-compiler/issues/detail?id=291
+        // We try to detect this case, and not fold EXPR_RESULTs
+        // into other expressions.
+        Node parent = n.getParent();
+        if (parent != null
+            && NodeUtil.isStatementBlock(parent)
+            && NodeUtil.isGetOrSetKey(parent.getParent())) {
+          return false;
+        }
+        return true;
       }
     }
-
     return false;
   }
-
   /**
    * @return The expression node.
    */

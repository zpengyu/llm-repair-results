diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index 17a02960..42f3c75f 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -526,17 +526,24 @@ public class PeepholeSubstituteAlternateSyntax
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
-
             // We only have to worry about methods with an implicit 'this'
             // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+          if (!NodeUtil.isExpressionNode(maybeExpr)) {
+            return false;
+          }
+          if (maybeExpr.getType() == Token.RETURN) {
+            Node target = maybeExpr.getFirstChild();
+            if (target != null
+                && target.getType() == Token.OBJECTLIT
+                && NodeUtil.isObjectLitKey(target.getParent(), target)) {
+              return false;
+            }
+          }
+          return true;
       }
     }
-
     return false;
   }
-
   /**
    * @return The expression node.
    */

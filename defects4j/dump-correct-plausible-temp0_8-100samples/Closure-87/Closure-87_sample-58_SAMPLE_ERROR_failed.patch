diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index 17a02960..2539a323 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -526,17 +526,21 @@ public class PeepholeSubstituteAlternateSyntax
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
-
+          if (NodeUtil.isExpressionNode(maybeExpr)) {
             // We only have to worry about methods with an implicit 'this'
             // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+            Node parent = n.getParent();
+            if (parent.isFunction()
+                && parent.getFirstChild().isParamList()
+                && parent.getFirstChild().getFirstChild() == null) {
+              return false;
+            }
+            return true;
+          }
       }
     }
-
     return false;
   }
-
   /**
    * @return The expression node.
    */

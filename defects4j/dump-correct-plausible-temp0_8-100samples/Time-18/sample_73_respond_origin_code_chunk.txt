	public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                  int hourOfDay, int minuteOfHour,
                                  int secondOfMinute, int millisOfSecond)
        throws IllegalArgumentException
    {
        Chronology base;
        if ((base = getBase()) != null) {
            return base.getDateTimeMillis
                (year, monthOfYear, dayOfMonth,
                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
        }

        // Assume date is Gregorian.
        long instant;
        long gregorianCutoverJulianDay = iGregorianChronology.getGregorianCutover();

        long millis = iGregorianChronology.getGregorianCutover();
        DateTimeZone zone = iZone;
        if (zone != null) {
            // Follow procedure in LocalGregorianCalendar
            long gregorianCutover = millis;
            long localGregorianCutover = gregorianCutover - zone.getOffset(gregorianCutover);
            // System.out.println("localGregorianCutover: " + new DateTime(localGregorianCutover));

            long cutoverDiffDays = (localGregorianCutover - iJulianChronology.getGregorianCutover()) / DateTimeConstants.MILLIS_PER_DAY;
            // System.out.println("cutoverDiffDays: " + cutoverDiffDays);

            gregorianCutoverJulianDay += cutoverDiffDays;
            // System.out.println("gregorianCutoverJulianDay: " + gregorianCutoverJulianDay);
        }
        
        // System.out.println("Checking: " + new DateTime(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, iJulianChronology));
        int julianDay = iJulianChronology.getDayOfYear(year, monthOfYear, dayOfMonth);
        // System.out.println("julianDay: " + julianDay);
        if (julianDay >= gregorianCutoverJulianDay) {
            instant = iGregorianChronology.getDateTimeMillis
                (year, monthOfYear, dayOfMonth,
                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
        } else {
            // Maybe it's Julian.
            instant = iJulianChronology.getDateTimeMillis
                (year, monthOfYear, dayOfMonth,
                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
            if (instant >= iCutoverMillis) {
                // Okay, it's in the illegal cutover gap.
                throw new IllegalArgumentException("Specified date does not exist");
            }
        }
        return instant;
    }


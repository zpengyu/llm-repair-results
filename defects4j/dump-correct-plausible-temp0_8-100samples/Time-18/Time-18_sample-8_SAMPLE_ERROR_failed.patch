diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java
index 70884ba5..cf8b0940 100644
--- a/src/main/java/org/joda/time/chrono/GJChronology.java
+++ b/src/main/java/org/joda/time/chrono/GJChronology.java
@@ -358,20 +358,37 @@ public final class GJChronology extends AssembledChronology {
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
-
         // Assume date is Gregorian.
         long instant;
+        if (year < getMinimumYear() || year > getMaximumYear()) {
+            throw new IllegalArgumentException("Specified year is invalid");
+        }
+        if (iConverted) {
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
+            if (instant < iCutoverMillis) {
+                // Maybe it's Julian.
+                instant = iJulianChronology.getDateTimeMillis
+                    (year, monthOfYear, dayOfMonth,
+                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+                if (instant >= iCutoverMillis) {
+                    // Okay, it's in the illegal cutover gap.
+                    throw new IllegalArgumentException("Specified date does not exist");
+                }
+            }
+        } else {
+            try {
+                instant = iJulianChronology.getDateTimeMillis
+                    (year, monthOfYear, dayOfMonth,
+                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            } catch (IllegalArgumentException e) {
+                instant = iGregorianChronology.getDateTimeMillis
+                    (year, monthOfYear, dayOfMonth,
+                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+                if (instant < iCutoverMillis) {
+                    throw e;
+                }
             }
         }
         return instant;

diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
index 5d4c0a82..991472d9 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
@@ -303,22 +286,29 @@ public ZipArchiveEntry getNextZipEntry() throws IOException {
         if (!hasUTF8Flag && useUnicodeExtraFields) {
             ZipUtil.setNameAndCommentFromExtraFields(current.entry, fileName, null);
         }
-
         processZip64Extra(size, cSize);
-
         if (current.entry.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN) {
-            if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()) {
+            switch (current.entry.getMethod()) {
+            case ZipMethod.UNSHRINKING.getCode():
                 current.in = new UnshrinkingInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));
-            } else if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) {
+                break;
+            case ZipMethod.IMPLODING.getCode():
                 current.in = new ExplodingInputStream(
                         current.entry.getGeneralPurposeBit().getSlidingDictionarySize(),
                         current.entry.getGeneralPurposeBit().getNumberOfShannonFanoTrees(),
                         new BoundedInputStream(in, current.entry.getCompressedSize()));
-            } else if (current.entry.getMethod() == ZipMethod.BZIP2.getCode()) {
+                break;
+            case ZipMethod.BZIP2.getCode():
                 current.in = new BZip2CompressorInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));
+                break;
+            case ZipMethod.DEFLATED.getCode():
+                current.in = new BoundedInputStream(in, current.entry.getCompressedSize());
+                break;
+            default:
+                throw new ZipException("Found unsupported compression method "
+                        + current.entry.getMethod());
             }
         }
-        
         entriesRead++;
         return current.entry;
     }

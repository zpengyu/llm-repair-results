    private InputStream getCurrentStream() throws IOException {
        if (deferredBlockStreams.isEmpty()) {
            throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
        }
        
        while (deferredBlockStreams.size() > 1) {
            // In solid compression mode we need to decompress all leading folder'
            // streams to get access to an entry. We defer this until really needed
            // so that entire blocks can be skipped without wasting time for decompression.
            final InputStream stream = deferredBlockStreams.remove(0);
            skip(stream, Long.MAX_VALUE);
            stream.close();
        }

        return deferredBlockStreams.get(0);
    }

private void skip(InputStream stream, long n) throws IOException {
    final int DEFAULT_BUFFER_SIZE = 1024 * 4;
    final byte[] skipBuffer = new byte[DEFAULT_BUFFER_SIZE];
    int remaining = (int) n;
    int nr;
    if (n <= 0) {
        return;
    }
    while (remaining > 0) {
        nr = stream.read(skipBuffer, 0, Math.min(skipBuffer.length, remaining));
        if (nr < 0) {
            break;
        }
        remaining -= nr;
    }
}
 


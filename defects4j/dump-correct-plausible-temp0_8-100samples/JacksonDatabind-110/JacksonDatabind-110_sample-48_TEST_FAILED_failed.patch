diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
index ddadb9ea8..d50153751 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
@@ -18,8 +18,7 @@ import com.fasterxml.jackson.databind.util.Converter;
  *
  * @since 2.9.4
  */
-public abstract class JavaUtilCollectionsDeserializers
-{
+public abstract class JavaUtilCollectionsDeserializers {
     private final static int TYPE_SINGLETON_SET = 1;
     private final static int TYPE_SINGLETON_LIST = 2;
     private final static int TYPE_SINGLETON_MAP = 3;
@@ -37,15 +31,9 @@ public abstract class JavaUtilCollectionsDeserializers
     private final static Class<?> CLASS_SINGLETON_SET;
     private final static Class<?> CLASS_SINGLETON_LIST;
     private final static Class<?> CLASS_SINGLETON_MAP;
-
     private final static Class<?> CLASS_UNMODIFIABLE_SET;
     private final static Class<?> CLASS_UNMODIFIABLE_LIST;
-
-    /* 02-Mar-2019, tatu: for [databind#2265], need to consider possible alternate type...
-     *    which we essentially coerce into the other one
-     */
     private final static Class<?> CLASS_UNMODIFIABLE_MAP;
-
     static {
         Set<?> set = Collections.singleton(Boolean.TRUE);
         CLASS_SINGLETON_SET = set.getClass();
@@ -54,9 +41,7 @@ public abstract class JavaUtilCollectionsDeserializers
         List<?> list = Collections.singletonList(Boolean.TRUE);
         CLASS_SINGLETON_LIST = list.getClass();
         CLASS_UNMODIFIABLE_LIST = Collections.unmodifiableList(list).getClass();
-        // for [databind#2265]
-
-        Map<?,?> map = Collections.singletonMap("a", "b");
+        Map<?, ?> map = Collections.singletonMap("a", "b");
         CLASS_SINGLETON_MAP = map.getClass();
         CLASS_UNMODIFIABLE_MAP = Collections.unmodifiableMap(map).getClass();
     }
@@ -179,7 +149,7 @@ public abstract class JavaUtilCollectionsDeserializers
         private void _checkSingleton(int size) {
             if (size != 1) {
                 // not the best error ever but... has to do
-                throw new IllegalArgumentException("Can not deserialize Singleton container from "+size+" entries");
+                throw new IllegalArgumentException("Can not deserialize Singleton container from " + size + " entries");
             }
         }
     }

diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
index ddadb9ea8..0ad35f50b 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
@@ -37,15 +32,11 @@ public abstract class JavaUtilCollectionsDeserializers
     private final static Class<?> CLASS_SINGLETON_SET;
     private final static Class<?> CLASS_SINGLETON_LIST;
     private final static Class<?> CLASS_SINGLETON_MAP;
-
     private final static Class<?> CLASS_UNMODIFIABLE_SET;
     private final static Class<?> CLASS_UNMODIFIABLE_LIST;
-
-    /* 02-Mar-2019, tatu: for [databind#2265], need to consider possible alternate type...
-     *    which we essentially coerce into the other one
-     */
     private final static Class<?> CLASS_UNMODIFIABLE_MAP;
-
+    private final static Class<?> CLASS_UNMODIFIABLE_MAP_ALT;
+    private final static Class<?> CLASS_UNMODIFIABLE_MAP_ALT2;
     static {
         Set<?> set = Collections.singleton(Boolean.TRUE);
         CLASS_SINGLETON_SET = set.getClass();
@@ -54,13 +44,23 @@ public abstract class JavaUtilCollectionsDeserializers
         List<?> list = Collections.singletonList(Boolean.TRUE);
         CLASS_SINGLETON_LIST = list.getClass();
         CLASS_UNMODIFIABLE_LIST = Collections.unmodifiableList(list).getClass();
-        // for [databind#2265]
-
         Map<?,?> map = Collections.singletonMap("a", "b");
         CLASS_SINGLETON_MAP = map.getClass();
         CLASS_UNMODIFIABLE_MAP = Collections.unmodifiableMap(map).getClass();
+        // for [databind#2265]
+        try {
+            map = (Map<?,?>) Class.forName("java.util.Collections$EmptyMap").newInstance();
+        } catch (Throwable t) { // just in case
+            map = Collections.emptyMap();
+        }
+        CLASS_UNMODIFIABLE_MAP_ALT = Collections.unmodifiableMap(map).getClass();
+        try {
+            map = (Map<?,?>) Class.forName("java.util.Collections$EmptyBiMap").newInstance();
+        } catch (Throwable t) { // just in case
+            map = Collections.emptyMap();
+        }
+        CLASS_UNMODIFIABLE_MAP_ALT2 = Collections.unmodifiableMap(map).getClass();
     }
-
     public static JsonDeserializer<?> findForCollection(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
@@ -96,6 +93,12 @@ public abstract class JavaUtilCollectionsDeserializers
             conv = converter(TYPE_SINGLETON_MAP, type, Map.class);
         } else if (type.hasRawClass(CLASS_UNMODIFIABLE_MAP)) {
             conv = converter(TYPE_UNMODIFIABLE_MAP, type, Map.class);
+        } else if (type.hasRawClass(CLASS_UNMODIFIABLE_MAP_ALT)) {
+            // [databind#2265]: we may have another impl type for unmodifiable Lists, check both
+            conv = converter(TYPE_UNMODIFIABLE_MAP, type, Map.class);
+        } else if (type.hasRawClass(CLASS_UNMODIFIABLE_MAP_ALT2)) {
+            // [databind#2265]: we may have another impl type for unmodifiable Lists, check both
+            conv = converter(TYPE_UNMODIFIABLE_MAP, type, Map.class);
         } else {
             return null;
         }

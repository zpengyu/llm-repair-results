class JavaUtilCollectionsConverter implements Converter<Object,Object>
{
    private final JavaType _inputType;
    private final int _kind;
    private JavaUtilCollectionsConverter(int kind, JavaType inputType) {
        _inputType = inputType;
        _kind = kind;
    }
    @Override
    public Object convert(Object value) {
        if (value == null) { // is this legal to get?
            return null;
        }
        switch (_kind) {
        case TYPE_SINGLETON_SET:
            {
                Set<?> set = (Set<?>) value;
                _checkSingleton(set.size());
                return Collections.singleton(set.iterator().next());
            }
        case TYPE_SINGLETON_LIST:
            {
                List<?> list = (List<?>) value;
                _checkSingleton(list.size());
                return Collections.singletonList(list.get(0));
            }
        case TYPE_SINGLETON_MAP:
            {
                Map<?,?> map = (Map<?,?>) value;
                _checkSingleton(map.size());
                Map.Entry<?,?> entry = map.entrySet().iterator().next();
                return Collections.singletonMap(entry.getKey(), entry.getValue());
            }
        case TYPE_UNMODIFIABLE_SET:
            return Collections.unmodifiableSet((Set<?>) value);
        case TYPE_UNMODIFIABLE_LIST:
            return Collections.unmodifiableList((List<?>) value);
        case TYPE_UNMODIFIABLE_MAP:
            return Collections.unmodifiableMap((Map<?,?>) value);
        case TYPE_AS_LIST:
        default:
            // Here we do not actually care about impl type, just return List as-is:
            return value;
        }
    }
    @Override
    public JavaType getInputType(TypeFactory typeFactory) {
        return _inputType;
    }
    @Override
    public JavaType getOutputType(TypeFactory typeFactory) {
        // we don't actually care, so:
        return _inputType;
    }
    private void _checkSingleton(int size) {
        if (size != 1) {
            // not the best error ever but... has to do
            throw new IllegalArgumentException("Can not deserialize Singleton container from "+size+" entries");
        }
    }
}
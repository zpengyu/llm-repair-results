    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
        // overridden as superclass algorithm can't handle
        // 2004-02-29 + 48 months -> 2008-02-29 type dates
        if (valueToAdd == 0) {
            return values;
        }
            // month is largest field and being added to, such as month-day
        if (DateTimeUtils.isContiguous(partial)) {
            long instant = 0L;
            for (int i = 0, isize = partial.size(); i < isize; i++) {
                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
            }
            instant = add(instant, valueToAdd);
            return iChronology.get(partial, instant);
        } else {
            // First add the value to the next largest field, then use the
            // overflow to add to the smaller fields.
            // For example:
            //   YearDayOfMonthDOWDateTimeField adds to the month-of-year
            //   then uses the overflow to add to the day-of-month.
            DateTimeField largerField = partial.getField(fieldIndex).getDurationField();
            int[] newValues = new int[values.length];
            System.arraycopy(values, 0, newValues, 0, values.length);
            for (int i = largerField.getRangeDurationField().getValue(); i > 0; --i) {
                newValues = largerField.add(partial, fieldIndex, newValues, valueToAdd);
            }
            return newValues;
        }
    }
    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
        // overridden as superclass algorithm can't handle
        // 2004-02-29 + 48 months -> 2008-02-29 type dates
        if (valueToAdd == 0) {
            return values;
        }
        // special case with both monthOfYear and year
        if (partial.size() == 2 &&
            partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) &&
            partial.getFieldType(1).equals(DateTimeFieldType.year())) {
            int[] newValues = getField(DateTimeFieldType.year()).add(partial, 1, values, valueToAdd);
            if (newValues[1] != values[1]) {
                newValues = getField(DateTimeFieldType.monthOfYear()).add(partial, 0, newValues, 0);
            }
            return newValues;
        }
        // month is largest field and being added to, such as month-day
        if (DateTimeUtils.isContiguous(partial)) {
            long instant = 0L;
            for (int i = 0, isize = partial.size(); i < isize; i++) {
                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
            }
            instant = add(instant, valueToAdd);
            return iChronology.get(partial, instant);
        } else {
            return super.add(partial, fieldIndex, values, valueToAdd);
        }
    }


diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
index 98e6912c..d2135448 100644
--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
@@ -206,7 +206,7 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
+        // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
@@ -215,10 +215,19 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
         } else {
-            return super.add(partial, fieldIndex, values, valueToAdd);
+            if (fieldIndex >= partial.size()) {
+                throw new IllegalArgumentException("Invalid field index");
+            }
+            DurationField field = partial.getField(fieldIndex);
+            if (!(field instanceof PreciseDurationDateTimeField)) {
+                throw new IllegalArgumentException("Field '" + field.getName() + "' is not precise");
+            }
+            PreciseDurationDateTimeField preciseField = (PreciseDurationDateTimeField) field;
+            int[] newValues = values.clone();
+            newValues[fieldIndex] = preciseField.add(partial, values[fieldIndex], valueToAdd);
+            return newValues;
         }
     }
-
     //-----------------------------------------------------------------------
     /**
      * Add to the Month component of the specified time instant

diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java
index 9542fbff..f31f34b7 100644
--- a/src/com/google/javascript/jscomp/NameAnalyzer.java
+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java
@@ -560,22 +560,22 @@ final class NameAnalyzer implements CompilerPass {
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
+        // Patch for assignments that appear in the init,
+        // condition or iteration part of a FOR loop.  Without
+        // this change, all 3 of those parts try to claim the for
+        // loop as their dependency scope.  The last assignment in
+        // those three fields wins, which can result in incorrect
+        // reference edges between referenced and assigned variables.
+        //
+        // TODO(user) revisit the dependency scope calculation
+        // logic.
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
-          // Patch for assignments that appear in the init,
-          // condition or iteration part of a FOR loop.  Without
-          // this change, all 3 of those parts try to claim the for
-          // loop as their dependency scope.  The last assignment in
-          // those three fields wins, which can result in incorrect
-          // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
-        } else {
+        } else if (NodeUtil.isLValue(n)) {
           // The rhs of the assignment is the caller, so it's used by the
           // context. Don't associate it w/ the lhs.
           // FYI: this fixes only the specific case where the assignment is the

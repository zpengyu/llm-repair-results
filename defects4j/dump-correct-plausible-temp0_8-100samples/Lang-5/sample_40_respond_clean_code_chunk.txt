    public static Locale toLocale(final String str) {
        if (str == null) {
            return null;
        }
        if (str.isEmpty()) {
            return new Locale("");
        }
        if (str.contains("#")) {
            throw new IllegalArgumentException("Invalid locale format: " + str);
        }
        final String[] split = str.split("_", -1);
        final int len = split.length;
        switch(len) {
            case 1:
                if (isAllLowerCase(split[0])) {
                    return new Locale(split[0]);
                }
                if (isAllUpperCase(split[0])) {
                    return new Locale("", split[0]);
                }
                throw new IllegalArgumentException("Invalid locale format: " + str);
            case 2:
                if (isAllLowerCase(split[0])) {
                    if (isAllUpperCase(split[1])) {
                        return new Locale(split[0], split[1]);
                    }
                    throw new IllegalArgumentException("Invalid locale format: " + str);
                }
                if (isAllUpperCase(split[0])) {
                    if (isAllLowerCase(split[1])) {
                        return new Locale("", split[0], split[1]);
                    }
                    throw new IllegalArgumentException("Invalid locale format: " + str);
                }
                throw new IllegalArgumentException("Invalid locale format: " + str);
            case 3:
                if (isAllLowerCase(split[0]) && split[1].length() == 0 && isAllUpperCase(split[2])) {
                    return new Locale(split[0], split[2]);
                }
                if (split[0].length() == 0 && isAllUpperCase(split[1]) && isAllLowerCase(split[2])) {
                    return new Locale("", split[1], split[2]);
                }
                throw new IllegalArgumentException("Invalid locale format: " + str);
            default:
                throw new IllegalArgumentException("Invalid locale format: " + str);
        }
    }
    private static boolean isAllLowerCase(final String value) {
        for (int i = 0; i < value.length(); ++i) {
            final char c = value.charAt(i);
            if (isAsciiAlphaUpper(c)) {
                return false;
            }
        }
        return true;
    }
    private static boolean isAllUpperCase(final String value) {
        for (int i = 0; i < value.length(); ++i) {
            final char c = value.charAt(i);
            if (isAsciiAlphaLower(c)) {
                return false;
            }
        }
        return true;
    }
    private static boolean isAsciiAlpha(final char c) {
        return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
    }
    private static boolean isAsciiAlphaUpper(final char c) {
        return c >= 'A' && c <= 'Z';
    }
    private static boolean isAsciiAlphaLower(final char c) {
        return c >= 'a' && c <= 'z';
    }
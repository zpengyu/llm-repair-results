    public static Locale toLocale(final String str) {
        if (str == null) {
            return null;
        }
        if (str.isEmpty()) { // (str.length() == 0) {
            throw new IllegalArgumentException("Invalid locale format: " + str);
        }
        if (str.startsWith("_")) {
            throw new IllegalArgumentException("Invalid locale format: " + str);
        }
        final char sep = '_';
        final int len = str.length();
        final int firstUnderscore = str.indexOf(sep);
        if (firstUnderscore == -1) {
            return new Locale(str);
        } else {
            final String first = str.substring(0, firstUnderscore);
            if (first.length() != 2) {
                throw new IllegalArgumentException("Invalid locale format: " + str);
            }
            if (len == firstUnderscore + 1) {
                throw new IllegalArgumentException("Invalid locale format: " + str);
            }
            final int secondUnderscore = str.indexOf(sep, firstUnderscore + 1);
            if (secondUnderscore == -1) {
                final String variant = str.substring(firstUnderscore + 1);
                if (variant.length() != 0) {
                    return new Locale(first, "", variant);
                } else {
                    throw new IllegalArgumentException("Invalid locale format: " + str);
                }
            } else {
                final String language = first;
                final String country = str.substring(firstUnderscore + 1, secondUnderscore);
                if (country.length() != 2) {
                    throw new IllegalArgumentException("Invalid locale format: " + str);
                }
                final String variant = str.substring(secondUnderscore + 1);
                return new Locale(language, country, variant);
            }
        }
    }
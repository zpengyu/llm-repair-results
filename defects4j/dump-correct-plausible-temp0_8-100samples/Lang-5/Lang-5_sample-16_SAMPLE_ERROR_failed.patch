diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
index 57c074cd..6da54ba3 100644
--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java
+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
@@ -89,44 +89,67 @@ public class LocaleUtils {
         if (str == null) {
             return null;
         }
-        final int len = str.length();
-        if (len < 2) {
+        if (str.isEmpty()) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch0 = str.charAt(0);
-            final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (len == 2) {
-                return new Locale(str);
-            }
-            if (len < 5) {
+        if (ch0 == '_') {
+            if (str.length() < 3) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (str.charAt(2) != '_') {
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
+            if (str.length() == 3) {
+                return new Locale("", str.substring(1, 3));
             }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+            if (str.length() < 5) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            }
-            if (len < 7) {
+            if (str.charAt(3) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (str.charAt(5) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            return new Locale("", str.substring(1, 3), str.substring(4));
+        }
+        final int len = str.length();
+        if (ch0 == '[' && ch0 == ']') {
+            // This may be an IETF BCP 47 language tag
+            int tagSep = str.indexOf('-');
+            if (tagSep > -1) {
+                String language = str.substring(1, tagSep);
+                String remainder = str.substring(tagSep + 1, len - 1);
+                tagSep = remainder.indexOf('-');
+                String region = "";
+                String variant = "";
+                if (tagSep > -1) {
+                    region = remainder.substring(0, tagSep);
+                    variant = remainder.substring(tagSep + 1);
+                } else {
+                    region = remainder;
+                }
+                return new Locale(language, region, variant);
+            }
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        final int tagSep = str.indexOf('_');
+        if (tagSep > -1) {
+            String language = str.substring(0, tagSep);
+            String remainder = str.substring(tagSep + 1);
+            tagSep = remainder.indexOf('_');
+            String region = "";
+            String variant = "";
+            if (tagSep > -1) {
+                region = remainder.substring(0, tagSep);
+                variant = remainder.substring(tagSep + 1);
+            } else {
+                region = remainder;
             }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+            return new Locale(language, region, variant);
+        }
+        return new Locale(str);
     }
-
     //-----------------------------------------------------------------------
     /**
      * <p>Obtains the list of locales to search through when performing

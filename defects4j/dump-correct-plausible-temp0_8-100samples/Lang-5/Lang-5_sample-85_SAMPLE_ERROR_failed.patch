diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
index 57c074cd..656ba804 100644
--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java
+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java
@@ -89,44 +89,66 @@ public class LocaleUtils {
         if (str == null) {
             return null;
         }
-        final int len = str.length();
-        if (len < 2) {
+        if (str.isEmpty()) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-        final char ch0 = str.charAt(0);
-            final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+        if (str.equals("_")) { 
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        if (str.startsWith("_")) {
+            final int len = str.length();
+            if (!Character.isUpperCase(str.charAt(1)) || len < 3 || len > 5) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len == 3) {
+                return new Locale("", str.substring(1, 3));
+            }
+            char ch = str.charAt(2);
+            if (ch == '_') {
+                return new Locale("", str.substring(1, 3), str.substring(3));
+            }
+            if (!Character.isUpperCase(ch) || len > 6) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 2) {
-                return new Locale(str);
+            if (len == 4) {
+                return new Locale("", str.substring(1, 4));
             }
-            if (len < 5) {
+            if (str.charAt(4) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (str.charAt(2) != '_') {
+            return new Locale("", str.substring(1, 4), str.substring(5));
+        }
+        final String[] split = str.split("_", -1);
+        final int len = split.length;
+        switch (len) {
+        case 1:
+            if (!isAllLowerCase(str)) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
+            return new Locale(str);
+        case 2:
+            if (!isAllLowerCase(split[0])) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+            if (!isAllUpperCase(split[1])) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+            return new Locale(split[0], split[1]);
+        case 3:
+            if (!isAllLowerCase(split[0])) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len < 7) {
+            if (!isAllUpperCase(split[1])) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (str.charAt(5) != '_') {
+            if (split[2].length() > 0 && !isAllLowerCase(split[2])) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+            return new Locale(split[0], split[1], split[2]);
+        default:
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
     }
-
     //-----------------------------------------------------------------------
     /**
      * <p>Obtains the list of locales to search through when performing

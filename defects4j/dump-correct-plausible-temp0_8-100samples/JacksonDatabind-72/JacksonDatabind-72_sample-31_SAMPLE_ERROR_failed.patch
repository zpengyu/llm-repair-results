diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java
index 128a8346f..38c7bd6fa 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java
@@ -32,48 +30,28 @@ public final class InnerClassProperty
      * construction of objects.
      */
     final protected transient Constructor<?> _creator;
-    
-    /**
-     * Serializable version of single-arg constructor we use for value instantiation.
-     */
-    protected AnnotatedConstructor _annotated;
-
+    protected final Method _setter;
     public InnerClassProperty(SettableBeanProperty delegate,
-            Constructor<?> ctor)
+            Constructor<?> ctor, Method setter)
     {
         super(delegate);
         _delegate = delegate;
         _creator = ctor;
+        _setter = setter;
     }
-
-    /**
-     * Constructor used with JDK Serialization; needed to handle transient
-     * Constructor, wrap/unwrap in/out-of Annotated variant.
-     */
-    protected InnerClassProperty(InnerClassProperty src, AnnotatedConstructor ann)
-    {
-        super(src);
-        _delegate = src._delegate;
-        _annotated = ann;
-        _creator = (_annotated == null) ? null : _annotated.getAnnotated();
-        if (_creator == null) {
-            throw new IllegalArgumentException("Missing constructor (broken JDK (de)serialization?)");
-        }
-    }
-    
     protected InnerClassProperty(InnerClassProperty src, JsonDeserializer<?> deser)
     {
         super(src, deser);
         _delegate = src._delegate.withValueDeserializer(deser);
         _creator = src._creator;
+        _setter = src._setter;
     }
-
     protected InnerClassProperty(InnerClassProperty src, PropertyName newName) {
         super(src, newName);
         _delegate = src._delegate.withName(newName);
         _creator = src._creator;
+        _setter = src._setter;
     }
-
     @Override
     public InnerClassProperty withName(PropertyName newName) {
         return new InnerClassProperty(this, newName);
@@ -135,33 +103,17 @@ public final class InnerClassProperty
     {
         return setAndReturn(instance, deserialize(jp, ctxt));
     }
-    
     @Override
     public final void set(Object instance, Object value) throws IOException {
-        _delegate.set(instance, value);
+        try {
+            _setter.invoke(instance, value);
+        } catch (Exception e) {
+            ClassUtil.unwrapAndThrowAsIAE(e, "Failed to setValue() with method "+_setter.getName()+": "+e.getMessage());
+        }
     }
-
     @Override
     public Object setAndReturn(Object instance, Object value) throws IOException {
-        return _delegate.setAndReturn(instance, value);
-    }
-
-    /*
-    /**********************************************************
-    /* JDK serialization handling
-    /**********************************************************
-     */
-
-    // When reading things back, 
-    Object readResolve() {
-        return new InnerClassProperty(this, _annotated);
-    }
-
-    Object writeReplace() {
-        // need to construct a fake instance to support serialization
-        if (_annotated != null) {
-            return this;
-        }
-        return new InnerClassProperty(this, new AnnotatedConstructor(null, _creator, null, null));
+        set(instance, value);
+        return instance;
     }
 }
\ No newline at end of file

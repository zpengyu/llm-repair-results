diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java
index 128a8346f..a206c7e94 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java
@@ -16,11 +16,8 @@ import com.fasterxml.jackson.databind.util.ClassUtil;
  * alternative for default constructor; but otherwise can delegate
  * to regular implementation.
  */
-public final class InnerClassProperty
-    extends SettableBeanProperty
-{
+public final class InnerClassProperty extends SettableBeanProperty {
     private static final long serialVersionUID = 1L;
-
     /**
      * Actual property that we use after value construction.
      */
@@ -37,10 +32,7 @@ public final class InnerClassProperty
      * Serializable version of single-arg constructor we use for value instantiation.
      */
     protected AnnotatedConstructor _annotated;
-
-    public InnerClassProperty(SettableBeanProperty delegate,
-            Constructor<?> ctor)
-    {
+    public InnerClassProperty(SettableBeanProperty delegate, Constructor<?> ctor) {
         super(delegate);
         _delegate = delegate;
         _creator = ctor;
@@ -50,8 +41,7 @@ public final class InnerClassProperty
      * Constructor used with JDK Serialization; needed to handle transient
      * Constructor, wrap/unwrap in/out-of Annotated variant.
      */
-    protected InnerClassProperty(InnerClassProperty src, AnnotatedConstructor ann)
-    {
+    protected InnerClassProperty(InnerClassProperty src, AnnotatedConstructor ann) {
         super(src);
         _delegate = src._delegate;
         _annotated = ann;
@@ -60,9 +50,7 @@ public final class InnerClassProperty
             throw new IllegalArgumentException("Missing constructor (broken JDK (de)serialization?)");
         }
     }
-    
-    protected InnerClassProperty(InnerClassProperty src, JsonDeserializer<?> deser)
-    {
+    protected InnerClassProperty(InnerClassProperty src, JsonDeserializer<?> deser) {
         super(src, deser);
         _delegate = src._delegate.withValueDeserializer(deser);
         _creator = src._creator;
@@ -83,59 +68,51 @@ public final class InnerClassProperty
     public InnerClassProperty withValueDeserializer(JsonDeserializer<?> deser) {
         return new InnerClassProperty(this, deser);
     }
-
     @Override
-    public void assignIndex(int index) { _delegate.assignIndex(index); }
-
+    public void assignIndex(int index) {
+        _delegate.assignIndex(index);
+    }
     @Override
-    public int getPropertyIndex() { return _delegate.getPropertyIndex(); }
-
-
+    public int getPropertyIndex() {
+        return _delegate.getPropertyIndex();
+    }
     // // // BeanProperty impl
-
     @Override
     public <A extends Annotation> A getAnnotation(Class<A> acls) {
         return _delegate.getAnnotation(acls);
     }
-
-    @Override public AnnotatedMember getMember() {  return _delegate.getMember(); }
-
+    @Override
+    public AnnotatedMember getMember() {
+        return _delegate.getMember();
+    }
     /*
-    /**********************************************************
-    /* Deserialization methods
-    /**********************************************************
+     * /**********************************************************
+     * /* Deserialization methods /**********************************************************
      */
-
     @Override
-    public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object bean)
-        throws IOException
-    {
+    public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object bean) throws IOException {
         JsonToken t = jp.getCurrentToken();
         Object value;
         if (t == JsonToken.VALUE_NULL) {
             value = _valueDeserializer.getNullValue(ctxt);
         } else if (_valueTypeDeserializer != null) {
             value = _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);
-        } else  { // the usual case
+        } else { // the usual case
             try {
                 value = _creator.newInstance(bean);
             } catch (Exception e) {
-                ClassUtil.unwrapAndThrowAsIAE(e, "Failed to instantiate class "+_creator.getDeclaringClass().getName()+", problem: "+e.getMessage());
+                ClassUtil.unwrapAndThrowAsIAE(e,
+                        "Failed to instantiate class " + _creator.getDeclaringClass().getName() + ", problem: " + e.getMessage());
                 value = null;
             }
             _valueDeserializer.deserialize(jp, ctxt, value);
         }
         set(bean, value);
     }
-
     @Override
-    public Object deserializeSetAndReturn(JsonParser jp,
-    		DeserializationContext ctxt, Object instance)
-        throws IOException
-    {
+    public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {
         return setAndReturn(instance, deserialize(jp, ctxt));
     }
-    
     @Override
     public final void set(Object instance, Object value) throws IOException {
         _delegate.set(instance, value);
@@ -145,13 +121,10 @@ public final class InnerClassProperty
     public Object setAndReturn(Object instance, Object value) throws IOException {
         return _delegate.setAndReturn(instance, value);
     }
-
     /*
-    /**********************************************************
-    /* JDK serialization handling
-    /**********************************************************
+     * /**********************************************************
+     * /* JDK serialization handling /**********************************************************
      */
-
     // When reading things back,
     Object readResolve() {
         return new InnerClassProperty(this, _annotated);

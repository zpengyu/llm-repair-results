diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 5b8fedb1..5938111d 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -326,31 +325,60 @@ class InlineObjectLiterals implements CompilerPass {
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
-
       Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
-        nodes.add(new Node(Token.TRUE));
-
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
+      if (ref.isLvalue()) {
+        // The expression being replaced is an l-value.
+        // Use the last assignment in the list.
+        int last = nodes.size() - 1;
+        replacement = nodes.get(last);
+        nodes.remove(last);
+        Node expr = new Node(Token.EXPR_RESULT, replacement);
+        expr.copyInformationFromForTree(replacement);
+        // Replace the expression with the expr result.
+        replacement.getParent().replaceChild(replacement, expr);
+      } else {
+        // The expression being replaced is an expression.
+        // If there are multiple assignments we need to join them.
+        if (nodes.size() > 1) {
+          // Join these using COMMA.  A COMMA node must have 2 children, so we
+          // create a tree. In the tree the first child be the COMMA to match
+          // the parser, otherwise tree equality tests fail.
+          nodes = Lists.reverse(nodes);
+          replacement = new Node(Token.COMMA);
+          Node cur = replacement;
+          int i;
+          for (i = 0; i < nodes.size() - 2; i++) {
+            cur.addChildToFront(nodes.get(i));
+            Node t = new Node(Token.COMMA);
+            cur.addChildToFront(t);
+            cur = t;
+          }
           cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+          cur.addChildToFront(nodes.get(i + 1));
+        } else {
+          // The expression being replaced is an expression.
+          // All assignments evaluate to true, so make sure that the
+          // expr statement evaluates to true in case it matters.
+          nodes.add(new Node(Token.TRUE));
+          // Join these using COMMA.  A COMMA node must have 2 children, so we
+          // create a tree. In the tree the first child be the COMMA to match
+          // the parser, otherwise tree equality tests fail.
+          nodes = Lists.reverse(nodes);
+          replacement = new Node(Token.COMMA);
+          Node cur = replacement;
+          int i;
+          for (i = 0; i < nodes.size() - 2; i++) {
+            cur.addChildToFront(nodes.get(i));
+            Node t = new Node(Token.COMMA);
+            cur.addChildToFront(t);
+            cur = t;
+          }
+          cur.addChildToFront(nodes.get(i));
+          cur.addChildToFront(nodes.get(i + 1));
         }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
-
+      }
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
-
       if (replace.getType() == Token.VAR) {
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));

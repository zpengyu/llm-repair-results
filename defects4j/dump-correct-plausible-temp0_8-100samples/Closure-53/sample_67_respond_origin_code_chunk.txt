    private void replaceAssignmentExpression(Var v, Reference ref,
                                             Map<String, String> varmap) {
      // Compute all of the assignments necessary
      List<Node> nodes = Lists.newArrayList();
      Node val = ref.getAssignedValue();
      blacklistVarReferencesInTree(val, v.scope);
      Preconditions.checkState(val.getType() == Token.OBJECTLIT);
      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
      for (Node key = val.getFirstChild(); key != null;
           key = key.getNext()) {
        String var = key.getString();
        Node value = key.removeFirstChild();
        // TODO(user): Copy type information.
        nodes.add(
          new Node(Token.ASSIGN,
                   Node.newString(Token.NAME, varmap.get(var)), value));
        all.remove(var);
      }

      // TODO(user): Better source information.
      for (String var : all) {
        nodes.add(
          new Node(Token.ASSIGN,
                   Node.newString(Token.NAME, varmap.get(var)),
                   NodeUtil.newUndefinedNode(null)));
      }

      Node replacement;
      // If this is a var declaration, we don't need a BLOCK node.
      if (ref.getParent().getType() == Token.VAR) {
        replacement = null;
      } else {
        replacement = new Node(Token.BLOCK);
      }

      // TODO(user): Copy source information
      for (Node n : nodes) {
        if (replacement != null) {
          replacement.addChildToBack(n);
        }
        ref.getParent().getParent().addChildBefore(n, ref.getParent());
      }

      if (replacement != null) {
        // All assignments evaluate to true, so make sure that the
        // expr statement evaluates to true in case it matters.
        replacement.addChildToBack(new Node(Token.TRUE));
      }

      Node replace = ref.getParent();
      if (replacement != null) {
        replacement.copyInformationFromForTree(replace);
      }

      if (replace.getType() == Token.VAR) {
        replace.getParent().replaceChild(
            replace, NodeUtil.newExpr(replacement));
      } else {
        // Assignments are evaluated before they are executed, so
        // the assignment expression itself should evaluate to the value
        // assigned.
        replace.getParent().replaceChild(replace,
            replacement != null ? replacement : nodes.get(nodes.size() - 1));
      }
    }
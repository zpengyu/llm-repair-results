abstract class CodeConsumer {
  /**
   * @return Whether the a line break can be added after the specified BLOCK.
   */
  boolean breakAfterBlockFor(Node n, boolean statementContext) {
    return statementContext;
  }
  /**
   * Indicates the end of a statement and a ';' may need to be added.
   * But we don't add it now, in case we're at the end of a block (in which
   * case we don't have to add the ';').
   * See maybeEndStatement()
   */
  void endStatement() {
    endStatement(false);
  }
  void endStatement(boolean needSemiColon) {
  }
  /**
   * This is to be called when we're in a statement. If the prev statement
   * needs to be ended, add a ';'.
   */
  void maybeEndStatement() {
  }
  void endFunction() {
    endFunction(false);
  }
  void endFunction(boolean statementContext) {
  }
  void beginCaseBody() {
  }
  void endCaseBody() {
  }
  void add(String newcode) {
  }
  void appendOp(String op, boolean binOp) {
  }
  void addOp(String op, boolean binOp) {
  }
  void addNumber(double x) {
  }
  /**
   * If the body of a for loop or the then clause of an if statement has
   * a single statement, should it be wrapped in a block?  Doing so can
   * help when pretty-printing the code, and permits putting a debugging
   * breakpoint on the statement inside the condition.
   *
   * @return {@boolean true} if such expressions should be wrapped
   */
  boolean shouldPreserveExtraBlocks() {
    return false;
  }
  /**
   * Starts the source mapping for the given
   * node at the current position.
   */
  void startSourceMapping(Node node) {
  }
  /**
   * Finishes the source mapping for the given
   * node at the current position.
   */
  void endSourceMapping(Node node) {
  }
  /**
   * Provides a means of interrupting the CodeGenerator. Derived classes should
   * return false to stop further processing.
   */
  boolean continueProcessing() {
    return true;
  }
  /**
   * Retrieve the last character of the last string sent to append.
   */
  abstract char getLastChar();
  void addIdentifier(String identifier) {
    add(identifier);
  }
  /**
   * Appends a string to the code, keeping track of the current line length.
   *
   * NOTE: the string must be a complete token--partial strings or
   * partial regexes will run the risk of being split across lines.
   *
   * Do not directly append newlines with this method. Instead use
   * {@link #startNewLine}.
   */
  abstract void append(String str);
  void appendBlockStart() {
    append("{");
  }
  void appendBlockEnd() {
    append("}");
  }
  void startNewLine() {
  }
  void maybeLineBreak() {
  }
  void maybeCutLine() {
  }
  void endLine() {
  }
  void notePreferredLineBreak() {
  }
  void beginBlock() {
  }
  void endBlock() {
  }
  void endBlock(boolean shouldEndLine) {
  }
  void listSeparator() {
  }
  static boolean isWordChar(char ch) {
    return (ch == '_' ||
            ch == '$' ||
            Character.isLetterOrDigit(ch));
  }
  /** Called when we're at the end of a file. */
  void endFile() {}
}
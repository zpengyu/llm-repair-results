diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java
index c63fbf6d..0a3ea635 100644
--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java
+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java
@@ -414,7 +414,7 @@ public class ExtendedMessageFormat extends MessageFormat {
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
+private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
@@ -424,8 +424,7 @@ public class ExtendedMessageFormat extends MessageFormat {
         int lastHold = start;
         for (int i = pos.getIndex(); i < pattern.length(); i++) {
             if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
+                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);
                 pos.setIndex(i + ESCAPED_QUOTE.length());
                 lastHold = pos.getIndex();
                 continue;
@@ -433,16 +432,13 @@ public class ExtendedMessageFormat extends MessageFormat {
             switch (c[pos.getIndex()]) {
             case QUOTE:
                 next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
+                return appendTo == null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold);
             default:
                 next(pos);
             }
         }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+        throw new IllegalArgumentException("Unterminated quoted string at position " + start);
     }
-
     /**
      * Consume quoted string only
      * 

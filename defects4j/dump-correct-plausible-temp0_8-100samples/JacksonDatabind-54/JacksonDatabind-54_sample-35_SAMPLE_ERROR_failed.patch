diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
index 9a9d91ebf..06591b414 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
@@ -73,7 +73,38 @@ public class PropertyBuilder
     {
         // do we have annotation that forces type to use (to declared type or its super type)?
         JavaType serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);
-
+        if (serializationType != null && serializationType.isContainerType()) {
+            JavaType keyType = serializationType.getKeyType();
+            if (keyType != null) { // should never be null, but...
+                Object kd = _annotationIntrospector.findKeySerializer(am);
+                if (kd != null) {
+                    JsonSerializer<?> keySer = prov.serializerInstance(am, kd);
+                    serializationType = ((ContainerType)serializationType).withKeyValueHandler(keySer);
+                    keyType = serializationType.getKeyType(); // just in case type changed
+                }
+                // also, key type may have more specific deserializer to consider
+                Object kdDef = keyType.getValueHandler();
+                if (kdDef != null) {
+                    JsonSerializer<?> keySer = prov.serializerInstance(am, kdDef);
+                    serializationType = ((ContainerType)serializationType).withKeyValueHandler(keySer);
+                }
+            }
+            JavaType ct = serializationType.getContentType();
+            if (ct != null) { // should never be null, but...
+                Object cd = _annotationIntrospector.findContentSerializer(am);
+                if (cd != null) {
+                    JsonSerializer<?> contentSer = prov.serializerInstance(am, cd);
+                    serializationType = serializationType.withContentValueHandler(contentSer);
+                    ct = serializationType.getContentType(); // just in case type changed
+                }
+                // also, key type may have more specific deserializer to consider
+                Object cdDef = ct.getValueHandler();
+                if (cdDef != null) {
+                    JsonSerializer<?> contentSer = prov.serializerInstance(am, cdDef);
+                    serializationType = serializationType.withContentValueHandler(contentSer);
+                }
+            }
+        }
         // Container types can have separate type serializers for content (value / element) type
         if (contentTypeSer != null) {
             /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is

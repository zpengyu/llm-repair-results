diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
index 9a9d91ebf..b8f7bb634 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
@@ -65,7 +65,7 @@ public class PropertyBuilder
      *    of container type)
      */
     @SuppressWarnings("deprecation")
-    protected BeanPropertyWriter buildWriter(SerializerProvider prov,
+	protected BeanPropertyWriter buildWriter(SerializerProvider prov,
             BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,
             TypeSerializer typeSer, TypeSerializer contentTypeSer,
             AnnotatedMember am, boolean defaultUseStaticTyping)
@@ -93,19 +92,15 @@ public class PropertyBuilder
             serializationType = serializationType.withContentTypeHandler(contentTypeSer);
             ct = serializationType.getContentType();
         }
-        
-        Object valueToSuppress = null;
-        boolean suppressNulls = false;
-
+        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement
+        JavaType actualType = (serializationType == null) ? declaredType : serializationType;
+        // If non-null, will need to suppress certain values
         JsonInclude.Value inclV = _defaultInclusion.withOverrides(propDef.findInclusion());
         JsonInclude.Include inclusion = inclV.getValueInclusion();
         if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...
             inclusion = JsonInclude.Include.ALWAYS;
         }
-
-        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement
-        JavaType actualType = (serializationType == null) ? declaredType : serializationType;
-        
+        Object suppressableValue;
         switch (inclusion) {
         case NON_DEFAULT:
             // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,
@@ -114,49 +109,42 @@ public class PropertyBuilder
             //    static definition. Sigh.
             // First: case of class specifying it; try to find POJO property defaults
             if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT) {
-                valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);
+                suppressableValue = getPropertyDefaultValue(propDef.getName(), am, actualType);
             } else {
-                valueToSuppress = getDefaultValue(actualType);
+                suppressableValue = getDefaultValue(actualType);
             }
-            if (valueToSuppress == null) {
-                suppressNulls = true;
-            } else {
-                if (valueToSuppress.getClass().isArray()) {
-                    valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);
-                }
+            // 03-Nov-2015, tatu: Should not need this, but just to be sure, let's
+            //    retain check
+            if (suppressableValue == null) {
+                suppressableValue = JsonInclude.Include.NON_NULL;
+            } else if (suppressableValue.getClass().isArray()) {
+                suppressableValue = ArrayBuilders.getArrayComparator(suppressableValue);
             }
-
             break;
         case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals
-            // always suppress nulls
-            suppressNulls = true;
-            // and for referential types, also "empty", which in their case means "absent"
-            if (declaredType.isReferenceType()) {
-                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
-            }
+            suppressableValue = JsonInclude.Include.NON_EMPTY;
             break;
         case NON_EMPTY:
-            // always suppress nulls
-            suppressNulls = true;
-            // but possibly also 'empty' values:
-            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
+            suppressableValue = JsonInclude.Include.NON_EMPTY;
             break;
         case NON_NULL:
-            suppressNulls = true;
-            // fall through
+            suppressableValue = JsonInclude.Include.NON_NULL;
+            break;
         case ALWAYS: // default
         default:
             // we may still want to suppress empty collections, as per [JACKSON-254]:
             if (declaredType.isContainerType()
                     && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {
-                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
+                suppressableValue = BeanPropertyWriter.MARKER_FOR_EMPTY;
+            } else {
+                suppressableValue = null;
             }
             break;
         }
         BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,
                 am, _beanDesc.getClassAnnotations(), declaredType,
-                ser, typeSer, serializationType, suppressNulls, valueToSuppress);
-
+                ser, typeSer, serializationType,
+                suppressableValue);
         // How about custom null serializer?
         Object serDef = _annotationIntrospector.findNullSerializer(am);
         if (serDef != null) {

diff --git a/src/org/mockito/internal/MockHandler.java b/src/org/mockito/internal/MockHandler.java
index 9452f1664..5a5b1e763 100644
--- a/src/org/mockito/internal/MockHandler.java
+++ b/src/org/mockito/internal/MockHandler.java
@@ -64,17 +64,39 @@ public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInte
             return null;
         }
         VerificationMode verificationMode = mockingProgress.pullVerificationMode();
-
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
                         invocation);
-
         mockingProgress.validateState();
-
-        //if verificationMode is not null then someone is doing verify()        
         if (verificationMode != null) {
-            //We need to check if verification was started on the correct mock 
-            // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
             if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+                //todo see if we can remove this and make thenReturn etc work anyway
+                throw new MockitoException("Cannot do this stubbing with verification");
+            }
+            if (verificationMode instanceof MockAwareVerificationMode) {
+                // this means there is an invocation on a different mock. Re-adding verification mode 
+                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+                mockingProgress.verificationStarted(verificationMode);
+            }
+        }
+        invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
+        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
+        mockingProgress.reportOngoingStubbing(ongoingStubbing);
+        StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
+        if (stubbedInvocation != null) {
+            stubbedInvocation.captureArgumentsFrom(invocation);
+            return stubbedInvocation.answer(invocation);
+        } else {
+            Object ret = mockSettings.getDefaultAnswer().answer(invocation);
+            // redo setting invocation for potential stubbing in case of partial
+            // mocks / spies.
+            // Without it, the real method inside 'when' might have delegated
+            // to other self method and overwrite the intended stubbed method
+            // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
+            invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
+            return ret;
+        }
+    }
+	if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
                 verificationMode.verify(data);
                 return null;

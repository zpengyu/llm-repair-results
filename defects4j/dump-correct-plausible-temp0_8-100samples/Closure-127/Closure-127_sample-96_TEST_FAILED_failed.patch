diff --git a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
index 3b323395..4392e033 100644
--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
@@ -101,7 +100,9 @@ class UnreachableCodeElimination implements CompilerPass {
       }
       if (gNode.getAnnotation() != GraphReachability.REACHABLE ||
           (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n, compiler))) {
-        removeDeadExprStatementSafely(n);
+        if (n.isExprResult()) {
+          removeDeadExprStatementSafely(n);
+        }
         return;
       }
       tryRemoveUnconditionalBranching(n);
@@ -136,14 +136,11 @@ class UnreachableCodeElimination implements CompilerPass {
        * if-else conversion but it handles more complicated switch statements
        * much more nicely.
        */
-
       // If n is null the target is the end of the function, nothing to do.
       if (n == null) {
-         return;
+        return;
       }
-
       DiGraphNode<Node, Branch> gNode = cfg.getDirectedGraphNode(n);
-
       if (gNode == null) {
         return;
       }
@@ -246,5 +231,4 @@ class UnreachableCodeElimination implements CompilerPass {
       }
       NodeUtil.removeChild(n.getParent(), n);
     }
-  }
-}
+  }}

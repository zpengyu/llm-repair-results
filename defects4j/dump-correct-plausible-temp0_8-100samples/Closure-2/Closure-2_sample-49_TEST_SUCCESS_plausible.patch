diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 3749839a..bc13707c 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1563,15 +1563,14 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
-      String functionName, HashMap<String, ObjectType> properties,
-      HashMap<String, ObjectType> currentProperties,
-      ObjectType interfaceType) {
-    ObjectType implicitProto = interfaceType.getImplicitPrototype();
+private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
+    String functionName, HashMap<String, ObjectType> properties,
+    HashMap<String, ObjectType> currentProperties,
+    ObjectType interfaceType) {
+  ObjectType implicitProto = interfaceType.getImplicitPrototype();
+  if (implicitProto != null) {
     Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+    currentPropertyNames = implicitProto.getOwnPropertyNames();
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
@@ -1585,12 +1584,12 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       }
       currentProperties.put(name, interfaceType);
     }
-    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
-      checkInterfaceConflictProperties(t, n, functionName, properties,
-          currentProperties, iType);
-    }
   }
-
+  for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+    checkInterfaceConflictProperties(t, n, functionName, properties,
+        currentProperties, iType);
+  }
+}
   /**
    * Visits a {@link Token#FUNCTION} node.
    *

diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 3749839a..31745e3c 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1563,16 +1563,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
-      String functionName, HashMap<String, ObjectType> properties,
-      HashMap<String, ObjectType> currentProperties,
-      ObjectType interfaceType) {
-    ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
-    for (String name : currentPropertyNames) {
+private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
+    String functionName, HashMap<String, ObjectType> properties,
+    HashMap<String, ObjectType> currentProperties,
+    ObjectType interfaceType) {
+  ObjectType implicitProto = interfaceType.getImplicitPrototype();
+  if (implicitProto != null) {
+    for (String name : implicitProto.getOwnPropertyNames()) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
         if (!interfaceType.getPropertyType(name).isEquivalentTo(
@@ -1590,7 +1587,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
           currentProperties, iType);
     }
   }
-
+}
   /**
    * Visits a {@link Token#FUNCTION} node.
    *

diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
index 2a40620..92c8dd1 100644
--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
@@ -53,30 +53,33 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
 
     protected abstract boolean evaluateCompare(int compare);
 
-    private boolean compute(Object left, Object right) {
-        left = reduce(left);
-        right = reduce(right);
-
-        if (left instanceof InitialContext) {
-            ((InitialContext) left).reset();
-        }
-        if (right instanceof InitialContext) {
-            ((InitialContext) right).reset();
-        }
-        if (left instanceof Iterator && right instanceof Iterator) {
-            return findMatch((Iterator) left, (Iterator) right);
-        }
-        if (left instanceof Iterator) {
-            return containsMatch((Iterator) left, right);
-        }
-        if (right instanceof Iterator) {
-            return containsMatch((Iterator) right, left);
-        }
-        double ld = InfoSetUtil.doubleValue(left);
-        double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+private boolean compute(Object left, Object right) {
+    left = reduce(left);
+    right = reduce(right);
+    if (left instanceof InitialContext) {
+        ((InitialContext) left).reset();
     }
-
+    if (right instanceof InitialContext) {
+        ((InitialContext) right).reset();
+    }
+    if (left instanceof Iterator && right instanceof Iterator) {
+        return findMatch((Iterator) left, (Iterator) right);
+    }
+    if (left instanceof Iterator) {
+        return containsMatch((Iterator) left, right);
+    }
+    if (right instanceof Iterator) {
+        return containsMatch((Iterator) right, left);
+    }
+    if (left instanceof Long && right instanceof Long) {
+        long ll = (Long) left;
+        long rl = (Long) right;
+        return evaluateCompare(ll == rl ? 0 : ll < rl ? -1 : 1);
+    }
+    double ld = InfoSetUtil.doubleValue(left);
+    double rd = InfoSetUtil.doubleValue(right);
+    return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+}
     private Object reduce(Object o) {
         if (o instanceof SelfContext) {
             o = ((EvalContext) o).getSingleNodePointer();

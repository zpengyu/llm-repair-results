    int readEscape() throws IOException {
        // the escape char has just been read (normally a backslash)
        final int c = in.read();
        switch (c) {
        case 'r':
            return CR;
        case 'n':
            return LF;
        case 't':
            return TAB;
        case 'b':
            return BACKSPACE;
        case 'f':
            return FF;
        case CR:
        case LF:
        case FF: // TODO is this correct?
        case TAB: // TODO is this correct? Do tabs need to be escaped?
        case BACKSPACE: // TODO is this correct?
            return c;
        case END_OF_STREAM:
            throw new IOException("EOF whilst processing escape sequence");
        default:
            // Now check for meta-characters
            if (c == 'u') {
                // we've found a unicode character, so grab the next 4 digits
                // and convert to an int
                int i = 0;
                for (int j = 0; j < 4; ++j) {
                    final int d = in.read();
                    if (d < '0' || d > '9') {
                        throw new IOException("Invalid unicode escape sequence");
                    }
                    i = i * 16 + (d - '0');
                }
                return i;
            } else {
                // handle octal escapes
                final int n = nextNonDigit(c);
                if (n == c) {
                    return c;
                } else {
                    int i = (n - '0');
                    while (true) {
                        final int d = in.read();
                        if (d < '0' || d > '7') {
                            break;
                        }
                        i = (i * 8) + (d - '0');
                    }
                    return i;
                }
            }
        }
    }

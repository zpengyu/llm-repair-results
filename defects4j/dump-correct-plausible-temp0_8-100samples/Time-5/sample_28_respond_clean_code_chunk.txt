    public Period normalizedStandard(PeriodType type) {
        type = DateTimeUtils.getPeriodType(type);
        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
        int seconds = getSeconds();
        int minutes = getMinutes();
        int hours = getHours();
        int days = getDays();
        int weeks = getWeeks();
        int months = getMonths();
        int years = getYears();
        int normWeeks = weeks + (months * 4);  // roughly
        years += months / 12;
        months %= 12;
        normWeeks += years * 52;
        // this is now roughly the number of weeks since millis epoch
        // make a rough guess at the millis for the weeks since epoch
        long guess = (normWeeks * DateTimeConstants.MILLIS_PER_WEEK);
        // adjust by the number of seconds, minutes, hours
        guess += (((long) hours) * DateTimeConstants.MILLIS_PER_HOUR) +
                (((long) minutes) * DateTimeConstants.MILLIS_PER_MINUTE) +
                (((long) seconds) * DateTimeConstants.MILLIS_PER_SECOND);
        // adjust by number of days
        guess += (days * DateTimeConstants.MILLIS_PER_DAY);
        // add millis
        guess += millis;
        // make a joda time instant
        Instant instant = new Instant(guess);
        // get the right chronology
        ISOChronology chrono = (ISOChronology) instant.getChronology();
        // build up the result
        Period result = new Period(guess, type, chrono);
        if (years != 0) {
            result = result.withYears(years);
        }
        if (months != 0) {
            result = result.withMonths(months);
        }
        return result;
    }
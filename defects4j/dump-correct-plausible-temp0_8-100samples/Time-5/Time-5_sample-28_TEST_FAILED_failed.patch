diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java
index 8fce39c6..5f2b806a 100644
--- a/src/main/java/org/joda/time/Period.java
+++ b/src/main/java/org/joda/time/Period.java
@@ -1616,23 +1616,39 @@ public final class Period
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
         long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
+        int seconds = getSeconds();
+        int minutes = getMinutes();
+        int hours = getHours();
+        int days = getDays();
+        int weeks = getWeeks();
         int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
-            }
-            if (months != 0) {
-                result = result.withMonths(months);
-            }
+        int years = getYears();
+        int normWeeks = weeks + (months * 4);  // roughly
+        years += months / 12;
+        months %= 12;
+        normWeeks += years * 52;
+        // this is now roughly the number of weeks since millis epoch
+        // make a rough guess at the millis for the weeks since epoch
+        long guess = (normWeeks * DateTimeConstants.MILLIS_PER_WEEK);
+        // adjust by the number of seconds, minutes, hours
+        guess += (((long) hours) * DateTimeConstants.MILLIS_PER_HOUR) +
+                (((long) minutes) * DateTimeConstants.MILLIS_PER_MINUTE) +
+                (((long) seconds) * DateTimeConstants.MILLIS_PER_SECOND);
+        // adjust by number of days
+        guess += (days * DateTimeConstants.MILLIS_PER_DAY);
+        // add millis
+        guess += millis;
+        // make a joda time instant
+        Instant instant = new Instant(guess);
+        // get the right chronology
+        ISOChronology chrono = (ISOChronology) instant.getChronology();
+        // build up the result
+        Period result = new Period(guess, type, chrono);
+        if (years != 0) {
+            result = result.withYears(years);
+        }
+        if (months != 0) {
+            result = result.withMonths(months);
         }
         return result;
     }

diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
index 773d1fbd8..1748fdac2 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
@@ -49,35 +44,16 @@ public final class StringArrayDeserializer
         if (_elementDeserializer != null) {
             return _deserializeCustom(jp, ctxt);
         }
-
-        final ObjectBuffer buffer = ctxt.leaseObjectBuffer();
-        Object[] chunk = buffer.resetAndStart();
-
-        int ix = 0;
-        JsonToken t;
-
-            while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {
-                // Ok: no need to convert Strings, but must recognize nulls
-                String value;
-                if (t == JsonToken.VALUE_STRING) {
-                    value = jp.getText();
-                } else if (t == JsonToken.VALUE_NULL) {
-                    value = null; // since we have established that '_elementDeserializer == null' earlier
-                } else {
-                    value = _parseString(jp, ctxt);
-                }
-                if (ix >= chunk.length) {
-                    chunk = buffer.appendCompletedChunk(chunk);
-                    ix = 0;
-                }
-                chunk[ix++] = value;
+        ArrayList<String> l = new ArrayList<String>();
+        while (jp.nextToken() != JsonToken.END_ARRAY) {
+            String value = _parseString(jp, ctxt);
+            if (value == null) {
+                throw new NullPointerException("Input value is null");
             }
-            // note: pass String.class, not String[].class, as we need element type for error info
-        String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);
-        ctxt.returnObjectBuffer(buffer);
-        return result;
+            l.add(value);
+        }
+        return l.toArray(new String[l.size()]);
     }
-
     /**
      * Offlined version used when we do not use the default deserialization method.
      */

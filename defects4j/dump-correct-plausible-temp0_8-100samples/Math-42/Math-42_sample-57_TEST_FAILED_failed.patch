diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
index 3c21cb52c..058478047 100644
--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
@@ -397,29 +397,19 @@ class SimplexTableau implements Serializable {
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
       Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
-
+      int numDecisionVariables = getOriginalNumDecisionVariables();
       Set<Integer> basicRows = new HashSet<Integer>();
-      double[] coefficients = new double[getOriginalNumDecisionVariables()];
+      double[] coefficients = new double[numDecisionVariables];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
-          if (colIndex < 0) {
-            coefficients[i] = 0;
-            continue;
-          }
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
+          double solution = 0.0;
+          if (colIndex > -1) {
               // if multiple variables can take a given value
               // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
-          } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+              solution = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
           }
+          coefficients[i] = solution - (restrictToNonNegative ? 0 : mostNegative);
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }

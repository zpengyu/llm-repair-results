    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
        long    result = 0;
        boolean stillPadding = true;
        int     end = offset + length;
        int     start = offset;

        for (int i = start; i < end; i++){
            final byte currentByte = buffer[i];
            if (currentByte == 0) {
                break;
            }

        // Skip leading spaces
            if (currentByte == (byte) ' ' || currentByte == '0') {
                if (stillPadding) {
                   continue;
            }
                if (currentByte == (byte) ' ') {
                break;
                }
            }

        // Must have trailing NUL or space
        // May have additional NUL or space

            stillPadding = false;
            // CheckStyle:MagicNumber OFF
            if (currentByte < '0' || currentByte > '7'){
                throw new IllegalArgumentException(
                        exceptionMessage(buffer, offset, length, start, currentByte));
            }
            result = (result << 3) + (currentByte - '0'); // convert from ASCII
            // CheckStyle:MagicNumber ON
        }

        return result;
    }

    /**
     * Creates an error message indicating the illegal byte and its
     * position.
     *
     * @param buffer the byte array
     * @param offset the start offset in the buffer
     * @param length the number of bytes in the buffer to use
     * @param start the first byte of the sequence
     * @param current the current byte being parsed
     * @return the exception message
     */
    private static String exceptionMessage(final byte[] buffer, final int offset,
            final int length, final int start, final byte current) {
        final StringBuilder sb = new StringBuilder();
        sb.append("Failed to parse octal number: ");
        for (int i = 0; i < length; i++) {
            final byte b = buffer[offset + i];
            if (b == 0) {
                break;
            }
            sb.append((char) b);
        }
        sb.append(" at index ");
        sb.append(start);
        sb.append(" (decimal ");
        sb.append(current);
        sb.append(')');
        return sb.toString();
    }

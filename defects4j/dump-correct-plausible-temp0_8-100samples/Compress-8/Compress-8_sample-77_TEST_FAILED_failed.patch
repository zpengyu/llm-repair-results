diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
index cfa8f73c..dc91bafe 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
@@ -48,44 +48,39 @@ public class TarUtils {
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
-    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
+public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    long value = 0;
+    boolean stillPadding = true;
+    int end = offset + length;
+    int start = offset;
+    for (int i = start; i < end; i++) {
+        final byte currentByte = buffer[i];
+        if (currentByte == 0) {
+            break;
+        }
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+        if (currentByte == (byte) ' ' || currentByte == '0') {
+            if (stillPadding) {
+                continue;
             }
-                if (currentByte == (byte) ' ') {
+            if (currentByte == (byte) ' ') {
                 break;
-                }
             }
-
-        // Must have trailing NUL or space
+        }
         // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        if (currentByte == (byte) ' ' || currentByte == 0) {
+            break;
         }
-
-        return result;
+        stillPadding = false;
+        // CheckStyle:MagicNumber OFF
+        if (currentByte < '0' || currentByte > '7') {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
+        }
+        value = (value << 3) + (currentByte - '0'); // convert from ASCII
+        // CheckStyle:MagicNumber ON
     }
-
+    return value;
+}
     // Helper method to generate the exception message
     private static String exceptionMessage(byte[] buffer, final int offset,
             final int length, int current, final byte currentByte) {

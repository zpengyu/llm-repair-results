diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
index 19d68e84..3ace5a6d 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
@@ -99,59 +99,45 @@ public class TarUtils {
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
-    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
-
-        if (length < 2){
-            throw new IllegalArgumentException("Length "+length+" must be at least 2");
-        }
-
-        if (buffer[start] == 0) {
-            return 0L;
-        }
-
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
-            } else {
-                break;
-            }
-        }
-
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
-        }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
-        }
-
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
-        }
-
-        return result;
+  public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    long result = 0;
+    int end = offset + length;
+    int start = offset;
+    if (length < 2) {
+      throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
-
+    if (buffer[start] == ' ' || buffer[start] == 0) {
+      return 0;
+    }
+    // Skip leading spaces
+    while (start < end) {
+      if (buffer[start] == ' ') {
+        start++;
+      } else {
+        break;
+      }
+    }
+    // Trim all trailing NULs and spaces.
+    // The ustar and POSIX tar specs require a trailing NUL or
+    // space but some implementations use the extra digit for big
+    // sizes/uids/gids ...
+    byte trailer = buffer[end - 1];
+    while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
+      end--;
+      trailer = buffer[end - 1];
+    }
+    for (; start < end; start++) {
+      final byte currentByte = buffer[start];
+      // CheckStyle:MagicNumber OFF
+      if (currentByte < '0' || currentByte > '7') {
+        throw new IllegalArgumentException(
+            exceptionMessage(buffer, offset, length, start, currentByte));
+      }
+      result = (result << 3) + (currentByte - '0'); // convert from ASCII
+      // CheckStyle:MagicNumber ON
+    }
+    return result;
+  }
     /** 
      * Compute the value contained in a byte buffer.  If the most
      * significant bit of the first byte in the buffer is set, this

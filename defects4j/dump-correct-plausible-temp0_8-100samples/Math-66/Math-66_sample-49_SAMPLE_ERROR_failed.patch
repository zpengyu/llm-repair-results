diff --git a/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java
index f07c1b0c3..3ca7ece3d 100644
--- a/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java
@@ -31,215 +31,71 @@ import org.apache.commons.math.optimization.GoalType;
  * @version $Revision$ $Date$
  * @since 2.0
  */
-public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
-    /**
-     * Golden section.
-     */
-    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));
-
+import org.apache.commons.math3.analysis.UnivariateFunction;
+import org.apache.commons.math3.analysis.function.Identity;
+import org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver;
+import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
+import org.apache.commons.math3.exception.TooManyEvaluationsException;
+public class BrentOptimizer extends AbstractUnivariateOptimizer {
+    /** Default absolute accuracy. */
+    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
+    /** Solver absolute accuracy. */
+    private final double absoluteAccuracy;
     /**
      * Construct a solver.
      */
     public BrentOptimizer() {
-        setMaxEvaluations(Integer.MAX_VALUE);
-        setMaximalIterationCount(100);
-        setAbsoluteAccuracy(1E-10);
-        setRelativeAccuracy(1.0e-14);
+        this(DEFAULT_ABSOLUTE_ACCURACY);
     }
-
     /**
-     * Perform the optimization.
+     * Construct a solver.
      *
-     * @return the optimum.
+     * @param absoluteAccuracy Maximum absolute error.
      */
-    protected double doOptimize()
-        throws MaxIterationsExceededException, FunctionEvaluationException {
-        throw new UnsupportedOperationException();
-    }
-    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException {
-        clearResult();
-        return localMin(getGoalType() == GoalType.MINIMIZE,
-                        f, goalType, min, startValue, max,
-                        getRelativeAccuracy(), getAbsoluteAccuracy());
-    }
-    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max) throws MaxIterationsExceededException, FunctionEvaluationException {
-        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));
+    public BrentOptimizer(final double absoluteAccuracy) {
+        this.absoluteAccuracy = absoluteAccuracy;
     }
-
     /**
-     * Find the minimum of the function within the interval {@code (lo, hi)}.
+     * Get the absolute accuracy.
      *
-     * If the function is defined on the interval {@code (lo, hi)}, then
-     * this method finds an approximation {@code x} to the point at which
-     * the function attains its minimum.<br/>
-     * {@code t} and {@code eps} define a tolerance {@code tol = eps |x| + t}
-     * and the function is never evaluated at two points closer together than
-     * {@code tol}. {@code eps} should be no smaller than <em>2 macheps</em> and
-     * preferable not much less than <em>sqrt(macheps)</em>, where
-     * <em>macheps</em> is the relative machine precision. {@code t} should be
-     * positive.
-     * @param isMinim {@code true} when minimizing the function.
-     * @param lo Lower bound of the interval.
-     * @param mid Point inside the interval {@code [lo, hi]}.
-     * @param hi Higher bound of the interval.
-     * @param eps Relative accuracy.
-     * @param t Absolute accuracy.
-     * @return the optimum point.
-     * @throws MaxIterationsExceededException if the maximum iteration count
-     * is exceeded.
-     * @throws FunctionEvaluationException if an error occurs evaluating
-     * the function.
+     * @return the accuracy.
      */
-    private double localMin(boolean isMinim,
-                            UnivariateRealFunction f,
-                            GoalType goalType,
-                            double lo, double mid, double hi,
-                            double eps, double t)
-        throws MaxIterationsExceededException, FunctionEvaluationException {
-        if (eps <= 0) {
-            throw new NotStrictlyPositiveException(eps);
-        }
-        if (t <= 0) {
-            throw new NotStrictlyPositiveException(t);
-        }
-        double a, b;
-        if (lo < hi) {
-            a = lo;
-            b = hi;
-        } else {
-            a = hi;
-            b = lo;
-        }
-
-        double x = mid;
-        double v = x;
-        double w = x;
-        double d = 0;
-        double e = 0;
-        double fx = computeObjectiveValue(f, x);
-        if (goalType == GoalType.MAXIMIZE) {
-            fx = -fx;
-        }
-        double fv = fx;
-        double fw = fx;
-
-        int count = 0;
-        while (count < maximalIterationCount) {
-            double m = 0.5 * (a + b);
-            final double tol1 = eps * Math.abs(x) + t;
-            final double tol2 = 2 * tol1;
-
-            // Check stopping criterion.
-            if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {
-                double p = 0;
-                double q = 0;
-                double r = 0;
-                double u = 0;
-
-                if (Math.abs(e) > tol1) { // Fit parabola.
-                    r = (x - w) * (fx - fv);
-                    q = (x - v) * (fx - fw);
-                    p = (x - v) * q - (x - w) * r;
-                    q = 2 * (q - r);
-
-                    if (q > 0) {
-                        p = -p;
-                    } else {
-                        q = -q;
-                    }
-
-                    r = e;
-                    e = d;
-
-                    if (p > q * (a - x)
-                        && p < q * (b - x)
-                        && Math.abs(p) < Math.abs(0.5 * q * r)) {
-                        // Parabolic interpolation step.
-                        d = p / q;
-                        u = x + d;
-
-                        // f must not be evaluated too close to a or b.
-                        if (u - a < tol2
-                            || b - u < tol2) {
-                            if (x <= m) {
-                                d = tol1;
-                            } else {
-                                d = -tol1;
-                            }
-                        }
-                    } else {
-                        // Golden section step.
-                        if (x < m) {
-                            e = b - x;
-                        } else {
-                            e = a - x;
-                        }
-                        d = GOLDEN_SECTION * e;
-                    }
-                } else {
-                    // Golden section step.
-                    if (x < m) {
-                        e = b - x;
-                    } else {
-                        e = a - x;
-                    }
-                    d = GOLDEN_SECTION * e;
-                }
-
-                // Update by at least "tol1".
-                if (Math.abs(d) < tol1) {
-                    if (d >= 0) {
-                        u = x + tol1;
-                    } else {
-                        u = x - tol1;
-                    }
-                } else {
-                    u = x + d;
-                }
-
-                double fu = computeObjectiveValue(f, u);
-                if (goalType == GoalType.MAXIMIZE) {
-                    fu = -fu;
-                }
-
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
-                    if (u < x) {
-                        b = x;
-                    } else {
-                        a = x;
-                    }
-                    v = w;
-                    fv = fw;
-                    w = x;
-                    fw = fx;
-                    x = u;
-                    fx = fu;
-                } else {
-                    if (u < x) {
-                        a = u;
-                    } else {
-                        b = u;
-                    }
-                    if (fu <= fw
-                        || w == x) {
-                        v = w;
-                        fv = fw;
-                        w = u;
-                        fw = fu;
-                    } else if (fu <= fv
-                               || v == x
-                               || v == w) {
-                        v = u;
-                        fv = fu;
-                    }
-                }
-            } else { // termination
-                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);
-                return x;
+    public double getAbsoluteAccuracy() {
+        return absoluteAccuracy;
+    }
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    protected double doOptimize()
+        throws TooManyEvaluationsException,
+               org.apache.commons.math3.exception.NumberIsTooLargeException {
+        final double min = getMin();
+        final double max = getMax();
+        final double initial = getStartValue();
+        final double functionValueAccuracy = getFunctionValueAccuracy();
+        verifySequence(min, initial, max);
+        final UnivariateFunction func = new UnivariateFunction() {
+            public double value(double x) {
+                incrementEvaluationCount();
+                return computeObjectiveValue(x);
             }
-            ++count;
+        };
+        BracketedUnivariateSolver<UnivariateFunction> bracketing =
+            new BracketingNthOrderBrentSolver(getRelativeAccuracy(),
+                                              getAbsoluteAccuracy(),
+                                              getFunctionValueAccuracy());
+        final double x;
+        if (initial < min || initial > max) {
+            // find an initial bracketing
+            final double[] bracket = bracketing.bracket(func, initial, min, max);
+            x = bracketing.solve(getMaxEvaluations(), func, bracket[0], bracket[1], bracket[2]);
+        } else {
+            // use the specified interval and initial value
+            UnivariateSolver solver = new BrentSolver(functionValueAccuracy);
+            x = solver.solve(getMaxEvaluations(), func, min, max, initial);
         }
-        throw new MaxIterationsExceededException(maximalIterationCount);
+        setResult(x, computeObjectiveValue(x));
+        return x;
     }
 }
\ No newline at end of file

diff --git a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java b/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
index cd5c2f6c..30726f1c 100644
--- a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
+++ b/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
@@ -162,15 +162,20 @@ public final class ConstructorConstructor {
             return (T) new LinkedList<Object>();
           }
         };
-      } else {
+      } else if (ArrayList.class.isAssignableFrom(rawType)) {
         return new ObjectConstructor<T>() {
           @Override public T construct() {
             return (T) new ArrayList<Object>();
           }
         };
+      } else {
+        return new ObjectConstructor<T>() {
+          @Override public T construct() {
+            return (T) new LinkedList<Object>();
+          }
+        };
       }
     }
-
     if (Map.class.isAssignableFrom(rawType)) {
       if (SortedMap.class.isAssignableFrom(rawType)) {
         return new ObjectConstructor<T>() {
@@ -185,6 +190,24 @@ public final class ConstructorConstructor {
             return (T) new LinkedHashMap<Object, Object>();
           }
         };
+      } else if (LinkedHashMap.class.isAssignableFrom(rawType)) {
+        return new ObjectConstructor<T>() {
+          @Override public T construct() {
+            return (T) new LinkedHashMap<Object, Object>();
+          }
+        };
+      } else if (HashMap.class.isAssignableFrom(rawType)) {
+        return new ObjectConstructor<T>() {
+          @Override public T construct() {
+            return (T) new HashMap<Object, Object>();
+          }
+        };
+      } else if (TreeMap.class.isAssignableFrom(rawType)) {
+        return new ObjectConstructor<T>() {
+          @Override public T construct() {
+            return (T) new TreeMap<Object, Object>();
+          }
+        };
       } else {
         return new ObjectConstructor<T>() {
           @Override public T construct() {

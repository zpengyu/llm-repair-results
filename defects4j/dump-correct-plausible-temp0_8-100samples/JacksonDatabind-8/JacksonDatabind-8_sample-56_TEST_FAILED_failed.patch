diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
index fd590d628..6fa30db37 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
@@ -280,26 +280,34 @@ public class CreatorCollector
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
-                    return;
-                }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
             // one more thing: ok to override in sub-class
             if (oldOne.getClass() == newOne.getClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
-
+                if (((_explicitCreators & mask) == 0) || explicit) {
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                            +" creators: already had "+oldOne+", encountered "+newOne);
+                }
+            } else {
+                /* 03-Jul-2011, tatu: One more twist: since we now allow "mix-in annotations"
+                 *   (or, definitions of annotations to add), it's possible that we have
+                 *   specific creator (generally, most specific class) overridden by
+                 *   less specific one (base class). If so, we will actually prefer more
+                 *   specific one:
+                 */
+                Class<?> newCls = newOne.getClass();
+                Class<?> oldCls = oldOne.getClass();
+                if (newCls.isAssignableFrom(oldCls)) { // new is less specific, keep old
+                    return;
+                }
+                if (oldCls.isAssignableFrom(newCls)) { // old is less specific, use new
+                    _creators[typeIndex] = _fixAccess(newOne);
+                } else { // otherwise neither dominated, so:
+                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                            +" creators: already had "+oldOne+" ("+oldCls.getName()
+                            +"), encountered "+newOne+" ("+newCls.getName()+")");
+                }
             }
+            return;
         }
         if (explicit) {
             _explicitCreators |= mask;

diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
index fd590d628..b7b887ff8 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
@@ -280,26 +280,37 @@ public class CreatorCollector
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
+            /* But ensure we only assign highest priority one.
+             * Currently, this is when...
+             */
+            if ((_explicitCreators & mask) != 0) {
+                /* 23-Oct-2013, tatu: Must handle case where same creator
+                 *   is being overridden; for example, if a class has explicit
+                 *   default constructor, it may be overridden by implicit
+                 *   bean constructor.
+                 */
+                if (oldOne.getClass() == newOne.getClass()) {
                     return;
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
             }
-
             // one more thing: ok to override in sub-class
             if (oldOne.getClass() == newOne.getClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
-
+                if (oldOne.getDeclaringClass() != newOne.getDeclaringClass()) {
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
+                            +" creators: already had "+oldOne+", encountered "+newOne);
+                }
+                return;
+            }
+            if (oldOne.getDeclaringClass().isAssignableFrom(newOne.getDeclaringClass())) {
                 // new type more specific, use it
+                _creators[typeIndex] = _fixAccess(newOne);
+                if (explicit) {
+                    _explicitCreators |= mask;
+                }
+                return;
             }
+            // old type more specific, use it
         }
         if (explicit) {
             _explicitCreators |= mask;
